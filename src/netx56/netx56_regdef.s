@ ******************************************************************
@ from regdef.v by regdef2ass auto-generated XPEC-header file       
@ please see the regdef.html file for detailed register description 
@ ******************************************************************

@ =====================================================================
@
@ Area of ARMiTCM_memarea
@
@ =====================================================================

 .equ Addr_NX56_ARMiTCM_memarea, 0x00000000

@ =====================================================================
@
@ Area of intram0_mirror_itcm
@
@ =====================================================================

 .equ Addr_NX56_intram0_mirror_itcm, 0x00000000

@ ---------------------------------------------------------------------
@ Register intram0_base_start4
@ => internal SRAM AHBL slave 0 start address
@    Area size: 128kB - 4bytes
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    Offset 0x0 is ROM Boot-vector
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram0_base_start4                ,	0x00000004
 .equ Adr_NX56_intram0_mirror_itcm_intram0_base_start4,	0x00000004
 .equ Adr_NX56_intram0_base_start4                    ,	0x00000004

@ ---------------------------------------------------------------------
@ Register intram0_end_start4
@ => internal SRAM AHBL slave 0 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram0_end_start4                ,	0x0001FFFC
 .equ Adr_NX56_intram0_mirror_itcm_intram0_end_start4,	0x0001FFFC
 .equ Adr_NX56_intram0_end_start4                    ,	0x0001FFFC


@ =====================================================================
@
@ Area of arm_boot_vector
@
@ =====================================================================

 .equ Addr_NX56_arm_boot_vector, 0x00000000

@ ---------------------------------------------------------------------
@ Register arm_boot_vector
@ => ARM boot vector.
@    This address is mirrored to ROM base address Adr_rom_base.
@    ARM special: When ARM instruction TCM is enabled, access to this address targets instruction TCM.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_boot_vector            ,	0x00000000
 .equ Adr_NX56_arm_boot_vector_arm_boot_vector,	0x00000000
 .equ Adr_NX56_arm_boot_vector                ,	0x00000000


@ =====================================================================
@
@ Area of intram1_mirror_itcm, intram1_mirror_dtcm, intram1, intram1_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram1_mirror_itcm, 0x00020000
 .equ Addr_NX56_intram1_mirror_dtcm, 0x04020000
 .equ Addr_NX56_intram1, 0x08020000
 .equ Addr_NX56_intram1_mirror_hi, 0xFFE20000

@ ---------------------------------------------------------------------
@ Register intram1_base
@ => internal SRAM AHBL slave 1 start address
@    Area size: 128kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram1_base                ,	0x00000000
 .equ Adr_NX56_intram1_mirror_itcm_intram1_base,	0x00020000
 .equ Adr_NX56_intram1_mirror_dtcm_intram1_base,	0x04020000
 .equ Adr_NX56_intram1_intram1_base            ,	0x08020000
 .equ Adr_NX56_intram1_mirror_hi_intram1_base  ,	0xFFE20000

@ ---------------------------------------------------------------------
@ Register intram1_end
@ => internal SRAM AHBL slave 1 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram1_end                ,	0x0001FFFC
 .equ Adr_NX56_intram1_mirror_itcm_intram1_end,	0x0003FFFC
 .equ Adr_NX56_intram1_mirror_dtcm_intram1_end,	0x0403FFFC
 .equ Adr_NX56_intram1_intram1_end            ,	0x0803FFFC
 .equ Adr_NX56_intram1_mirror_hi_intram1_end  ,	0xFFE3FFFC


@ =====================================================================
@
@ Area of intram2_mirror_itcm, intram2_mirror_dtcm, intram2, intram2_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram2_mirror_itcm, 0x00040000
 .equ Addr_NX56_intram2_mirror_dtcm, 0x04040000
 .equ Addr_NX56_intram2, 0x08040000
 .equ Addr_NX56_intram2_mirror_hi, 0xFFE40000

@ ---------------------------------------------------------------------
@ Register intram2_base
@ => internal SRAM AHBL slave 2 start address
@    Area size: 64kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram2_base                ,	0x00000000
 .equ Adr_NX56_intram2_mirror_itcm_intram2_base,	0x00040000
 .equ Adr_NX56_intram2_mirror_dtcm_intram2_base,	0x04040000
 .equ Adr_NX56_intram2_intram2_base            ,	0x08040000
 .equ Adr_NX56_intram2_mirror_hi_intram2_base  ,	0xFFE40000

@ ---------------------------------------------------------------------
@ Register intram2_end
@ => internal SRAM AHBL slave 2 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram2_end                ,	0x0000FFFC
 .equ Adr_NX56_intram2_mirror_itcm_intram2_end,	0x0004FFFC
 .equ Adr_NX56_intram2_mirror_dtcm_intram2_end,	0x0404FFFC
 .equ Adr_NX56_intram2_intram2_end            ,	0x0804FFFC
 .equ Adr_NX56_intram2_mirror_hi_intram2_end  ,	0xFFE4FFFC


@ =====================================================================
@
@ Area of intram3_mirror_itcm, intram3_mirror_dtcm, intram3, intram3_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram3_mirror_itcm, 0x00050000
 .equ Addr_NX56_intram3_mirror_dtcm, 0x04050000
 .equ Addr_NX56_intram3, 0x08050000
 .equ Addr_NX56_intram3_mirror_hi, 0xFFE50000

@ ---------------------------------------------------------------------
@ Register intram3_base
@ => internal SRAM AHBL slave 3 start address
@    Area size: 64kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram3_base                ,	0x00000000
 .equ Adr_NX56_intram3_mirror_itcm_intram3_base,	0x00050000
 .equ Adr_NX56_intram3_mirror_dtcm_intram3_base,	0x04050000
 .equ Adr_NX56_intram3_intram3_base            ,	0x08050000
 .equ Adr_NX56_intram3_mirror_hi_intram3_base  ,	0xFFE50000

@ ---------------------------------------------------------------------
@ Register intram3_end
@ => internal SRAM AHBL slave 3 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram3_end                ,	0x0000FFFC
 .equ Adr_NX56_intram3_mirror_itcm_intram3_end,	0x0005FFFC
 .equ Adr_NX56_intram3_mirror_dtcm_intram3_end,	0x0405FFFC
 .equ Adr_NX56_intram3_intram3_end            ,	0x0805FFFC
 .equ Adr_NX56_intram3_mirror_hi_intram3_end  ,	0xFFE5FFFC


@ =====================================================================
@
@ Area of intram4_mirror_itcm, intram4_mirror_dtcm, intram4, intram4_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram4_mirror_itcm, 0x00060000
 .equ Addr_NX56_intram4_mirror_dtcm, 0x04060000
 .equ Addr_NX56_intram4, 0x08060000
 .equ Addr_NX56_intram4_mirror_hi, 0xFFE60000

@ ---------------------------------------------------------------------
@ Register intram4_base
@ => internal SRAM AHBL slave 4 start address
@    Area size: 64kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram4_base                ,	0x00000000
 .equ Adr_NX56_intram4_mirror_itcm_intram4_base,	0x00060000
 .equ Adr_NX56_intram4_mirror_dtcm_intram4_base,	0x04060000
 .equ Adr_NX56_intram4_intram4_base            ,	0x08060000
 .equ Adr_NX56_intram4_mirror_hi_intram4_base  ,	0xFFE60000

@ ---------------------------------------------------------------------
@ Register intram4_end
@ => internal SRAM AHBL slave 4 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram4_end                ,	0x0000FFFC
 .equ Adr_NX56_intram4_mirror_itcm_intram4_end,	0x0006FFFC
 .equ Adr_NX56_intram4_mirror_dtcm_intram4_end,	0x0406FFFC
 .equ Adr_NX56_intram4_intram4_end            ,	0x0806FFFC
 .equ Adr_NX56_intram4_mirror_hi_intram4_end  ,	0xFFE6FFFC


@ =====================================================================
@
@ Area of intram5_mirror_itcm, intram5_mirror_dtcm, intram5, intram5_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram5_mirror_itcm, 0x00070000
 .equ Addr_NX56_intram5_mirror_dtcm, 0x04070000
 .equ Addr_NX56_intram5, 0x08070000
 .equ Addr_NX56_intram5_mirror_hi, 0xFFE70000

@ ---------------------------------------------------------------------
@ Register intram5_base
@ => internal SRAM AHBL slave 5 start address
@    Area size: 32kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram5_base                ,	0x00000000
 .equ Adr_NX56_intram5_mirror_itcm_intram5_base,	0x00070000
 .equ Adr_NX56_intram5_mirror_dtcm_intram5_base,	0x04070000
 .equ Adr_NX56_intram5_intram5_base            ,	0x08070000
 .equ Adr_NX56_intram5_mirror_hi_intram5_base  ,	0xFFE70000

@ ---------------------------------------------------------------------
@ Register intram5_end
@ => internal SRAM AHBL slave 5 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram5_end                ,	0x00007FFC
 .equ Adr_NX56_intram5_mirror_itcm_intram5_end,	0x00077FFC
 .equ Adr_NX56_intram5_mirror_dtcm_intram5_end,	0x04077FFC
 .equ Adr_NX56_intram5_intram5_end            ,	0x08077FFC
 .equ Adr_NX56_intram5_mirror_hi_intram5_end  ,	0xFFE77FFC


@ =====================================================================
@
@ Area of intram6_mirror_itcm, intram6_mirror_dtcm, intram6, intram6_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram6_mirror_itcm, 0x00078000
 .equ Addr_NX56_intram6_mirror_dtcm, 0x04078000
 .equ Addr_NX56_intram6, 0x08078000
 .equ Addr_NX56_intram6_mirror_hi, 0xFFE78000

@ ---------------------------------------------------------------------
@ Register intram6_base
@ => internal SRAM AHBL slave 6 start address
@    Area size: 32kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram6_base                ,	0x00000000
 .equ Adr_NX56_intram6_mirror_itcm_intram6_base,	0x00078000
 .equ Adr_NX56_intram6_mirror_dtcm_intram6_base,	0x04078000
 .equ Adr_NX56_intram6_intram6_base            ,	0x08078000
 .equ Adr_NX56_intram6_mirror_hi_intram6_base  ,	0xFFE78000

@ ---------------------------------------------------------------------
@ Register intram6_end
@ => internal SRAM AHBL slave 6 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram6_end                ,	0x00007FFC
 .equ Adr_NX56_intram6_mirror_itcm_intram6_end,	0x0007FFFC
 .equ Adr_NX56_intram6_mirror_dtcm_intram6_end,	0x0407FFFC
 .equ Adr_NX56_intram6_intram6_end            ,	0x0807FFFC
 .equ Adr_NX56_intram6_mirror_hi_intram6_end  ,	0xFFE7FFFC


@ =====================================================================
@
@ Area of intram7_mirror_itcm, intram7_mirror_dtcm, intram7, intram7_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram7_mirror_itcm, 0x00080000
 .equ Addr_NX56_intram7_mirror_dtcm, 0x04080000
 .equ Addr_NX56_intram7, 0x08080000
 .equ Addr_NX56_intram7_mirror_hi, 0xFFE80000

@ ---------------------------------------------------------------------
@ Register intram7_base
@ => internal SRAM AHBL slave 7 start address
@    Area size: 64kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram7_base                ,	0x00000000
 .equ Adr_NX56_intram7_mirror_itcm_intram7_base,	0x00080000
 .equ Adr_NX56_intram7_mirror_dtcm_intram7_base,	0x04080000
 .equ Adr_NX56_intram7_intram7_base            ,	0x08080000
 .equ Adr_NX56_intram7_mirror_hi_intram7_base  ,	0xFFE80000

@ ---------------------------------------------------------------------
@ Register intram7_end
@ => internal SRAM AHBL slave 7 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram7_end                ,	0x0000FFFC
 .equ Adr_NX56_intram7_mirror_itcm_intram7_end,	0x0008FFFC
 .equ Adr_NX56_intram7_mirror_dtcm_intram7_end,	0x0408FFFC
 .equ Adr_NX56_intram7_intram7_end            ,	0x0808FFFC
 .equ Adr_NX56_intram7_mirror_hi_intram7_end  ,	0xFFE8FFFC


@ =====================================================================
@
@ Area of intram8_mirror_itcm, intram8_mirror_dtcm, intram8, intram8_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram8_mirror_itcm, 0x00090000
 .equ Addr_NX56_intram8_mirror_dtcm, 0x04090000
 .equ Addr_NX56_intram8, 0x08090000
 .equ Addr_NX56_intram8_mirror_hi, 0xFFE90000

@ ---------------------------------------------------------------------
@ Register intram8_base
@ => internal SRAM AHBL slave 8 start address
@    Area size: 64kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram8_base                ,	0x00000000
 .equ Adr_NX56_intram8_mirror_itcm_intram8_base,	0x00090000
 .equ Adr_NX56_intram8_mirror_dtcm_intram8_base,	0x04090000
 .equ Adr_NX56_intram8_intram8_base            ,	0x08090000
 .equ Adr_NX56_intram8_mirror_hi_intram8_base  ,	0xFFE90000

@ ---------------------------------------------------------------------
@ Register intram8_end
@ => internal SRAM AHBL slave 8 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram8_end                ,	0x0000FFFC
 .equ Adr_NX56_intram8_mirror_itcm_intram8_end,	0x0009FFFC
 .equ Adr_NX56_intram8_mirror_dtcm_intram8_end,	0x0409FFFC
 .equ Adr_NX56_intram8_intram8_end            ,	0x0809FFFC
 .equ Adr_NX56_intram8_mirror_hi_intram8_end  ,	0xFFE9FFFC


@ =====================================================================
@
@ Area of rom_mirror_itcm, rom_mirror_dtcm, rom, rom_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_rom_mirror_itcm, 0x000F0000
 .equ Addr_NX56_rom_mirror_dtcm, 0x040F0000
 .equ Addr_NX56_rom, 0x080F0000
 .equ Addr_NX56_rom_mirror_hi, 0xFFEF0000

@ ---------------------------------------------------------------------
@ Register rom_base
@ => internal ROM start address
@    Area size: 64kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Highest 4kB of ROM will be hidden after ROM Watchdog timed out (secure data).
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_rom_base            ,	0x00000000
 .equ Adr_NX56_rom_mirror_itcm_rom_base,	0x000F0000
 .equ Adr_NX56_rom_mirror_dtcm_rom_base,	0x040F0000
 .equ Adr_NX56_rom_rom_base            ,	0x080F0000
 .equ Adr_NX56_rom_mirror_hi_rom_base  ,	0xFFEF0000

@ ---------------------------------------------------------------------
@ Register rom_end
@ => internal ROM end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_rom_end            ,	0x0000FFFC
 .equ Adr_NX56_rom_mirror_itcm_rom_end,	0x000FFFFC
 .equ Adr_NX56_rom_mirror_dtcm_rom_end,	0x040FFFFC
 .equ Adr_NX56_rom_rom_end            ,	0x080FFFFC
 .equ Adr_NX56_rom_mirror_hi_rom_end  ,	0xFFEFFFFC


@ =====================================================================
@
@ Area of ARMdTCM_memarea
@
@ =====================================================================

 .equ Addr_NX56_ARMdTCM_memarea, 0x04000000

@ =====================================================================
@
@ Area of intram0_mirror_dtcm, intram0, intram0_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intram0_mirror_dtcm, 0x04000000
 .equ Addr_NX56_intram0, 0x08000000
 .equ Addr_NX56_intram0_mirror_hi, 0xFFE00000

@ ---------------------------------------------------------------------
@ Register intram0_base
@ => internal SRAM AHBL slave 0 start address
@    Area size: 128kB
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    Offset 0x0 is ROM Boot-vector
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram0_base                ,	0x00000000
 .equ Adr_NX56_intram0_mirror_dtcm_intram0_base,	0x04000000
 .equ Adr_NX56_intram0_intram0_base            ,	0x08000000
 .equ Adr_NX56_intram0_mirror_hi_intram0_base  ,	0xFFE00000

@ ---------------------------------------------------------------------
@ Register intram0_end
@ => internal SRAM AHBL slave 0 end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intram0_end                ,	0x0001FFFC
 .equ Adr_NX56_intram0_mirror_dtcm_intram0_end,	0x0401FFFC
 .equ Adr_NX56_intram0_intram0_end            ,	0x0801FFFC
 .equ Adr_NX56_intram0_mirror_hi_intram0_end  ,	0xFFE1FFFC


@ =====================================================================
@
@ Area of ARM_buf_area
@
@ =====================================================================

 .equ Addr_NX56_ARM_buf_area, 0x08000000

@ =====================================================================
@
@ Area of osac_buf, osac
@
@ =====================================================================

 .equ Addr_NX56_osac_buf, 0x08200000
 .equ Addr_NX56_osac, 0x10200000

@ =====================================================================
@
@ Area of sqirom, sqirom_unbuf
@
@ =====================================================================

 .equ Addr_NX56_sqirom, 0x0C000000
 .equ Addr_NX56_sqirom_unbuf, 0x1C000000

@ =====================================================================
@
@ Area of ARM_nbuf_area
@
@ =====================================================================

 .equ Addr_NX56_ARM_nbuf_area, 0x10000000

@ =====================================================================
@
@ Area of intlogic_motion, intlogic_motion_mirror_buf, intlogic_motion_mirror_hi
@
@ =====================================================================

 .equ Addr_NX56_intlogic_motion, 0x10100000
 .equ Addr_NX56_intlogic_motion_mirror_buf, 0x08100000
 .equ Addr_NX56_intlogic_motion_mirror_hi, 0xFFF00000

@ =====================================================================
@
@ Area of xc_motion
@
@ =====================================================================

 .equ Addr_NX56_xc_motion, 0x10100000

@ =====================================================================
@
@ Area of sr_motion
@
@ =====================================================================

 .equ Addr_NX56_sr_motion, 0x10100680

@ ---------------------------------------------------------------------
@ Register sr_sr0
@ => Shared Work Register 0 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr0      ,	0x00000000
 .equ Adr_NX56_sr_motion_sr_sr0,	0x10100680
 .equ Adr_NX56_sr_sr0          ,	0x10100680

 .equ MSK_NX56_sr_sr0_val,	0x0000ffff
 .equ SRT_NX56_sr_sr0_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr1
@ => Shared Work Register 1 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr1      ,	0x00000004
 .equ Adr_NX56_sr_motion_sr_sr1,	0x10100684
 .equ Adr_NX56_sr_sr1          ,	0x10100684

 .equ MSK_NX56_sr_sr1_val,	0x0000ffff
 .equ SRT_NX56_sr_sr1_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr2
@ => Shared Work Register 2 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr2      ,	0x00000008
 .equ Adr_NX56_sr_motion_sr_sr2,	0x10100688
 .equ Adr_NX56_sr_sr2          ,	0x10100688

 .equ MSK_NX56_sr_sr2_val,	0x0000ffff
 .equ SRT_NX56_sr_sr2_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr3
@ => Shared Work Register 3 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr3      ,	0x0000000C
 .equ Adr_NX56_sr_motion_sr_sr3,	0x1010068C
 .equ Adr_NX56_sr_sr3          ,	0x1010068C

 .equ MSK_NX56_sr_sr3_val,	0x0000ffff
 .equ SRT_NX56_sr_sr3_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr4
@ => Shared Work Register 4 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr4      ,	0x00000010
 .equ Adr_NX56_sr_motion_sr_sr4,	0x10100690
 .equ Adr_NX56_sr_sr4          ,	0x10100690

 .equ MSK_NX56_sr_sr4_val,	0x0000ffff
 .equ SRT_NX56_sr_sr4_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr5
@ => Shared Work Register 5 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr5      ,	0x00000014
 .equ Adr_NX56_sr_motion_sr_sr5,	0x10100694
 .equ Adr_NX56_sr_sr5          ,	0x10100694

 .equ MSK_NX56_sr_sr5_val,	0x0000ffff
 .equ SRT_NX56_sr_sr5_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr6
@ => Shared Work Register 6 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr6      ,	0x00000018
 .equ Adr_NX56_sr_motion_sr_sr6,	0x10100698
 .equ Adr_NX56_sr_sr6          ,	0x10100698

 .equ MSK_NX56_sr_sr6_val,	0x0000ffff
 .equ SRT_NX56_sr_sr6_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr7
@ => Shared Work Register 7 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr7      ,	0x0000001C
 .equ Adr_NX56_sr_motion_sr_sr7,	0x1010069C
 .equ Adr_NX56_sr_sr7          ,	0x1010069C

 .equ MSK_NX56_sr_sr7_val,	0x0000ffff
 .equ SRT_NX56_sr_sr7_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr8
@ => Shared Work Register 8 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr8      ,	0x00000020
 .equ Adr_NX56_sr_motion_sr_sr8,	0x101006A0
 .equ Adr_NX56_sr_sr8          ,	0x101006A0

 .equ MSK_NX56_sr_sr8_val,	0x0000ffff
 .equ SRT_NX56_sr_sr8_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr9
@ => Shared Work Register 9 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr9      ,	0x00000024
 .equ Adr_NX56_sr_motion_sr_sr9,	0x101006A4
 .equ Adr_NX56_sr_sr9          ,	0x101006A4

 .equ MSK_NX56_sr_sr9_val,	0x0000ffff
 .equ SRT_NX56_sr_sr9_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr10
@ => Shared Work Register 10 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr10      ,	0x00000028
 .equ Adr_NX56_sr_motion_sr_sr10,	0x101006A8
 .equ Adr_NX56_sr_sr10          ,	0x101006A8

 .equ MSK_NX56_sr_sr10_val,	0x0000ffff
 .equ SRT_NX56_sr_sr10_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr11
@ => Shared Work Register 11 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr11      ,	0x0000002C
 .equ Adr_NX56_sr_motion_sr_sr11,	0x101006AC
 .equ Adr_NX56_sr_sr11          ,	0x101006AC

 .equ MSK_NX56_sr_sr11_val,	0x0000ffff
 .equ SRT_NX56_sr_sr11_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr12
@ => Shared Work Register 12 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr12      ,	0x00000030
 .equ Adr_NX56_sr_motion_sr_sr12,	0x101006B0
 .equ Adr_NX56_sr_sr12          ,	0x101006B0

 .equ MSK_NX56_sr_sr12_val,	0x0000ffff
 .equ SRT_NX56_sr_sr12_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr13
@ => Shared Work Register 13 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr13      ,	0x00000034
 .equ Adr_NX56_sr_motion_sr_sr13,	0x101006B4
 .equ Adr_NX56_sr_sr13          ,	0x101006B4

 .equ MSK_NX56_sr_sr13_val,	0x0000ffff
 .equ SRT_NX56_sr_sr13_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr14
@ => Shared Work Register 14 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr14      ,	0x00000038
 .equ Adr_NX56_sr_motion_sr_sr14,	0x101006B8
 .equ Adr_NX56_sr_sr14          ,	0x101006B8

 .equ MSK_NX56_sr_sr14_val,	0x0000ffff
 .equ SRT_NX56_sr_sr14_val,	0

@ ---------------------------------------------------------------------
@ Register sr_sr15
@ => Shared Work Register 15 accessed over motion intlogic.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_sr15      ,	0x0000003C
 .equ Adr_NX56_sr_motion_sr_sr15,	0x101006BC
 .equ Adr_NX56_sr_sr15          ,	0x101006BC

 .equ MSK_NX56_sr_sr15_val,	0x0000ffff
 .equ SRT_NX56_sr_sr15_val,	0

@ ---------------------------------------------------------------------
@ Register sr_statcfg0
@ => XPEC Shared Config/Status Register 0
@    This register is writable but can also be changed by hardware.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_statcfg0      ,	0x00000040
 .equ Adr_NX56_sr_motion_sr_statcfg0,	0x101006C0
 .equ Adr_NX56_sr_statcfg0          ,	0x101006C0

 .equ MSK_NX56_sr_statcfg0_xmac0_config_shared0,	0x000000ff
 .equ SRT_NX56_sr_statcfg0_xmac0_config_shared0,	0
 .equ MSK_NX56_sr_statcfg0_xmac0_io_oe_shared0 ,	0x0000ff00
 .equ SRT_NX56_sr_statcfg0_xmac0_io_oe_shared0 ,	8
 .equ MSK_NX56_sr_statcfg0_xmac0_status_shared0,	0xffff0000
 .equ SRT_NX56_sr_statcfg0_xmac0_status_shared0,	16

@ ---------------------------------------------------------------------
@ Register sr_statcfg1
@ => XPEC Shared Config/Status Register 1
@    This register is writable but can also be changed by hardware.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_statcfg1      ,	0x00000044
 .equ Adr_NX56_sr_motion_sr_statcfg1,	0x101006C4
 .equ Adr_NX56_sr_statcfg1          ,	0x101006C4

 .equ MSK_NX56_sr_statcfg1_xmac1_config_shared1,	0x000000ff
 .equ SRT_NX56_sr_statcfg1_xmac1_config_shared1,	0
 .equ MSK_NX56_sr_statcfg1_xmac1_io_oe_shared1 ,	0x0000ff00
 .equ SRT_NX56_sr_statcfg1_xmac1_io_oe_shared1 ,	8
 .equ MSK_NX56_sr_statcfg1_xmac1_status_shared1,	0xffff0000
 .equ SRT_NX56_sr_statcfg1_xmac1_status_shared1,	16

@ ---------------------------------------------------------------------
@ Register sr_stat_bits_shared
@ => Shared stat register accessed by all xPECs and all xMACs (with 16 events).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sr_stat_bits_shared      ,	0x00000048
 .equ Adr_NX56_sr_motion_sr_stat_bits_shared,	0x101006C8
 .equ Adr_NX56_sr_stat_bits_shared          ,	0x101006C8

 .equ MSK_NX56_sr_stat_bits_shared_flags   ,	0x0000ffff
 .equ SRT_NX56_sr_stat_bits_shared_flags   ,	0
 .equ MSK_NX56_sr_stat_bits_shared_set_mask,	0xffff0000
 .equ SRT_NX56_sr_stat_bits_shared_set_mask,	16


@ =====================================================================
@
@ Area of cordic
@
@ =====================================================================

 .equ Addr_NX56_cordic, 0x10140000

@ ---------------------------------------------------------------------
@ Register cordic_ctrl
@ => CORDIC control register.
@    This register controls the precision and the mode of operation.  It is also used to start the CORDIC.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cordic_ctrl   ,	0x00000000
 .equ Adr_NX56_cordic_cordic_ctrl,	0x10140000
 .equ Adr_NX56_cordic_ctrl       ,	0x10140000

 .equ MSK_NX56_cordic_ctrl_start      ,	0x00000001
 .equ SRT_NX56_cordic_ctrl_start      ,	0
 .equ MSK_NX56_cordic_ctrl_target_axis,	0x00000060
 .equ SRT_NX56_cordic_ctrl_target_axis,	5

@ ---------------------------------------------------------------------
@ Register cordic_x_reg
@ => CORDIC argument and result register X
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cordic_x_reg   ,	0x00000004
 .equ Adr_NX56_cordic_cordic_x_reg,	0x10140004
 .equ Adr_NX56_cordic_x_reg       ,	0x10140004

 .equ MSK_NX56_cordic_x_reg_argument,	0xffffffff
 .equ SRT_NX56_cordic_x_reg_argument,	0

@ ---------------------------------------------------------------------
@ Register cordic_y_reg
@ => CORDIC argument and result register Y
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cordic_y_reg   ,	0x00000008
 .equ Adr_NX56_cordic_cordic_y_reg,	0x10140008
 .equ Adr_NX56_cordic_y_reg       ,	0x10140008

 .equ MSK_NX56_cordic_y_reg_argument,	0xffffffff
 .equ SRT_NX56_cordic_y_reg_argument,	0

@ ---------------------------------------------------------------------
@ Register cordic_z_reg
@ => CORDIC argument and result register Z
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cordic_z_reg   ,	0x0000000C
 .equ Adr_NX56_cordic_cordic_z_reg,	0x1014000C
 .equ Adr_NX56_cordic_z_reg       ,	0x1014000C

 .equ MSK_NX56_cordic_z_reg_argument,	0xffffffff
 .equ SRT_NX56_cordic_z_reg_argument,	0


@ =====================================================================
@
@ Area of gpio_motion, gpio
@
@ =====================================================================

 .equ Addr_NX56_gpio_motion, 0x10140400
 .equ Addr_NX56_gpio, 0x1018CA00

@ ---------------------------------------------------------------------
@ Register gpio_cfg0
@ => GPIO pin 0 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg0        ,	0x00000000
 .equ Adr_NX56_gpio_motion_gpio_cfg0,	0x10140400
 .equ Adr_NX56_gpio_gpio_cfg0       ,	0x1018CA00

 .equ MSK_NX56_gpio_cfg0_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg0_mode     ,	0
 .equ MSK_NX56_gpio_cfg0_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg0_inv      ,	4
 .equ MSK_NX56_gpio_cfg0_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg0_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg1
@ => GPIO pin 1 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg1        ,	0x00000004
 .equ Adr_NX56_gpio_motion_gpio_cfg1,	0x10140404
 .equ Adr_NX56_gpio_gpio_cfg1       ,	0x1018CA04

 .equ MSK_NX56_gpio_cfg1_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg1_mode     ,	0
 .equ MSK_NX56_gpio_cfg1_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg1_inv      ,	4
 .equ MSK_NX56_gpio_cfg1_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg1_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg2
@ => GPIO pin 2 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg2        ,	0x00000008
 .equ Adr_NX56_gpio_motion_gpio_cfg2,	0x10140408
 .equ Adr_NX56_gpio_gpio_cfg2       ,	0x1018CA08

 .equ MSK_NX56_gpio_cfg2_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg2_mode     ,	0
 .equ MSK_NX56_gpio_cfg2_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg2_inv      ,	4
 .equ MSK_NX56_gpio_cfg2_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg2_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg3
@ => GPIO pin 3 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg3        ,	0x0000000C
 .equ Adr_NX56_gpio_motion_gpio_cfg3,	0x1014040C
 .equ Adr_NX56_gpio_gpio_cfg3       ,	0x1018CA0C

 .equ MSK_NX56_gpio_cfg3_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg3_mode     ,	0
 .equ MSK_NX56_gpio_cfg3_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg3_inv      ,	4
 .equ MSK_NX56_gpio_cfg3_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg3_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg4
@ => GPIO pin 4 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg4        ,	0x00000010
 .equ Adr_NX56_gpio_motion_gpio_cfg4,	0x10140410
 .equ Adr_NX56_gpio_gpio_cfg4       ,	0x1018CA10

 .equ MSK_NX56_gpio_cfg4_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg4_mode     ,	0
 .equ MSK_NX56_gpio_cfg4_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg4_inv      ,	4
 .equ MSK_NX56_gpio_cfg4_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg4_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg5
@ => GPIO pin 5 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg5        ,	0x00000014
 .equ Adr_NX56_gpio_motion_gpio_cfg5,	0x10140414
 .equ Adr_NX56_gpio_gpio_cfg5       ,	0x1018CA14

 .equ MSK_NX56_gpio_cfg5_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg5_mode     ,	0
 .equ MSK_NX56_gpio_cfg5_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg5_inv      ,	4
 .equ MSK_NX56_gpio_cfg5_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg5_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg6
@ => GPIO pin 6 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg6        ,	0x00000018
 .equ Adr_NX56_gpio_motion_gpio_cfg6,	0x10140418
 .equ Adr_NX56_gpio_gpio_cfg6       ,	0x1018CA18

 .equ MSK_NX56_gpio_cfg6_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg6_mode     ,	0
 .equ MSK_NX56_gpio_cfg6_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg6_inv      ,	4
 .equ MSK_NX56_gpio_cfg6_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg6_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg7
@ => GPIO pin 7 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg7        ,	0x0000001C
 .equ Adr_NX56_gpio_motion_gpio_cfg7,	0x1014041C
 .equ Adr_NX56_gpio_gpio_cfg7       ,	0x1018CA1C

 .equ MSK_NX56_gpio_cfg7_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg7_mode     ,	0
 .equ MSK_NX56_gpio_cfg7_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg7_inv      ,	4
 .equ MSK_NX56_gpio_cfg7_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg7_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg8
@ => GPIO pin 8 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg8        ,	0x00000020
 .equ Adr_NX56_gpio_motion_gpio_cfg8,	0x10140420
 .equ Adr_NX56_gpio_gpio_cfg8       ,	0x1018CA20

 .equ MSK_NX56_gpio_cfg8_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg8_mode     ,	0
 .equ MSK_NX56_gpio_cfg8_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg8_inv      ,	4
 .equ MSK_NX56_gpio_cfg8_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg8_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg9
@ => GPIO pin 9 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg9        ,	0x00000024
 .equ Adr_NX56_gpio_motion_gpio_cfg9,	0x10140424
 .equ Adr_NX56_gpio_gpio_cfg9       ,	0x1018CA24

 .equ MSK_NX56_gpio_cfg9_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg9_mode     ,	0
 .equ MSK_NX56_gpio_cfg9_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg9_inv      ,	4
 .equ MSK_NX56_gpio_cfg9_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg9_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg10
@ => GPIO pin 10 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg10        ,	0x00000028
 .equ Adr_NX56_gpio_motion_gpio_cfg10,	0x10140428
 .equ Adr_NX56_gpio_gpio_cfg10       ,	0x1018CA28

 .equ MSK_NX56_gpio_cfg10_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg10_mode     ,	0
 .equ MSK_NX56_gpio_cfg10_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg10_inv      ,	4
 .equ MSK_NX56_gpio_cfg10_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg10_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg11
@ => GPIO pin 11 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg11        ,	0x0000002C
 .equ Adr_NX56_gpio_motion_gpio_cfg11,	0x1014042C
 .equ Adr_NX56_gpio_gpio_cfg11       ,	0x1018CA2C

 .equ MSK_NX56_gpio_cfg11_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg11_mode     ,	0
 .equ MSK_NX56_gpio_cfg11_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg11_inv      ,	4
 .equ MSK_NX56_gpio_cfg11_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg11_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg12
@ => GPIO pin 12 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg12        ,	0x00000030
 .equ Adr_NX56_gpio_motion_gpio_cfg12,	0x10140430
 .equ Adr_NX56_gpio_gpio_cfg12       ,	0x1018CA30

 .equ MSK_NX56_gpio_cfg12_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg12_mode     ,	0
 .equ MSK_NX56_gpio_cfg12_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg12_inv      ,	4
 .equ MSK_NX56_gpio_cfg12_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg12_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg13
@ => GPIO pin 13 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg13        ,	0x00000034
 .equ Adr_NX56_gpio_motion_gpio_cfg13,	0x10140434
 .equ Adr_NX56_gpio_gpio_cfg13       ,	0x1018CA34

 .equ MSK_NX56_gpio_cfg13_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg13_mode     ,	0
 .equ MSK_NX56_gpio_cfg13_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg13_inv      ,	4
 .equ MSK_NX56_gpio_cfg13_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg13_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg14
@ => GPIO pin 14 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg14        ,	0x00000038
 .equ Adr_NX56_gpio_motion_gpio_cfg14,	0x10140438
 .equ Adr_NX56_gpio_gpio_cfg14       ,	0x1018CA38

 .equ MSK_NX56_gpio_cfg14_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg14_mode     ,	0
 .equ MSK_NX56_gpio_cfg14_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg14_inv      ,	4
 .equ MSK_NX56_gpio_cfg14_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg14_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg15
@ => GPIO pin 15 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg15        ,	0x0000003C
 .equ Adr_NX56_gpio_motion_gpio_cfg15,	0x1014043C
 .equ Adr_NX56_gpio_gpio_cfg15       ,	0x1018CA3C

 .equ MSK_NX56_gpio_cfg15_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg15_mode     ,	0
 .equ MSK_NX56_gpio_cfg15_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg15_inv      ,	4
 .equ MSK_NX56_gpio_cfg15_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg15_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg16
@ => GPIO pin 16 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg16        ,	0x00000040
 .equ Adr_NX56_gpio_motion_gpio_cfg16,	0x10140440
 .equ Adr_NX56_gpio_gpio_cfg16       ,	0x1018CA40

 .equ MSK_NX56_gpio_cfg16_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg16_mode     ,	0
 .equ MSK_NX56_gpio_cfg16_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg16_inv      ,	4
 .equ MSK_NX56_gpio_cfg16_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg16_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg17
@ => GPIO pin 17 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg17        ,	0x00000044
 .equ Adr_NX56_gpio_motion_gpio_cfg17,	0x10140444
 .equ Adr_NX56_gpio_gpio_cfg17       ,	0x1018CA44

 .equ MSK_NX56_gpio_cfg17_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg17_mode     ,	0
 .equ MSK_NX56_gpio_cfg17_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg17_inv      ,	4
 .equ MSK_NX56_gpio_cfg17_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg17_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg18
@ => GPIO pin 18 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg18        ,	0x00000048
 .equ Adr_NX56_gpio_motion_gpio_cfg18,	0x10140448
 .equ Adr_NX56_gpio_gpio_cfg18       ,	0x1018CA48

 .equ MSK_NX56_gpio_cfg18_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg18_mode     ,	0
 .equ MSK_NX56_gpio_cfg18_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg18_inv      ,	4
 .equ MSK_NX56_gpio_cfg18_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg18_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg19
@ => GPIO pin 19 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg19        ,	0x0000004C
 .equ Adr_NX56_gpio_motion_gpio_cfg19,	0x1014044C
 .equ Adr_NX56_gpio_gpio_cfg19       ,	0x1018CA4C

 .equ MSK_NX56_gpio_cfg19_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg19_mode     ,	0
 .equ MSK_NX56_gpio_cfg19_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg19_inv      ,	4
 .equ MSK_NX56_gpio_cfg19_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg19_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg20
@ => GPIO pin 20 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg20        ,	0x00000050
 .equ Adr_NX56_gpio_motion_gpio_cfg20,	0x10140450
 .equ Adr_NX56_gpio_gpio_cfg20       ,	0x1018CA50

 .equ MSK_NX56_gpio_cfg20_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg20_mode     ,	0
 .equ MSK_NX56_gpio_cfg20_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg20_inv      ,	4
 .equ MSK_NX56_gpio_cfg20_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg20_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg21
@ => GPIO pin 21 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg21        ,	0x00000054
 .equ Adr_NX56_gpio_motion_gpio_cfg21,	0x10140454
 .equ Adr_NX56_gpio_gpio_cfg21       ,	0x1018CA54

 .equ MSK_NX56_gpio_cfg21_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg21_mode     ,	0
 .equ MSK_NX56_gpio_cfg21_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg21_inv      ,	4
 .equ MSK_NX56_gpio_cfg21_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg21_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg22
@ => GPIO pin 22 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg22        ,	0x00000058
 .equ Adr_NX56_gpio_motion_gpio_cfg22,	0x10140458
 .equ Adr_NX56_gpio_gpio_cfg22       ,	0x1018CA58

 .equ MSK_NX56_gpio_cfg22_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg22_mode     ,	0
 .equ MSK_NX56_gpio_cfg22_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg22_inv      ,	4
 .equ MSK_NX56_gpio_cfg22_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg22_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg23
@ => GPIO pin 23 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg23        ,	0x0000005C
 .equ Adr_NX56_gpio_motion_gpio_cfg23,	0x1014045C
 .equ Adr_NX56_gpio_gpio_cfg23       ,	0x1018CA5C

 .equ MSK_NX56_gpio_cfg23_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg23_mode     ,	0
 .equ MSK_NX56_gpio_cfg23_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg23_inv      ,	4
 .equ MSK_NX56_gpio_cfg23_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg23_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg24
@ => GPIO pin 24 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg24        ,	0x00000060
 .equ Adr_NX56_gpio_motion_gpio_cfg24,	0x10140460
 .equ Adr_NX56_gpio_gpio_cfg24       ,	0x1018CA60

 .equ MSK_NX56_gpio_cfg24_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg24_mode     ,	0
 .equ MSK_NX56_gpio_cfg24_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg24_inv      ,	4
 .equ MSK_NX56_gpio_cfg24_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg24_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg25
@ => GPIO pin 25 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg25        ,	0x00000064
 .equ Adr_NX56_gpio_motion_gpio_cfg25,	0x10140464
 .equ Adr_NX56_gpio_gpio_cfg25       ,	0x1018CA64

 .equ MSK_NX56_gpio_cfg25_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg25_mode     ,	0
 .equ MSK_NX56_gpio_cfg25_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg25_inv      ,	4
 .equ MSK_NX56_gpio_cfg25_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg25_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg26
@ => GPIO pin 26 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg26        ,	0x00000068
 .equ Adr_NX56_gpio_motion_gpio_cfg26,	0x10140468
 .equ Adr_NX56_gpio_gpio_cfg26       ,	0x1018CA68

 .equ MSK_NX56_gpio_cfg26_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg26_mode     ,	0
 .equ MSK_NX56_gpio_cfg26_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg26_inv      ,	4
 .equ MSK_NX56_gpio_cfg26_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg26_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg27
@ => GPIO pin 27 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg27        ,	0x0000006C
 .equ Adr_NX56_gpio_motion_gpio_cfg27,	0x1014046C
 .equ Adr_NX56_gpio_gpio_cfg27       ,	0x1018CA6C

 .equ MSK_NX56_gpio_cfg27_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg27_mode     ,	0
 .equ MSK_NX56_gpio_cfg27_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg27_inv      ,	4
 .equ MSK_NX56_gpio_cfg27_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg27_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg28
@ => GPIO pin 28 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg28        ,	0x00000070
 .equ Adr_NX56_gpio_motion_gpio_cfg28,	0x10140470
 .equ Adr_NX56_gpio_gpio_cfg28       ,	0x1018CA70

 .equ MSK_NX56_gpio_cfg28_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg28_mode     ,	0
 .equ MSK_NX56_gpio_cfg28_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg28_inv      ,	4
 .equ MSK_NX56_gpio_cfg28_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg28_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg29
@ => GPIO pin 29 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg29        ,	0x00000074
 .equ Adr_NX56_gpio_motion_gpio_cfg29,	0x10140474
 .equ Adr_NX56_gpio_gpio_cfg29       ,	0x1018CA74

 .equ MSK_NX56_gpio_cfg29_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg29_mode     ,	0
 .equ MSK_NX56_gpio_cfg29_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg29_inv      ,	4
 .equ MSK_NX56_gpio_cfg29_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg29_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg30
@ => GPIO pin 30 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg30        ,	0x00000078
 .equ Adr_NX56_gpio_motion_gpio_cfg30,	0x10140478
 .equ Adr_NX56_gpio_gpio_cfg30       ,	0x1018CA78

 .equ MSK_NX56_gpio_cfg30_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg30_mode     ,	0
 .equ MSK_NX56_gpio_cfg30_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg30_inv      ,	4
 .equ MSK_NX56_gpio_cfg30_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg30_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_cfg31
@ => GPIO pin 31 config register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_cfg31        ,	0x0000007C
 .equ Adr_NX56_gpio_motion_gpio_cfg31,	0x1014047C
 .equ Adr_NX56_gpio_gpio_cfg31       ,	0x1018CA7C

 .equ MSK_NX56_gpio_cfg31_mode     ,	0x0000000f
 .equ SRT_NX56_gpio_cfg31_mode     ,	0
 .equ MSK_NX56_gpio_cfg31_inv      ,	0x00000010
 .equ SRT_NX56_gpio_cfg31_inv      ,	4
 .equ MSK_NX56_gpio_cfg31_count_ref,	0x000000e0
 .equ SRT_NX56_gpio_cfg31_count_ref,	5

@ ---------------------------------------------------------------------
@ Register gpio_tc0
@ => GPIO pin 0 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc0        ,	0x00000080
 .equ Adr_NX56_gpio_motion_gpio_tc0,	0x10140480
 .equ Adr_NX56_gpio_gpio_tc0       ,	0x1018CA80

 .equ MSK_NX56_gpio_tc0_val,	0xffffffff
 .equ SRT_NX56_gpio_tc0_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc1
@ => GPIO pin 1 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc1        ,	0x00000084
 .equ Adr_NX56_gpio_motion_gpio_tc1,	0x10140484
 .equ Adr_NX56_gpio_gpio_tc1       ,	0x1018CA84

 .equ MSK_NX56_gpio_tc1_val,	0xffffffff
 .equ SRT_NX56_gpio_tc1_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc2
@ => GPIO pin 2 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc2        ,	0x00000088
 .equ Adr_NX56_gpio_motion_gpio_tc2,	0x10140488
 .equ Adr_NX56_gpio_gpio_tc2       ,	0x1018CA88

 .equ MSK_NX56_gpio_tc2_val,	0xffffffff
 .equ SRT_NX56_gpio_tc2_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc3
@ => GPIO pin 3 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc3        ,	0x0000008C
 .equ Adr_NX56_gpio_motion_gpio_tc3,	0x1014048C
 .equ Adr_NX56_gpio_gpio_tc3       ,	0x1018CA8C

 .equ MSK_NX56_gpio_tc3_val,	0xffffffff
 .equ SRT_NX56_gpio_tc3_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc4
@ => GPIO pin 4 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc4        ,	0x00000090
 .equ Adr_NX56_gpio_motion_gpio_tc4,	0x10140490
 .equ Adr_NX56_gpio_gpio_tc4       ,	0x1018CA90

 .equ MSK_NX56_gpio_tc4_val,	0xffffffff
 .equ SRT_NX56_gpio_tc4_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc5
@ => GPIO pin 5 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc5        ,	0x00000094
 .equ Adr_NX56_gpio_motion_gpio_tc5,	0x10140494
 .equ Adr_NX56_gpio_gpio_tc5       ,	0x1018CA94

 .equ MSK_NX56_gpio_tc5_val,	0xffffffff
 .equ SRT_NX56_gpio_tc5_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc6
@ => GPIO pin 6 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc6        ,	0x00000098
 .equ Adr_NX56_gpio_motion_gpio_tc6,	0x10140498
 .equ Adr_NX56_gpio_gpio_tc6       ,	0x1018CA98

 .equ MSK_NX56_gpio_tc6_val,	0xffffffff
 .equ SRT_NX56_gpio_tc6_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc7
@ => GPIO pin 7 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc7        ,	0x0000009C
 .equ Adr_NX56_gpio_motion_gpio_tc7,	0x1014049C
 .equ Adr_NX56_gpio_gpio_tc7       ,	0x1018CA9C

 .equ MSK_NX56_gpio_tc7_val,	0xffffffff
 .equ SRT_NX56_gpio_tc7_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc8
@ => GPIO pin 8 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc8        ,	0x000000A0
 .equ Adr_NX56_gpio_motion_gpio_tc8,	0x101404A0
 .equ Adr_NX56_gpio_gpio_tc8       ,	0x1018CAA0

 .equ MSK_NX56_gpio_tc8_val,	0xffffffff
 .equ SRT_NX56_gpio_tc8_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc9
@ => GPIO pin 9 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc9        ,	0x000000A4
 .equ Adr_NX56_gpio_motion_gpio_tc9,	0x101404A4
 .equ Adr_NX56_gpio_gpio_tc9       ,	0x1018CAA4

 .equ MSK_NX56_gpio_tc9_val,	0xffffffff
 .equ SRT_NX56_gpio_tc9_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc10
@ => GPIO pin 10 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc10        ,	0x000000A8
 .equ Adr_NX56_gpio_motion_gpio_tc10,	0x101404A8
 .equ Adr_NX56_gpio_gpio_tc10       ,	0x1018CAA8

 .equ MSK_NX56_gpio_tc10_val,	0xffffffff
 .equ SRT_NX56_gpio_tc10_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc11
@ => GPIO pin 11 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc11        ,	0x000000AC
 .equ Adr_NX56_gpio_motion_gpio_tc11,	0x101404AC
 .equ Adr_NX56_gpio_gpio_tc11       ,	0x1018CAAC

 .equ MSK_NX56_gpio_tc11_val,	0xffffffff
 .equ SRT_NX56_gpio_tc11_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc12
@ => GPIO pin 12 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc12        ,	0x000000B0
 .equ Adr_NX56_gpio_motion_gpio_tc12,	0x101404B0
 .equ Adr_NX56_gpio_gpio_tc12       ,	0x1018CAB0

 .equ MSK_NX56_gpio_tc12_val,	0xffffffff
 .equ SRT_NX56_gpio_tc12_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc13
@ => GPIO pin 13 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc13        ,	0x000000B4
 .equ Adr_NX56_gpio_motion_gpio_tc13,	0x101404B4
 .equ Adr_NX56_gpio_gpio_tc13       ,	0x1018CAB4

 .equ MSK_NX56_gpio_tc13_val,	0xffffffff
 .equ SRT_NX56_gpio_tc13_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc14
@ => GPIO pin 14 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc14        ,	0x000000B8
 .equ Adr_NX56_gpio_motion_gpio_tc14,	0x101404B8
 .equ Adr_NX56_gpio_gpio_tc14       ,	0x1018CAB8

 .equ MSK_NX56_gpio_tc14_val,	0xffffffff
 .equ SRT_NX56_gpio_tc14_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc15
@ => GPIO pin 15 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc15        ,	0x000000BC
 .equ Adr_NX56_gpio_motion_gpio_tc15,	0x101404BC
 .equ Adr_NX56_gpio_gpio_tc15       ,	0x1018CABC

 .equ MSK_NX56_gpio_tc15_val,	0xffffffff
 .equ SRT_NX56_gpio_tc15_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc16
@ => GPIO pin 16 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc16        ,	0x000000C0
 .equ Adr_NX56_gpio_motion_gpio_tc16,	0x101404C0
 .equ Adr_NX56_gpio_gpio_tc16       ,	0x1018CAC0

 .equ MSK_NX56_gpio_tc16_val,	0xffffffff
 .equ SRT_NX56_gpio_tc16_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc17
@ => GPIO pin 17 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc17        ,	0x000000C4
 .equ Adr_NX56_gpio_motion_gpio_tc17,	0x101404C4
 .equ Adr_NX56_gpio_gpio_tc17       ,	0x1018CAC4

 .equ MSK_NX56_gpio_tc17_val,	0xffffffff
 .equ SRT_NX56_gpio_tc17_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc18
@ => GPIO pin 18 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc18        ,	0x000000C8
 .equ Adr_NX56_gpio_motion_gpio_tc18,	0x101404C8
 .equ Adr_NX56_gpio_gpio_tc18       ,	0x1018CAC8

 .equ MSK_NX56_gpio_tc18_val,	0xffffffff
 .equ SRT_NX56_gpio_tc18_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc19
@ => GPIO pin 19 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc19        ,	0x000000CC
 .equ Adr_NX56_gpio_motion_gpio_tc19,	0x101404CC
 .equ Adr_NX56_gpio_gpio_tc19       ,	0x1018CACC

 .equ MSK_NX56_gpio_tc19_val,	0xffffffff
 .equ SRT_NX56_gpio_tc19_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc20
@ => GPIO pin 20 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc20        ,	0x000000D0
 .equ Adr_NX56_gpio_motion_gpio_tc20,	0x101404D0
 .equ Adr_NX56_gpio_gpio_tc20       ,	0x1018CAD0

 .equ MSK_NX56_gpio_tc20_val,	0xffffffff
 .equ SRT_NX56_gpio_tc20_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc21
@ => GPIO pin 21 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc21        ,	0x000000D4
 .equ Adr_NX56_gpio_motion_gpio_tc21,	0x101404D4
 .equ Adr_NX56_gpio_gpio_tc21       ,	0x1018CAD4

 .equ MSK_NX56_gpio_tc21_val,	0xffffffff
 .equ SRT_NX56_gpio_tc21_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc22
@ => GPIO pin 22 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc22        ,	0x000000D8
 .equ Adr_NX56_gpio_motion_gpio_tc22,	0x101404D8
 .equ Adr_NX56_gpio_gpio_tc22       ,	0x1018CAD8

 .equ MSK_NX56_gpio_tc22_val,	0xffffffff
 .equ SRT_NX56_gpio_tc22_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc23
@ => GPIO pin 23 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc23        ,	0x000000DC
 .equ Adr_NX56_gpio_motion_gpio_tc23,	0x101404DC
 .equ Adr_NX56_gpio_gpio_tc23       ,	0x1018CADC

 .equ MSK_NX56_gpio_tc23_val,	0xffffffff
 .equ SRT_NX56_gpio_tc23_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc24
@ => GPIO pin 24 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc24        ,	0x000000E0
 .equ Adr_NX56_gpio_motion_gpio_tc24,	0x101404E0
 .equ Adr_NX56_gpio_gpio_tc24       ,	0x1018CAE0

 .equ MSK_NX56_gpio_tc24_val,	0xffffffff
 .equ SRT_NX56_gpio_tc24_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc25
@ => GPIO pin 25 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc25        ,	0x000000E4
 .equ Adr_NX56_gpio_motion_gpio_tc25,	0x101404E4
 .equ Adr_NX56_gpio_gpio_tc25       ,	0x1018CAE4

 .equ MSK_NX56_gpio_tc25_val,	0xffffffff
 .equ SRT_NX56_gpio_tc25_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc26
@ => GPIO pin 26 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc26        ,	0x000000E8
 .equ Adr_NX56_gpio_motion_gpio_tc26,	0x101404E8
 .equ Adr_NX56_gpio_gpio_tc26       ,	0x1018CAE8

 .equ MSK_NX56_gpio_tc26_val,	0xffffffff
 .equ SRT_NX56_gpio_tc26_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc27
@ => GPIO pin 27 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc27        ,	0x000000EC
 .equ Adr_NX56_gpio_motion_gpio_tc27,	0x101404EC
 .equ Adr_NX56_gpio_gpio_tc27       ,	0x1018CAEC

 .equ MSK_NX56_gpio_tc27_val,	0xffffffff
 .equ SRT_NX56_gpio_tc27_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc28
@ => GPIO pin 28 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc28        ,	0x000000F0
 .equ Adr_NX56_gpio_motion_gpio_tc28,	0x101404F0
 .equ Adr_NX56_gpio_gpio_tc28       ,	0x1018CAF0

 .equ MSK_NX56_gpio_tc28_val,	0xffffffff
 .equ SRT_NX56_gpio_tc28_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc29
@ => GPIO pin 29 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc29        ,	0x000000F4
 .equ Adr_NX56_gpio_motion_gpio_tc29,	0x101404F4
 .equ Adr_NX56_gpio_gpio_tc29       ,	0x1018CAF4

 .equ MSK_NX56_gpio_tc29_val,	0xffffffff
 .equ SRT_NX56_gpio_tc29_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc30
@ => GPIO pin 30 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc30        ,	0x000000F8
 .equ Adr_NX56_gpio_motion_gpio_tc30,	0x101404F8
 .equ Adr_NX56_gpio_gpio_tc30       ,	0x1018CAF8

 .equ MSK_NX56_gpio_tc30_val,	0xffffffff
 .equ SRT_NX56_gpio_tc30_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_tc31
@ => GPIO pin 31 threshold or capture register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_tc31        ,	0x000000FC
 .equ Adr_NX56_gpio_motion_gpio_tc31,	0x101404FC
 .equ Adr_NX56_gpio_gpio_tc31       ,	0x1018CAFC

 .equ MSK_NX56_gpio_tc31_val,	0xffffffff
 .equ SRT_NX56_gpio_tc31_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter0_ctrl
@ => GPIO counter0 control register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter0_ctrl        ,	0x00000100
 .equ Adr_NX56_gpio_motion_gpio_counter0_ctrl,	0x10140500
 .equ Adr_NX56_gpio_gpio_counter0_ctrl       ,	0x1018CB00

 .equ MSK_NX56_gpio_counter0_ctrl_run      ,	0x00000001
 .equ SRT_NX56_gpio_counter0_ctrl_run      ,	0
 .equ MSK_NX56_gpio_counter0_ctrl_sym_nasym,	0x00000002
 .equ SRT_NX56_gpio_counter0_ctrl_sym_nasym,	1
 .equ MSK_NX56_gpio_counter0_ctrl_irq_en   ,	0x00000004
 .equ SRT_NX56_gpio_counter0_ctrl_irq_en   ,	2
 .equ MSK_NX56_gpio_counter0_ctrl_sel_event,	0x00000008
 .equ SRT_NX56_gpio_counter0_ctrl_sel_event,	3
 .equ MSK_NX56_gpio_counter0_ctrl_once     ,	0x00000010
 .equ SRT_NX56_gpio_counter0_ctrl_once     ,	4
 .equ MSK_NX56_gpio_counter0_ctrl_event_act,	0x00000060
 .equ SRT_NX56_gpio_counter0_ctrl_event_act,	5
 .equ MSK_NX56_gpio_counter0_ctrl_gpio_ref ,	0x00000f80
 .equ SRT_NX56_gpio_counter0_ctrl_gpio_ref ,	7

@ ---------------------------------------------------------------------
@ Register gpio_counter1_ctrl
@ => GPIO counter1 control register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter1_ctrl        ,	0x00000104
 .equ Adr_NX56_gpio_motion_gpio_counter1_ctrl,	0x10140504
 .equ Adr_NX56_gpio_gpio_counter1_ctrl       ,	0x1018CB04

 .equ MSK_NX56_gpio_counter1_ctrl_run      ,	0x00000001
 .equ SRT_NX56_gpio_counter1_ctrl_run      ,	0
 .equ MSK_NX56_gpio_counter1_ctrl_sym_nasym,	0x00000002
 .equ SRT_NX56_gpio_counter1_ctrl_sym_nasym,	1
 .equ MSK_NX56_gpio_counter1_ctrl_irq_en   ,	0x00000004
 .equ SRT_NX56_gpio_counter1_ctrl_irq_en   ,	2
 .equ MSK_NX56_gpio_counter1_ctrl_sel_event,	0x00000008
 .equ SRT_NX56_gpio_counter1_ctrl_sel_event,	3
 .equ MSK_NX56_gpio_counter1_ctrl_once     ,	0x00000010
 .equ SRT_NX56_gpio_counter1_ctrl_once     ,	4
 .equ MSK_NX56_gpio_counter1_ctrl_event_act,	0x00000060
 .equ SRT_NX56_gpio_counter1_ctrl_event_act,	5
 .equ MSK_NX56_gpio_counter1_ctrl_gpio_ref ,	0x00000f80
 .equ SRT_NX56_gpio_counter1_ctrl_gpio_ref ,	7

@ ---------------------------------------------------------------------
@ Register gpio_counter2_ctrl
@ => GPIO counter2 control register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter2_ctrl        ,	0x00000108
 .equ Adr_NX56_gpio_motion_gpio_counter2_ctrl,	0x10140508
 .equ Adr_NX56_gpio_gpio_counter2_ctrl       ,	0x1018CB08

 .equ MSK_NX56_gpio_counter2_ctrl_run      ,	0x00000001
 .equ SRT_NX56_gpio_counter2_ctrl_run      ,	0
 .equ MSK_NX56_gpio_counter2_ctrl_sym_nasym,	0x00000002
 .equ SRT_NX56_gpio_counter2_ctrl_sym_nasym,	1
 .equ MSK_NX56_gpio_counter2_ctrl_irq_en   ,	0x00000004
 .equ SRT_NX56_gpio_counter2_ctrl_irq_en   ,	2
 .equ MSK_NX56_gpio_counter2_ctrl_sel_event,	0x00000008
 .equ SRT_NX56_gpio_counter2_ctrl_sel_event,	3
 .equ MSK_NX56_gpio_counter2_ctrl_once     ,	0x00000010
 .equ SRT_NX56_gpio_counter2_ctrl_once     ,	4
 .equ MSK_NX56_gpio_counter2_ctrl_event_act,	0x00000060
 .equ SRT_NX56_gpio_counter2_ctrl_event_act,	5
 .equ MSK_NX56_gpio_counter2_ctrl_gpio_ref ,	0x00000f80
 .equ SRT_NX56_gpio_counter2_ctrl_gpio_ref ,	7

@ ---------------------------------------------------------------------
@ Register gpio_counter3_ctrl
@ => GPIO counter3 control register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter3_ctrl        ,	0x0000010C
 .equ Adr_NX56_gpio_motion_gpio_counter3_ctrl,	0x1014050C
 .equ Adr_NX56_gpio_gpio_counter3_ctrl       ,	0x1018CB0C

 .equ MSK_NX56_gpio_counter3_ctrl_run      ,	0x00000001
 .equ SRT_NX56_gpio_counter3_ctrl_run      ,	0
 .equ MSK_NX56_gpio_counter3_ctrl_sym_nasym,	0x00000002
 .equ SRT_NX56_gpio_counter3_ctrl_sym_nasym,	1
 .equ MSK_NX56_gpio_counter3_ctrl_irq_en   ,	0x00000004
 .equ SRT_NX56_gpio_counter3_ctrl_irq_en   ,	2
 .equ MSK_NX56_gpio_counter3_ctrl_sel_event,	0x00000008
 .equ SRT_NX56_gpio_counter3_ctrl_sel_event,	3
 .equ MSK_NX56_gpio_counter3_ctrl_once     ,	0x00000010
 .equ SRT_NX56_gpio_counter3_ctrl_once     ,	4
 .equ MSK_NX56_gpio_counter3_ctrl_event_act,	0x00000060
 .equ SRT_NX56_gpio_counter3_ctrl_event_act,	5
 .equ MSK_NX56_gpio_counter3_ctrl_gpio_ref ,	0x00000f80
 .equ SRT_NX56_gpio_counter3_ctrl_gpio_ref ,	7

@ ---------------------------------------------------------------------
@ Register gpio_counter4_ctrl
@ => GPIO counter4 control register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter4_ctrl        ,	0x00000110
 .equ Adr_NX56_gpio_motion_gpio_counter4_ctrl,	0x10140510
 .equ Adr_NX56_gpio_gpio_counter4_ctrl       ,	0x1018CB10

 .equ MSK_NX56_gpio_counter4_ctrl_run      ,	0x00000001
 .equ SRT_NX56_gpio_counter4_ctrl_run      ,	0
 .equ MSK_NX56_gpio_counter4_ctrl_sym_nasym,	0x00000002
 .equ SRT_NX56_gpio_counter4_ctrl_sym_nasym,	1
 .equ MSK_NX56_gpio_counter4_ctrl_irq_en   ,	0x00000004
 .equ SRT_NX56_gpio_counter4_ctrl_irq_en   ,	2
 .equ MSK_NX56_gpio_counter4_ctrl_sel_event,	0x00000008
 .equ SRT_NX56_gpio_counter4_ctrl_sel_event,	3
 .equ MSK_NX56_gpio_counter4_ctrl_once     ,	0x00000010
 .equ SRT_NX56_gpio_counter4_ctrl_once     ,	4
 .equ MSK_NX56_gpio_counter4_ctrl_event_act,	0x00000060
 .equ SRT_NX56_gpio_counter4_ctrl_event_act,	5
 .equ MSK_NX56_gpio_counter4_ctrl_gpio_ref ,	0x00000f80
 .equ SRT_NX56_gpio_counter4_ctrl_gpio_ref ,	7

@ ---------------------------------------------------------------------
@ Register gpio_counter0_max
@ => GPIO counter0 max value
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter0_max        ,	0x00000114
 .equ Adr_NX56_gpio_motion_gpio_counter0_max,	0x10140514
 .equ Adr_NX56_gpio_gpio_counter0_max       ,	0x1018CB14

 .equ MSK_NX56_gpio_counter0_max_val,	0xffffffff
 .equ SRT_NX56_gpio_counter0_max_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter1_max
@ => GPIO counter1 max value
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter1_max        ,	0x00000118
 .equ Adr_NX56_gpio_motion_gpio_counter1_max,	0x10140518
 .equ Adr_NX56_gpio_gpio_counter1_max       ,	0x1018CB18

 .equ MSK_NX56_gpio_counter1_max_val,	0xffffffff
 .equ SRT_NX56_gpio_counter1_max_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter2_max
@ => GPIO counter2 max value
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter2_max        ,	0x0000011C
 .equ Adr_NX56_gpio_motion_gpio_counter2_max,	0x1014051C
 .equ Adr_NX56_gpio_gpio_counter2_max       ,	0x1018CB1C

 .equ MSK_NX56_gpio_counter2_max_val,	0xffffffff
 .equ SRT_NX56_gpio_counter2_max_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter3_max
@ => GPIO counter3 max value
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter3_max        ,	0x00000120
 .equ Adr_NX56_gpio_motion_gpio_counter3_max,	0x10140520
 .equ Adr_NX56_gpio_gpio_counter3_max       ,	0x1018CB20

 .equ MSK_NX56_gpio_counter3_max_val,	0xffffffff
 .equ SRT_NX56_gpio_counter3_max_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter4_max
@ => GPIO counter4 max value
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter4_max        ,	0x00000124
 .equ Adr_NX56_gpio_motion_gpio_counter4_max,	0x10140524
 .equ Adr_NX56_gpio_gpio_counter4_max       ,	0x1018CB24

 .equ MSK_NX56_gpio_counter4_max_val,	0xffffffff
 .equ SRT_NX56_gpio_counter4_max_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter0_cnt
@ => GPIO counter0 current value
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter0_cnt        ,	0x00000128
 .equ Adr_NX56_gpio_motion_gpio_counter0_cnt,	0x10140528
 .equ Adr_NX56_gpio_gpio_counter0_cnt       ,	0x1018CB28

 .equ MSK_NX56_gpio_counter0_cnt_val,	0xffffffff
 .equ SRT_NX56_gpio_counter0_cnt_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter1_cnt
@ => GPIO counter1 current value:
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter1_cnt        ,	0x0000012C
 .equ Adr_NX56_gpio_motion_gpio_counter1_cnt,	0x1014052C
 .equ Adr_NX56_gpio_gpio_counter1_cnt       ,	0x1018CB2C

 .equ MSK_NX56_gpio_counter1_cnt_val,	0xffffffff
 .equ SRT_NX56_gpio_counter1_cnt_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter2_cnt
@ => GPIO counter2 current value:
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter2_cnt        ,	0x00000130
 .equ Adr_NX56_gpio_motion_gpio_counter2_cnt,	0x10140530
 .equ Adr_NX56_gpio_gpio_counter2_cnt       ,	0x1018CB30

 .equ MSK_NX56_gpio_counter2_cnt_val,	0xffffffff
 .equ SRT_NX56_gpio_counter2_cnt_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter3_cnt
@ => GPIO counter3 current value:
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter3_cnt        ,	0x00000134
 .equ Adr_NX56_gpio_motion_gpio_counter3_cnt,	0x10140534
 .equ Adr_NX56_gpio_gpio_counter3_cnt       ,	0x1018CB34

 .equ MSK_NX56_gpio_counter3_cnt_val,	0xffffffff
 .equ SRT_NX56_gpio_counter3_cnt_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_counter4_cnt
@ => GPIO counter4 current value:
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_counter4_cnt        ,	0x00000138
 .equ Adr_NX56_gpio_motion_gpio_counter4_cnt,	0x10140538
 .equ Adr_NX56_gpio_gpio_counter4_cnt       ,	0x1018CB38

 .equ MSK_NX56_gpio_counter4_cnt_val,	0xffffffff
 .equ SRT_NX56_gpio_counter4_cnt_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_line
@ => GPIO line register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_line        ,	0x0000013C
 .equ Adr_NX56_gpio_motion_gpio_line,	0x1014053C
 .equ Adr_NX56_gpio_gpio_line       ,	0x1018CB3C

 .equ MSK_NX56_gpio_line_val,	0xffffffff
 .equ SRT_NX56_gpio_line_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_in
@ => GPIO latched register
@    This register is accessible via intlogic and intlogic_motion address area.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_in        ,	0x00000140
 .equ Adr_NX56_gpio_motion_gpio_in,	0x10140540
 .equ Adr_NX56_gpio_gpio_in       ,	0x1018CB40

 .equ MSK_NX56_gpio_in_val,	0xffffffff
 .equ SRT_NX56_gpio_in_val,	0

@ ---------------------------------------------------------------------
@ Register gpio_irq_raw
@ => GPIO Raw IRQ register:
@    Write access with '1' resets the appropriate IRQ.
@    Write access with '0' does not influence this bit.
@    Read access shows status of unmasked IRQs
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_irq_raw        ,	0x00000144
 .equ Adr_NX56_gpio_motion_gpio_irq_raw,	0x10140544
 .equ Adr_NX56_gpio_gpio_irq_raw       ,	0x1018CB44

 .equ MSK_NX56_gpio_irq_raw_gpio0 ,	0x00000001
 .equ SRT_NX56_gpio_irq_raw_gpio0 ,	0
 .equ MSK_NX56_gpio_irq_raw_gpio1 ,	0x00000002
 .equ SRT_NX56_gpio_irq_raw_gpio1 ,	1
 .equ MSK_NX56_gpio_irq_raw_gpio2 ,	0x00000004
 .equ SRT_NX56_gpio_irq_raw_gpio2 ,	2
 .equ MSK_NX56_gpio_irq_raw_gpio3 ,	0x00000008
 .equ SRT_NX56_gpio_irq_raw_gpio3 ,	3
 .equ MSK_NX56_gpio_irq_raw_gpio4 ,	0x00000010
 .equ SRT_NX56_gpio_irq_raw_gpio4 ,	4
 .equ MSK_NX56_gpio_irq_raw_gpio5 ,	0x00000020
 .equ SRT_NX56_gpio_irq_raw_gpio5 ,	5
 .equ MSK_NX56_gpio_irq_raw_gpio6 ,	0x00000040
 .equ SRT_NX56_gpio_irq_raw_gpio6 ,	6
 .equ MSK_NX56_gpio_irq_raw_gpio7 ,	0x00000080
 .equ SRT_NX56_gpio_irq_raw_gpio7 ,	7
 .equ MSK_NX56_gpio_irq_raw_gpio8 ,	0x00000100
 .equ SRT_NX56_gpio_irq_raw_gpio8 ,	8
 .equ MSK_NX56_gpio_irq_raw_gpio9 ,	0x00000200
 .equ SRT_NX56_gpio_irq_raw_gpio9 ,	9
 .equ MSK_NX56_gpio_irq_raw_gpio10,	0x00000400
 .equ SRT_NX56_gpio_irq_raw_gpio10,	10
 .equ MSK_NX56_gpio_irq_raw_gpio11,	0x00000800
 .equ SRT_NX56_gpio_irq_raw_gpio11,	11
 .equ MSK_NX56_gpio_irq_raw_gpio12,	0x00001000
 .equ SRT_NX56_gpio_irq_raw_gpio12,	12
 .equ MSK_NX56_gpio_irq_raw_gpio13,	0x00002000
 .equ SRT_NX56_gpio_irq_raw_gpio13,	13
 .equ MSK_NX56_gpio_irq_raw_gpio14,	0x00004000
 .equ SRT_NX56_gpio_irq_raw_gpio14,	14
 .equ MSK_NX56_gpio_irq_raw_gpio15,	0x00008000
 .equ SRT_NX56_gpio_irq_raw_gpio15,	15
 .equ MSK_NX56_gpio_irq_raw_gpio16,	0x00010000
 .equ SRT_NX56_gpio_irq_raw_gpio16,	16
 .equ MSK_NX56_gpio_irq_raw_gpio17,	0x00020000
 .equ SRT_NX56_gpio_irq_raw_gpio17,	17
 .equ MSK_NX56_gpio_irq_raw_gpio18,	0x00040000
 .equ SRT_NX56_gpio_irq_raw_gpio18,	18
 .equ MSK_NX56_gpio_irq_raw_gpio19,	0x00080000
 .equ SRT_NX56_gpio_irq_raw_gpio19,	19
 .equ MSK_NX56_gpio_irq_raw_gpio20,	0x00100000
 .equ SRT_NX56_gpio_irq_raw_gpio20,	20
 .equ MSK_NX56_gpio_irq_raw_gpio21,	0x00200000
 .equ SRT_NX56_gpio_irq_raw_gpio21,	21
 .equ MSK_NX56_gpio_irq_raw_gpio22,	0x00400000
 .equ SRT_NX56_gpio_irq_raw_gpio22,	22
 .equ MSK_NX56_gpio_irq_raw_gpio23,	0x00800000
 .equ SRT_NX56_gpio_irq_raw_gpio23,	23
 .equ MSK_NX56_gpio_irq_raw_gpio24,	0x01000000
 .equ SRT_NX56_gpio_irq_raw_gpio24,	24
 .equ MSK_NX56_gpio_irq_raw_gpio25,	0x02000000
 .equ SRT_NX56_gpio_irq_raw_gpio25,	25
 .equ MSK_NX56_gpio_irq_raw_gpio26,	0x04000000
 .equ SRT_NX56_gpio_irq_raw_gpio26,	26
 .equ MSK_NX56_gpio_irq_raw_gpio27,	0x08000000
 .equ SRT_NX56_gpio_irq_raw_gpio27,	27
 .equ MSK_NX56_gpio_irq_raw_gpio28,	0x10000000
 .equ SRT_NX56_gpio_irq_raw_gpio28,	28
 .equ MSK_NX56_gpio_irq_raw_gpio29,	0x20000000
 .equ SRT_NX56_gpio_irq_raw_gpio29,	29
 .equ MSK_NX56_gpio_irq_raw_gpio30,	0x40000000
 .equ SRT_NX56_gpio_irq_raw_gpio30,	30
 .equ MSK_NX56_gpio_irq_raw_gpio31,	0x80000000
 .equ SRT_NX56_gpio_irq_raw_gpio31,	31

@ ---------------------------------------------------------------------
@ Register gpio_irq_masked
@ => GPIO Masked IRQ register:
@    This register exists twice for intlogic(ARM) and intlogic_motion(xPIC) address area.
@    Read access shows status of masked IRQs (as connected to VIC/ARM)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_irq_masked        ,	0x00000148
 .equ Adr_NX56_gpio_motion_gpio_irq_masked,	0x10140548
 .equ Adr_NX56_gpio_gpio_irq_masked       ,	0x1018CB48

 .equ MSK_NX56_gpio_irq_masked_gpio,	0xffffffff
 .equ SRT_NX56_gpio_irq_masked_gpio,	0

@ ---------------------------------------------------------------------
@ Register gpio_irq_mask_set
@ => GPIO interrupt mask enable:
@    This register exists twice for intlogic(ARM) and intlogic_motion(xPIC) address area.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding GPIO)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_gpio_irq_raw
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_irq_mask_set        ,	0x0000014C
 .equ Adr_NX56_gpio_motion_gpio_irq_mask_set,	0x1014054C
 .equ Adr_NX56_gpio_gpio_irq_mask_set       ,	0x1018CB4C

 .equ MSK_NX56_gpio_irq_mask_set_gpio,	0xffffffff
 .equ SRT_NX56_gpio_irq_mask_set_gpio,	0

@ ---------------------------------------------------------------------
@ Register gpio_irq_mask_rst
@ => GPIO interrupt mask disable:
@    This register exists twice for intlogic(ARM) and intlogic_motion(xPIC) address area.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding GPIO)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_gpio_irq_mask_rst        ,	0x00000150
 .equ Adr_NX56_gpio_motion_gpio_irq_mask_rst,	0x10140550
 .equ Adr_NX56_gpio_gpio_irq_mask_rst       ,	0x1018CB50

 .equ MSK_NX56_gpio_irq_mask_rst_gpio,	0xffffffff
 .equ SRT_NX56_gpio_irq_mask_rst_gpio,	0

@ ---------------------------------------------------------------------
@ Register cnt_irq_raw
@ => Counter Raw IRQ register:
@    Write access with '1' resets the appropriate IRQ
@    Write access with '0' does not influence this bit
@    Read access shows status of unmasked IRQs
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cnt_irq_raw        ,	0x00000154
 .equ Adr_NX56_gpio_motion_cnt_irq_raw,	0x10140554
 .equ Adr_NX56_gpio_cnt_irq_raw       ,	0x1018CB54

 .equ MSK_NX56_cnt_irq_raw_cnt0,	0x00000001
 .equ SRT_NX56_cnt_irq_raw_cnt0,	0
 .equ MSK_NX56_cnt_irq_raw_cnt1,	0x00000002
 .equ SRT_NX56_cnt_irq_raw_cnt1,	1
 .equ MSK_NX56_cnt_irq_raw_cnt2,	0x00000004
 .equ SRT_NX56_cnt_irq_raw_cnt2,	2
 .equ MSK_NX56_cnt_irq_raw_cnt3,	0x00000008
 .equ SRT_NX56_cnt_irq_raw_cnt3,	3
 .equ MSK_NX56_cnt_irq_raw_cnt4,	0x00000010
 .equ SRT_NX56_cnt_irq_raw_cnt4,	4

@ ---------------------------------------------------------------------
@ Register cnt_irq_masked
@ => Counter Masked IRQ register:
@    This register exists twice for intlogic(ARM) and intlogic_motion(xPIC) address area.
@    Read access shows status of masked IRQs (as connected to VIC/ARM)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cnt_irq_masked        ,	0x00000158
 .equ Adr_NX56_gpio_motion_cnt_irq_masked,	0x10140558
 .equ Adr_NX56_gpio_cnt_irq_masked       ,	0x1018CB58

 .equ MSK_NX56_cnt_irq_masked_cnt0,	0x00000001
 .equ SRT_NX56_cnt_irq_masked_cnt0,	0
 .equ MSK_NX56_cnt_irq_masked_cnt1,	0x00000002
 .equ SRT_NX56_cnt_irq_masked_cnt1,	1
 .equ MSK_NX56_cnt_irq_masked_cnt2,	0x00000004
 .equ SRT_NX56_cnt_irq_masked_cnt2,	2
 .equ MSK_NX56_cnt_irq_masked_cnt3,	0x00000008
 .equ SRT_NX56_cnt_irq_masked_cnt3,	3
 .equ MSK_NX56_cnt_irq_masked_cnt4,	0x00000010
 .equ SRT_NX56_cnt_irq_masked_cnt4,	4

@ ---------------------------------------------------------------------
@ Register cnt_irq_mask_set
@ => Counter interrupt mask enable:
@    This register exists twice for intlogic(ARM) and intlogic_motion(xPIC) address area.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding counter)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_cnt_irq_raw
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cnt_irq_mask_set        ,	0x0000015C
 .equ Adr_NX56_gpio_motion_cnt_irq_mask_set,	0x1014055C
 .equ Adr_NX56_gpio_cnt_irq_mask_set       ,	0x1018CB5C

 .equ MSK_NX56_cnt_irq_mask_set_cnt0,	0x00000001
 .equ SRT_NX56_cnt_irq_mask_set_cnt0,	0
 .equ MSK_NX56_cnt_irq_mask_set_cnt1,	0x00000002
 .equ SRT_NX56_cnt_irq_mask_set_cnt1,	1
 .equ MSK_NX56_cnt_irq_mask_set_cnt2,	0x00000004
 .equ SRT_NX56_cnt_irq_mask_set_cnt2,	2
 .equ MSK_NX56_cnt_irq_mask_set_cnt3,	0x00000008
 .equ SRT_NX56_cnt_irq_mask_set_cnt3,	3
 .equ MSK_NX56_cnt_irq_mask_set_cnt4,	0x00000010
 .equ SRT_NX56_cnt_irq_mask_set_cnt4,	4

@ ---------------------------------------------------------------------
@ Register cnt_irq_mask_rst
@ => Counter interrupt mask disable:
@    This register exists twice for intlogic(ARM) and intlogic_motion(xPIC) address area.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding counter)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cnt_irq_mask_rst        ,	0x00000160
 .equ Adr_NX56_gpio_motion_cnt_irq_mask_rst,	0x10140560
 .equ Adr_NX56_gpio_cnt_irq_mask_rst       ,	0x1018CB60

 .equ MSK_NX56_cnt_irq_mask_rst_cnt0,	0x00000001
 .equ SRT_NX56_cnt_irq_mask_rst_cnt0,	0
 .equ MSK_NX56_cnt_irq_mask_rst_cnt1,	0x00000002
 .equ SRT_NX56_cnt_irq_mask_rst_cnt1,	1
 .equ MSK_NX56_cnt_irq_mask_rst_cnt2,	0x00000004
 .equ SRT_NX56_cnt_irq_mask_rst_cnt2,	2
 .equ MSK_NX56_cnt_irq_mask_rst_cnt3,	0x00000008
 .equ SRT_NX56_cnt_irq_mask_rst_cnt3,	3
 .equ MSK_NX56_cnt_irq_mask_rst_cnt4,	0x00000010
 .equ SRT_NX56_cnt_irq_mask_rst_cnt4,	4


@ =====================================================================
@
@ Area of io_link
@
@ =====================================================================

 .equ Addr_NX56_io_link, 0x10140700

@ =====================================================================
@
@ Area of xlink0, xlink1, xlink2, xlink3, xlink4, xlink5, xlink6, xlink7
@
@ =====================================================================

 .equ Addr_NX56_xlink0, 0x10140700
 .equ Addr_NX56_xlink1, 0x10140710
 .equ Addr_NX56_xlink2, 0x10140720
 .equ Addr_NX56_xlink3, 0x10140730
 .equ Addr_NX56_xlink4, 0x10140740
 .equ Addr_NX56_xlink5, 0x10140750
 .equ Addr_NX56_xlink6, 0x10140760
 .equ Addr_NX56_xlink7, 0x10140770

@ ---------------------------------------------------------------------
@ Register xlink_cfg
@ => configuration register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xlink_cfg   ,	0x00000000
 .equ Adr_NX56_xlink0_xlink_cfg,	0x10140700
 .equ Adr_NX56_xlink1_xlink_cfg,	0x10140710
 .equ Adr_NX56_xlink2_xlink_cfg,	0x10140720
 .equ Adr_NX56_xlink3_xlink_cfg,	0x10140730
 .equ Adr_NX56_xlink4_xlink_cfg,	0x10140740
 .equ Adr_NX56_xlink5_xlink_cfg,	0x10140750
 .equ Adr_NX56_xlink6_xlink_cfg,	0x10140760
 .equ Adr_NX56_xlink7_xlink_cfg,	0x10140770

 .equ MSK_NX56_xlink_cfg_rate_inc  ,	0x0000ffff
 .equ SRT_NX56_xlink_cfg_rate_inc  ,	0
 .equ MSK_NX56_xlink_cfg_xlink_en  ,	0x00010000
 .equ SRT_NX56_xlink_cfg_xlink_en  ,	16
 .equ MSK_NX56_xlink_cfg_fb_en     ,	0x00020000
 .equ SRT_NX56_xlink_cfg_fb_en     ,	17
 .equ MSK_NX56_xlink_cfg_bclk2oe_en,	0x00040000
 .equ SRT_NX56_xlink_cfg_bclk2oe_en,	18
 .equ MSK_NX56_xlink_cfg_cnt_da    ,	0x00080000
 .equ SRT_NX56_xlink_cfg_cnt_da    ,	19
 .equ MSK_NX56_xlink_cfg_bits2rec  ,	0x00f00000
 .equ SRT_NX56_xlink_cfg_bits2rec  ,	20
 .equ MSK_NX56_xlink_cfg_start_spl ,	0x0f000000
 .equ SRT_NX56_xlink_cfg_start_spl ,	24
 .equ MSK_NX56_xlink_cfg_end_spl   ,	0xf0000000
 .equ SRT_NX56_xlink_cfg_end_spl   ,	28

@ ---------------------------------------------------------------------
@ Register xlink_tx
@ => xlink transmit register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xlink_tx   ,	0x00000004
 .equ Adr_NX56_xlink0_xlink_tx,	0x10140704
 .equ Adr_NX56_xlink1_xlink_tx,	0x10140714
 .equ Adr_NX56_xlink2_xlink_tx,	0x10140724
 .equ Adr_NX56_xlink3_xlink_tx,	0x10140734
 .equ Adr_NX56_xlink4_xlink_tx,	0x10140744
 .equ Adr_NX56_xlink5_xlink_tx,	0x10140754
 .equ Adr_NX56_xlink6_xlink_tx,	0x10140764
 .equ Adr_NX56_xlink7_xlink_tx,	0x10140774

 .equ MSK_NX56_xlink_tx_hold   ,	0x0000ffff
 .equ SRT_NX56_xlink_tx_hold   ,	0
 .equ MSK_NX56_xlink_tx_rdy_ro ,	0x00010000
 .equ SRT_NX56_xlink_tx_rdy_ro ,	16
 .equ MSK_NX56_xlink_tx_idle_ro,	0x00020000
 .equ SRT_NX56_xlink_tx_idle_ro,	17

@ ---------------------------------------------------------------------
@ Register xlink_rx
@ => xlink RX register
@    writing to the register, reset the ready bit, the overflow bit and the sampling error bit
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xlink_rx   ,	0x00000008
 .equ Adr_NX56_xlink0_xlink_rx,	0x10140708
 .equ Adr_NX56_xlink1_xlink_rx,	0x10140718
 .equ Adr_NX56_xlink2_xlink_rx,	0x10140728
 .equ Adr_NX56_xlink3_xlink_rx,	0x10140738
 .equ Adr_NX56_xlink4_xlink_rx,	0x10140748
 .equ Adr_NX56_xlink5_xlink_rx,	0x10140758
 .equ Adr_NX56_xlink6_xlink_rx,	0x10140768
 .equ Adr_NX56_xlink7_xlink_rx,	0x10140778

 .equ MSK_NX56_xlink_rx_hold_ro   ,	0x0000ffff
 .equ SRT_NX56_xlink_rx_hold_ro   ,	0
 .equ MSK_NX56_xlink_rx_rdy_ro    ,	0x00010000
 .equ SRT_NX56_xlink_rx_rdy_ro    ,	16
 .equ MSK_NX56_xlink_rx_rxd_ro    ,	0x00080000
 .equ SRT_NX56_xlink_rx_rxd_ro    ,	19
 .equ MSK_NX56_xlink_rx_ovf_err_ro,	0x00100000
 .equ SRT_NX56_xlink_rx_ovf_err_ro,	20
 .equ MSK_NX56_xlink_rx_spl_err_ro,	0x00200000
 .equ SRT_NX56_xlink_rx_spl_err_ro,	21

@ ---------------------------------------------------------------------
@ Register xlink_stat
@ => xlink status register & io control
@    writing to this register set the bit clock counter to zero!
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xlink_stat   ,	0x0000000C
 .equ Adr_NX56_xlink0_xlink_stat,	0x1014070C
 .equ Adr_NX56_xlink1_xlink_stat,	0x1014071C
 .equ Adr_NX56_xlink2_xlink_stat,	0x1014072C
 .equ Adr_NX56_xlink3_xlink_stat,	0x1014073C
 .equ Adr_NX56_xlink4_xlink_stat,	0x1014074C
 .equ Adr_NX56_xlink5_xlink_stat,	0x1014075C
 .equ Adr_NX56_xlink6_xlink_stat,	0x1014076C
 .equ Adr_NX56_xlink7_xlink_stat,	0x1014077C

 .equ MSK_NX56_xlink_stat_bit_cnt_ro,	0x0000ffff
 .equ SRT_NX56_xlink_stat_bit_cnt_ro,	0
 .equ MSK_NX56_xlink_stat_bit_clk_ro,	0x00010000
 .equ SRT_NX56_xlink_stat_bit_clk_ro,	16
 .equ MSK_NX56_xlink_stat_txo_ro    ,	0x00020000
 .equ SRT_NX56_xlink_stat_txo_ro    ,	17
 .equ MSK_NX56_xlink_stat_rxo_ro    ,	0x00040000
 .equ SRT_NX56_xlink_stat_rxo_ro    ,	18
 .equ MSK_NX56_xlink_stat_txoe_ro   ,	0x00080000
 .equ SRT_NX56_xlink_stat_txoe_ro   ,	19
 .equ MSK_NX56_xlink_stat_io_mode   ,	0x00100000
 .equ SRT_NX56_xlink_stat_io_mode   ,	20
 .equ MSK_NX56_xlink_stat_set_tx    ,	0x00200000
 .equ SRT_NX56_xlink_stat_set_tx    ,	21
 .equ MSK_NX56_xlink_stat_set_txoe  ,	0x00400000
 .equ SRT_NX56_xlink_stat_set_txoe  ,	22
 .equ MSK_NX56_xlink_stat_set_wakeup,	0x00800000
 .equ SRT_NX56_xlink_stat_set_wakeup,	23
 .equ MSK_NX56_xlink_stat_filter_en ,	0x01000000
 .equ SRT_NX56_xlink_stat_filter_en ,	24


@ =====================================================================
@
@ Area of io_link_irq
@
@ =====================================================================

 .equ Addr_NX56_io_link_irq, 0x10140780

@ ---------------------------------------------------------------------
@ Register io_link_irq_raw
@ => IO-Link raw interrupts:
@    Shows status of raw IRQs (not masked).
@    Reset IRQ by writing 1 to appropriate bit.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_link_irq_raw        ,	0x00000000
 .equ Adr_NX56_io_link_irq_io_link_irq_raw,	0x10140780
 .equ Adr_NX56_io_link_irq_raw            ,	0x10140780

 .equ MSK_NX56_io_link_irq_raw_xlink0_tx_next ,	0x00000001
 .equ SRT_NX56_io_link_irq_raw_xlink0_tx_next ,	0
 .equ MSK_NX56_io_link_irq_raw_xlink0_rx_next ,	0x00000002
 .equ SRT_NX56_io_link_irq_raw_xlink0_rx_next ,	1
 .equ MSK_NX56_io_link_irq_raw_xlink0_shift_en,	0x00000004
 .equ SRT_NX56_io_link_irq_raw_xlink0_shift_en,	2
 .equ MSK_NX56_io_link_irq_raw_xlink1_tx_next ,	0x00000010
 .equ SRT_NX56_io_link_irq_raw_xlink1_tx_next ,	4
 .equ MSK_NX56_io_link_irq_raw_xlink1_rx_next ,	0x00000020
 .equ SRT_NX56_io_link_irq_raw_xlink1_rx_next ,	5
 .equ MSK_NX56_io_link_irq_raw_xlink1_shift_en,	0x00000040
 .equ SRT_NX56_io_link_irq_raw_xlink1_shift_en,	6
 .equ MSK_NX56_io_link_irq_raw_xlink2_tx_next ,	0x00000100
 .equ SRT_NX56_io_link_irq_raw_xlink2_tx_next ,	8
 .equ MSK_NX56_io_link_irq_raw_xlink2_rx_next ,	0x00000200
 .equ SRT_NX56_io_link_irq_raw_xlink2_rx_next ,	9
 .equ MSK_NX56_io_link_irq_raw_xlink2_shift_en,	0x00000400
 .equ SRT_NX56_io_link_irq_raw_xlink2_shift_en,	10
 .equ MSK_NX56_io_link_irq_raw_xlink3_tx_next ,	0x00001000
 .equ SRT_NX56_io_link_irq_raw_xlink3_tx_next ,	12
 .equ MSK_NX56_io_link_irq_raw_xlink3_rx_next ,	0x00002000
 .equ SRT_NX56_io_link_irq_raw_xlink3_rx_next ,	13
 .equ MSK_NX56_io_link_irq_raw_xlink3_shift_en,	0x00004000
 .equ SRT_NX56_io_link_irq_raw_xlink3_shift_en,	14
 .equ MSK_NX56_io_link_irq_raw_xlink4_tx_next ,	0x00010000
 .equ SRT_NX56_io_link_irq_raw_xlink4_tx_next ,	16
 .equ MSK_NX56_io_link_irq_raw_xlink4_rx_next ,	0x00020000
 .equ SRT_NX56_io_link_irq_raw_xlink4_rx_next ,	17
 .equ MSK_NX56_io_link_irq_raw_xlink4_shift_en,	0x00040000
 .equ SRT_NX56_io_link_irq_raw_xlink4_shift_en,	18
 .equ MSK_NX56_io_link_irq_raw_xlink5_tx_next ,	0x00100000
 .equ SRT_NX56_io_link_irq_raw_xlink5_tx_next ,	20
 .equ MSK_NX56_io_link_irq_raw_xlink5_rx_next ,	0x00200000
 .equ SRT_NX56_io_link_irq_raw_xlink5_rx_next ,	21
 .equ MSK_NX56_io_link_irq_raw_xlink5_shift_en,	0x00400000
 .equ SRT_NX56_io_link_irq_raw_xlink5_shift_en,	22
 .equ MSK_NX56_io_link_irq_raw_xlink6_tx_next ,	0x01000000
 .equ SRT_NX56_io_link_irq_raw_xlink6_tx_next ,	24
 .equ MSK_NX56_io_link_irq_raw_xlink6_rx_next ,	0x02000000
 .equ SRT_NX56_io_link_irq_raw_xlink6_rx_next ,	25
 .equ MSK_NX56_io_link_irq_raw_xlink6_shift_en,	0x04000000
 .equ SRT_NX56_io_link_irq_raw_xlink6_shift_en,	26
 .equ MSK_NX56_io_link_irq_raw_xlink7_tx_next ,	0x10000000
 .equ SRT_NX56_io_link_irq_raw_xlink7_tx_next ,	28
 .equ MSK_NX56_io_link_irq_raw_xlink7_rx_next ,	0x20000000
 .equ SRT_NX56_io_link_irq_raw_xlink7_rx_next ,	29
 .equ MSK_NX56_io_link_irq_raw_xlink7_shift_en,	0x40000000
 .equ SRT_NX56_io_link_irq_raw_xlink7_shift_en,	30

@ ---------------------------------------------------------------------
@ Register io_link_irq_masked
@ => IO-Link Masked IRQ register
@    Shows status of masked IRQs (as connected to ARM/xPIC)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_link_irq_masked        ,	0x00000004
 .equ Adr_NX56_io_link_irq_io_link_irq_masked,	0x10140784
 .equ Adr_NX56_io_link_irq_masked            ,	0x10140784

 .equ MSK_NX56_io_link_irq_masked_xlink0_tx_next ,	0x00000001
 .equ SRT_NX56_io_link_irq_masked_xlink0_tx_next ,	0
 .equ MSK_NX56_io_link_irq_masked_xlink0_rx_next ,	0x00000002
 .equ SRT_NX56_io_link_irq_masked_xlink0_rx_next ,	1
 .equ MSK_NX56_io_link_irq_masked_xlink0_shift_en,	0x00000004
 .equ SRT_NX56_io_link_irq_masked_xlink0_shift_en,	2
 .equ MSK_NX56_io_link_irq_masked_xlink1_tx_next ,	0x00000010
 .equ SRT_NX56_io_link_irq_masked_xlink1_tx_next ,	4
 .equ MSK_NX56_io_link_irq_masked_xlink1_rx_next ,	0x00000020
 .equ SRT_NX56_io_link_irq_masked_xlink1_rx_next ,	5
 .equ MSK_NX56_io_link_irq_masked_xlink1_shift_en,	0x00000040
 .equ SRT_NX56_io_link_irq_masked_xlink1_shift_en,	6
 .equ MSK_NX56_io_link_irq_masked_xlink2_tx_next ,	0x00000100
 .equ SRT_NX56_io_link_irq_masked_xlink2_tx_next ,	8
 .equ MSK_NX56_io_link_irq_masked_xlink2_rx_next ,	0x00000200
 .equ SRT_NX56_io_link_irq_masked_xlink2_rx_next ,	9
 .equ MSK_NX56_io_link_irq_masked_xlink2_shift_en,	0x00000400
 .equ SRT_NX56_io_link_irq_masked_xlink2_shift_en,	10
 .equ MSK_NX56_io_link_irq_masked_xlink3_tx_next ,	0x00001000
 .equ SRT_NX56_io_link_irq_masked_xlink3_tx_next ,	12
 .equ MSK_NX56_io_link_irq_masked_xlink3_rx_next ,	0x00002000
 .equ SRT_NX56_io_link_irq_masked_xlink3_rx_next ,	13
 .equ MSK_NX56_io_link_irq_masked_xlink3_shift_en,	0x00004000
 .equ SRT_NX56_io_link_irq_masked_xlink3_shift_en,	14
 .equ MSK_NX56_io_link_irq_masked_xlink4_tx_next ,	0x00010000
 .equ SRT_NX56_io_link_irq_masked_xlink4_tx_next ,	16
 .equ MSK_NX56_io_link_irq_masked_xlink4_rx_next ,	0x00020000
 .equ SRT_NX56_io_link_irq_masked_xlink4_rx_next ,	17
 .equ MSK_NX56_io_link_irq_masked_xlink4_shift_en,	0x00040000
 .equ SRT_NX56_io_link_irq_masked_xlink4_shift_en,	18
 .equ MSK_NX56_io_link_irq_masked_xlink5_tx_next ,	0x00100000
 .equ SRT_NX56_io_link_irq_masked_xlink5_tx_next ,	20
 .equ MSK_NX56_io_link_irq_masked_xlink5_rx_next ,	0x00200000
 .equ SRT_NX56_io_link_irq_masked_xlink5_rx_next ,	21
 .equ MSK_NX56_io_link_irq_masked_xlink5_shift_en,	0x00400000
 .equ SRT_NX56_io_link_irq_masked_xlink5_shift_en,	22
 .equ MSK_NX56_io_link_irq_masked_xlink6_tx_next ,	0x01000000
 .equ SRT_NX56_io_link_irq_masked_xlink6_tx_next ,	24
 .equ MSK_NX56_io_link_irq_masked_xlink6_rx_next ,	0x02000000
 .equ SRT_NX56_io_link_irq_masked_xlink6_rx_next ,	25
 .equ MSK_NX56_io_link_irq_masked_xlink6_shift_en,	0x04000000
 .equ SRT_NX56_io_link_irq_masked_xlink6_shift_en,	26
 .equ MSK_NX56_io_link_irq_masked_xlink7_tx_next ,	0x10000000
 .equ SRT_NX56_io_link_irq_masked_xlink7_tx_next ,	28
 .equ MSK_NX56_io_link_irq_masked_xlink7_rx_next ,	0x20000000
 .equ SRT_NX56_io_link_irq_masked_xlink7_rx_next ,	29
 .equ MSK_NX56_io_link_irq_masked_xlink7_shift_en,	0x40000000
 .equ SRT_NX56_io_link_irq_masked_xlink7_shift_en,	30

@ ---------------------------------------------------------------------
@ Register io_link_irq_msk_set
@ => IO-Link interrupt mask enable:
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_io_link_irq_raw
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_link_irq_msk_set        ,	0x00000008
 .equ Adr_NX56_io_link_irq_io_link_irq_msk_set,	0x10140788
 .equ Adr_NX56_io_link_irq_msk_set            ,	0x10140788

 .equ MSK_NX56_io_link_irq_msk_set_xlink0_tx_next ,	0x00000001
 .equ SRT_NX56_io_link_irq_msk_set_xlink0_tx_next ,	0
 .equ MSK_NX56_io_link_irq_msk_set_xlink0_rx_next ,	0x00000002
 .equ SRT_NX56_io_link_irq_msk_set_xlink0_rx_next ,	1
 .equ MSK_NX56_io_link_irq_msk_set_xlink0_shift_en,	0x00000004
 .equ SRT_NX56_io_link_irq_msk_set_xlink0_shift_en,	2
 .equ MSK_NX56_io_link_irq_msk_set_xlink1_tx_next ,	0x00000010
 .equ SRT_NX56_io_link_irq_msk_set_xlink1_tx_next ,	4
 .equ MSK_NX56_io_link_irq_msk_set_xlink1_rx_next ,	0x00000020
 .equ SRT_NX56_io_link_irq_msk_set_xlink1_rx_next ,	5
 .equ MSK_NX56_io_link_irq_msk_set_xlink1_shift_en,	0x00000040
 .equ SRT_NX56_io_link_irq_msk_set_xlink1_shift_en,	6
 .equ MSK_NX56_io_link_irq_msk_set_xlink2_tx_next ,	0x00000100
 .equ SRT_NX56_io_link_irq_msk_set_xlink2_tx_next ,	8
 .equ MSK_NX56_io_link_irq_msk_set_xlink2_rx_next ,	0x00000200
 .equ SRT_NX56_io_link_irq_msk_set_xlink2_rx_next ,	9
 .equ MSK_NX56_io_link_irq_msk_set_xlink2_shift_en,	0x00000400
 .equ SRT_NX56_io_link_irq_msk_set_xlink2_shift_en,	10
 .equ MSK_NX56_io_link_irq_msk_set_xlink3_tx_next ,	0x00001000
 .equ SRT_NX56_io_link_irq_msk_set_xlink3_tx_next ,	12
 .equ MSK_NX56_io_link_irq_msk_set_xlink3_rx_next ,	0x00002000
 .equ SRT_NX56_io_link_irq_msk_set_xlink3_rx_next ,	13
 .equ MSK_NX56_io_link_irq_msk_set_xlink3_shift_en,	0x00004000
 .equ SRT_NX56_io_link_irq_msk_set_xlink3_shift_en,	14
 .equ MSK_NX56_io_link_irq_msk_set_xlink4_tx_next ,	0x00010000
 .equ SRT_NX56_io_link_irq_msk_set_xlink4_tx_next ,	16
 .equ MSK_NX56_io_link_irq_msk_set_xlink4_rx_next ,	0x00020000
 .equ SRT_NX56_io_link_irq_msk_set_xlink4_rx_next ,	17
 .equ MSK_NX56_io_link_irq_msk_set_xlink4_shift_en,	0x00040000
 .equ SRT_NX56_io_link_irq_msk_set_xlink4_shift_en,	18
 .equ MSK_NX56_io_link_irq_msk_set_xlink5_tx_next ,	0x00100000
 .equ SRT_NX56_io_link_irq_msk_set_xlink5_tx_next ,	20
 .equ MSK_NX56_io_link_irq_msk_set_xlink5_rx_next ,	0x00200000
 .equ SRT_NX56_io_link_irq_msk_set_xlink5_rx_next ,	21
 .equ MSK_NX56_io_link_irq_msk_set_xlink5_shift_en,	0x00400000
 .equ SRT_NX56_io_link_irq_msk_set_xlink5_shift_en,	22
 .equ MSK_NX56_io_link_irq_msk_set_xlink6_tx_next ,	0x01000000
 .equ SRT_NX56_io_link_irq_msk_set_xlink6_tx_next ,	24
 .equ MSK_NX56_io_link_irq_msk_set_xlink6_rx_next ,	0x02000000
 .equ SRT_NX56_io_link_irq_msk_set_xlink6_rx_next ,	25
 .equ MSK_NX56_io_link_irq_msk_set_xlink6_shift_en,	0x04000000
 .equ SRT_NX56_io_link_irq_msk_set_xlink6_shift_en,	26
 .equ MSK_NX56_io_link_irq_msk_set_xlink7_tx_next ,	0x10000000
 .equ SRT_NX56_io_link_irq_msk_set_xlink7_tx_next ,	28
 .equ MSK_NX56_io_link_irq_msk_set_xlink7_rx_next ,	0x20000000
 .equ SRT_NX56_io_link_irq_msk_set_xlink7_rx_next ,	29
 .equ MSK_NX56_io_link_irq_msk_set_xlink7_shift_en,	0x40000000
 .equ SRT_NX56_io_link_irq_msk_set_xlink7_shift_en,	30

@ ---------------------------------------------------------------------
@ Register io_link_irq_msk_reset
@ => IO-Link interrupt mask disable:
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_link_irq_msk_reset        ,	0x0000000C
 .equ Adr_NX56_io_link_irq_io_link_irq_msk_reset,	0x1014078C
 .equ Adr_NX56_io_link_irq_msk_reset            ,	0x1014078C

 .equ MSK_NX56_io_link_irq_msk_reset_xlink0_tx_next ,	0x00000001
 .equ SRT_NX56_io_link_irq_msk_reset_xlink0_tx_next ,	0
 .equ MSK_NX56_io_link_irq_msk_reset_xlink0_rx_next ,	0x00000002
 .equ SRT_NX56_io_link_irq_msk_reset_xlink0_rx_next ,	1
 .equ MSK_NX56_io_link_irq_msk_reset_xlink0_shift_en,	0x00000004
 .equ SRT_NX56_io_link_irq_msk_reset_xlink0_shift_en,	2
 .equ MSK_NX56_io_link_irq_msk_reset_xlink1_tx_next ,	0x00000010
 .equ SRT_NX56_io_link_irq_msk_reset_xlink1_tx_next ,	4
 .equ MSK_NX56_io_link_irq_msk_reset_xlink1_rx_next ,	0x00000020
 .equ SRT_NX56_io_link_irq_msk_reset_xlink1_rx_next ,	5
 .equ MSK_NX56_io_link_irq_msk_reset_xlink1_shift_en,	0x00000040
 .equ SRT_NX56_io_link_irq_msk_reset_xlink1_shift_en,	6
 .equ MSK_NX56_io_link_irq_msk_reset_xlink2_tx_next ,	0x00000100
 .equ SRT_NX56_io_link_irq_msk_reset_xlink2_tx_next ,	8
 .equ MSK_NX56_io_link_irq_msk_reset_xlink2_rx_next ,	0x00000200
 .equ SRT_NX56_io_link_irq_msk_reset_xlink2_rx_next ,	9
 .equ MSK_NX56_io_link_irq_msk_reset_xlink2_shift_en,	0x00000400
 .equ SRT_NX56_io_link_irq_msk_reset_xlink2_shift_en,	10
 .equ MSK_NX56_io_link_irq_msk_reset_xlink3_tx_next ,	0x00001000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink3_tx_next ,	12
 .equ MSK_NX56_io_link_irq_msk_reset_xlink3_rx_next ,	0x00002000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink3_rx_next ,	13
 .equ MSK_NX56_io_link_irq_msk_reset_xlink3_shift_en,	0x00004000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink3_shift_en,	14
 .equ MSK_NX56_io_link_irq_msk_reset_xlink4_tx_next ,	0x00010000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink4_tx_next ,	16
 .equ MSK_NX56_io_link_irq_msk_reset_xlink4_rx_next ,	0x00020000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink4_rx_next ,	17
 .equ MSK_NX56_io_link_irq_msk_reset_xlink4_shift_en,	0x00040000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink4_shift_en,	18
 .equ MSK_NX56_io_link_irq_msk_reset_xlink5_tx_next ,	0x00100000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink5_tx_next ,	20
 .equ MSK_NX56_io_link_irq_msk_reset_xlink5_rx_next ,	0x00200000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink5_rx_next ,	21
 .equ MSK_NX56_io_link_irq_msk_reset_xlink5_shift_en,	0x00400000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink5_shift_en,	22
 .equ MSK_NX56_io_link_irq_msk_reset_xlink6_tx_next ,	0x01000000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink6_tx_next ,	24
 .equ MSK_NX56_io_link_irq_msk_reset_xlink6_rx_next ,	0x02000000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink6_rx_next ,	25
 .equ MSK_NX56_io_link_irq_msk_reset_xlink6_shift_en,	0x04000000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink6_shift_en,	26
 .equ MSK_NX56_io_link_irq_msk_reset_xlink7_tx_next ,	0x10000000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink7_tx_next ,	28
 .equ MSK_NX56_io_link_irq_msk_reset_xlink7_rx_next ,	0x20000000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink7_rx_next ,	29
 .equ MSK_NX56_io_link_irq_msk_reset_xlink7_shift_en,	0x40000000
 .equ SRT_NX56_io_link_irq_msk_reset_xlink7_shift_en,	30

@ ---------------------------------------------------------------------
@ Register io_link_irq_enable
@ => IO-Link processor enable:
@    Enable all irqs for xpic and/or arm
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_link_irq_enable        ,	0x00000010
 .equ Adr_NX56_io_link_irq_io_link_irq_enable,	0x10140790
 .equ Adr_NX56_io_link_irq_enable            ,	0x10140790

 .equ MSK_NX56_io_link_irq_enable_arm_en ,	0x00000001
 .equ SRT_NX56_io_link_irq_enable_arm_en ,	0
 .equ MSK_NX56_io_link_irq_enable_xpic_en,	0x00000002
 .equ SRT_NX56_io_link_irq_enable_xpic_en,	1


@ =====================================================================
@
@ Area of spi_motion
@
@ =====================================================================

 .equ Addr_NX56_spi_motion, 0x10140800

@ ---------------------------------------------------------------------
@ Register spi_cr0
@ => spi control register 0
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_cr0       ,	0x00000000
 .equ Adr_NX56_spi_motion_spi_cr0,	0x10140800
 .equ Adr_NX56_spi_cr0           ,	0x10140800

 .equ MSK_NX56_spi_cr0_datasize       ,	0x0000000f
 .equ SRT_NX56_spi_cr0_datasize       ,	0
 .equ MSK_NX56_spi_cr0_SPO            ,	0x00000040
 .equ SRT_NX56_spi_cr0_SPO            ,	6
 .equ MSK_NX56_spi_cr0_SPH            ,	0x00000080
 .equ SRT_NX56_spi_cr0_SPH            ,	7
 .equ MSK_NX56_spi_cr0_sck_muladd     ,	0x000fff00
 .equ SRT_NX56_spi_cr0_sck_muladd     ,	8
 .equ MSK_NX56_spi_cr0_format         ,	0x03000000
 .equ SRT_NX56_spi_cr0_format         ,	24
 .equ MSK_NX56_spi_cr0_filter_in      ,	0x08000000
 .equ SRT_NX56_spi_cr0_filter_in      ,	27
 .equ MSK_NX56_spi_cr0_slave_sig_early,	0x10000000
 .equ SRT_NX56_spi_cr0_slave_sig_early,	28
 .equ MSK_NX56_spi_cr0_netx100_comp   ,	0x80000000
 .equ SRT_NX56_spi_cr0_netx100_comp   ,	31

@ ---------------------------------------------------------------------
@ Register spi_cr1
@ => spi control register 0
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_cr1       ,	0x00000004
 .equ Adr_NX56_spi_motion_spi_cr1,	0x10140804
 .equ Adr_NX56_spi_cr1           ,	0x10140804

 .equ MSK_NX56_spi_cr1_LBM        ,	0x00000001
 .equ SRT_NX56_spi_cr1_LBM        ,	0
 .equ MSK_NX56_spi_cr1_SSE        ,	0x00000002
 .equ SRT_NX56_spi_cr1_SSE        ,	1
 .equ MSK_NX56_spi_cr1_MS         ,	0x00000004
 .equ SRT_NX56_spi_cr1_MS         ,	2
 .equ MSK_NX56_spi_cr1_SOD        ,	0x00000008
 .equ SRT_NX56_spi_cr1_SOD        ,	3
 .equ MSK_NX56_spi_cr1_fss        ,	0x00000700
 .equ SRT_NX56_spi_cr1_fss        ,	8
 .equ MSK_NX56_spi_cr1_fss_static ,	0x00000800
 .equ SRT_NX56_spi_cr1_fss_static ,	11
 .equ MSK_NX56_spi_cr1_tx_fifo_wm ,	0x000f0000
 .equ SRT_NX56_spi_cr1_tx_fifo_wm ,	16
 .equ MSK_NX56_spi_cr1_tx_fifo_clr,	0x00100000
 .equ SRT_NX56_spi_cr1_tx_fifo_clr,	20
 .equ MSK_NX56_spi_cr1_rx_fifo_wm ,	0x0f000000
 .equ SRT_NX56_spi_cr1_rx_fifo_wm ,	24
 .equ MSK_NX56_spi_cr1_rx_fifo_clr,	0x10000000
 .equ SRT_NX56_spi_cr1_rx_fifo_clr,	28

@ ---------------------------------------------------------------------
@ Register spi_dr
@ => spi data register (DR)
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    read access: received data byte is delivered from receive FIFO
@    write access: send data byte is written to send FIFO
@    Both, receive and transmit FIFO have a depth of 16.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_dr       ,	0x00000008
 .equ Adr_NX56_spi_motion_spi_dr,	0x10140808
 .equ Adr_NX56_spi_dr           ,	0x10140808

 .equ MSK_NX56_spi_dr_data,	0x0001ffff
 .equ SRT_NX56_spi_dr_data,	0

@ ---------------------------------------------------------------------
@ Register spi_sr
@ => read only spi status register
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    SPI master mode: MISO-input-data will be stored in the receive FIFO, transmit FIFO generates MOSI-output-data
@    SPI slave mode: MOSI-input-data will be stored in the receive FIFO, transmit FIFO generates MISO-output-data
@    Shows the current status of the spi interface.
@    Both, receive and transmit FIFO have a depth of 16.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_sr       ,	0x0000000C
 .equ Adr_NX56_spi_motion_spi_sr,	0x1014080C
 .equ Adr_NX56_spi_sr           ,	0x1014080C

 .equ MSK_NX56_spi_sr_TFE             ,	0x00000001
 .equ SRT_NX56_spi_sr_TFE             ,	0
 .equ MSK_NX56_spi_sr_TNF             ,	0x00000002
 .equ SRT_NX56_spi_sr_TNF             ,	1
 .equ MSK_NX56_spi_sr_RNE             ,	0x00000004
 .equ SRT_NX56_spi_sr_RNE             ,	2
 .equ MSK_NX56_spi_sr_RFF             ,	0x00000008
 .equ SRT_NX56_spi_sr_RFF             ,	3
 .equ MSK_NX56_spi_sr_BSY             ,	0x00000010
 .equ SRT_NX56_spi_sr_BSY             ,	4
 .equ MSK_NX56_spi_sr_tx_fifo_level   ,	0x001f0000
 .equ SRT_NX56_spi_sr_tx_fifo_level   ,	16
 .equ MSK_NX56_spi_sr_tx_fifo_err_ovfl,	0x00400000
 .equ SRT_NX56_spi_sr_tx_fifo_err_ovfl,	22
 .equ MSK_NX56_spi_sr_tx_fifo_err_undr,	0x00800000
 .equ SRT_NX56_spi_sr_tx_fifo_err_undr,	23
 .equ MSK_NX56_spi_sr_rx_fifo_level   ,	0x1f000000
 .equ SRT_NX56_spi_sr_rx_fifo_level   ,	24
 .equ MSK_NX56_spi_sr_rx_fifo_err_ovfl,	0x40000000
 .equ SRT_NX56_spi_sr_rx_fifo_err_ovfl,	30
 .equ MSK_NX56_spi_sr_rx_fifo_err_undr,	0x80000000
 .equ SRT_NX56_spi_sr_rx_fifo_err_undr,	31

@ ---------------------------------------------------------------------
@ Register spi_cpsr
@ => Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    spi clock prescale register
@    No clock predeviding is done.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_cpsr       ,	0x00000010
 .equ Adr_NX56_spi_motion_spi_cpsr,	0x10140810
 .equ Adr_NX56_spi_cpsr           ,	0x10140810

 .equ MSK_NX56_spi_cpsr_CPSDVSR,	0x000000ff
 .equ SRT_NX56_spi_cpsr_CPSDVSR,	0

@ ---------------------------------------------------------------------
@ Register spi_imsc
@ => spi interrupt mask set or clear register
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    AND-mask
@    Both, receive and transmit FIFO have a depth of 16.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_imsc       ,	0x00000014
 .equ Adr_NX56_spi_motion_spi_imsc,	0x10140814
 .equ Adr_NX56_spi_imsc           ,	0x10140814

 .equ MSK_NX56_spi_imsc_RORIM ,	0x00000001
 .equ SRT_NX56_spi_imsc_RORIM ,	0
 .equ MSK_NX56_spi_imsc_RTIM  ,	0x00000002
 .equ SRT_NX56_spi_imsc_RTIM  ,	1
 .equ MSK_NX56_spi_imsc_RXIM  ,	0x00000004
 .equ SRT_NX56_spi_imsc_RXIM  ,	2
 .equ MSK_NX56_spi_imsc_TXIM  ,	0x00000008
 .equ SRT_NX56_spi_imsc_TXIM  ,	3
 .equ MSK_NX56_spi_imsc_rxneim,	0x00000010
 .equ SRT_NX56_spi_imsc_rxneim,	4
 .equ MSK_NX56_spi_imsc_rxfim ,	0x00000020
 .equ SRT_NX56_spi_imsc_rxfim ,	5
 .equ MSK_NX56_spi_imsc_txeim ,	0x00000040
 .equ SRT_NX56_spi_imsc_txeim ,	6

@ ---------------------------------------------------------------------
@ Register spi_ris
@ => spi interrupt state before masking register (raw interrupt)
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    Both, receive and transmit FIFO have a depth of 16.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_ris       ,	0x00000018
 .equ Adr_NX56_spi_motion_spi_ris,	0x10140818
 .equ Adr_NX56_spi_ris           ,	0x10140818

 .equ MSK_NX56_spi_ris_RORRIS ,	0x00000001
 .equ SRT_NX56_spi_ris_RORRIS ,	0
 .equ MSK_NX56_spi_ris_RTRIS  ,	0x00000002
 .equ SRT_NX56_spi_ris_RTRIS  ,	1
 .equ MSK_NX56_spi_ris_RXRIS  ,	0x00000004
 .equ SRT_NX56_spi_ris_RXRIS  ,	2
 .equ MSK_NX56_spi_ris_TXRIS  ,	0x00000008
 .equ SRT_NX56_spi_ris_TXRIS  ,	3
 .equ MSK_NX56_spi_ris_rxneris,	0x00000010
 .equ SRT_NX56_spi_ris_rxneris,	4
 .equ MSK_NX56_spi_ris_rxfris ,	0x00000020
 .equ SRT_NX56_spi_ris_rxfris ,	5
 .equ MSK_NX56_spi_ris_txeris ,	0x00000040
 .equ SRT_NX56_spi_ris_txeris ,	6

@ ---------------------------------------------------------------------
@ Register spi_mis
@ => spi interrupt status register
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    Both, receive and transmit FIFO have a depth of 16.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_mis       ,	0x0000001C
 .equ Adr_NX56_spi_motion_spi_mis,	0x1014081C
 .equ Adr_NX56_spi_mis           ,	0x1014081C

 .equ MSK_NX56_spi_mis_RORMIS ,	0x00000001
 .equ SRT_NX56_spi_mis_RORMIS ,	0
 .equ MSK_NX56_spi_mis_RTMIS  ,	0x00000002
 .equ SRT_NX56_spi_mis_RTMIS  ,	1
 .equ MSK_NX56_spi_mis_RXMIS  ,	0x00000004
 .equ SRT_NX56_spi_mis_RXMIS  ,	2
 .equ MSK_NX56_spi_mis_TXMIS  ,	0x00000008
 .equ SRT_NX56_spi_mis_TXMIS  ,	3
 .equ MSK_NX56_spi_mis_rxnemis,	0x00000010
 .equ SRT_NX56_spi_mis_rxnemis,	4
 .equ MSK_NX56_spi_mis_rxfmis ,	0x00000020
 .equ SRT_NX56_spi_mis_rxfmis ,	5
 .equ MSK_NX56_spi_mis_txemis ,	0x00000040
 .equ SRT_NX56_spi_mis_txemis ,	6

@ ---------------------------------------------------------------------
@ Register spi_icr
@ => spi interrupt clear register
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    interrupt is cleard by writing "1" to the according bit
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_icr       ,	0x00000020
 .equ Adr_NX56_spi_motion_spi_icr,	0x10140820
 .equ Adr_NX56_spi_icr           ,	0x10140820

 .equ MSK_NX56_spi_icr_RORIC ,	0x00000001
 .equ SRT_NX56_spi_icr_RORIC ,	0
 .equ MSK_NX56_spi_icr_RTIC  ,	0x00000002
 .equ SRT_NX56_spi_icr_RTIC  ,	1
 .equ MSK_NX56_spi_icr_RXIC  ,	0x00000004
 .equ SRT_NX56_spi_icr_RXIC  ,	2
 .equ MSK_NX56_spi_icr_TXIC  ,	0x00000008
 .equ SRT_NX56_spi_icr_TXIC  ,	3
 .equ MSK_NX56_spi_icr_rxneic,	0x00000010
 .equ SRT_NX56_spi_icr_rxneic,	4
 .equ MSK_NX56_spi_icr_rxfic ,	0x00000020
 .equ SRT_NX56_spi_icr_rxfic ,	5
 .equ MSK_NX56_spi_icr_txeic ,	0x00000040
 .equ SRT_NX56_spi_icr_txeic ,	6

@ ---------------------------------------------------------------------
@ Register spi_irq_cpu_sel
@ => Interrupt CPU select register
@    Select CPU (xPIC or ARM), which gets Interrupts from this SPI instance.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_irq_cpu_sel       ,	0x00000024
 .equ Adr_NX56_spi_motion_spi_irq_cpu_sel,	0x10140824
 .equ Adr_NX56_spi_irq_cpu_sel           ,	0x10140824

 .equ MSK_NX56_spi_irq_cpu_sel_arm ,	0x00000001
 .equ SRT_NX56_spi_irq_cpu_sel_arm ,	0
 .equ MSK_NX56_spi_irq_cpu_sel_xpic,	0x00000002
 .equ SRT_NX56_spi_irq_cpu_sel_xpic,	1

@ ---------------------------------------------------------------------
@ Register spi_dmacr
@ => spi DMA control register
@    Only single transfer requests will be generated by this module.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_dmacr       ,	0x00000028
 .equ Adr_NX56_spi_motion_spi_dmacr,	0x10140828
 .equ Adr_NX56_spi_dmacr           ,	0x10140828

 .equ MSK_NX56_spi_dmacr_RXDMAE,	0x00000001
 .equ SRT_NX56_spi_dmacr_RXDMAE,	0
 .equ MSK_NX56_spi_dmacr_TXDMAE,	0x00000002
 .equ SRT_NX56_spi_dmacr_TXDMAE,	1

@ ---------------------------------------------------------------------
@ Register spi_data_register
@ => netx100/500 compliant spi data register (DR)
@    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500
@    2 data bytes with valid bits
@    During write-access data_byte_1 and dr_valid1 must not be used. dr_valid0 must be set.
@    In netx50 and later versions both, receive and transmit FIFO have a depth of 16, fill-values are fixed to 4. To keep software
@    compatible, not more than 8 bytes should be in netx100/500-FIFOs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_data_register       ,	0x00000030
 .equ Adr_NX56_spi_motion_spi_data_register,	0x10140830
 .equ Adr_NX56_spi_data_register           ,	0x10140830

 .equ MSK_NX56_spi_data_register_data_byte_0,	0x000000ff
 .equ SRT_NX56_spi_data_register_data_byte_0,	0
 .equ MSK_NX56_spi_data_register_data_byte_1,	0x0000ff00
 .equ SRT_NX56_spi_data_register_data_byte_1,	8
 .equ MSK_NX56_spi_data_register_dr_valid0  ,	0x00010000
 .equ SRT_NX56_spi_data_register_dr_valid0  ,	16
 .equ MSK_NX56_spi_data_register_dr_valid1  ,	0x00020000
 .equ SRT_NX56_spi_data_register_dr_valid1  ,	17

@ ---------------------------------------------------------------------
@ Register spi_status_register
@ => netx100/500 compliant spi status register (SR):
@    Shows the actual status of the spi interface.
@    Bits 24..18 show occured interrupts,
@    writing ones into these bits deletes the interrupts.
@    Writing into other bits has no effect.
@    In netx50 and later versions both, receive and transmit FIFO have a depth of 16, fill-values are fixed to 4. To keep software
@    compatible, not more than 8 bytes should be in netx100/500-FIFOs.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_status_register       ,	0x00000034
 .equ Adr_NX56_spi_motion_spi_status_register,	0x10140834
 .equ Adr_NX56_spi_status_register           ,	0x10140834

 .equ MSK_NX56_spi_status_register_SR_in_fuel_val ,	0x000001ff
 .equ SRT_NX56_spi_status_register_SR_in_fuel_val ,	0
 .equ MSK_NX56_spi_status_register_SR_out_fuel_val,	0x0003fe00
 .equ SRT_NX56_spi_status_register_SR_out_fuel_val,	9
 .equ MSK_NX56_spi_status_register_SR_in_fuel     ,	0x00040000
 .equ SRT_NX56_spi_status_register_SR_in_fuel     ,	18
 .equ MSK_NX56_spi_status_register_SR_in_recdata  ,	0x00080000
 .equ SRT_NX56_spi_status_register_SR_in_recdata  ,	19
 .equ MSK_NX56_spi_status_register_SR_in_full     ,	0x00100000
 .equ SRT_NX56_spi_status_register_SR_in_full     ,	20
 .equ MSK_NX56_spi_status_register_SR_out_fuel    ,	0x00200000
 .equ SRT_NX56_spi_status_register_SR_out_fuel    ,	21
 .equ MSK_NX56_spi_status_register_SR_out_fw      ,	0x00400000
 .equ SRT_NX56_spi_status_register_SR_out_fw      ,	22
 .equ MSK_NX56_spi_status_register_SR_out_empty   ,	0x00800000
 .equ SRT_NX56_spi_status_register_SR_out_empty   ,	23
 .equ MSK_NX56_spi_status_register_SR_out_full    ,	0x01000000
 .equ SRT_NX56_spi_status_register_SR_out_full    ,	24
 .equ MSK_NX56_spi_status_register_SR_selected    ,	0x02000000
 .equ SRT_NX56_spi_status_register_SR_selected    ,	25

@ ---------------------------------------------------------------------
@ Register spi_control_register
@ => netx100/500 compliant spi control register (CR)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_control_register       ,	0x00000038
 .equ Adr_NX56_spi_motion_spi_control_register,	0x10140838
 .equ Adr_NX56_spi_control_register           ,	0x10140838

 .equ MSK_NX56_spi_control_register_CR_softreset  ,	0x00000001
 .equ SRT_NX56_spi_control_register_CR_softreset  ,	0
 .equ MSK_NX56_spi_control_register_CR_speed      ,	0x0000001e
 .equ SRT_NX56_spi_control_register_CR_speed      ,	1
 .equ MSK_NX56_spi_control_register_CR_read       ,	0x00000040
 .equ SRT_NX56_spi_control_register_CR_read       ,	6
 .equ MSK_NX56_spi_control_register_CR_write      ,	0x00000080
 .equ SRT_NX56_spi_control_register_CR_write      ,	7
 .equ MSK_NX56_spi_control_register_CR_ss         ,	0x00000700
 .equ SRT_NX56_spi_control_register_CR_ss         ,	8
 .equ MSK_NX56_spi_control_register_CS_mode       ,	0x00000800
 .equ SRT_NX56_spi_control_register_CS_mode       ,	11
 .equ MSK_NX56_spi_control_register_CR_clr_infifo ,	0x00100000
 .equ SRT_NX56_spi_control_register_CR_clr_infifo ,	20
 .equ MSK_NX56_spi_control_register_CR_clr_outfifo,	0x00200000
 .equ SRT_NX56_spi_control_register_CR_clr_outfifo,	21
 .equ MSK_NX56_spi_control_register_CR_burstdelay ,	0x01c00000
 .equ SRT_NX56_spi_control_register_CR_burstdelay ,	22
 .equ MSK_NX56_spi_control_register_CR_burst      ,	0x0e000000
 .equ SRT_NX56_spi_control_register_CR_burst      ,	25
 .equ MSK_NX56_spi_control_register_CR_ncpha      ,	0x10000000
 .equ SRT_NX56_spi_control_register_CR_ncpha      ,	28
 .equ MSK_NX56_spi_control_register_CR_cpol       ,	0x20000000
 .equ SRT_NX56_spi_control_register_CR_cpol       ,	29
 .equ MSK_NX56_spi_control_register_CR_ms         ,	0x40000000
 .equ SRT_NX56_spi_control_register_CR_ms         ,	30
 .equ MSK_NX56_spi_control_register_CR_en         ,	0x80000000
 .equ SRT_NX56_spi_control_register_CR_en         ,	31

@ ---------------------------------------------------------------------
@ Register spi_interrupt_control_register
@ => netx100/500 compliant spi interrupt control register (IR)
@    In netx50 and later versions both, receive and transmit FIFO have a depth of 16, fill-values are fixed to 4. To keep software
@    compatible, not more than 8 bytes should be in netx100/500-FIFOs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_spi_interrupt_control_register       ,	0x0000003C
 .equ Adr_NX56_spi_motion_spi_interrupt_control_register,	0x1014083C
 .equ Adr_NX56_spi_interrupt_control_register           ,	0x1014083C

 .equ MSK_NX56_spi_interrupt_control_register_IR_in_fuel      ,	0x000001ff
 .equ SRT_NX56_spi_interrupt_control_register_IR_in_fuel      ,	0
 .equ MSK_NX56_spi_interrupt_control_register_IR_out_fuel     ,	0x0003fe00
 .equ SRT_NX56_spi_interrupt_control_register_IR_out_fuel     ,	9
 .equ MSK_NX56_spi_interrupt_control_register_IR_in_fuel_en   ,	0x00040000
 .equ SRT_NX56_spi_interrupt_control_register_IR_in_fuel_en   ,	18
 .equ MSK_NX56_spi_interrupt_control_register_IR_in_recdata_en,	0x00080000
 .equ SRT_NX56_spi_interrupt_control_register_IR_in_recdata_en,	19
 .equ MSK_NX56_spi_interrupt_control_register_IR_in_full_en   ,	0x00100000
 .equ SRT_NX56_spi_interrupt_control_register_IR_in_full_en   ,	20
 .equ MSK_NX56_spi_interrupt_control_register_IR_out_fuel_en  ,	0x00200000
 .equ SRT_NX56_spi_interrupt_control_register_IR_out_fuel_en  ,	21
 .equ MSK_NX56_spi_interrupt_control_register_IR_out_fw_en    ,	0x00400000
 .equ SRT_NX56_spi_interrupt_control_register_IR_out_fw_en    ,	22
 .equ MSK_NX56_spi_interrupt_control_register_IR_out_empty_en ,	0x00800000
 .equ SRT_NX56_spi_interrupt_control_register_IR_out_empty_en ,	23
 .equ MSK_NX56_spi_interrupt_control_register_IR_out_full_en  ,	0x01000000
 .equ SRT_NX56_spi_interrupt_control_register_IR_out_full_en  ,	24


@ =====================================================================
@
@ Area of xpic_timer
@
@ =====================================================================

 .equ Addr_NX56_xpic_timer, 0x10140880

@ ---------------------------------------------------------------------
@ Register xpic_timer_config_timer0
@ => xPIC TIMER Config register0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_config_timer0       ,	0x00000000
 .equ Adr_NX56_xpic_timer_xpic_timer_config_timer0,	0x10140880
 .equ Adr_NX56_xpic_timer_config_timer0           ,	0x10140880

 .equ MSK_NX56_xpic_timer_config_timer0_mode,	0x00000003
 .equ SRT_NX56_xpic_timer_config_timer0_mode,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_config_timer1
@ => xPIC TIMER Config register1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_config_timer1       ,	0x00000004
 .equ Adr_NX56_xpic_timer_xpic_timer_config_timer1,	0x10140884
 .equ Adr_NX56_xpic_timer_config_timer1           ,	0x10140884

 .equ MSK_NX56_xpic_timer_config_timer1_mode,	0x00000003
 .equ SRT_NX56_xpic_timer_config_timer1_mode,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_config_timer2
@ => xPIC TIMER Config register2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_config_timer2       ,	0x00000008
 .equ Adr_NX56_xpic_timer_xpic_timer_config_timer2,	0x10140888
 .equ Adr_NX56_xpic_timer_config_timer2           ,	0x10140888

 .equ MSK_NX56_xpic_timer_config_timer2_mode,	0x00000003
 .equ SRT_NX56_xpic_timer_config_timer2_mode,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_preload_timer0
@ => xPIC TIMER Timer 0 preload
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_preload_timer0       ,	0x0000000C
 .equ Adr_NX56_xpic_timer_xpic_timer_preload_timer0,	0x1014088C
 .equ Adr_NX56_xpic_timer_preload_timer0           ,	0x1014088C

 .equ MSK_NX56_xpic_timer_preload_timer0_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_preload_timer0_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_preload_timer1
@ => xPIC TIMER Timer 1 preload
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_preload_timer1       ,	0x00000010
 .equ Adr_NX56_xpic_timer_xpic_timer_preload_timer1,	0x10140890
 .equ Adr_NX56_xpic_timer_preload_timer1           ,	0x10140890

 .equ MSK_NX56_xpic_timer_preload_timer1_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_preload_timer1_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_preload_timer2
@ => xPIC TIMER Timer 2 preload
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_preload_timer2       ,	0x00000014
 .equ Adr_NX56_xpic_timer_xpic_timer_preload_timer2,	0x10140894
 .equ Adr_NX56_xpic_timer_preload_timer2           ,	0x10140894

 .equ MSK_NX56_xpic_timer_preload_timer2_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_preload_timer2_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_timer0
@ => xPIC TIMER Timer 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_timer0       ,	0x00000018
 .equ Adr_NX56_xpic_timer_xpic_timer_timer0,	0x10140898
 .equ Adr_NX56_xpic_timer_timer0           ,	0x10140898

 .equ MSK_NX56_xpic_timer_timer0_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_timer0_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_timer1
@ => xPIC TIMER Timer 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_timer1       ,	0x0000001C
 .equ Adr_NX56_xpic_timer_xpic_timer_timer1,	0x1014089C
 .equ Adr_NX56_xpic_timer_timer1           ,	0x1014089C

 .equ MSK_NX56_xpic_timer_timer1_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_timer1_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_timer2
@ => xPIC TIMER Timer 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_timer2       ,	0x00000020
 .equ Adr_NX56_xpic_timer_xpic_timer_timer2,	0x101408A0
 .equ Adr_NX56_xpic_timer_timer2           ,	0x101408A0

 .equ MSK_NX56_xpic_timer_timer2_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_timer2_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_irq_raw
@ => xPIC_TIMER Raw IRQ register:
@    Read access shows status of unmasked IRQs
@    Write access with '1' resets the appropriate IRQ
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_irq_raw       ,	0x00000024
 .equ Adr_NX56_xpic_timer_xpic_timer_irq_raw,	0x101408A4
 .equ Adr_NX56_xpic_timer_irq_raw           ,	0x101408A4

 .equ MSK_NX56_xpic_timer_irq_raw_timer0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_timer_irq_raw_timer0_irq      ,	0
 .equ MSK_NX56_xpic_timer_irq_raw_timer1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_timer_irq_raw_timer1_irq      ,	1
 .equ MSK_NX56_xpic_timer_irq_raw_timer2_irq      ,	0x00000004
 .equ SRT_NX56_xpic_timer_irq_raw_timer2_irq      ,	2
 .equ MSK_NX56_xpic_timer_irq_raw_systime_s_irq   ,	0x00000008
 .equ SRT_NX56_xpic_timer_irq_raw_systime_s_irq   ,	3
 .equ MSK_NX56_xpic_timer_irq_raw_systime_uc_s_irq,	0x00000010
 .equ SRT_NX56_xpic_timer_irq_raw_systime_uc_s_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_timer_irq_masked
@ => xPIC_TIMER Masked IRQ register:
@    Shows status of masked IRQs (as connected to ARM/xPIC)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_irq_masked       ,	0x00000028
 .equ Adr_NX56_xpic_timer_xpic_timer_irq_masked,	0x101408A8
 .equ Adr_NX56_xpic_timer_irq_masked           ,	0x101408A8

 .equ MSK_NX56_xpic_timer_irq_masked_timer0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_timer_irq_masked_timer0_irq      ,	0
 .equ MSK_NX56_xpic_timer_irq_masked_timer1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_timer_irq_masked_timer1_irq      ,	1
 .equ MSK_NX56_xpic_timer_irq_masked_timer2_irq      ,	0x00000004
 .equ SRT_NX56_xpic_timer_irq_masked_timer2_irq      ,	2
 .equ MSK_NX56_xpic_timer_irq_masked_systime_s_irq   ,	0x00000008
 .equ SRT_NX56_xpic_timer_irq_masked_systime_s_irq   ,	3
 .equ MSK_NX56_xpic_timer_irq_masked_systime_uc_s_irq,	0x00000010
 .equ SRT_NX56_xpic_timer_irq_masked_systime_uc_s_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_timer_irq_msk_set
@ => xPIC_TIMER interrupt mask enable:
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_irq_msk_set       ,	0x0000002C
 .equ Adr_NX56_xpic_timer_xpic_timer_irq_msk_set,	0x101408AC
 .equ Adr_NX56_xpic_timer_irq_msk_set           ,	0x101408AC

 .equ MSK_NX56_xpic_timer_irq_msk_set_timer0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_timer_irq_msk_set_timer0_irq      ,	0
 .equ MSK_NX56_xpic_timer_irq_msk_set_timer1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_timer_irq_msk_set_timer1_irq      ,	1
 .equ MSK_NX56_xpic_timer_irq_msk_set_timer2_irq      ,	0x00000004
 .equ SRT_NX56_xpic_timer_irq_msk_set_timer2_irq      ,	2
 .equ MSK_NX56_xpic_timer_irq_msk_set_systime_s_irq   ,	0x00000008
 .equ SRT_NX56_xpic_timer_irq_msk_set_systime_s_irq   ,	3
 .equ MSK_NX56_xpic_timer_irq_msk_set_systime_uc_s_irq,	0x00000010
 .equ SRT_NX56_xpic_timer_irq_msk_set_systime_uc_s_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_timer_irq_msk_reset
@ => xPIC_TIMER interrupt mask disable:
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_irq_msk_reset       ,	0x00000030
 .equ Adr_NX56_xpic_timer_xpic_timer_irq_msk_reset,	0x101408B0
 .equ Adr_NX56_xpic_timer_irq_msk_reset           ,	0x101408B0

 .equ MSK_NX56_xpic_timer_irq_msk_reset_timer0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_timer_irq_msk_reset_timer0_irq      ,	0
 .equ MSK_NX56_xpic_timer_irq_msk_reset_timer1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_timer_irq_msk_reset_timer1_irq      ,	1
 .equ MSK_NX56_xpic_timer_irq_msk_reset_timer2_irq      ,	0x00000004
 .equ SRT_NX56_xpic_timer_irq_msk_reset_timer2_irq      ,	2
 .equ MSK_NX56_xpic_timer_irq_msk_reset_systime_s_irq   ,	0x00000008
 .equ SRT_NX56_xpic_timer_irq_msk_reset_systime_s_irq   ,	3
 .equ MSK_NX56_xpic_timer_irq_msk_reset_systime_uc_s_irq,	0x00000010
 .equ SRT_NX56_xpic_timer_irq_msk_reset_systime_uc_s_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_timer_systime_s
@ => xPIC_TIMER upper SYSTIME register
@    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read.
@    This register should be dedicated to accesses via xPIC.
@    ARM software should access systime via arm_timer_systime_s.
@    Host software should access systime via DPM at systime_s.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_systime_s       ,	0x00000034
 .equ Adr_NX56_xpic_timer_xpic_timer_systime_s,	0x101408B4
 .equ Adr_NX56_xpic_timer_systime_s           ,	0x101408B4

 .equ MSK_NX56_xpic_timer_systime_s_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_systime_s_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_systime_ns
@ => xPIC_TIMER lower SYSTIME register
@    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read.
@    If no systime_s is read before (e.g. at 2nd read access of systime_ns), the actual value of systime_ns is read.
@    This register should be dedicated to accesses via xPIC.
@    ARM software should access systime via arm_timer_systime_ns.
@    Host software should access systime via DPM at systime_ns.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_systime_ns       ,	0x00000038
 .equ Adr_NX56_xpic_timer_xpic_timer_systime_ns,	0x101408B8
 .equ Adr_NX56_xpic_timer_systime_ns           ,	0x101408B8

 .equ MSK_NX56_xpic_timer_systime_ns_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_systime_ns_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_compare_systime_s_value
@ => xPIC_TIMER SYSTIME sec compare register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_compare_systime_s_value       ,	0x0000003C
 .equ Adr_NX56_xpic_timer_xpic_timer_compare_systime_s_value,	0x101408BC
 .equ Adr_NX56_xpic_timer_compare_systime_s_value           ,	0x101408BC

 .equ MSK_NX56_xpic_timer_compare_systime_s_value_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_compare_systime_s_value_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_systime_uc_s
@ => xPIC_TIMER upper SYSTIME_UC register
@    To allow consistent values of systime_uc_s and systime_uc_ns, lower bits of systime_uc is latched to systime_uc_ns, when systime_uc_s is read.
@    This register should be dedicated to accesses via xPIC.
@    ARM software should access systime_uc via arm_timer_systime_uc_s.
@    Host software should access systime_uc via DPM at systime_uc_s.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_systime_uc_s       ,	0x00000040
 .equ Adr_NX56_xpic_timer_xpic_timer_systime_uc_s,	0x101408C0
 .equ Adr_NX56_xpic_timer_systime_uc_s           ,	0x101408C0

 .equ MSK_NX56_xpic_timer_systime_uc_s_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_systime_uc_s_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_systime_uc_ns
@ => xPIC_TIMER lower SYSTIME_UC register
@    To allow consistent values of systime_uc_s and systime_uc_ns, lower bits of systime_uc is latched to systime_uc_ns, when systime_uc_s is read.
@    If no systime_uc_s is read before (e.g. at 2nd read access of systime_uc_ns), the actual value of systime_uc_ns is read.
@    This register should be dedicated to accesses via xPIC.
@    ARM software should access systime_uc via arm_timer_systime_uc_ns.
@    Host software should access systime_uc via DPM at systime_uc_ns.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_systime_uc_ns       ,	0x00000044
 .equ Adr_NX56_xpic_timer_xpic_timer_systime_uc_ns,	0x101408C4
 .equ Adr_NX56_xpic_timer_systime_uc_ns           ,	0x101408C4

 .equ MSK_NX56_xpic_timer_systime_uc_ns_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_systime_uc_ns_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_timer_compare_systime_uc_s_value
@ => xPIC_TIMER SYSTIME_UC sec compare register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_timer_compare_systime_uc_s_value       ,	0x00000048
 .equ Adr_NX56_xpic_timer_xpic_timer_compare_systime_uc_s_value,	0x101408C8
 .equ Adr_NX56_xpic_timer_compare_systime_uc_s_value           ,	0x101408C8

 .equ MSK_NX56_xpic_timer_compare_systime_uc_s_value_val,	0xffffffff
 .equ SRT_NX56_xpic_timer_compare_systime_uc_s_value_val,	0


@ =====================================================================
@
@ Area of xpic_vic
@
@ =====================================================================

 .equ Addr_NX56_xpic_vic, 0x10140900

@ ---------------------------------------------------------------------
@ Register xpic_vic_config
@ => XPIC VIC Configuration register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_config     ,	0x00000000
 .equ Adr_NX56_xpic_vic_xpic_vic_config,	0x10140900
 .equ Adr_NX56_xpic_vic_config         ,	0x10140900

 .equ MSK_NX56_xpic_vic_config_enable,	0x00000001
 .equ SRT_NX56_xpic_vic_config_enable,	0
 .equ MSK_NX56_xpic_vic_config_table ,	0x00000002
 .equ SRT_NX56_xpic_vic_config_table ,	1

@ ---------------------------------------------------------------------
@ Register xpic_vic_raw_intr0
@ => XPIC VIC Raw0 interrupt status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_raw_intr0     ,	0x00000004
 .equ Adr_NX56_xpic_vic_xpic_vic_raw_intr0,	0x10140904
 .equ Adr_NX56_xpic_vic_raw_intr0         ,	0x10140904

 .equ MSK_NX56_xpic_vic_raw_intr0_sw0       ,	0x00000001
 .equ SRT_NX56_xpic_vic_raw_intr0_sw0       ,	0
 .equ MSK_NX56_xpic_vic_raw_intr0_timer0    ,	0x00000002
 .equ SRT_NX56_xpic_vic_raw_intr0_timer0    ,	1
 .equ MSK_NX56_xpic_vic_raw_intr0_timer1    ,	0x00000004
 .equ SRT_NX56_xpic_vic_raw_intr0_timer1    ,	2
 .equ MSK_NX56_xpic_vic_raw_intr0_gpio_timer,	0x00000008
 .equ SRT_NX56_xpic_vic_raw_intr0_gpio_timer,	3
 .equ MSK_NX56_xpic_vic_raw_intr0_timer2    ,	0x00000010
 .equ SRT_NX56_xpic_vic_raw_intr0_timer2    ,	4
 .equ MSK_NX56_xpic_vic_raw_intr0_systime_s ,	0x00000020
 .equ SRT_NX56_xpic_vic_raw_intr0_systime_s ,	5
 .equ MSK_NX56_xpic_vic_raw_intr0_gpio31    ,	0x00000040
 .equ SRT_NX56_xpic_vic_raw_intr0_gpio31    ,	6
 .equ MSK_NX56_xpic_vic_raw_intr0_watchdog  ,	0x00000080
 .equ SRT_NX56_xpic_vic_raw_intr0_watchdog  ,	7
 .equ MSK_NX56_xpic_vic_raw_intr0_uart0     ,	0x00000100
 .equ SRT_NX56_xpic_vic_raw_intr0_uart0     ,	8
 .equ MSK_NX56_xpic_vic_raw_intr0_uart1     ,	0x00000200
 .equ SRT_NX56_xpic_vic_raw_intr0_uart1     ,	9
 .equ MSK_NX56_xpic_vic_raw_intr0_uart2     ,	0x00000400
 .equ SRT_NX56_xpic_vic_raw_intr0_uart2     ,	10
 .equ MSK_NX56_xpic_vic_raw_intr0_usb       ,	0x00000800
 .equ SRT_NX56_xpic_vic_raw_intr0_usb       ,	11
 .equ MSK_NX56_xpic_vic_raw_intr0_spi       ,	0x00001000
 .equ SRT_NX56_xpic_vic_raw_intr0_spi       ,	12
 .equ MSK_NX56_xpic_vic_raw_intr0_i2c       ,	0x00002000
 .equ SRT_NX56_xpic_vic_raw_intr0_i2c       ,	13
 .equ MSK_NX56_xpic_vic_raw_intr0_reserved14,	0x00004000
 .equ SRT_NX56_xpic_vic_raw_intr0_reserved14,	14
 .equ MSK_NX56_xpic_vic_raw_intr0_hif       ,	0x00008000
 .equ SRT_NX56_xpic_vic_raw_intr0_hif       ,	15
 .equ MSK_NX56_xpic_vic_raw_intr0_gpio      ,	0x00010000
 .equ SRT_NX56_xpic_vic_raw_intr0_gpio      ,	16
 .equ MSK_NX56_xpic_vic_raw_intr0_com0      ,	0x00020000
 .equ SRT_NX56_xpic_vic_raw_intr0_com0      ,	17
 .equ MSK_NX56_xpic_vic_raw_intr0_com1      ,	0x00040000
 .equ SRT_NX56_xpic_vic_raw_intr0_com1      ,	18
 .equ MSK_NX56_xpic_vic_raw_intr0_com2      ,	0x00080000
 .equ SRT_NX56_xpic_vic_raw_intr0_com2      ,	19
 .equ MSK_NX56_xpic_vic_raw_intr0_com3      ,	0x00100000
 .equ SRT_NX56_xpic_vic_raw_intr0_com3      ,	20
 .equ MSK_NX56_xpic_vic_raw_intr0_msync0    ,	0x00200000
 .equ SRT_NX56_xpic_vic_raw_intr0_msync0    ,	21
 .equ MSK_NX56_xpic_vic_raw_intr0_msync1    ,	0x00400000
 .equ SRT_NX56_xpic_vic_raw_intr0_msync1    ,	22
 .equ MSK_NX56_xpic_vic_raw_intr0_msync2    ,	0x00800000
 .equ SRT_NX56_xpic_vic_raw_intr0_msync2    ,	23
 .equ MSK_NX56_xpic_vic_raw_intr0_msync3    ,	0x01000000
 .equ SRT_NX56_xpic_vic_raw_intr0_msync3    ,	24
 .equ MSK_NX56_xpic_vic_raw_intr0_int_phy   ,	0x02000000
 .equ SRT_NX56_xpic_vic_raw_intr0_int_phy   ,	25
 .equ MSK_NX56_xpic_vic_raw_intr0_sysstate  ,	0x04000000
 .equ SRT_NX56_xpic_vic_raw_intr0_sysstate  ,	26
 .equ MSK_NX56_xpic_vic_raw_intr0_dmac      ,	0x08000000
 .equ SRT_NX56_xpic_vic_raw_intr0_dmac      ,	27
 .equ MSK_NX56_xpic_vic_raw_intr0_trigger_lt,	0x10000000
 .equ SRT_NX56_xpic_vic_raw_intr0_trigger_lt,	28
 .equ MSK_NX56_xpic_vic_raw_intr0_can       ,	0x20000000
 .equ SRT_NX56_xpic_vic_raw_intr0_can       ,	29
 .equ MSK_NX56_xpic_vic_raw_intr0_osac      ,	0x40000000
 .equ SRT_NX56_xpic_vic_raw_intr0_osac      ,	30
 .equ MSK_NX56_xpic_vic_raw_intr0_reserved31,	0x80000000
 .equ SRT_NX56_xpic_vic_raw_intr0_reserved31,	31

@ ---------------------------------------------------------------------
@ Register xpic_vic_raw_intr1
@ => XPIC VIC Raw1 interrupt status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_raw_intr1     ,	0x00000008
 .equ Adr_NX56_xpic_vic_xpic_vic_raw_intr1,	0x10140908
 .equ Adr_NX56_xpic_vic_raw_intr1         ,	0x10140908

 .equ MSK_NX56_xpic_vic_raw_intr1_gpio7         ,	0x00000001
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio7         ,	0
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio8         ,	0x00000002
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio8         ,	1
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio9         ,	0x00000004
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio9         ,	2
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio10        ,	0x00000008
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio10        ,	3
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio11        ,	0x00000010
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio11        ,	4
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio12        ,	0x00000020
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio12        ,	5
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio13        ,	0x00000040
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio13        ,	6
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio14        ,	0x00000080
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio14        ,	7
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio15        ,	0x00000100
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio15        ,	8
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio16        ,	0x00000200
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio16        ,	9
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio_timer2   ,	0x00000400
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio_timer2   ,	10
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio_timer3   ,	0x00000800
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio_timer3   ,	11
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio_timer4   ,	0x00001000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio_timer4   ,	12
 .equ MSK_NX56_xpic_vic_raw_intr1_spi0          ,	0x00002000
 .equ SRT_NX56_xpic_vic_raw_intr1_spi0          ,	13
 .equ MSK_NX56_xpic_vic_raw_intr1_spi1          ,	0x00004000
 .equ SRT_NX56_xpic_vic_raw_intr1_spi1          ,	14
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio_timer0   ,	0x00008000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio_timer0   ,	15
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio_timer1   ,	0x00010000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio_timer1   ,	16
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio0         ,	0x00020000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio0         ,	17
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio1         ,	0x00040000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio1         ,	18
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio2         ,	0x00080000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio2         ,	19
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio3         ,	0x00100000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio3         ,	20
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio4         ,	0x00200000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio4         ,	21
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio5         ,	0x00400000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio5         ,	22
 .equ MSK_NX56_xpic_vic_raw_intr1_gpio6         ,	0x00800000
 .equ SRT_NX56_xpic_vic_raw_intr1_gpio6         ,	23
 .equ MSK_NX56_xpic_vic_raw_intr1_reserved24    ,	0x01000000
 .equ SRT_NX56_xpic_vic_raw_intr1_reserved24    ,	24
 .equ MSK_NX56_xpic_vic_raw_intr1_reserved25    ,	0x02000000
 .equ SRT_NX56_xpic_vic_raw_intr1_reserved25    ,	25
 .equ MSK_NX56_xpic_vic_raw_intr1_reserved26    ,	0x04000000
 .equ SRT_NX56_xpic_vic_raw_intr1_reserved26    ,	26
 .equ MSK_NX56_xpic_vic_raw_intr1_reserved27    ,	0x08000000
 .equ SRT_NX56_xpic_vic_raw_intr1_reserved27    ,	27
 .equ MSK_NX56_xpic_vic_raw_intr1_eth           ,	0x10000000
 .equ SRT_NX56_xpic_vic_raw_intr1_eth           ,	28
 .equ MSK_NX56_xpic_vic_raw_intr1_osac_nfifo    ,	0x20000000
 .equ SRT_NX56_xpic_vic_raw_intr1_osac_nfifo    ,	29
 .equ MSK_NX56_xpic_vic_raw_intr1_osac_scheduler,	0x40000000
 .equ SRT_NX56_xpic_vic_raw_intr1_osac_scheduler,	30
 .equ MSK_NX56_xpic_vic_raw_intr1_misalign      ,	0x80000000
 .equ SRT_NX56_xpic_vic_raw_intr1_misalign      ,	31

@ ---------------------------------------------------------------------
@ Register xpic_vic_softint0_set
@ => XPIC VIC Software0 interrupt set register
@    read status
@    write (1) set
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_softint0_set     ,	0x0000000C
 .equ Adr_NX56_xpic_vic_xpic_vic_softint0_set,	0x1014090C
 .equ Adr_NX56_xpic_vic_softint0_set         ,	0x1014090C

 .equ MSK_NX56_xpic_vic_softint0_set_sw0       ,	0x00000001
 .equ SRT_NX56_xpic_vic_softint0_set_sw0       ,	0
 .equ MSK_NX56_xpic_vic_softint0_set_timer0    ,	0x00000002
 .equ SRT_NX56_xpic_vic_softint0_set_timer0    ,	1
 .equ MSK_NX56_xpic_vic_softint0_set_timer1    ,	0x00000004
 .equ SRT_NX56_xpic_vic_softint0_set_timer1    ,	2
 .equ MSK_NX56_xpic_vic_softint0_set_gpio_timer,	0x00000008
 .equ SRT_NX56_xpic_vic_softint0_set_gpio_timer,	3
 .equ MSK_NX56_xpic_vic_softint0_set_timer2    ,	0x00000010
 .equ SRT_NX56_xpic_vic_softint0_set_timer2    ,	4
 .equ MSK_NX56_xpic_vic_softint0_set_systime_s ,	0x00000020
 .equ SRT_NX56_xpic_vic_softint0_set_systime_s ,	5
 .equ MSK_NX56_xpic_vic_softint0_set_gpio31    ,	0x00000040
 .equ SRT_NX56_xpic_vic_softint0_set_gpio31    ,	6
 .equ MSK_NX56_xpic_vic_softint0_set_watchdog  ,	0x00000080
 .equ SRT_NX56_xpic_vic_softint0_set_watchdog  ,	7
 .equ MSK_NX56_xpic_vic_softint0_set_uart0     ,	0x00000100
 .equ SRT_NX56_xpic_vic_softint0_set_uart0     ,	8
 .equ MSK_NX56_xpic_vic_softint0_set_uart1     ,	0x00000200
 .equ SRT_NX56_xpic_vic_softint0_set_uart1     ,	9
 .equ MSK_NX56_xpic_vic_softint0_set_uart2     ,	0x00000400
 .equ SRT_NX56_xpic_vic_softint0_set_uart2     ,	10
 .equ MSK_NX56_xpic_vic_softint0_set_usb       ,	0x00000800
 .equ SRT_NX56_xpic_vic_softint0_set_usb       ,	11
 .equ MSK_NX56_xpic_vic_softint0_set_spi       ,	0x00001000
 .equ SRT_NX56_xpic_vic_softint0_set_spi       ,	12
 .equ MSK_NX56_xpic_vic_softint0_set_i2c       ,	0x00002000
 .equ SRT_NX56_xpic_vic_softint0_set_i2c       ,	13
 .equ MSK_NX56_xpic_vic_softint0_set_reserved14,	0x00004000
 .equ SRT_NX56_xpic_vic_softint0_set_reserved14,	14
 .equ MSK_NX56_xpic_vic_softint0_set_hif       ,	0x00008000
 .equ SRT_NX56_xpic_vic_softint0_set_hif       ,	15
 .equ MSK_NX56_xpic_vic_softint0_set_gpio      ,	0x00010000
 .equ SRT_NX56_xpic_vic_softint0_set_gpio      ,	16
 .equ MSK_NX56_xpic_vic_softint0_set_com0      ,	0x00020000
 .equ SRT_NX56_xpic_vic_softint0_set_com0      ,	17
 .equ MSK_NX56_xpic_vic_softint0_set_com1      ,	0x00040000
 .equ SRT_NX56_xpic_vic_softint0_set_com1      ,	18
 .equ MSK_NX56_xpic_vic_softint0_set_com2      ,	0x00080000
 .equ SRT_NX56_xpic_vic_softint0_set_com2      ,	19
 .equ MSK_NX56_xpic_vic_softint0_set_com3      ,	0x00100000
 .equ SRT_NX56_xpic_vic_softint0_set_com3      ,	20
 .equ MSK_NX56_xpic_vic_softint0_set_msync0    ,	0x00200000
 .equ SRT_NX56_xpic_vic_softint0_set_msync0    ,	21
 .equ MSK_NX56_xpic_vic_softint0_set_msync1    ,	0x00400000
 .equ SRT_NX56_xpic_vic_softint0_set_msync1    ,	22
 .equ MSK_NX56_xpic_vic_softint0_set_msync2    ,	0x00800000
 .equ SRT_NX56_xpic_vic_softint0_set_msync2    ,	23
 .equ MSK_NX56_xpic_vic_softint0_set_msync3    ,	0x01000000
 .equ SRT_NX56_xpic_vic_softint0_set_msync3    ,	24
 .equ MSK_NX56_xpic_vic_softint0_set_int_phy   ,	0x02000000
 .equ SRT_NX56_xpic_vic_softint0_set_int_phy   ,	25
 .equ MSK_NX56_xpic_vic_softint0_set_sysstate  ,	0x04000000
 .equ SRT_NX56_xpic_vic_softint0_set_sysstate  ,	26
 .equ MSK_NX56_xpic_vic_softint0_set_dmac      ,	0x08000000
 .equ SRT_NX56_xpic_vic_softint0_set_dmac      ,	27
 .equ MSK_NX56_xpic_vic_softint0_set_trigger_lt,	0x10000000
 .equ SRT_NX56_xpic_vic_softint0_set_trigger_lt,	28
 .equ MSK_NX56_xpic_vic_softint0_set_can       ,	0x20000000
 .equ SRT_NX56_xpic_vic_softint0_set_can       ,	29
 .equ MSK_NX56_xpic_vic_softint0_set_osac      ,	0x40000000
 .equ SRT_NX56_xpic_vic_softint0_set_osac      ,	30
 .equ MSK_NX56_xpic_vic_softint0_set_reserved31,	0x80000000
 .equ SRT_NX56_xpic_vic_softint0_set_reserved31,	31

@ ---------------------------------------------------------------------
@ Register xpic_vic_softint1_set
@ => XPIC VIC Software1 interrupt set register
@    read status
@    write (1) set
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_softint1_set     ,	0x00000010
 .equ Adr_NX56_xpic_vic_xpic_vic_softint1_set,	0x10140910
 .equ Adr_NX56_xpic_vic_softint1_set         ,	0x10140910

 .equ MSK_NX56_xpic_vic_softint1_set_gpio7         ,	0x00000001
 .equ SRT_NX56_xpic_vic_softint1_set_gpio7         ,	0
 .equ MSK_NX56_xpic_vic_softint1_set_gpio8         ,	0x00000002
 .equ SRT_NX56_xpic_vic_softint1_set_gpio8         ,	1
 .equ MSK_NX56_xpic_vic_softint1_set_gpio9         ,	0x00000004
 .equ SRT_NX56_xpic_vic_softint1_set_gpio9         ,	2
 .equ MSK_NX56_xpic_vic_softint1_set_gpio10        ,	0x00000008
 .equ SRT_NX56_xpic_vic_softint1_set_gpio10        ,	3
 .equ MSK_NX56_xpic_vic_softint1_set_gpio11        ,	0x00000010
 .equ SRT_NX56_xpic_vic_softint1_set_gpio11        ,	4
 .equ MSK_NX56_xpic_vic_softint1_set_gpio12        ,	0x00000020
 .equ SRT_NX56_xpic_vic_softint1_set_gpio12        ,	5
 .equ MSK_NX56_xpic_vic_softint1_set_gpio13        ,	0x00000040
 .equ SRT_NX56_xpic_vic_softint1_set_gpio13        ,	6
 .equ MSK_NX56_xpic_vic_softint1_set_gpio14        ,	0x00000080
 .equ SRT_NX56_xpic_vic_softint1_set_gpio14        ,	7
 .equ MSK_NX56_xpic_vic_softint1_set_gpio15        ,	0x00000100
 .equ SRT_NX56_xpic_vic_softint1_set_gpio15        ,	8
 .equ MSK_NX56_xpic_vic_softint1_set_gpio16        ,	0x00000200
 .equ SRT_NX56_xpic_vic_softint1_set_gpio16        ,	9
 .equ MSK_NX56_xpic_vic_softint1_set_gpio_timer2   ,	0x00000400
 .equ SRT_NX56_xpic_vic_softint1_set_gpio_timer2   ,	10
 .equ MSK_NX56_xpic_vic_softint1_set_gpio_timer3   ,	0x00000800
 .equ SRT_NX56_xpic_vic_softint1_set_gpio_timer3   ,	11
 .equ MSK_NX56_xpic_vic_softint1_set_gpio_timer4   ,	0x00001000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio_timer4   ,	12
 .equ MSK_NX56_xpic_vic_softint1_set_spi0          ,	0x00002000
 .equ SRT_NX56_xpic_vic_softint1_set_spi0          ,	13
 .equ MSK_NX56_xpic_vic_softint1_set_spi1          ,	0x00004000
 .equ SRT_NX56_xpic_vic_softint1_set_spi1          ,	14
 .equ MSK_NX56_xpic_vic_softint1_set_gpio_timer0   ,	0x00008000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio_timer0   ,	15
 .equ MSK_NX56_xpic_vic_softint1_set_gpio_timer1   ,	0x00010000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio_timer1   ,	16
 .equ MSK_NX56_xpic_vic_softint1_set_gpio0         ,	0x00020000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio0         ,	17
 .equ MSK_NX56_xpic_vic_softint1_set_gpio1         ,	0x00040000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio1         ,	18
 .equ MSK_NX56_xpic_vic_softint1_set_gpio2         ,	0x00080000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio2         ,	19
 .equ MSK_NX56_xpic_vic_softint1_set_gpio3         ,	0x00100000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio3         ,	20
 .equ MSK_NX56_xpic_vic_softint1_set_gpio4         ,	0x00200000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio4         ,	21
 .equ MSK_NX56_xpic_vic_softint1_set_gpio5         ,	0x00400000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio5         ,	22
 .equ MSK_NX56_xpic_vic_softint1_set_gpio6         ,	0x00800000
 .equ SRT_NX56_xpic_vic_softint1_set_gpio6         ,	23
 .equ MSK_NX56_xpic_vic_softint1_set_reserved24    ,	0x01000000
 .equ SRT_NX56_xpic_vic_softint1_set_reserved24    ,	24
 .equ MSK_NX56_xpic_vic_softint1_set_reserved25    ,	0x02000000
 .equ SRT_NX56_xpic_vic_softint1_set_reserved25    ,	25
 .equ MSK_NX56_xpic_vic_softint1_set_reserved26    ,	0x04000000
 .equ SRT_NX56_xpic_vic_softint1_set_reserved26    ,	26
 .equ MSK_NX56_xpic_vic_softint1_set_reserved27    ,	0x08000000
 .equ SRT_NX56_xpic_vic_softint1_set_reserved27    ,	27
 .equ MSK_NX56_xpic_vic_softint1_set_eth           ,	0x10000000
 .equ SRT_NX56_xpic_vic_softint1_set_eth           ,	28
 .equ MSK_NX56_xpic_vic_softint1_set_osac_nfifo    ,	0x20000000
 .equ SRT_NX56_xpic_vic_softint1_set_osac_nfifo    ,	29
 .equ MSK_NX56_xpic_vic_softint1_set_osac_scheduler,	0x40000000
 .equ SRT_NX56_xpic_vic_softint1_set_osac_scheduler,	30
 .equ MSK_NX56_xpic_vic_softint1_set_misalign      ,	0x80000000
 .equ SRT_NX56_xpic_vic_softint1_set_misalign      ,	31

@ ---------------------------------------------------------------------
@ Register xpic_vic_softint0_reset
@ => XPIC VIC Software0 interrupt reset register
@    read status
@    write (1) reset
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_softint0_reset     ,	0x00000014
 .equ Adr_NX56_xpic_vic_xpic_vic_softint0_reset,	0x10140914
 .equ Adr_NX56_xpic_vic_softint0_reset         ,	0x10140914

 .equ MSK_NX56_xpic_vic_softint0_reset_sw0       ,	0x00000001
 .equ SRT_NX56_xpic_vic_softint0_reset_sw0       ,	0
 .equ MSK_NX56_xpic_vic_softint0_reset_timer0    ,	0x00000002
 .equ SRT_NX56_xpic_vic_softint0_reset_timer0    ,	1
 .equ MSK_NX56_xpic_vic_softint0_reset_timer1    ,	0x00000004
 .equ SRT_NX56_xpic_vic_softint0_reset_timer1    ,	2
 .equ MSK_NX56_xpic_vic_softint0_reset_gpio_timer,	0x00000008
 .equ SRT_NX56_xpic_vic_softint0_reset_gpio_timer,	3
 .equ MSK_NX56_xpic_vic_softint0_reset_timer2    ,	0x00000010
 .equ SRT_NX56_xpic_vic_softint0_reset_timer2    ,	4
 .equ MSK_NX56_xpic_vic_softint0_reset_systime_s ,	0x00000020
 .equ SRT_NX56_xpic_vic_softint0_reset_systime_s ,	5
 .equ MSK_NX56_xpic_vic_softint0_reset_gpio31    ,	0x00000040
 .equ SRT_NX56_xpic_vic_softint0_reset_gpio31    ,	6
 .equ MSK_NX56_xpic_vic_softint0_reset_watchdog  ,	0x00000080
 .equ SRT_NX56_xpic_vic_softint0_reset_watchdog  ,	7
 .equ MSK_NX56_xpic_vic_softint0_reset_uart0     ,	0x00000100
 .equ SRT_NX56_xpic_vic_softint0_reset_uart0     ,	8
 .equ MSK_NX56_xpic_vic_softint0_reset_uart1     ,	0x00000200
 .equ SRT_NX56_xpic_vic_softint0_reset_uart1     ,	9
 .equ MSK_NX56_xpic_vic_softint0_reset_uart2     ,	0x00000400
 .equ SRT_NX56_xpic_vic_softint0_reset_uart2     ,	10
 .equ MSK_NX56_xpic_vic_softint0_reset_usb       ,	0x00000800
 .equ SRT_NX56_xpic_vic_softint0_reset_usb       ,	11
 .equ MSK_NX56_xpic_vic_softint0_reset_spi       ,	0x00001000
 .equ SRT_NX56_xpic_vic_softint0_reset_spi       ,	12
 .equ MSK_NX56_xpic_vic_softint0_reset_i2c       ,	0x00002000
 .equ SRT_NX56_xpic_vic_softint0_reset_i2c       ,	13
 .equ MSK_NX56_xpic_vic_softint0_reset_reserved14,	0x00004000
 .equ SRT_NX56_xpic_vic_softint0_reset_reserved14,	14
 .equ MSK_NX56_xpic_vic_softint0_reset_hif       ,	0x00008000
 .equ SRT_NX56_xpic_vic_softint0_reset_hif       ,	15
 .equ MSK_NX56_xpic_vic_softint0_reset_gpio      ,	0x00010000
 .equ SRT_NX56_xpic_vic_softint0_reset_gpio      ,	16
 .equ MSK_NX56_xpic_vic_softint0_reset_com0      ,	0x00020000
 .equ SRT_NX56_xpic_vic_softint0_reset_com0      ,	17
 .equ MSK_NX56_xpic_vic_softint0_reset_com1      ,	0x00040000
 .equ SRT_NX56_xpic_vic_softint0_reset_com1      ,	18
 .equ MSK_NX56_xpic_vic_softint0_reset_com2      ,	0x00080000
 .equ SRT_NX56_xpic_vic_softint0_reset_com2      ,	19
 .equ MSK_NX56_xpic_vic_softint0_reset_com3      ,	0x00100000
 .equ SRT_NX56_xpic_vic_softint0_reset_com3      ,	20
 .equ MSK_NX56_xpic_vic_softint0_reset_msync0    ,	0x00200000
 .equ SRT_NX56_xpic_vic_softint0_reset_msync0    ,	21
 .equ MSK_NX56_xpic_vic_softint0_reset_msync1    ,	0x00400000
 .equ SRT_NX56_xpic_vic_softint0_reset_msync1    ,	22
 .equ MSK_NX56_xpic_vic_softint0_reset_msync2    ,	0x00800000
 .equ SRT_NX56_xpic_vic_softint0_reset_msync2    ,	23
 .equ MSK_NX56_xpic_vic_softint0_reset_msync3    ,	0x01000000
 .equ SRT_NX56_xpic_vic_softint0_reset_msync3    ,	24
 .equ MSK_NX56_xpic_vic_softint0_reset_int_phy   ,	0x02000000
 .equ SRT_NX56_xpic_vic_softint0_reset_int_phy   ,	25
 .equ MSK_NX56_xpic_vic_softint0_reset_sysstate  ,	0x04000000
 .equ SRT_NX56_xpic_vic_softint0_reset_sysstate  ,	26
 .equ MSK_NX56_xpic_vic_softint0_reset_dmac      ,	0x08000000
 .equ SRT_NX56_xpic_vic_softint0_reset_dmac      ,	27
 .equ MSK_NX56_xpic_vic_softint0_reset_trigger_lt,	0x10000000
 .equ SRT_NX56_xpic_vic_softint0_reset_trigger_lt,	28
 .equ MSK_NX56_xpic_vic_softint0_reset_can       ,	0x20000000
 .equ SRT_NX56_xpic_vic_softint0_reset_can       ,	29
 .equ MSK_NX56_xpic_vic_softint0_reset_osac      ,	0x40000000
 .equ SRT_NX56_xpic_vic_softint0_reset_osac      ,	30
 .equ MSK_NX56_xpic_vic_softint0_reset_reserved31,	0x80000000
 .equ SRT_NX56_xpic_vic_softint0_reset_reserved31,	31

@ ---------------------------------------------------------------------
@ Register xpic_vic_softint1_reset
@ => XPIC VIC Software1 interrupt reset register
@    read status
@    write (1) reset
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_softint1_reset     ,	0x00000018
 .equ Adr_NX56_xpic_vic_xpic_vic_softint1_reset,	0x10140918
 .equ Adr_NX56_xpic_vic_softint1_reset         ,	0x10140918

 .equ MSK_NX56_xpic_vic_softint1_reset_gpio7         ,	0x00000001
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio7         ,	0
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio8         ,	0x00000002
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio8         ,	1
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio9         ,	0x00000004
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio9         ,	2
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio10        ,	0x00000008
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio10        ,	3
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio11        ,	0x00000010
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio11        ,	4
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio12        ,	0x00000020
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio12        ,	5
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio13        ,	0x00000040
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio13        ,	6
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio14        ,	0x00000080
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio14        ,	7
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio15        ,	0x00000100
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio15        ,	8
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio16        ,	0x00000200
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio16        ,	9
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio_timer2   ,	0x00000400
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio_timer2   ,	10
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio_timer3   ,	0x00000800
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio_timer3   ,	11
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio_timer4   ,	0x00001000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio_timer4   ,	12
 .equ MSK_NX56_xpic_vic_softint1_reset_spi0          ,	0x00002000
 .equ SRT_NX56_xpic_vic_softint1_reset_spi0          ,	13
 .equ MSK_NX56_xpic_vic_softint1_reset_spi1          ,	0x00004000
 .equ SRT_NX56_xpic_vic_softint1_reset_spi1          ,	14
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio_timer0   ,	0x00008000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio_timer0   ,	15
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio_timer1   ,	0x00010000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio_timer1   ,	16
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio0         ,	0x00020000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio0         ,	17
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio1         ,	0x00040000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio1         ,	18
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio2         ,	0x00080000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio2         ,	19
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio3         ,	0x00100000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio3         ,	20
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio4         ,	0x00200000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio4         ,	21
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio5         ,	0x00400000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio5         ,	22
 .equ MSK_NX56_xpic_vic_softint1_reset_gpio6         ,	0x00800000
 .equ SRT_NX56_xpic_vic_softint1_reset_gpio6         ,	23
 .equ MSK_NX56_xpic_vic_softint1_reset_reserved24    ,	0x01000000
 .equ SRT_NX56_xpic_vic_softint1_reset_reserved24    ,	24
 .equ MSK_NX56_xpic_vic_softint1_reset_reserved25    ,	0x02000000
 .equ SRT_NX56_xpic_vic_softint1_reset_reserved25    ,	25
 .equ MSK_NX56_xpic_vic_softint1_reset_reserved26    ,	0x04000000
 .equ SRT_NX56_xpic_vic_softint1_reset_reserved26    ,	26
 .equ MSK_NX56_xpic_vic_softint1_reset_reserved27    ,	0x08000000
 .equ SRT_NX56_xpic_vic_softint1_reset_reserved27    ,	27
 .equ MSK_NX56_xpic_vic_softint1_reset_eth           ,	0x10000000
 .equ SRT_NX56_xpic_vic_softint1_reset_eth           ,	28
 .equ MSK_NX56_xpic_vic_softint1_reset_osac_nfifo    ,	0x20000000
 .equ SRT_NX56_xpic_vic_softint1_reset_osac_nfifo    ,	29
 .equ MSK_NX56_xpic_vic_softint1_reset_osac_scheduler,	0x40000000
 .equ SRT_NX56_xpic_vic_softint1_reset_osac_scheduler,	30
 .equ MSK_NX56_xpic_vic_softint1_reset_misalign      ,	0x80000000
 .equ SRT_NX56_xpic_vic_softint1_reset_misalign      ,	31

@ ---------------------------------------------------------------------
@ Register xpic_vic_fiq_addr
@ => XPIC VIC FIQ Vector address 0 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_fiq_addr     ,	0x0000001C
 .equ Adr_NX56_xpic_vic_xpic_vic_fiq_addr,	0x1014091C
 .equ Adr_NX56_xpic_vic_fiq_addr         ,	0x1014091C

 .equ MSK_NX56_xpic_vic_fiq_addr_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_fiq_addr_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_irq_addr
@ => XPIC VIC normal IRQ address register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_irq_addr     ,	0x00000020
 .equ Adr_NX56_xpic_vic_xpic_vic_irq_addr,	0x10140920
 .equ Adr_NX56_xpic_vic_irq_addr         ,	0x10140920

 .equ MSK_NX56_xpic_vic_irq_addr_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_irq_addr_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_vector_addr
@ => XPIC VIC IRQ Vector address
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vector_addr     ,	0x00000024
 .equ Adr_NX56_xpic_vic_xpic_vic_vector_addr,	0x10140924
 .equ Adr_NX56_xpic_vic_vector_addr         ,	0x10140924

 .equ MSK_NX56_xpic_vic_vector_addr_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_vector_addr_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_table_base_addr
@ => XPIC VIC IRQ TABLE ADDRESS BASE POINTER
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_table_base_addr     ,	0x00000028
 .equ Adr_NX56_xpic_vic_xpic_vic_table_base_addr,	0x10140928
 .equ Adr_NX56_xpic_vic_table_base_addr         ,	0x10140928

 .equ MSK_NX56_xpic_vic_table_base_addr_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_table_base_addr_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_fiq_vect_config
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_fiq_vect_config     ,	0x0000002C
 .equ Adr_NX56_xpic_vic_xpic_vic_fiq_vect_config,	0x1014092C
 .equ Adr_NX56_xpic_vic_fiq_vect_config         ,	0x1014092C

 .equ MSK_NX56_xpic_vic_fiq_vect_config_int_source        ,	0x0000003f
 .equ SRT_NX56_xpic_vic_fiq_vect_config_int_source        ,	0
 .equ MSK_NX56_xpic_vic_fiq_vect_config_enable            ,	0x00000040
 .equ SRT_NX56_xpic_vic_fiq_vect_config_enable            ,	6
 .equ MSK_NX56_xpic_vic_fiq_vect_config_select_fiq_default,	0x00000080
 .equ SRT_NX56_xpic_vic_fiq_vect_config_select_fiq_default,	7

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config0
@ => highest priority
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config0     ,	0x00000030
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config0,	0x10140930
 .equ Adr_NX56_xpic_vic_vect_config0         ,	0x10140930

 .equ MSK_NX56_xpic_vic_vect_config0_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config0_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config0_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config0_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config1
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config1     ,	0x00000034
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config1,	0x10140934
 .equ Adr_NX56_xpic_vic_vect_config1         ,	0x10140934

 .equ MSK_NX56_xpic_vic_vect_config1_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config1_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config1_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config1_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config2
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config2     ,	0x00000038
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config2,	0x10140938
 .equ Adr_NX56_xpic_vic_vect_config2         ,	0x10140938

 .equ MSK_NX56_xpic_vic_vect_config2_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config2_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config2_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config2_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config3
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config3     ,	0x0000003C
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config3,	0x1014093C
 .equ Adr_NX56_xpic_vic_vect_config3         ,	0x1014093C

 .equ MSK_NX56_xpic_vic_vect_config3_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config3_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config3_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config3_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config4
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config4     ,	0x00000040
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config4,	0x10140940
 .equ Adr_NX56_xpic_vic_vect_config4         ,	0x10140940

 .equ MSK_NX56_xpic_vic_vect_config4_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config4_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config4_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config4_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config5
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config5     ,	0x00000044
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config5,	0x10140944
 .equ Adr_NX56_xpic_vic_vect_config5         ,	0x10140944

 .equ MSK_NX56_xpic_vic_vect_config5_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config5_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config5_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config5_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config6
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config6     ,	0x00000048
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config6,	0x10140948
 .equ Adr_NX56_xpic_vic_vect_config6         ,	0x10140948

 .equ MSK_NX56_xpic_vic_vect_config6_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config6_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config6_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config6_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config7
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config7     ,	0x0000004C
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config7,	0x1014094C
 .equ Adr_NX56_xpic_vic_vect_config7         ,	0x1014094C

 .equ MSK_NX56_xpic_vic_vect_config7_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config7_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config7_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config7_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config8
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config8     ,	0x00000050
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config8,	0x10140950
 .equ Adr_NX56_xpic_vic_vect_config8         ,	0x10140950

 .equ MSK_NX56_xpic_vic_vect_config8_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config8_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config8_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config8_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config9
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config9     ,	0x00000054
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config9,	0x10140954
 .equ Adr_NX56_xpic_vic_vect_config9         ,	0x10140954

 .equ MSK_NX56_xpic_vic_vect_config9_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config9_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config9_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config9_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config10
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config10     ,	0x00000058
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config10,	0x10140958
 .equ Adr_NX56_xpic_vic_vect_config10         ,	0x10140958

 .equ MSK_NX56_xpic_vic_vect_config10_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config10_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config10_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config10_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config11
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config11     ,	0x0000005C
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config11,	0x1014095C
 .equ Adr_NX56_xpic_vic_vect_config11         ,	0x1014095C

 .equ MSK_NX56_xpic_vic_vect_config11_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config11_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config11_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config11_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config12
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config12     ,	0x00000060
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config12,	0x10140960
 .equ Adr_NX56_xpic_vic_vect_config12         ,	0x10140960

 .equ MSK_NX56_xpic_vic_vect_config12_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config12_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config12_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config12_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config13
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config13     ,	0x00000064
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config13,	0x10140964
 .equ Adr_NX56_xpic_vic_vect_config13         ,	0x10140964

 .equ MSK_NX56_xpic_vic_vect_config13_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config13_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config13_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config13_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config14
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config14     ,	0x00000068
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config14,	0x10140968
 .equ Adr_NX56_xpic_vic_vect_config14         ,	0x10140968

 .equ MSK_NX56_xpic_vic_vect_config14_int_source,	0x0000003f
 .equ SRT_NX56_xpic_vic_vect_config14_int_source,	0
 .equ MSK_NX56_xpic_vic_vect_config14_enable    ,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config14_enable    ,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_vect_config15
@ => XPIC default interrupt vector, all interrupt sources (wired-OR)
@    select with default interrupt vector register
@    lowest priority
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_vect_config15     ,	0x0000006C
 .equ Adr_NX56_xpic_vic_xpic_vic_vect_config15,	0x1014096C
 .equ Adr_NX56_xpic_vic_vect_config15         ,	0x1014096C

 .equ MSK_NX56_xpic_vic_vect_config15_enable,	0x00000040
 .equ SRT_NX56_xpic_vic_vect_config15_enable,	6

@ ---------------------------------------------------------------------
@ Register xpic_vic_default0
@ => XPIC default interrupt vector select0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_default0     ,	0x00000070
 .equ Adr_NX56_xpic_vic_xpic_vic_default0,	0x10140970
 .equ Adr_NX56_xpic_vic_default0         ,	0x10140970

 .equ MSK_NX56_xpic_vic_default0_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_default0_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_default1
@ => XPIC default interrupt vector select1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_default1     ,	0x00000074
 .equ Adr_NX56_xpic_vic_xpic_vic_default1,	0x10140974
 .equ Adr_NX56_xpic_vic_default1         ,	0x10140974

 .equ MSK_NX56_xpic_vic_default1_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_default1_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_fiq_default0
@ => XPIC default interrupt vector select0 for fiq
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_fiq_default0     ,	0x00000078
 .equ Adr_NX56_xpic_vic_xpic_vic_fiq_default0,	0x10140978
 .equ Adr_NX56_xpic_vic_fiq_default0         ,	0x10140978

 .equ MSK_NX56_xpic_vic_fiq_default0_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_fiq_default0_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_vic_fiq_default1
@ => XPIC default interrupt vector select1 for fiq
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_vic_fiq_default1     ,	0x0000007C
 .equ Adr_NX56_xpic_vic_xpic_vic_fiq_default1,	0x1014097C
 .equ Adr_NX56_xpic_vic_fiq_default1         ,	0x1014097C

 .equ MSK_NX56_xpic_vic_fiq_default1_val,	0xffffffff
 .equ SRT_NX56_xpic_vic_fiq_default1_val,	0


@ =====================================================================
@
@ Area of xpic_wdg
@
@ =====================================================================

 .equ Addr_NX56_xpic_wdg, 0x10140A00

@ ---------------------------------------------------------------------
@ Register xpic_wdg_trig
@ => netX xPIC Watchdog Trigger Register.
@    The watchdog access code is generated by a pseudo random generator.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_trig     ,	0x00000000
 .equ Adr_NX56_xpic_wdg_xpic_wdg_trig,	0x10140A00
 .equ Adr_NX56_xpic_wdg_trig         ,	0x10140A00

 .equ MSK_NX56_xpic_wdg_trig_wdg_access_code      ,	0x000fffff
 .equ SRT_NX56_xpic_wdg_trig_wdg_access_code      ,	0
 .equ MSK_NX56_xpic_wdg_trig_irq_req_watchdog     ,	0x01000000
 .equ SRT_NX56_xpic_wdg_trig_irq_req_watchdog     ,	24
 .equ MSK_NX56_xpic_wdg_trig_wdg_counter_trigger_w,	0x10000000
 .equ SRT_NX56_xpic_wdg_trig_wdg_counter_trigger_w,	28
 .equ MSK_NX56_xpic_wdg_trig_write_enable         ,	0x80000000
 .equ SRT_NX56_xpic_wdg_trig_write_enable         ,	31

@ ---------------------------------------------------------------------
@ Register xpic_wdg_counter
@ => netX xPIC Watchdog Counter Register
@    The counter value is decremented each 10000 system clock cycles.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_counter     ,	0x00000004
 .equ Adr_NX56_xpic_wdg_xpic_wdg_counter,	0x10140A04
 .equ Adr_NX56_xpic_wdg_counter         ,	0x10140A04

 .equ MSK_NX56_xpic_wdg_counter_val,	0x0001ffff
 .equ SRT_NX56_xpic_wdg_counter_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_wdg_xpic_irq_timeout
@ => netX xPIC Watchdog xPIC interrupt timout register:
@    xpic_irq_timeout or arm_irq_timeout must be nonzero to enable watchdog
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_xpic_irq_timeout     ,	0x00000008
 .equ Adr_NX56_xpic_wdg_xpic_wdg_xpic_irq_timeout,	0x10140A08
 .equ Adr_NX56_xpic_wdg_xpic_irq_timeout         ,	0x10140A08

 .equ MSK_NX56_xpic_wdg_xpic_irq_timeout_val,	0x0000ffff
 .equ SRT_NX56_xpic_wdg_xpic_irq_timeout_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_wdg_arm_irq_timeout
@ => netX xPIC Watchdog ARM interrupt timout register:
@    xpic_irq_timeout or arm_irq_timeout must be nonzero to enable watchdog
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_arm_irq_timeout     ,	0x0000000C
 .equ Adr_NX56_xpic_wdg_xpic_wdg_arm_irq_timeout,	0x10140A0C
 .equ Adr_NX56_xpic_wdg_arm_irq_timeout         ,	0x10140A0C

 .equ MSK_NX56_xpic_wdg_arm_irq_timeout_val,	0x0000ffff
 .equ SRT_NX56_xpic_wdg_arm_irq_timeout_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_wdg_irq_raw
@ => Raw interrupt register:
@    Reset by writing 1 to appropriate bit.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_irq_raw     ,	0x00000010
 .equ Adr_NX56_xpic_wdg_xpic_wdg_irq_raw,	0x10140A10
 .equ Adr_NX56_xpic_wdg_irq_raw         ,	0x10140A10

 .equ MSK_NX56_xpic_wdg_irq_raw_wdg_arm_irq,	0x00000001
 .equ SRT_NX56_xpic_wdg_irq_raw_wdg_arm_irq,	0

@ ---------------------------------------------------------------------
@ Register xpic_wdg_irq_masked
@ => xpic_wdg Masked IRQ register:
@    Shows status of masked IRQs (as connected to ARM/xPIC).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_irq_masked     ,	0x00000014
 .equ Adr_NX56_xpic_wdg_xpic_wdg_irq_masked,	0x10140A14
 .equ Adr_NX56_xpic_wdg_irq_masked         ,	0x10140A14

 .equ MSK_NX56_xpic_wdg_irq_masked_wdg_arm_irq,	0x00000001
 .equ SRT_NX56_xpic_wdg_irq_masked_wdg_arm_irq,	0

@ ---------------------------------------------------------------------
@ Register xpic_wdg_irq_msk_set
@ => xpic_wdg interrupt mask enable:
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_xpic_wdg_irq_raw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_irq_msk_set     ,	0x00000018
 .equ Adr_NX56_xpic_wdg_xpic_wdg_irq_msk_set,	0x10140A18
 .equ Adr_NX56_xpic_wdg_irq_msk_set         ,	0x10140A18

 .equ MSK_NX56_xpic_wdg_irq_msk_set_wdg_arm_irq,	0x00000001
 .equ SRT_NX56_xpic_wdg_irq_msk_set_wdg_arm_irq,	0

@ ---------------------------------------------------------------------
@ Register xpic_wdg_irq_msk_reset
@ => xpic_wdg interrupt mask disable:
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_wdg_irq_msk_reset     ,	0x0000001C
 .equ Adr_NX56_xpic_wdg_xpic_wdg_irq_msk_reset,	0x10140A1C
 .equ Adr_NX56_xpic_wdg_irq_msk_reset         ,	0x10140A1C

 .equ MSK_NX56_xpic_wdg_irq_msk_reset_wdg_arm_irq,	0x00000001
 .equ SRT_NX56_xpic_wdg_irq_msk_reset_wdg_arm_irq,	0


@ =====================================================================
@
@ Area of intlogic_sys, intlogic_sys_mirror_hi, intlogic_sys_mirror_buf
@
@ =====================================================================

 .equ Addr_NX56_intlogic_sys, 0x10180000
 .equ Addr_NX56_intlogic_sys_mirror_hi, 0xFFF80000
 .equ Addr_NX56_intlogic_sys_mirror_buf, 0x08180000

@ =====================================================================
@
@ Area of xpic_pram, xpic_dram
@
@ =====================================================================

 .equ Addr_NX56_xpic_pram, 0x10180000
 .equ Addr_NX56_xpic_dram, 0x10280000

@ ---------------------------------------------------------------------
@ Register xpic_ram_start
@ => xPIC program or data RAM (xPIC TCM) start address:
@    Both xPIC TCMs (program and data) are only accessible by other system masters, \
@    if xPIC is not running (xpic_debug-xpic_hold_pc-hold=0).
@    xPIC TCMs are only accessible for configuration and setup of xPIC processor.
@    xPIC TCMs should never be used for data exchange between xPIC and other system-masters.
@    Attention: Accessing xPIC_dram (data-TCM) while xPIC is running might seem to work but \
@    influences communication tasks and HIF acesses and leads to instable system behaviour!
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_ram_start      ,	0x00000000
 .equ Adr_NX56_xpic_pram_xpic_ram_start,	0x10180000
 .equ Adr_NX56_xpic_dram_xpic_ram_start,	0x10280000

@ ---------------------------------------------------------------------
@ Register xpic_ram_end
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_ram_end      ,	0x00001FFC
 .equ Adr_NX56_xpic_pram_xpic_ram_end,	0x10181FFC
 .equ Adr_NX56_xpic_dram_xpic_ram_end,	0x10281FFC


@ =====================================================================
@
@ Area of rpec0_pram, tpec0_pram, rpec1_pram, tpec1_pram, rpec0_dram, tpec0_dram, rpec1_dram, tpec1_dram
@
@ =====================================================================

 .equ Addr_NX56_rpec0_pram, 0x10182000
 .equ Addr_NX56_tpec0_pram, 0x10184000
 .equ Addr_NX56_rpec1_pram, 0x10186000
 .equ Addr_NX56_tpec1_pram, 0x10188000
 .equ Addr_NX56_rpec0_dram, 0x10282000
 .equ Addr_NX56_tpec0_dram, 0x10284000
 .equ Addr_NX56_rpec1_dram, 0x10286000
 .equ Addr_NX56_tpec1_dram, 0x10288000

@ ---------------------------------------------------------------------
@ Register ram_start
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ram_start       ,	0x00000000
 .equ Adr_NX56_rpec0_pram_ram_start,	0x10182000
 .equ Adr_NX56_tpec0_pram_ram_start,	0x10184000
 .equ Adr_NX56_rpec1_pram_ram_start,	0x10186000
 .equ Adr_NX56_tpec1_pram_ram_start,	0x10188000
 .equ Adr_NX56_rpec0_dram_ram_start,	0x10282000
 .equ Adr_NX56_tpec0_dram_ram_start,	0x10284000
 .equ Adr_NX56_rpec1_dram_ram_start,	0x10286000
 .equ Adr_NX56_tpec1_dram_ram_start,	0x10288000

@ ---------------------------------------------------------------------
@ Register ram_end
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ram_end       ,	0x00001FFC
 .equ Adr_NX56_rpec0_pram_ram_end,	0x10183FFC
 .equ Adr_NX56_tpec0_pram_ram_end,	0x10185FFC
 .equ Adr_NX56_rpec1_pram_ram_end,	0x10187FFC
 .equ Adr_NX56_tpec1_pram_ram_end,	0x10189FFC
 .equ Adr_NX56_rpec0_dram_ram_end,	0x10283FFC
 .equ Adr_NX56_tpec0_dram_ram_end,	0x10285FFC
 .equ Adr_NX56_rpec1_dram_ram_end,	0x10287FFC
 .equ Adr_NX56_tpec1_dram_ram_end,	0x10289FFC


@ =====================================================================
@
@ Area of rpu0_ram, tpu0_ram, rpu1_ram, tpu1_ram
@
@ =====================================================================

 .equ Addr_NX56_rpu0_ram, 0x1018A000
 .equ Addr_NX56_tpu0_ram, 0x1018A400
 .equ Addr_NX56_rpu1_ram, 0x1018A800
 .equ Addr_NX56_tpu1_ram, 0x1018AC00

@ ---------------------------------------------------------------------
@ Register xmac_ram_start
@ => xMAC RPU program-RAM start address.
@    The Program-RAM is not addressable for xMAC RPU and TPU !
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_ram_start     ,	0x00000000
 .equ Adr_NX56_rpu0_ram_xmac_ram_start,	0x1018A000
 .equ Adr_NX56_tpu0_ram_xmac_ram_start,	0x1018A400
 .equ Adr_NX56_rpu1_ram_xmac_ram_start,	0x1018A800
 .equ Adr_NX56_tpu1_ram_xmac_ram_start,	0x1018AC00

@ ---------------------------------------------------------------------
@ Register xmac_ram_end
@ => xMAC RPU program-RAM end address.
@    This value is not used by design flow, only for documentation
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_ram_end     ,	0x000003FC
 .equ Adr_NX56_rpu0_ram_xmac_ram_end,	0x1018A3FC
 .equ Adr_NX56_tpu0_ram_xmac_ram_end,	0x1018A7FC
 .equ Adr_NX56_rpu1_ram_xmac_ram_end,	0x1018ABFC
 .equ Adr_NX56_tpu1_ram_xmac_ram_end,	0x1018AFFC


@ =====================================================================
@
@ Area of rpec0_regs, tpec0_regs, rpec1_regs, tpec1_regs
@
@ =====================================================================

 .equ Addr_NX56_rpec0_regs, 0x1018B000
 .equ Addr_NX56_tpec0_regs, 0x1018B100
 .equ Addr_NX56_rpec1_regs, 0x1018B200
 .equ Addr_NX56_tpec1_regs, 0x1018B300

@ ---------------------------------------------------------------------
@ Register xpec_r0
@ => xPEC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r0       ,	0x00000000
 .equ Adr_NX56_rpec0_regs_xpec_r0,	0x1018B000
 .equ Adr_NX56_tpec0_regs_xpec_r0,	0x1018B100
 .equ Adr_NX56_rpec1_regs_xpec_r0,	0x1018B200
 .equ Adr_NX56_tpec1_regs_xpec_r0,	0x1018B300

 .equ MSK_NX56_xpec_r0_r0,	0xffffffff
 .equ SRT_NX56_xpec_r0_r0,	0

@ ---------------------------------------------------------------------
@ Register xpec_r1
@ => xPEC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r1       ,	0x00000004
 .equ Adr_NX56_rpec0_regs_xpec_r1,	0x1018B004
 .equ Adr_NX56_tpec0_regs_xpec_r1,	0x1018B104
 .equ Adr_NX56_rpec1_regs_xpec_r1,	0x1018B204
 .equ Adr_NX56_tpec1_regs_xpec_r1,	0x1018B304

 .equ MSK_NX56_xpec_r1_r1,	0xffffffff
 .equ SRT_NX56_xpec_r1_r1,	0

@ ---------------------------------------------------------------------
@ Register xpec_r2
@ => xPEC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r2       ,	0x00000008
 .equ Adr_NX56_rpec0_regs_xpec_r2,	0x1018B008
 .equ Adr_NX56_tpec0_regs_xpec_r2,	0x1018B108
 .equ Adr_NX56_rpec1_regs_xpec_r2,	0x1018B208
 .equ Adr_NX56_tpec1_regs_xpec_r2,	0x1018B308

 .equ MSK_NX56_xpec_r2_r2,	0xffffffff
 .equ SRT_NX56_xpec_r2_r2,	0

@ ---------------------------------------------------------------------
@ Register xpec_r3
@ => xPEC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r3       ,	0x0000000C
 .equ Adr_NX56_rpec0_regs_xpec_r3,	0x1018B00C
 .equ Adr_NX56_tpec0_regs_xpec_r3,	0x1018B10C
 .equ Adr_NX56_rpec1_regs_xpec_r3,	0x1018B20C
 .equ Adr_NX56_tpec1_regs_xpec_r3,	0x1018B30C

 .equ MSK_NX56_xpec_r3_r3,	0xffffffff
 .equ SRT_NX56_xpec_r3_r3,	0

@ ---------------------------------------------------------------------
@ Register xpec_r4
@ => xPEC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r4       ,	0x00000010
 .equ Adr_NX56_rpec0_regs_xpec_r4,	0x1018B010
 .equ Adr_NX56_tpec0_regs_xpec_r4,	0x1018B110
 .equ Adr_NX56_rpec1_regs_xpec_r4,	0x1018B210
 .equ Adr_NX56_tpec1_regs_xpec_r4,	0x1018B310

 .equ MSK_NX56_xpec_r4_r4,	0xffffffff
 .equ SRT_NX56_xpec_r4_r4,	0

@ ---------------------------------------------------------------------
@ Register xpec_r5
@ => xPEC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r5       ,	0x00000014
 .equ Adr_NX56_rpec0_regs_xpec_r5,	0x1018B014
 .equ Adr_NX56_tpec0_regs_xpec_r5,	0x1018B114
 .equ Adr_NX56_rpec1_regs_xpec_r5,	0x1018B214
 .equ Adr_NX56_tpec1_regs_xpec_r5,	0x1018B314

 .equ MSK_NX56_xpec_r5_r5,	0xffffffff
 .equ SRT_NX56_xpec_r5_r5,	0

@ ---------------------------------------------------------------------
@ Register xpec_r6
@ => xPEC work register for indirect addressing
@    Shared in xPEC fmmusm mode with fmmusm_read_addr_in (w mode).Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC fmmusm mode with sm_read_addr_out (r mode).Register only accessible via rPEC0 and tPEC0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r6       ,	0x00000018
 .equ Adr_NX56_rpec0_regs_xpec_r6,	0x1018B018
 .equ Adr_NX56_tpec0_regs_xpec_r6,	0x1018B118
 .equ Adr_NX56_rpec1_regs_xpec_r6,	0x1018B218
 .equ Adr_NX56_tpec1_regs_xpec_r6,	0x1018B318

 .equ MSK_NX56_xpec_r6_r6,	0xffffffff
 .equ SRT_NX56_xpec_r6_r6,	0

@ ---------------------------------------------------------------------
@ Register xpec_r7
@ => xPEC work register for indirect addressing
@    Shared in xPEC fmmusm mode with fmmusm_write_addr_in (w mode).Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC fmmusm mode with sm_write_addr_out (r mode).Register only accessible via rPEC0 and tPEC0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_r7       ,	0x0000001C
 .equ Adr_NX56_rpec0_regs_xpec_r7,	0x1018B01C
 .equ Adr_NX56_tpec0_regs_xpec_r7,	0x1018B11C
 .equ Adr_NX56_rpec1_regs_xpec_r7,	0x1018B21C
 .equ Adr_NX56_tpec1_regs_xpec_r7,	0x1018B31C

 .equ MSK_NX56_xpec_r7_r7,	0xffffffff
 .equ SRT_NX56_xpec_r7_r7,	0

@ ---------------------------------------------------------------------
@ Register xpec_stat_bits_shared
@ => Shared stat register accessed by all xPECs and all xMACs (with 16 events).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_stat_bits_shared       ,	0x00000020
 .equ Adr_NX56_rpec0_regs_xpec_stat_bits_shared,	0x1018B020
 .equ Adr_NX56_tpec0_regs_xpec_stat_bits_shared,	0x1018B120
 .equ Adr_NX56_rpec1_regs_xpec_stat_bits_shared,	0x1018B220
 .equ Adr_NX56_tpec1_regs_xpec_stat_bits_shared,	0x1018B320

 .equ MSK_NX56_xpec_stat_bits_shared_flags   ,	0x0000ffff
 .equ SRT_NX56_xpec_stat_bits_shared_flags   ,	0
 .equ MSK_NX56_xpec_stat_bits_shared_set_mask,	0xffff0000
 .equ SRT_NX56_xpec_stat_bits_shared_set_mask,	16

@ ---------------------------------------------------------------------
@ Register range_urtx_count
@ => xPEC Overflow Underflow register to limit stack and fifo buffer.
@    Generates range events
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_range_urtx_count       ,	0x00000024
 .equ Adr_NX56_rpec0_regs_range_urtx_count,	0x1018B024
 .equ Adr_NX56_tpec0_regs_range_urtx_count,	0x1018B124
 .equ Adr_NX56_rpec1_regs_range_urtx_count,	0x1018B224
 .equ Adr_NX56_tpec1_regs_range_urtx_count,	0x1018B324

 .equ MSK_NX56_range_urtx_count_range_urx_count,	0x00001fff
 .equ SRT_NX56_range_urtx_count_range_urx_count,	0
 .equ MSK_NX56_range_urtx_count_range_utx_count,	0x1fff0000
 .equ SRT_NX56_range_urtx_count_range_utx_count,	16

@ ---------------------------------------------------------------------
@ Register range45
@ => xPEC Overflow Underflow register to limit stack and fifo buffer.
@    Generates range events
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_range45       ,	0x00000028
 .equ Adr_NX56_rpec0_regs_range45,	0x1018B028
 .equ Adr_NX56_tpec0_regs_range45,	0x1018B128
 .equ Adr_NX56_rpec1_regs_range45,	0x1018B228
 .equ Adr_NX56_tpec1_regs_range45,	0x1018B328

 .equ MSK_NX56_range45_range4,	0x00001fff
 .equ SRT_NX56_range45_range4,	0
 .equ MSK_NX56_range45_range5,	0x1fff0000
 .equ SRT_NX56_range45_range5,	16

@ ---------------------------------------------------------------------
@ Register range67
@ => xPEC Overflow Underflow register to limit stack and fifo buffer.
@    Generates range events
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_range67       ,	0x0000002C
 .equ Adr_NX56_rpec0_regs_range67,	0x1018B02C
 .equ Adr_NX56_tpec0_regs_range67,	0x1018B12C
 .equ Adr_NX56_rpec1_regs_range67,	0x1018B22C
 .equ Adr_NX56_tpec1_regs_range67,	0x1018B32C

 .equ MSK_NX56_range67_range6,	0x00001fff
 .equ SRT_NX56_range67_range6,	0
 .equ MSK_NX56_range67_range7,	0x1fff0000
 .equ SRT_NX56_range67_range7,	16

@ ---------------------------------------------------------------------
@ Register timer0
@ => xPEC Timer 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_timer0       ,	0x00000030
 .equ Adr_NX56_rpec0_regs_timer0,	0x1018B030
 .equ Adr_NX56_tpec0_regs_timer0,	0x1018B130
 .equ Adr_NX56_rpec1_regs_timer0,	0x1018B230
 .equ Adr_NX56_tpec1_regs_timer0,	0x1018B330

 .equ MSK_NX56_timer0_timer_preload0,	0xffffffff
 .equ SRT_NX56_timer0_timer_preload0,	0

@ ---------------------------------------------------------------------
@ Register timer1
@ => xPEC Timer 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_timer1       ,	0x00000034
 .equ Adr_NX56_rpec0_regs_timer1,	0x1018B034
 .equ Adr_NX56_tpec0_regs_timer1,	0x1018B134
 .equ Adr_NX56_rpec1_regs_timer1,	0x1018B234
 .equ Adr_NX56_tpec1_regs_timer1,	0x1018B334

 .equ MSK_NX56_timer1_timer_preload1,	0xffffffff
 .equ SRT_NX56_timer1_timer_preload1,	0

@ ---------------------------------------------------------------------
@ Register timer2
@ => xPEC Timer 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_timer2       ,	0x00000038
 .equ Adr_NX56_rpec0_regs_timer2,	0x1018B038
 .equ Adr_NX56_tpec0_regs_timer2,	0x1018B138
 .equ Adr_NX56_rpec1_regs_timer2,	0x1018B238
 .equ Adr_NX56_tpec1_regs_timer2,	0x1018B338

 .equ MSK_NX56_timer2_timer_preload2,	0xffffffff
 .equ SRT_NX56_timer2_timer_preload2,	0

@ ---------------------------------------------------------------------
@ Register timer3
@ => xPEC Timer 3
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_timer3       ,	0x0000003C
 .equ Adr_NX56_rpec0_regs_timer3,	0x1018B03C
 .equ Adr_NX56_tpec0_regs_timer3,	0x1018B13C
 .equ Adr_NX56_rpec1_regs_timer3,	0x1018B23C
 .equ Adr_NX56_tpec1_regs_timer3,	0x1018B33C

 .equ MSK_NX56_timer3_timer_preload3,	0xffffffff
 .equ SRT_NX56_timer3_timer_preload3,	0

@ ---------------------------------------------------------------------
@ Register urx_count
@ => xPEC urx counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_urx_count       ,	0x00000040
 .equ Adr_NX56_rpec0_regs_urx_count,	0x1018B040
 .equ Adr_NX56_tpec0_regs_urx_count,	0x1018B140
 .equ Adr_NX56_rpec1_regs_urx_count,	0x1018B240
 .equ Adr_NX56_tpec1_regs_urx_count,	0x1018B340

 .equ MSK_NX56_urx_count_urx_count,	0xffffffff
 .equ SRT_NX56_urx_count_urx_count,	0

@ ---------------------------------------------------------------------
@ Register utx_count
@ => xPEC utx counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_utx_count       ,	0x00000044
 .equ Adr_NX56_rpec0_regs_utx_count,	0x1018B044
 .equ Adr_NX56_tpec0_regs_utx_count,	0x1018B144
 .equ Adr_NX56_rpec1_regs_utx_count,	0x1018B244
 .equ Adr_NX56_tpec1_regs_utx_count,	0x1018B344

 .equ MSK_NX56_utx_count_utx_count,	0xffffffff
 .equ SRT_NX56_utx_count_utx_count,	0

@ ---------------------------------------------------------------------
@ Register xpec_pc
@ => xPEC Program Counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_pc       ,	0x00000048
 .equ Adr_NX56_rpec0_regs_xpec_pc,	0x1018B048
 .equ Adr_NX56_tpec0_regs_xpec_pc,	0x1018B148
 .equ Adr_NX56_rpec1_regs_xpec_pc,	0x1018B248
 .equ Adr_NX56_tpec1_regs_xpec_pc,	0x1018B348

 .equ MSK_NX56_xpec_pc_pc,	0x000007ff
 .equ SRT_NX56_xpec_pc_pc,	0

@ ---------------------------------------------------------------------
@ Register zero
@ => Zero Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_zero       ,	0x0000004C
 .equ Adr_NX56_rpec0_regs_zero,	0x1018B04C
 .equ Adr_NX56_tpec0_regs_zero,	0x1018B14C
 .equ Adr_NX56_rpec1_regs_zero,	0x1018B24C
 .equ Adr_NX56_tpec1_regs_zero,	0x1018B34C

 .equ MSK_NX56_zero_zero,	0xffffffff
 .equ SRT_NX56_zero_zero,	0

@ ---------------------------------------------------------------------
@ Register xpec_config
@ => xPEC Config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_config       ,	0x00000050
 .equ Adr_NX56_rpec0_regs_xpec_config,	0x1018B050
 .equ Adr_NX56_tpec0_regs_xpec_config,	0x1018B150
 .equ Adr_NX56_rpec1_regs_xpec_config,	0x1018B250
 .equ Adr_NX56_tpec1_regs_xpec_config,	0x1018B350

 .equ MSK_NX56_xpec_config_timer0         ,	0x00000007
 .equ SRT_NX56_xpec_config_timer0         ,	0
 .equ MSK_NX56_xpec_config_timer1         ,	0x00000038
 .equ SRT_NX56_xpec_config_timer1         ,	3
 .equ MSK_NX56_xpec_config_timer2         ,	0x000001c0
 .equ SRT_NX56_xpec_config_timer2         ,	6
 .equ MSK_NX56_xpec_config_timer3         ,	0x00000e00
 .equ SRT_NX56_xpec_config_timer3         ,	9
 .equ MSK_NX56_xpec_config_timer4         ,	0x00007000
 .equ SRT_NX56_xpec_config_timer4         ,	12
 .equ MSK_NX56_xpec_config_timer5         ,	0x00038000
 .equ SRT_NX56_xpec_config_timer5         ,	15
 .equ MSK_NX56_xpec_config_register_mode  ,	0x00300000
 .equ SRT_NX56_xpec_config_register_mode  ,	20
 .equ MSK_NX56_xpec_config_reset_urx_fifo0,	0x01000000
 .equ SRT_NX56_xpec_config_reset_urx_fifo0,	24
 .equ MSK_NX56_xpec_config_reset_utx_fifo0,	0x02000000
 .equ SRT_NX56_xpec_config_reset_utx_fifo0,	25
 .equ MSK_NX56_xpec_config_reset_urx_fifo1,	0x04000000
 .equ SRT_NX56_xpec_config_reset_urx_fifo1,	26
 .equ MSK_NX56_xpec_config_reset_utx_fifo1,	0x08000000
 .equ SRT_NX56_xpec_config_reset_utx_fifo1,	27
 .equ MSK_NX56_xpec_config_reset_eld0     ,	0x10000000
 .equ SRT_NX56_xpec_config_reset_eld0     ,	28
 .equ MSK_NX56_xpec_config_reset_eld1     ,	0x20000000
 .equ SRT_NX56_xpec_config_reset_eld1     ,	29
 .equ MSK_NX56_xpec_config_debug_mode     ,	0x40000000
 .equ SRT_NX56_xpec_config_debug_mode     ,	30

@ ---------------------------------------------------------------------
@ Register ec_maska
@ => JMP-Mask a
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_maska       ,	0x00000054
 .equ Adr_NX56_rpec0_regs_ec_maska,	0x1018B054
 .equ Adr_NX56_tpec0_regs_ec_maska,	0x1018B154
 .equ Adr_NX56_rpec1_regs_ec_maska,	0x1018B254
 .equ Adr_NX56_tpec1_regs_ec_maska,	0x1018B354

 .equ MSK_NX56_ec_maska_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_maska_sel0             ,	0
 .equ MSK_NX56_ec_maska_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_maska_sel1             ,	8
 .equ MSK_NX56_ec_maska_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_maska_jmp_adr          ,	16
 .equ MSK_NX56_ec_maska_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_maska_level_edge_event0,	27
 .equ MSK_NX56_ec_maska_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_maska_level_edge_event1,	29
 .equ MSK_NX56_ec_maska_and_or           ,	0x80000000
 .equ SRT_NX56_ec_maska_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_maskb
@ => JMP-Mask b
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_maskb       ,	0x00000058
 .equ Adr_NX56_rpec0_regs_ec_maskb,	0x1018B058
 .equ Adr_NX56_tpec0_regs_ec_maskb,	0x1018B158
 .equ Adr_NX56_rpec1_regs_ec_maskb,	0x1018B258
 .equ Adr_NX56_tpec1_regs_ec_maskb,	0x1018B358

 .equ MSK_NX56_ec_maskb_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_maskb_sel0             ,	0
 .equ MSK_NX56_ec_maskb_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_maskb_sel1             ,	8
 .equ MSK_NX56_ec_maskb_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_maskb_jmp_adr          ,	16
 .equ MSK_NX56_ec_maskb_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_maskb_level_edge_event0,	27
 .equ MSK_NX56_ec_maskb_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_maskb_level_edge_event1,	29
 .equ MSK_NX56_ec_maskb_and_or           ,	0x80000000
 .equ SRT_NX56_ec_maskb_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask0
@ => JMP-Mask 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask0       ,	0x0000005C
 .equ Adr_NX56_rpec0_regs_ec_mask0,	0x1018B05C
 .equ Adr_NX56_tpec0_regs_ec_mask0,	0x1018B15C
 .equ Adr_NX56_rpec1_regs_ec_mask0,	0x1018B25C
 .equ Adr_NX56_tpec1_regs_ec_mask0,	0x1018B35C

 .equ MSK_NX56_ec_mask0_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask0_sel0             ,	0
 .equ MSK_NX56_ec_mask0_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask0_sel1             ,	8
 .equ MSK_NX56_ec_mask0_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask0_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask0_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask0_level_edge_event0,	27
 .equ MSK_NX56_ec_mask0_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask0_level_edge_event1,	29
 .equ MSK_NX56_ec_mask0_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask0_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask1
@ => JMP-Mask 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask1       ,	0x00000060
 .equ Adr_NX56_rpec0_regs_ec_mask1,	0x1018B060
 .equ Adr_NX56_tpec0_regs_ec_mask1,	0x1018B160
 .equ Adr_NX56_rpec1_regs_ec_mask1,	0x1018B260
 .equ Adr_NX56_tpec1_regs_ec_mask1,	0x1018B360

 .equ MSK_NX56_ec_mask1_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask1_sel0             ,	0
 .equ MSK_NX56_ec_mask1_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask1_sel1             ,	8
 .equ MSK_NX56_ec_mask1_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask1_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask1_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask1_level_edge_event0,	27
 .equ MSK_NX56_ec_mask1_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask1_level_edge_event1,	29
 .equ MSK_NX56_ec_mask1_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask1_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask2
@ => JMP-Mask 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask2       ,	0x00000064
 .equ Adr_NX56_rpec0_regs_ec_mask2,	0x1018B064
 .equ Adr_NX56_tpec0_regs_ec_mask2,	0x1018B164
 .equ Adr_NX56_rpec1_regs_ec_mask2,	0x1018B264
 .equ Adr_NX56_tpec1_regs_ec_mask2,	0x1018B364

 .equ MSK_NX56_ec_mask2_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask2_sel0             ,	0
 .equ MSK_NX56_ec_mask2_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask2_sel1             ,	8
 .equ MSK_NX56_ec_mask2_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask2_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask2_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask2_level_edge_event0,	27
 .equ MSK_NX56_ec_mask2_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask2_level_edge_event1,	29
 .equ MSK_NX56_ec_mask2_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask2_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask3
@ => JMP-Mask 3
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask3       ,	0x00000068
 .equ Adr_NX56_rpec0_regs_ec_mask3,	0x1018B068
 .equ Adr_NX56_tpec0_regs_ec_mask3,	0x1018B168
 .equ Adr_NX56_rpec1_regs_ec_mask3,	0x1018B268
 .equ Adr_NX56_tpec1_regs_ec_mask3,	0x1018B368

 .equ MSK_NX56_ec_mask3_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask3_sel0             ,	0
 .equ MSK_NX56_ec_mask3_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask3_sel1             ,	8
 .equ MSK_NX56_ec_mask3_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask3_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask3_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask3_level_edge_event0,	27
 .equ MSK_NX56_ec_mask3_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask3_level_edge_event1,	29
 .equ MSK_NX56_ec_mask3_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask3_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask4
@ => JMP-Mask 4
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask4       ,	0x0000006C
 .equ Adr_NX56_rpec0_regs_ec_mask4,	0x1018B06C
 .equ Adr_NX56_tpec0_regs_ec_mask4,	0x1018B16C
 .equ Adr_NX56_rpec1_regs_ec_mask4,	0x1018B26C
 .equ Adr_NX56_tpec1_regs_ec_mask4,	0x1018B36C

 .equ MSK_NX56_ec_mask4_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask4_sel0             ,	0
 .equ MSK_NX56_ec_mask4_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask4_sel1             ,	8
 .equ MSK_NX56_ec_mask4_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask4_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask4_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask4_level_edge_event0,	27
 .equ MSK_NX56_ec_mask4_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask4_level_edge_event1,	29
 .equ MSK_NX56_ec_mask4_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask4_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask5
@ => JMP-Mask 5
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask5       ,	0x00000070
 .equ Adr_NX56_rpec0_regs_ec_mask5,	0x1018B070
 .equ Adr_NX56_tpec0_regs_ec_mask5,	0x1018B170
 .equ Adr_NX56_rpec1_regs_ec_mask5,	0x1018B270
 .equ Adr_NX56_tpec1_regs_ec_mask5,	0x1018B370

 .equ MSK_NX56_ec_mask5_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask5_sel0             ,	0
 .equ MSK_NX56_ec_mask5_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask5_sel1             ,	8
 .equ MSK_NX56_ec_mask5_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask5_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask5_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask5_level_edge_event0,	27
 .equ MSK_NX56_ec_mask5_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask5_level_edge_event1,	29
 .equ MSK_NX56_ec_mask5_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask5_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask6
@ => JMP-Mask 6
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask6       ,	0x00000074
 .equ Adr_NX56_rpec0_regs_ec_mask6,	0x1018B074
 .equ Adr_NX56_tpec0_regs_ec_mask6,	0x1018B174
 .equ Adr_NX56_rpec1_regs_ec_mask6,	0x1018B274
 .equ Adr_NX56_tpec1_regs_ec_mask6,	0x1018B374

 .equ MSK_NX56_ec_mask6_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask6_sel0             ,	0
 .equ MSK_NX56_ec_mask6_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask6_sel1             ,	8
 .equ MSK_NX56_ec_mask6_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask6_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask6_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask6_level_edge_event0,	27
 .equ MSK_NX56_ec_mask6_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask6_level_edge_event1,	29
 .equ MSK_NX56_ec_mask6_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask6_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask7
@ => JMP-Mask 7
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask7       ,	0x00000078
 .equ Adr_NX56_rpec0_regs_ec_mask7,	0x1018B078
 .equ Adr_NX56_tpec0_regs_ec_mask7,	0x1018B178
 .equ Adr_NX56_rpec1_regs_ec_mask7,	0x1018B278
 .equ Adr_NX56_tpec1_regs_ec_mask7,	0x1018B378

 .equ MSK_NX56_ec_mask7_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask7_sel0             ,	0
 .equ MSK_NX56_ec_mask7_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask7_sel1             ,	8
 .equ MSK_NX56_ec_mask7_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask7_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask7_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask7_level_edge_event0,	27
 .equ MSK_NX56_ec_mask7_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask7_level_edge_event1,	29
 .equ MSK_NX56_ec_mask7_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask7_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask8
@ => JMP-Mask 8
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask8       ,	0x0000007C
 .equ Adr_NX56_rpec0_regs_ec_mask8,	0x1018B07C
 .equ Adr_NX56_tpec0_regs_ec_mask8,	0x1018B17C
 .equ Adr_NX56_rpec1_regs_ec_mask8,	0x1018B27C
 .equ Adr_NX56_tpec1_regs_ec_mask8,	0x1018B37C

 .equ MSK_NX56_ec_mask8_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask8_sel0             ,	0
 .equ MSK_NX56_ec_mask8_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask8_sel1             ,	8
 .equ MSK_NX56_ec_mask8_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask8_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask8_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask8_level_edge_event0,	27
 .equ MSK_NX56_ec_mask8_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask8_level_edge_event1,	29
 .equ MSK_NX56_ec_mask8_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask8_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register ec_mask9
@ => JMP-Mask 9
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ec_mask9       ,	0x00000080
 .equ Adr_NX56_rpec0_regs_ec_mask9,	0x1018B080
 .equ Adr_NX56_tpec0_regs_ec_mask9,	0x1018B180
 .equ Adr_NX56_rpec1_regs_ec_mask9,	0x1018B280
 .equ Adr_NX56_tpec1_regs_ec_mask9,	0x1018B380

 .equ MSK_NX56_ec_mask9_sel0             ,	0x000000ff
 .equ SRT_NX56_ec_mask9_sel0             ,	0
 .equ MSK_NX56_ec_mask9_sel1             ,	0x0000ff00
 .equ SRT_NX56_ec_mask9_sel1             ,	8
 .equ MSK_NX56_ec_mask9_jmp_adr          ,	0x07ff0000
 .equ SRT_NX56_ec_mask9_jmp_adr          ,	16
 .equ MSK_NX56_ec_mask9_level_edge_event0,	0x18000000
 .equ SRT_NX56_ec_mask9_level_edge_event0,	27
 .equ MSK_NX56_ec_mask9_level_edge_event1,	0x60000000
 .equ SRT_NX56_ec_mask9_level_edge_event1,	29
 .equ MSK_NX56_ec_mask9_and_or           ,	0x80000000
 .equ SRT_NX56_ec_mask9_and_or           ,	31

@ ---------------------------------------------------------------------
@ Register timer4
@ => xPEC Timer 4
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_timer4       ,	0x00000084
 .equ Adr_NX56_rpec0_regs_timer4,	0x1018B084
 .equ Adr_NX56_tpec0_regs_timer4,	0x1018B184
 .equ Adr_NX56_rpec1_regs_timer4,	0x1018B284
 .equ Adr_NX56_tpec1_regs_timer4,	0x1018B384

 .equ MSK_NX56_timer4_timer_preload4,	0xffffffff
 .equ SRT_NX56_timer4_timer_preload4,	0

@ ---------------------------------------------------------------------
@ Register timer5
@ => xPEC Timer 5
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_timer5       ,	0x00000088
 .equ Adr_NX56_rpec0_regs_timer5,	0x1018B088
 .equ Adr_NX56_tpec0_regs_timer5,	0x1018B188
 .equ Adr_NX56_rpec1_regs_timer5,	0x1018B288
 .equ Adr_NX56_tpec1_regs_timer5,	0x1018B388

 .equ MSK_NX56_timer5_timer_preload5,	0xffffffff
 .equ SRT_NX56_timer5_timer_preload5,	0

@ ---------------------------------------------------------------------
@ Register irq
@ => xPEC IRQ Register
@    Shared Register accessed by rPEC and tPEC of 1 port
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_irq       ,	0x0000008C
 .equ Adr_NX56_rpec0_regs_irq,	0x1018B08C
 .equ Adr_NX56_tpec0_regs_irq,	0x1018B18C
 .equ Adr_NX56_rpec1_regs_irq,	0x1018B28C
 .equ Adr_NX56_tpec1_regs_irq,	0x1018B38C

 .equ MSK_NX56_irq_xpec_irq,	0x0000ffff
 .equ SRT_NX56_irq_xpec_irq,	0
 .equ MSK_NX56_irq_arm_irq ,	0xffff0000
 .equ SRT_NX56_irq_arm_irq ,	16

@ ---------------------------------------------------------------------
@ Register xpec_systime_ns
@ => Shared in xPEC intlogic mode with systime_uc_ns (r mode).
@    xPEC System time (for read)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_systime_ns       ,	0x00000090
 .equ Adr_NX56_rpec0_regs_xpec_systime_ns,	0x1018B090
 .equ Adr_NX56_tpec0_regs_xpec_systime_ns,	0x1018B190
 .equ Adr_NX56_rpec1_regs_xpec_systime_ns,	0x1018B290
 .equ Adr_NX56_tpec1_regs_xpec_systime_ns,	0x1018B390

 .equ MSK_NX56_xpec_systime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_xpec_systime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register fifo_data
@ => xPEC fifo_data
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fifo_data       ,	0x00000094
 .equ Adr_NX56_rpec0_regs_fifo_data,	0x1018B094
 .equ Adr_NX56_tpec0_regs_fifo_data,	0x1018B194
 .equ Adr_NX56_rpec1_regs_fifo_data,	0x1018B294
 .equ Adr_NX56_tpec1_regs_fifo_data,	0x1018B394

 .equ MSK_NX56_fifo_data_fifo_data,	0xffffffff
 .equ SRT_NX56_fifo_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register xpec_systime_s
@ => Shared in xPEC intlogic mode with systime_uc_s (r mode).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_systime_s       ,	0x00000098
 .equ Adr_NX56_rpec0_regs_xpec_systime_s,	0x1018B098
 .equ Adr_NX56_tpec0_regs_xpec_systime_s,	0x1018B198
 .equ Adr_NX56_rpec1_regs_xpec_systime_s,	0x1018B298
 .equ Adr_NX56_tpec1_regs_xpec_systime_s,	0x1018B398

 .equ MSK_NX56_xpec_systime_s_systime_s,	0xffffffff
 .equ SRT_NX56_xpec_systime_s_systime_s,	0

@ ---------------------------------------------------------------------
@ Register datach_data
@ => Shared in xPEC fmmusm mode with buf_man (r/w mode).Register only accessible via rPEC0 and tPEC0
@    xPEC data channel - data
@    becomes adr_buf_man of BUF_MAN
@    Buffer manager address for master xPEC:
@    16 buffer manager modules can be accessed, where each one handles buffer numbers between up to 4 procesors.
@    Each read request of a master will be answered by the most actual buffer number,
@    each write request of a master will be answered by the lowest free buffer number.
@    The buffer managers can be accessed in 2 different modes: 'normal mode' and 'parallel mode' (also known as EtherCAT mode):
@    In normal mode getting a new buffer happens with 2 command accesses:
@    1st: Write access: Tell the buf_manager channel (0..15) and wether you want read or write buffer.
@         Wait for 2 clockcycles, until new buffer number is calculated after any write access.
@    2nd: Read access: Read the buffer number (0..4).
@    In parallel mode all buffers are accessed in parallel but some functionality is limited.
@     3 -  0 : buf_nr         # write access: number of buf_manager channel (0..15) # default 7
@            :                # read access: number of buffer (0..m+1), where m ist the number of masters using this buf_manager
@     6 -  5 : req_type       # Request type bits are write-only
@            :                # 00: request read buffer (or semaphore)
@            :                # 01: request write buffer (or release semaphore)
@            :                # 10: release write buffer (or release semaphore)
@            :                # 11: do not request new buffer or semaphore (used to only change channel)
@        7   : semaphore_mode # Activate 'semaphore mode' for this buf_nr by writing 1 to this bit.
@            :                # To return from semaphore-mode reset this channel
@            :                # In semaphore mode only buf_nr=0 (this master gets the semaphore)
@            :                # or buf_nr=7 (master does not get semphore) are returned.
@            :                # Requesting or releasing a semaphore (by req_type) is allowed while switching to semaphore mode
@        8   : parallel_mode  # activate parallel mode by writing 1 to this bit (other bits are ignored):
@            :                # In parallel mode, the behavior of all bits of this register changes completely.
@            :                # To return to normal mode, write 0xffff0000 to this register.
@            :                # parallel mode write access:
@            :                #   15.. 0: Request bits of all 16 channels (1: request new buffer, 0: dont request buffer)
@            :                #   31..16: wr bits of all 16 channels:
@            :                #           0: request read buffer or request semaphore
@            :                #           1: request write buffer or release semaphore
@            :                # parallel mode read access:
@            :                #   1,0: Actual buffer number of channel 0.
@            :                #   ...
@            :                #   31,30: Actual buffer number of channel 15.
@            :                # In parallel mode the number of masters is limited to 2, resulting in 3 buffers per channel.
@            :                # In parallel mode buffers cannot be released without requesting new buffer numbers.
@        9   : reset          # reset channel
@       10   : sm_update_en   # activate SM_auto_update mode by writing 1 to this bit:
@            :                # In SM_auto_update mode the requested buffer numbers of buffer managers 0..7 will automatically
@            :                # be programmed to the FMMU_SM unit.
@       11   : sm_update_dis  # de-activate SM_auto_update mode by writing 1 to this bit:
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_datach_data       ,	0x0000009C
 .equ Adr_NX56_rpec0_regs_datach_data,	0x1018B09C
 .equ Adr_NX56_tpec0_regs_datach_data,	0x1018B19C
 .equ Adr_NX56_rpec1_regs_datach_data,	0x1018B29C
 .equ Adr_NX56_tpec1_regs_datach_data,	0x1018B39C

@ ---------------------------------------------------------------------
@ Register xpec_sr0
@ => Shared Work Register 0 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr0       ,	0x000000A0
 .equ Adr_NX56_rpec0_regs_xpec_sr0,	0x1018B0A0
 .equ Adr_NX56_tpec0_regs_xpec_sr0,	0x1018B1A0
 .equ Adr_NX56_rpec1_regs_xpec_sr0,	0x1018B2A0
 .equ Adr_NX56_tpec1_regs_xpec_sr0,	0x1018B3A0

 .equ MSK_NX56_xpec_sr0_SR0   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr0_SR0   ,	0
 .equ MSK_NX56_xpec_sr0_SR0_15,	0xffff0000
 .equ SRT_NX56_xpec_sr0_SR0_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr1
@ => Shared Work Register 1 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr1       ,	0x000000A4
 .equ Adr_NX56_rpec0_regs_xpec_sr1,	0x1018B0A4
 .equ Adr_NX56_tpec0_regs_xpec_sr1,	0x1018B1A4
 .equ Adr_NX56_rpec1_regs_xpec_sr1,	0x1018B2A4
 .equ Adr_NX56_tpec1_regs_xpec_sr1,	0x1018B3A4

 .equ MSK_NX56_xpec_sr1_SR1   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr1_SR1   ,	0
 .equ MSK_NX56_xpec_sr1_SR1_15,	0xffff0000
 .equ SRT_NX56_xpec_sr1_SR1_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr2
@ => Shared Work Register 2 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr2       ,	0x000000A8
 .equ Adr_NX56_rpec0_regs_xpec_sr2,	0x1018B0A8
 .equ Adr_NX56_tpec0_regs_xpec_sr2,	0x1018B1A8
 .equ Adr_NX56_rpec1_regs_xpec_sr2,	0x1018B2A8
 .equ Adr_NX56_tpec1_regs_xpec_sr2,	0x1018B3A8

 .equ MSK_NX56_xpec_sr2_SR2   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr2_SR2   ,	0
 .equ MSK_NX56_xpec_sr2_SR2_15,	0xffff0000
 .equ SRT_NX56_xpec_sr2_SR2_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr3
@ => Shared Work Register 3 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr3       ,	0x000000AC
 .equ Adr_NX56_rpec0_regs_xpec_sr3,	0x1018B0AC
 .equ Adr_NX56_tpec0_regs_xpec_sr3,	0x1018B1AC
 .equ Adr_NX56_rpec1_regs_xpec_sr3,	0x1018B2AC
 .equ Adr_NX56_tpec1_regs_xpec_sr3,	0x1018B3AC

 .equ MSK_NX56_xpec_sr3_SR3   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr3_SR3   ,	0
 .equ MSK_NX56_xpec_sr3_SR3_15,	0xffff0000
 .equ SRT_NX56_xpec_sr3_SR3_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr4
@ => Shared Work Register 4 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr4       ,	0x000000B0
 .equ Adr_NX56_rpec0_regs_xpec_sr4,	0x1018B0B0
 .equ Adr_NX56_tpec0_regs_xpec_sr4,	0x1018B1B0
 .equ Adr_NX56_rpec1_regs_xpec_sr4,	0x1018B2B0
 .equ Adr_NX56_tpec1_regs_xpec_sr4,	0x1018B3B0

 .equ MSK_NX56_xpec_sr4_SR4   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr4_SR4   ,	0
 .equ MSK_NX56_xpec_sr4_SR4_15,	0xffff0000
 .equ SRT_NX56_xpec_sr4_SR4_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr5
@ => Shared Work Register 5 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr5       ,	0x000000B4
 .equ Adr_NX56_rpec0_regs_xpec_sr5,	0x1018B0B4
 .equ Adr_NX56_tpec0_regs_xpec_sr5,	0x1018B1B4
 .equ Adr_NX56_rpec1_regs_xpec_sr5,	0x1018B2B4
 .equ Adr_NX56_tpec1_regs_xpec_sr5,	0x1018B3B4

 .equ MSK_NX56_xpec_sr5_SR5   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr5_SR5   ,	0
 .equ MSK_NX56_xpec_sr5_SR5_15,	0xffff0000
 .equ SRT_NX56_xpec_sr5_SR5_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr6
@ => Shared Work Register 6 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr6       ,	0x000000B8
 .equ Adr_NX56_rpec0_regs_xpec_sr6,	0x1018B0B8
 .equ Adr_NX56_tpec0_regs_xpec_sr6,	0x1018B1B8
 .equ Adr_NX56_rpec1_regs_xpec_sr6,	0x1018B2B8
 .equ Adr_NX56_tpec1_regs_xpec_sr6,	0x1018B3B8

 .equ MSK_NX56_xpec_sr6_SR6   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr6_SR6   ,	0
 .equ MSK_NX56_xpec_sr6_SR6_15,	0xffff0000
 .equ SRT_NX56_xpec_sr6_SR6_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr7
@ => Shared Work Register 7 accessed by all xPECs and all xMACs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr7       ,	0x000000BC
 .equ Adr_NX56_rpec0_regs_xpec_sr7,	0x1018B0BC
 .equ Adr_NX56_tpec0_regs_xpec_sr7,	0x1018B1BC
 .equ Adr_NX56_rpec1_regs_xpec_sr7,	0x1018B2BC
 .equ Adr_NX56_tpec1_regs_xpec_sr7,	0x1018B3BC

 .equ MSK_NX56_xpec_sr7_SR7   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr7_SR7   ,	0
 .equ MSK_NX56_xpec_sr7_SR7_15,	0xffff0000
 .equ SRT_NX56_xpec_sr7_SR7_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr8
@ => Shared Work Register 8 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with fmmusm_len_en (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_sample_irq (r mode).
@    Shared in xPEC intlogic mode with xmac0_rpu_systime_uc (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr8       ,	0x000000C0
 .equ Adr_NX56_rpec0_regs_xpec_sr8,	0x1018B0C0
 .equ Adr_NX56_tpec0_regs_xpec_sr8,	0x1018B1C0
 .equ Adr_NX56_rpec1_regs_xpec_sr8,	0x1018B2C0
 .equ Adr_NX56_tpec1_regs_xpec_sr8,	0x1018B3C0

 .equ MSK_NX56_xpec_sr8_SR8   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr8_SR8   ,	0
 .equ MSK_NX56_xpec_sr8_SR8_15,	0xffff0000
 .equ SRT_NX56_xpec_sr8_SR8_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr9
@ => Shared Work Register 9 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with fmmusm_status_out (r mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_activate (r mode).
@    Shared in xPEC intlogic mode with xmac1_rpu_systime_uc (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr9       ,	0x000000C4
 .equ Adr_NX56_rpec0_regs_xpec_sr9,	0x1018B0C4
 .equ Adr_NX56_tpec0_regs_xpec_sr9,	0x1018B1C4
 .equ Adr_NX56_rpec1_regs_xpec_sr9,	0x1018B2C4
 .equ Adr_NX56_tpec1_regs_xpec_sr9,	0x1018B3C4

 .equ MSK_NX56_xpec_sr9_SR9   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr9_SR9   ,	0
 .equ MSK_NX56_xpec_sr9_SR9_15,	0xffff0000
 .equ SRT_NX56_xpec_sr9_SR9_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr10
@ => Shared Work Register 10 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with sm_buf_statcfg (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_impulse_length (r mode).
@    Shared in xPEC intlogic mode with xmac0_tpu_systime_uc (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr10       ,	0x000000C8
 .equ Adr_NX56_rpec0_regs_xpec_sr10,	0x1018B0C8
 .equ Adr_NX56_tpec0_regs_xpec_sr10,	0x1018B1C8
 .equ Adr_NX56_rpec1_regs_xpec_sr10,	0x1018B2C8
 .equ Adr_NX56_tpec1_regs_xpec_sr10,	0x1018B3C8

 .equ MSK_NX56_xpec_sr10_SR10   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr10_SR10   ,	0
 .equ MSK_NX56_xpec_sr10_SR10_15,	0xffff0000
 .equ SRT_NX56_xpec_sr10_SR10_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr11
@ => Shared Work Register 11 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with sm_read_event (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_0_starttime_ns (r mode).
@    Shared in xPEC intlogic mode with xmac1_tpu_systime_uc (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr11       ,	0x000000CC
 .equ Adr_NX56_rpec0_regs_xpec_sr11,	0x1018B0CC
 .equ Adr_NX56_tpec0_regs_xpec_sr11,	0x1018B1CC
 .equ Adr_NX56_rpec1_regs_xpec_sr11,	0x1018B2CC
 .equ Adr_NX56_tpec1_regs_xpec_sr11,	0x1018B3CC

 .equ MSK_NX56_xpec_sr11_SR11   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr11_SR11   ,	0
 .equ MSK_NX56_xpec_sr11_SR11_15,	0xffff0000
 .equ SRT_NX56_xpec_sr11_SR11_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr12
@ => Shared Work Register 12 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with sm_write_event (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_1_starttime_ns (r mode).
@    Shared in xPEC intlogic mode with xmac0_rpu_systime (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr12       ,	0x000000D0
 .equ Adr_NX56_rpec0_regs_xpec_sr12,	0x1018B0D0
 .equ Adr_NX56_tpec0_regs_xpec_sr12,	0x1018B1D0
 .equ Adr_NX56_rpec1_regs_xpec_sr12,	0x1018B2D0
 .equ Adr_NX56_tpec1_regs_xpec_sr12,	0x1018B3D0

 .equ MSK_NX56_xpec_sr12_SR12   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr12_SR12   ,	0
 .equ MSK_NX56_xpec_sr12_SR12_15,	0xffff0000
 .equ SRT_NX56_xpec_sr12_SR12_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr13
@ => Shared Work Register 13 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with sm_first_byte_addressed (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_0_cyc_time (r mode).
@    Shared in xPEC intlogic mode with xmac1_rpu_systime (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr13       ,	0x000000D4
 .equ Adr_NX56_rpec0_regs_xpec_sr13,	0x1018B0D4
 .equ Adr_NX56_tpec0_regs_xpec_sr13,	0x1018B1D4
 .equ Adr_NX56_rpec1_regs_xpec_sr13,	0x1018B2D4
 .equ Adr_NX56_tpec1_regs_xpec_sr13,	0x1018B3D4

 .equ MSK_NX56_xpec_sr13_SR13   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr13_SR13   ,	0
 .equ MSK_NX56_xpec_sr13_SR13_15,	0xffff0000
 .equ SRT_NX56_xpec_sr13_SR13_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr14
@ => Shared Work Register 14 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with sm_last_byte_addressed (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_trigger_1_cyc_time (r mode).
@    Shared in xPEC intlogic mode with xmac0_tpu_systime (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr14       ,	0x000000D8
 .equ Adr_NX56_rpec0_regs_xpec_sr14,	0x1018B0D8
 .equ Adr_NX56_tpec0_regs_xpec_sr14,	0x1018B1D8
 .equ Adr_NX56_rpec1_regs_xpec_sr14,	0x1018B2D8
 .equ Adr_NX56_tpec1_regs_xpec_sr14,	0x1018B3D8

 .equ MSK_NX56_xpec_sr14_SR14   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr14_SR14   ,	0
 .equ MSK_NX56_xpec_sr14_SR14_15,	0xffff0000
 .equ SRT_NX56_xpec_sr14_SR14_15,	16

@ ---------------------------------------------------------------------
@ Register xpec_sr15
@ => Shared Work Register 15 accessed by all xPECs and all xMACs.
@    Shared in xPEC fmmusm mode with sm_served (r/w mode). Register only accessible via rPEC0 and tPEC0
@    Shared in xPEC trigger_sample mode with adr_sample_mode (r mode).
@    Shared in xPEC intlogic mode with xmac1_tpu_systime (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpec_sr15       ,	0x000000DC
 .equ Adr_NX56_rpec0_regs_xpec_sr15,	0x1018B0DC
 .equ Adr_NX56_tpec0_regs_xpec_sr15,	0x1018B1DC
 .equ Adr_NX56_rpec1_regs_xpec_sr15,	0x1018B2DC
 .equ Adr_NX56_tpec1_regs_xpec_sr15,	0x1018B3DC

 .equ MSK_NX56_xpec_sr15_SR15   ,	0x0000ffff
 .equ SRT_NX56_xpec_sr15_SR15   ,	0
 .equ MSK_NX56_xpec_sr15_SR15_15,	0xffff0000
 .equ SRT_NX56_xpec_sr15_SR15_15,	16

@ ---------------------------------------------------------------------
@ Register statcfg0
@ => xMAC0 Shared Config/Status Register
@    for write mode the upper Bits [31:16] are mask bits for Bits [15:0] of shared_config (xMAC) register
@    Shared in xPEC trigger_sample mode with adr_sample_0_pos_systime_ns (r mode).
@    Shared in xPEC intlogic mode with crc_polynom (r/w mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_statcfg0       ,	0x000000E0
 .equ Adr_NX56_rpec0_regs_statcfg0,	0x1018B0E0
 .equ Adr_NX56_tpec0_regs_statcfg0,	0x1018B1E0
 .equ Adr_NX56_rpec1_regs_statcfg0,	0x1018B2E0
 .equ Adr_NX56_tpec1_regs_statcfg0,	0x1018B3E0

 .equ MSK_NX56_statcfg0_xmac0_config_shared0,	0x000000ff
 .equ SRT_NX56_statcfg0_xmac0_config_shared0,	0
 .equ MSK_NX56_statcfg0_xmac0_io_oe_shared0 ,	0x0000ff00
 .equ SRT_NX56_statcfg0_xmac0_io_oe_shared0 ,	8
 .equ MSK_NX56_statcfg0_xmac0_status_shared0,	0xffff0000
 .equ SRT_NX56_statcfg0_xmac0_status_shared0,	16

@ ---------------------------------------------------------------------
@ Register statcfg1
@ => xMAC1 Shared Config/Status Register
@    for write mode the upper Bits [31:16] are mask bits for Bits [15:0] of shared_config (xMAC) register
@    Shared in xPEC trigger_sample mode with adr_sample_0_neg_systime_ns (r mode).
@    Shared in xPEC intlogic mode with crc_cfg (r/w mode).
@    crc_cfg[10]    = crc_invert
@    crc_cfg[9]     = crc_zero
@    crc_cfg[8]     = reserved
@    crc_cfg[7]     = crc_shift_right
@    crc_cfg[6]     = crc_swap_output
@    crc_cfg[5]     = crc_direct_div
@    crc_cfg[4:0]   = crc_length
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_statcfg1       ,	0x000000E4
 .equ Adr_NX56_rpec0_regs_statcfg1,	0x1018B0E4
 .equ Adr_NX56_tpec0_regs_statcfg1,	0x1018B1E4
 .equ Adr_NX56_rpec1_regs_statcfg1,	0x1018B2E4
 .equ Adr_NX56_tpec1_regs_statcfg1,	0x1018B3E4

 .equ MSK_NX56_statcfg1_xmac1_config_shared1,	0x000000ff
 .equ SRT_NX56_statcfg1_xmac1_config_shared1,	0
 .equ MSK_NX56_statcfg1_xmac1_io_oe_shared1 ,	0x0000ff00
 .equ SRT_NX56_statcfg1_xmac1_io_oe_shared1 ,	8
 .equ MSK_NX56_statcfg1_xmac1_status_shared1,	0xffff0000
 .equ SRT_NX56_statcfg1_xmac1_status_shared1,	16

@ ---------------------------------------------------------------------
@ Register datach_wr_cfg
@ => Shared in xPEC trigger_sample mode with adr_sample_1_pos_systime_ns (r mode).
@    Shared in xPEC fmmusm mode with fmmu_read_bit_rol_pos (r mode).
@    Shared in xPEC intlogic mode with xpec_config2 (r/w mode)
@      9 - 8    : wr4_range_sel        # Select range mode for wr4 # default 0
@               :                      #       2'b00 : normal mode (range4 for wr4)
@               :                      #       2'b01 : select wr6 as range  for wr4
@               :                      #       2'b10 : select wr7 as range  for wr4
@               :                      #       2'b11 : reserved
@    11 - 10    : wr5_range_sel        # Select range mode for wr5 # default 0
@               :                      #       2'b00 : normal mode (range5 for wr5)
@               :                      #       2'b01 : select wr6 as range  for wr5
@               :                      #       2'b10 : select wr7 as range  for wr5
@               :                      #       2'b11 : reserved
@    13 - 12    : wr6_range_sel        # Select range mode for wr6 # default 0
@               :                      #       2'b00 : normal mode (range6 for wr6)
@               :                      #       2'b01 : select wr4 as range  for wr6
@               :                      #       2'b10 : select wr5 as range  for wr6
@               :                      #       2'b11 : reserved
@    15 - 14    : wr7_range_sel        # Select range mode for wr7 # default 0
@               :                      #       2'b00 : normal mode (range7 for wr7)
@               :                      #       2'b01 : select wr4 as range  for wr7
@               :                      #       2'b10 : select wr5 as range  for wr7
@               :                      #       2'b11 : reserved
@    19 - 16    : datach_segment_addr_31_28 # bits 31..28 of data channel address # default 0
@    21 - 20    : sysch_size                # access width of system channel access # default 0x2
@               :                      #       2'b00 : byte access (8 bit)
@               :                      #       2'b01 : word access (16 bit)
@               :                      #       2'b10 : dword access (32 bit) # default
@               :                      #       2'b11 : reserved
@         22    : datach_rdy_timer2small # debug status, set to one if datach_rdy event goes up after datach_rdy timer expired; write one to reset flag. Recommended value: number of PICs using data_ch plus 2, netx56 worst case-value=6
@         23    : pfifo_rdy_timer2small  # debug status, set to one if pfifo_rdy event goes up after pfifo_rdy timer expired; write one to reset flag
@    27 - 24    : datach_rdy_timer     #  0: datach_rdy signal generated after access finished:
@               :                      #  1..15: datach_rdy generated x cc after access started (set to worst case value; used to get determistic PEC program flow)
@    31 - 28    : pfifo_rdy_timer      #  0: pfifo_rdy signal generated after access finished
@               :                      #  1..15: pfifo_rdy generated x cc after access started (set to worst case value; used to get determistic PEC program flow, worst case value is number of pfifo accessing parties minus one)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_datach_wr_cfg       ,	0x000000E8
 .equ Adr_NX56_rpec0_regs_datach_wr_cfg,	0x1018B0E8
 .equ Adr_NX56_tpec0_regs_datach_wr_cfg,	0x1018B1E8
 .equ Adr_NX56_rpec1_regs_datach_wr_cfg,	0x1018B2E8
 .equ Adr_NX56_tpec1_regs_datach_wr_cfg,	0x1018B3E8

 .equ MSK_NX56_datach_wr_cfg_datach_wr_offset_addr,	0x0fffffff
 .equ SRT_NX56_datach_wr_cfg_datach_wr_offset_addr,	0
 .equ MSK_NX56_datach_wr_cfg_datach_wr_size       ,	0x30000000
 .equ SRT_NX56_datach_wr_cfg_datach_wr_size       ,	28
 .equ MSK_NX56_datach_wr_cfg_datach_wr_mode       ,	0xc0000000
 .equ SRT_NX56_datach_wr_cfg_datach_wr_mode       ,	30

@ ---------------------------------------------------------------------
@ Register datach_rd_cfg
@ => Shared in xPEC trigger_sample mode with adr_sample_1_neg_systime_ns (r mode).
@    Shared in xPEC fmmusm mode with fmmu_write_bit_rol_pos (r mode).
@    Shared in xPEC intlogic mode with crc_data (r/w mode)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_datach_rd_cfg       ,	0x000000EC
 .equ Adr_NX56_rpec0_regs_datach_rd_cfg,	0x1018B0EC
 .equ Adr_NX56_tpec0_regs_datach_rd_cfg,	0x1018B1EC
 .equ Adr_NX56_rpec1_regs_datach_rd_cfg,	0x1018B2EC
 .equ Adr_NX56_tpec1_regs_datach_rd_cfg,	0x1018B3EC

 .equ MSK_NX56_datach_rd_cfg_datach_rd_offset_addr,	0x0fffffff
 .equ SRT_NX56_datach_rd_cfg_datach_rd_offset_addr,	0
 .equ MSK_NX56_datach_rd_cfg_datach_rd_size       ,	0x30000000
 .equ SRT_NX56_datach_rd_cfg_datach_rd_size       ,	28
 .equ MSK_NX56_datach_rd_cfg_datach_rd_mode       ,	0xc0000000
 .equ SRT_NX56_datach_rd_cfg_datach_rd_mode       ,	30

@ ---------------------------------------------------------------------
@ Register urtx0
@ => xMAC0 URX Shared Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_urtx0       ,	0x000000F0
 .equ Adr_NX56_rpec0_regs_urtx0,	0x1018B0F0
 .equ Adr_NX56_tpec0_regs_urtx0,	0x1018B1F0
 .equ Adr_NX56_rpec1_regs_urtx0,	0x1018B2F0
 .equ Adr_NX56_tpec1_regs_urtx0,	0x1018B3F0

 .equ MSK_NX56_urtx0_urtx_xmac0,	0x0000ffff
 .equ SRT_NX56_urtx0_urtx_xmac0,	0

@ ---------------------------------------------------------------------
@ Register urtx1
@ => xMAC1 URX Shared Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_urtx1       ,	0x000000F4
 .equ Adr_NX56_rpec0_regs_urtx1,	0x1018B0F4
 .equ Adr_NX56_tpec0_regs_urtx1,	0x1018B1F4
 .equ Adr_NX56_rpec1_regs_urtx1,	0x1018B2F4
 .equ Adr_NX56_tpec1_regs_urtx1,	0x1018B3F4

 .equ MSK_NX56_urtx1_urtx_xmac1,	0x0000ffff
 .equ SRT_NX56_urtx1_urtx_xmac1,	0

@ ---------------------------------------------------------------------
@ Register sysch_data
@ => Shared in xPEC trigger_sample mode with adr_trigger_sample_config (r mode).
@    Shared in xPEC fmmusm mode with fmmu_read_bit_mask (r mode).
@    Shared in xPEC intlogic mode with mii_clk_phase (r mode).
@    11 -  9 : xmac1_tpu_clk_phase # clock phase of xmac1 TPU
@     8 -  6 : xmac1_rpu_clk_phase # clock phase of xmac1 RPU
@     5 -  3 : xmac0_tpu_clk_phase # clock phase of xmac0 TPU
@     2 -  0 : xmac0_rpu_clk_phase # clock phase of xmac0 RPU
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sysch_data       ,	0x000000F8
 .equ Adr_NX56_rpec0_regs_sysch_data,	0x1018B0F8
 .equ Adr_NX56_tpec0_regs_sysch_data,	0x1018B1F8
 .equ Adr_NX56_rpec1_regs_sysch_data,	0x1018B2F8
 .equ Adr_NX56_tpec1_regs_sysch_data,	0x1018B3F8

@ ---------------------------------------------------------------------
@ Register sysch_addr
@ => Shared in xPEC trigger_sample mode with adr_trigger_sample_status (r mode).
@    Shared in xPEC fmmusm mode with fmmu_write_bit_mask (r mode).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sysch_addr       ,	0x000000FC
 .equ Adr_NX56_rpec0_regs_sysch_addr,	0x1018B0FC
 .equ Adr_NX56_tpec0_regs_sysch_addr,	0x1018B1FC
 .equ Adr_NX56_rpec1_regs_sysch_addr,	0x1018B2FC
 .equ Adr_NX56_tpec1_regs_sysch_addr,	0x1018B3FC


@ =====================================================================
@
@ Area of xmac0_regs, xmac1_regs
@
@ =====================================================================

 .equ Addr_NX56_xmac0_regs, 0x1018B400
 .equ Addr_NX56_xmac1_regs, 0x1018B600

@ ---------------------------------------------------------------------
@ Register xmac_sr0
@ => Shared Work Register 0 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr0       ,	0x00000000
 .equ Adr_NX56_xmac0_regs_xmac_sr0,	0x1018B400
 .equ Adr_NX56_xmac1_regs_xmac_sr0,	0x1018B600

 .equ MSK_NX56_xmac_sr0_sr0,	0x0000ffff
 .equ SRT_NX56_xmac_sr0_sr0,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr1
@ => Shared Work Register 1 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr1       ,	0x00000004
 .equ Adr_NX56_xmac0_regs_xmac_sr1,	0x1018B404
 .equ Adr_NX56_xmac1_regs_xmac_sr1,	0x1018B604

 .equ MSK_NX56_xmac_sr1_sr1,	0x0000ffff
 .equ SRT_NX56_xmac_sr1_sr1,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr2
@ => Shared Work Register 2 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr2       ,	0x00000008
 .equ Adr_NX56_xmac0_regs_xmac_sr2,	0x1018B408
 .equ Adr_NX56_xmac1_regs_xmac_sr2,	0x1018B608

 .equ MSK_NX56_xmac_sr2_sr2,	0x0000ffff
 .equ SRT_NX56_xmac_sr2_sr2,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr3
@ => Shared Work Register 3 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr3       ,	0x0000000C
 .equ Adr_NX56_xmac0_regs_xmac_sr3,	0x1018B40C
 .equ Adr_NX56_xmac1_regs_xmac_sr3,	0x1018B60C

 .equ MSK_NX56_xmac_sr3_sr3,	0x0000ffff
 .equ SRT_NX56_xmac_sr3_sr3,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr4
@ => Shared Work Register 4 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr4       ,	0x00000010
 .equ Adr_NX56_xmac0_regs_xmac_sr4,	0x1018B410
 .equ Adr_NX56_xmac1_regs_xmac_sr4,	0x1018B610

 .equ MSK_NX56_xmac_sr4_sr4,	0x0000ffff
 .equ SRT_NX56_xmac_sr4_sr4,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr5
@ => Shared Work Register 5 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr5       ,	0x00000014
 .equ Adr_NX56_xmac0_regs_xmac_sr5,	0x1018B414
 .equ Adr_NX56_xmac1_regs_xmac_sr5,	0x1018B614

 .equ MSK_NX56_xmac_sr5_sr5,	0x0000ffff
 .equ SRT_NX56_xmac_sr5_sr5,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr6
@ => Shared Work Register 6 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr6       ,	0x00000018
 .equ Adr_NX56_xmac0_regs_xmac_sr6,	0x1018B418
 .equ Adr_NX56_xmac1_regs_xmac_sr6,	0x1018B618

 .equ MSK_NX56_xmac_sr6_sr6,	0x0000ffff
 .equ SRT_NX56_xmac_sr6_sr6,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr7
@ => Shared Work Register 7 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr7       ,	0x0000001C
 .equ Adr_NX56_xmac0_regs_xmac_sr7,	0x1018B41C
 .equ Adr_NX56_xmac1_regs_xmac_sr7,	0x1018B61C

 .equ MSK_NX56_xmac_sr7_sr7,	0x0000ffff
 .equ SRT_NX56_xmac_sr7_sr7,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr8
@ => Shared Work Register 8 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr8       ,	0x00000020
 .equ Adr_NX56_xmac0_regs_xmac_sr8,	0x1018B420
 .equ Adr_NX56_xmac1_regs_xmac_sr8,	0x1018B620

 .equ MSK_NX56_xmac_sr8_sr8,	0x0000ffff
 .equ SRT_NX56_xmac_sr8_sr8,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr9
@ => Shared Work Register 9 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr9       ,	0x00000024
 .equ Adr_NX56_xmac0_regs_xmac_sr9,	0x1018B424
 .equ Adr_NX56_xmac1_regs_xmac_sr9,	0x1018B624

 .equ MSK_NX56_xmac_sr9_sr9,	0x0000ffff
 .equ SRT_NX56_xmac_sr9_sr9,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr10
@ => Shared Work Register 10 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr10       ,	0x00000028
 .equ Adr_NX56_xmac0_regs_xmac_sr10,	0x1018B428
 .equ Adr_NX56_xmac1_regs_xmac_sr10,	0x1018B628

 .equ MSK_NX56_xmac_sr10_sr10,	0x0000ffff
 .equ SRT_NX56_xmac_sr10_sr10,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr11
@ => Shared Work Register 11 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr11       ,	0x0000002C
 .equ Adr_NX56_xmac0_regs_xmac_sr11,	0x1018B42C
 .equ Adr_NX56_xmac1_regs_xmac_sr11,	0x1018B62C

 .equ MSK_NX56_xmac_sr11_sr11,	0x0000ffff
 .equ SRT_NX56_xmac_sr11_sr11,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr12
@ => Shared Work Register 12 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr12       ,	0x00000030
 .equ Adr_NX56_xmac0_regs_xmac_sr12,	0x1018B430
 .equ Adr_NX56_xmac1_regs_xmac_sr12,	0x1018B630

 .equ MSK_NX56_xmac_sr12_sr12,	0x0000ffff
 .equ SRT_NX56_xmac_sr12_sr12,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr13
@ => Shared Work Register 13 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr13       ,	0x00000034
 .equ Adr_NX56_xmac0_regs_xmac_sr13,	0x1018B434
 .equ Adr_NX56_xmac1_regs_xmac_sr13,	0x1018B634

 .equ MSK_NX56_xmac_sr13_sr13,	0x0000ffff
 .equ SRT_NX56_xmac_sr13_sr13,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr14
@ => Shared Work Register 14 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr14       ,	0x00000038
 .equ Adr_NX56_xmac0_regs_xmac_sr14,	0x1018B438
 .equ Adr_NX56_xmac1_regs_xmac_sr14,	0x1018B638

 .equ MSK_NX56_xmac_sr14_sr14,	0x0000ffff
 .equ SRT_NX56_xmac_sr14_sr14,	0

@ ---------------------------------------------------------------------
@ Register xmac_sr15
@ => Shared Work Register 15 accessible by all xMACs and xPECs
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sr15       ,	0x0000003C
 .equ Adr_NX56_xmac0_regs_xmac_sr15,	0x1018B43C
 .equ Adr_NX56_xmac1_regs_xmac_sr15,	0x1018B63C

 .equ MSK_NX56_xmac_sr15_sr15,	0x0000ffff
 .equ SRT_NX56_xmac_sr15_sr15,	0

@ ---------------------------------------------------------------------
@ Register xmac_status_shared0
@ => xMAC0 Shared Status Register:
@    This register is read-only except bits rx_ovf, tx_ufl and eld_bad_link which can be written with 1 to reset the appropriate FIFO/function.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_status_shared0       ,	0x00000040
 .equ Adr_NX56_xmac0_regs_xmac_status_shared0,	0x1018B440
 .equ Adr_NX56_xmac1_regs_xmac_status_shared0,	0x1018B640

 .equ MSK_NX56_xmac_status_shared0_gpio0_in         ,	0x00000001
 .equ SRT_NX56_xmac_status_shared0_gpio0_in         ,	0
 .equ MSK_NX56_xmac_status_shared0_gpio1_in         ,	0x00000002
 .equ SRT_NX56_xmac_status_shared0_gpio1_in         ,	1
 .equ MSK_NX56_xmac_status_shared0_gpio2_in_phy_led0,	0x00000004
 .equ SRT_NX56_xmac_status_shared0_gpio2_in_phy_led0,	2
 .equ MSK_NX56_xmac_status_shared0_gpio3_in_phy_led1,	0x00000008
 .equ SRT_NX56_xmac_status_shared0_gpio3_in_phy_led1,	3
 .equ MSK_NX56_xmac_status_shared0_gpio4_in_phy_led2,	0x00000010
 .equ SRT_NX56_xmac_status_shared0_gpio4_in_phy_led2,	4
 .equ MSK_NX56_xmac_status_shared0_gpio5_in_phy_led3,	0x00000020
 .equ SRT_NX56_xmac_status_shared0_gpio5_in_phy_led3,	5
 .equ MSK_NX56_xmac_status_shared0_brec             ,	0x00000040
 .equ SRT_NX56_xmac_status_shared0_brec             ,	6
 .equ MSK_NX56_xmac_status_shared0_btran            ,	0x00000080
 .equ SRT_NX56_xmac_status_shared0_btran            ,	7
 .equ MSK_NX56_xmac_status_shared0_stat_rpu         ,	0x00000100
 .equ SRT_NX56_xmac_status_shared0_stat_rpu         ,	8
 .equ MSK_NX56_xmac_status_shared0_stat_tpu         ,	0x00000200
 .equ SRT_NX56_xmac_status_shared0_stat_tpu         ,	9
 .equ MSK_NX56_xmac_status_shared0_rx_rdy           ,	0x00000400
 .equ SRT_NX56_xmac_status_shared0_rx_rdy           ,	10
 .equ MSK_NX56_xmac_status_shared0_rx_ovf           ,	0x00000800
 .equ SRT_NX56_xmac_status_shared0_rx_ovf           ,	11
 .equ MSK_NX56_xmac_status_shared0_tx_nxt           ,	0x00001000
 .equ SRT_NX56_xmac_status_shared0_tx_nxt           ,	12
 .equ MSK_NX56_xmac_status_shared0_tx_ufl           ,	0x00002000
 .equ SRT_NX56_xmac_status_shared0_tx_ufl           ,	13
 .equ MSK_NX56_xmac_status_shared0_utx_empty        ,	0x00004000
 .equ SRT_NX56_xmac_status_shared0_utx_empty        ,	14
 .equ MSK_NX56_xmac_status_shared0_eld_bad_link     ,	0x00008000
 .equ SRT_NX56_xmac_status_shared0_eld_bad_link     ,	15

@ ---------------------------------------------------------------------
@ Register xmac_config_shared0
@ => xMAC0 Shared Config Register:
@    Upper bits 15..8 are write mask and thus not readable.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_shared0       ,	0x00000044
 .equ Adr_NX56_xmac0_regs_xmac_config_shared0,	0x1018B444
 .equ Adr_NX56_xmac1_regs_xmac_config_shared0,	0x1018B644

 .equ MSK_NX56_xmac_config_shared0_gpio0_out       ,	0x00000001
 .equ SRT_NX56_xmac_config_shared0_gpio0_out       ,	0
 .equ MSK_NX56_xmac_config_shared0_gpio1_out       ,	0x00000002
 .equ SRT_NX56_xmac_config_shared0_gpio1_out       ,	1
 .equ MSK_NX56_xmac_config_shared0_gpio2_out       ,	0x00000004
 .equ SRT_NX56_xmac_config_shared0_gpio2_out       ,	2
 .equ MSK_NX56_xmac_config_shared0_gpio3_out       ,	0x00000008
 .equ SRT_NX56_xmac_config_shared0_gpio3_out       ,	3
 .equ MSK_NX56_xmac_config_shared0_gpio4_out       ,	0x00000010
 .equ SRT_NX56_xmac_config_shared0_gpio4_out       ,	4
 .equ MSK_NX56_xmac_config_shared0_gpio5_out       ,	0x00000020
 .equ SRT_NX56_xmac_config_shared0_gpio5_out       ,	5
 .equ MSK_NX56_xmac_config_shared0_reserved_stat   ,	0x000000c0
 .equ SRT_NX56_xmac_config_shared0_reserved_stat   ,	6
 .equ MSK_NX56_xmac_config_shared0_gpio0_out_wm    ,	0x00000100
 .equ SRT_NX56_xmac_config_shared0_gpio0_out_wm    ,	8
 .equ MSK_NX56_xmac_config_shared0_gpio1_out_wm    ,	0x00000200
 .equ SRT_NX56_xmac_config_shared0_gpio1_out_wm    ,	9
 .equ MSK_NX56_xmac_config_shared0_gpio2_out_wm    ,	0x00000400
 .equ SRT_NX56_xmac_config_shared0_gpio2_out_wm    ,	10
 .equ MSK_NX56_xmac_config_shared0_gpio3_out_wm    ,	0x00000800
 .equ SRT_NX56_xmac_config_shared0_gpio3_out_wm    ,	11
 .equ MSK_NX56_xmac_config_shared0_gpio4_out_wm    ,	0x00001000
 .equ SRT_NX56_xmac_config_shared0_gpio4_out_wm    ,	12
 .equ MSK_NX56_xmac_config_shared0_gpio5_out_wm    ,	0x00002000
 .equ SRT_NX56_xmac_config_shared0_gpio5_out_wm    ,	13
 .equ MSK_NX56_xmac_config_shared0_reserved_stat_wm,	0x0000c000
 .equ SRT_NX56_xmac_config_shared0_reserved_stat_wm,	14

@ ---------------------------------------------------------------------
@ Register xmac_io_oe_shared0
@ => xMAC0 Shared GPIO Output Enable Register:
@    Upper bits 15..8 are write mask and thus not readable.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_io_oe_shared0       ,	0x00000048
 .equ Adr_NX56_xmac0_regs_xmac_io_oe_shared0,	0x1018B448
 .equ Adr_NX56_xmac1_regs_xmac_io_oe_shared0,	0x1018B648

 .equ MSK_NX56_xmac_io_oe_shared0_gpio0_oe        ,	0x00000001
 .equ SRT_NX56_xmac_io_oe_shared0_gpio0_oe        ,	0
 .equ MSK_NX56_xmac_io_oe_shared0_gpio1_oe        ,	0x00000002
 .equ SRT_NX56_xmac_io_oe_shared0_gpio1_oe        ,	1
 .equ MSK_NX56_xmac_io_oe_shared0_gpio2_oe        ,	0x00000004
 .equ SRT_NX56_xmac_io_oe_shared0_gpio2_oe        ,	2
 .equ MSK_NX56_xmac_io_oe_shared0_gpio3_oe        ,	0x00000008
 .equ SRT_NX56_xmac_io_oe_shared0_gpio3_oe        ,	3
 .equ MSK_NX56_xmac_io_oe_shared0_gpio4_oe        ,	0x00000010
 .equ SRT_NX56_xmac_io_oe_shared0_gpio4_oe        ,	4
 .equ MSK_NX56_xmac_io_oe_shared0_gpio5_oe        ,	0x00000020
 .equ SRT_NX56_xmac_io_oe_shared0_gpio5_oe        ,	5
 .equ MSK_NX56_xmac_io_oe_shared0_reserved_stat   ,	0x000000c0
 .equ SRT_NX56_xmac_io_oe_shared0_reserved_stat   ,	6
 .equ MSK_NX56_xmac_io_oe_shared0_gpio0_oe_wm     ,	0x00000100
 .equ SRT_NX56_xmac_io_oe_shared0_gpio0_oe_wm     ,	8
 .equ MSK_NX56_xmac_io_oe_shared0_gpio1_oe_wm     ,	0x00000200
 .equ SRT_NX56_xmac_io_oe_shared0_gpio1_oe_wm     ,	9
 .equ MSK_NX56_xmac_io_oe_shared0_gpio2_oe_wm     ,	0x00000400
 .equ SRT_NX56_xmac_io_oe_shared0_gpio2_oe_wm     ,	10
 .equ MSK_NX56_xmac_io_oe_shared0_gpio3_oe_wm     ,	0x00000800
 .equ SRT_NX56_xmac_io_oe_shared0_gpio3_oe_wm     ,	11
 .equ MSK_NX56_xmac_io_oe_shared0_gpio4_oe_wm     ,	0x00001000
 .equ SRT_NX56_xmac_io_oe_shared0_gpio4_oe_wm     ,	12
 .equ MSK_NX56_xmac_io_oe_shared0_gpio5_oe_wm     ,	0x00002000
 .equ SRT_NX56_xmac_io_oe_shared0_gpio5_oe_wm     ,	13
 .equ MSK_NX56_xmac_io_oe_shared0_reserved_stat_wm,	0x0000c000
 .equ SRT_NX56_xmac_io_oe_shared0_reserved_stat_wm,	14

@ ---------------------------------------------------------------------
@ Register xmac_status_shared1
@ => xMAC1 Shared Status Register:
@    This register is read-only except bits rx_ovf, tx_ufl and eld_bad_link which can be written with 1 to reset the appropriate FIFO/function.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_status_shared1       ,	0x0000004C
 .equ Adr_NX56_xmac0_regs_xmac_status_shared1,	0x1018B44C
 .equ Adr_NX56_xmac1_regs_xmac_status_shared1,	0x1018B64C

 .equ MSK_NX56_xmac_status_shared1_gpio0_in         ,	0x00000001
 .equ SRT_NX56_xmac_status_shared1_gpio0_in         ,	0
 .equ MSK_NX56_xmac_status_shared1_gpio1_in         ,	0x00000002
 .equ SRT_NX56_xmac_status_shared1_gpio1_in         ,	1
 .equ MSK_NX56_xmac_status_shared1_gpio2_in_phy_led0,	0x00000004
 .equ SRT_NX56_xmac_status_shared1_gpio2_in_phy_led0,	2
 .equ MSK_NX56_xmac_status_shared1_gpio3_in_phy_led1,	0x00000008
 .equ SRT_NX56_xmac_status_shared1_gpio3_in_phy_led1,	3
 .equ MSK_NX56_xmac_status_shared1_gpio4_in_phy_led2,	0x00000010
 .equ SRT_NX56_xmac_status_shared1_gpio4_in_phy_led2,	4
 .equ MSK_NX56_xmac_status_shared1_gpio5_in_phy_led3,	0x00000020
 .equ SRT_NX56_xmac_status_shared1_gpio5_in_phy_led3,	5
 .equ MSK_NX56_xmac_status_shared1_brec             ,	0x00000040
 .equ SRT_NX56_xmac_status_shared1_brec             ,	6
 .equ MSK_NX56_xmac_status_shared1_btran            ,	0x00000080
 .equ SRT_NX56_xmac_status_shared1_btran            ,	7
 .equ MSK_NX56_xmac_status_shared1_stat_rpu         ,	0x00000100
 .equ SRT_NX56_xmac_status_shared1_stat_rpu         ,	8
 .equ MSK_NX56_xmac_status_shared1_stat_tpu         ,	0x00000200
 .equ SRT_NX56_xmac_status_shared1_stat_tpu         ,	9
 .equ MSK_NX56_xmac_status_shared1_rx_rdy           ,	0x00000400
 .equ SRT_NX56_xmac_status_shared1_rx_rdy           ,	10
 .equ MSK_NX56_xmac_status_shared1_rx_ovf           ,	0x00000800
 .equ SRT_NX56_xmac_status_shared1_rx_ovf           ,	11
 .equ MSK_NX56_xmac_status_shared1_tx_nxt           ,	0x00001000
 .equ SRT_NX56_xmac_status_shared1_tx_nxt           ,	12
 .equ MSK_NX56_xmac_status_shared1_tx_ufl           ,	0x00002000
 .equ SRT_NX56_xmac_status_shared1_tx_ufl           ,	13
 .equ MSK_NX56_xmac_status_shared1_utx_empty        ,	0x00004000
 .equ SRT_NX56_xmac_status_shared1_utx_empty        ,	14
 .equ MSK_NX56_xmac_status_shared1_eld_bad_link     ,	0x00008000
 .equ SRT_NX56_xmac_status_shared1_eld_bad_link     ,	15

@ ---------------------------------------------------------------------
@ Register xmac_config_shared1
@ => xMAC1 Shared Config Register:
@    Upper bits 15..8 are write mask and thus not readable.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_shared1       ,	0x00000050
 .equ Adr_NX56_xmac0_regs_xmac_config_shared1,	0x1018B450
 .equ Adr_NX56_xmac1_regs_xmac_config_shared1,	0x1018B650

 .equ MSK_NX56_xmac_config_shared1_gpio0_out       ,	0x00000001
 .equ SRT_NX56_xmac_config_shared1_gpio0_out       ,	0
 .equ MSK_NX56_xmac_config_shared1_gpio1_out       ,	0x00000002
 .equ SRT_NX56_xmac_config_shared1_gpio1_out       ,	1
 .equ MSK_NX56_xmac_config_shared1_gpio2_out       ,	0x00000004
 .equ SRT_NX56_xmac_config_shared1_gpio2_out       ,	2
 .equ MSK_NX56_xmac_config_shared1_gpio3_out       ,	0x00000008
 .equ SRT_NX56_xmac_config_shared1_gpio3_out       ,	3
 .equ MSK_NX56_xmac_config_shared1_gpio4_out       ,	0x00000010
 .equ SRT_NX56_xmac_config_shared1_gpio4_out       ,	4
 .equ MSK_NX56_xmac_config_shared1_gpio5_out       ,	0x00000020
 .equ SRT_NX56_xmac_config_shared1_gpio5_out       ,	5
 .equ MSK_NX56_xmac_config_shared1_reserved_stat   ,	0x000000c0
 .equ SRT_NX56_xmac_config_shared1_reserved_stat   ,	6
 .equ MSK_NX56_xmac_config_shared1_gpio0_out_wm    ,	0x00000100
 .equ SRT_NX56_xmac_config_shared1_gpio0_out_wm    ,	8
 .equ MSK_NX56_xmac_config_shared1_gpio1_out_wm    ,	0x00000200
 .equ SRT_NX56_xmac_config_shared1_gpio1_out_wm    ,	9
 .equ MSK_NX56_xmac_config_shared1_gpio2_out_wm    ,	0x00000400
 .equ SRT_NX56_xmac_config_shared1_gpio2_out_wm    ,	10
 .equ MSK_NX56_xmac_config_shared1_gpio3_out_wm    ,	0x00000800
 .equ SRT_NX56_xmac_config_shared1_gpio3_out_wm    ,	11
 .equ MSK_NX56_xmac_config_shared1_gpio4_out_wm    ,	0x00001000
 .equ SRT_NX56_xmac_config_shared1_gpio4_out_wm    ,	12
 .equ MSK_NX56_xmac_config_shared1_gpio5_out_wm    ,	0x00002000
 .equ SRT_NX56_xmac_config_shared1_gpio5_out_wm    ,	13
 .equ MSK_NX56_xmac_config_shared1_reserved_stat_wm,	0x0000c000
 .equ SRT_NX56_xmac_config_shared1_reserved_stat_wm,	14

@ ---------------------------------------------------------------------
@ Register xmac_io_oe_shared1
@ => xMAC1 Shared GPIO Output Enable Register:
@    Upper bits 15..8 are write mask and thus not readable.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_io_oe_shared1       ,	0x00000054
 .equ Adr_NX56_xmac0_regs_xmac_io_oe_shared1,	0x1018B454
 .equ Adr_NX56_xmac1_regs_xmac_io_oe_shared1,	0x1018B654

 .equ MSK_NX56_xmac_io_oe_shared1_gpio0_oe        ,	0x00000001
 .equ SRT_NX56_xmac_io_oe_shared1_gpio0_oe        ,	0
 .equ MSK_NX56_xmac_io_oe_shared1_gpio1_oe        ,	0x00000002
 .equ SRT_NX56_xmac_io_oe_shared1_gpio1_oe        ,	1
 .equ MSK_NX56_xmac_io_oe_shared1_gpio2_oe        ,	0x00000004
 .equ SRT_NX56_xmac_io_oe_shared1_gpio2_oe        ,	2
 .equ MSK_NX56_xmac_io_oe_shared1_gpio3_oe        ,	0x00000008
 .equ SRT_NX56_xmac_io_oe_shared1_gpio3_oe        ,	3
 .equ MSK_NX56_xmac_io_oe_shared1_gpio4_oe        ,	0x00000010
 .equ SRT_NX56_xmac_io_oe_shared1_gpio4_oe        ,	4
 .equ MSK_NX56_xmac_io_oe_shared1_gpio5_oe        ,	0x00000020
 .equ SRT_NX56_xmac_io_oe_shared1_gpio5_oe        ,	5
 .equ MSK_NX56_xmac_io_oe_shared1_reserved_stat   ,	0x000000c0
 .equ SRT_NX56_xmac_io_oe_shared1_reserved_stat   ,	6
 .equ MSK_NX56_xmac_io_oe_shared1_gpio0_oe_wm     ,	0x00000100
 .equ SRT_NX56_xmac_io_oe_shared1_gpio0_oe_wm     ,	8
 .equ MSK_NX56_xmac_io_oe_shared1_gpio1_oe_wm     ,	0x00000200
 .equ SRT_NX56_xmac_io_oe_shared1_gpio1_oe_wm     ,	9
 .equ MSK_NX56_xmac_io_oe_shared1_gpio2_oe_wm     ,	0x00000400
 .equ SRT_NX56_xmac_io_oe_shared1_gpio2_oe_wm     ,	10
 .equ MSK_NX56_xmac_io_oe_shared1_gpio3_oe_wm     ,	0x00000800
 .equ SRT_NX56_xmac_io_oe_shared1_gpio3_oe_wm     ,	11
 .equ MSK_NX56_xmac_io_oe_shared1_gpio4_oe_wm     ,	0x00001000
 .equ SRT_NX56_xmac_io_oe_shared1_gpio4_oe_wm     ,	12
 .equ MSK_NX56_xmac_io_oe_shared1_gpio5_oe_wm     ,	0x00002000
 .equ SRT_NX56_xmac_io_oe_shared1_gpio5_oe_wm     ,	13
 .equ MSK_NX56_xmac_io_oe_shared1_reserved_stat_wm,	0x0000c000
 .equ SRT_NX56_xmac_io_oe_shared1_reserved_stat_wm,	14

@ ---------------------------------------------------------------------
@ Register xmac_urx_utx0
@ => xMAC0 URX/UTX Shared Register FIFO
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_urx_utx0       ,	0x00000070
 .equ Adr_NX56_xmac0_regs_xmac_urx_utx0,	0x1018B470
 .equ Adr_NX56_xmac1_regs_xmac_urx_utx0,	0x1018B670

 .equ MSK_NX56_xmac_urx_utx0_utrx_xmac0,	0x0000ffff
 .equ SRT_NX56_xmac_urx_utx0_utrx_xmac0,	0

@ ---------------------------------------------------------------------
@ Register xmac_urx_utx1
@ => xMAC1 URX/UTX Shared Register FIFO
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_urx_utx1       ,	0x00000074
 .equ Adr_NX56_xmac0_regs_xmac_urx_utx1,	0x1018B474
 .equ Adr_NX56_xmac1_regs_xmac_urx_utx1,	0x1018B674

 .equ MSK_NX56_xmac_urx_utx1_utrx_xmac1,	0x0000ffff
 .equ SRT_NX56_xmac_urx_utx1_utrx_xmac1,	0

@ ---------------------------------------------------------------------
@ Register xmac_urx
@ => xMAC URX FIFO input
@    URX FIFO is part of xMAC. It can be read (output) by all xMACs and xPECs, but only written (input) by the xMAC it belongs to.
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_urx       ,	0x00000080
 .equ Adr_NX56_xmac0_regs_xmac_urx,	0x1018B480
 .equ Adr_NX56_xmac1_regs_xmac_urx,	0x1018B680

 .equ MSK_NX56_xmac_urx_urx,	0x0000ffff
 .equ SRT_NX56_xmac_urx_urx,	0

@ ---------------------------------------------------------------------
@ Register xmac_utx
@ => xMAC UTX FIFO output
@    UTX FIFO is part of xMAC. It can be written (input) by all xMACs and xPECs, but only read (output) by the xMAC it belongs to.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_utx       ,	0x00000084
 .equ Adr_NX56_xmac0_regs_xmac_utx,	0x1018B484
 .equ Adr_NX56_xmac1_regs_xmac_utx,	0x1018B684

 .equ MSK_NX56_xmac_utx_utx,	0x0000ffff
 .equ SRT_NX56_xmac_utx_utx,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx
@ => xMAC RX Register
@    Sampled bits from SBU are collected in this register, \
@    i.e. if a new bit arrives from SBU (sync), other bits are shifted (direction programmable).
@    Same behavior in MII-Modes (4 bits arrive in parallel and the other bits are shifted by 4).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx       ,	0x00000088
 .equ Adr_NX56_xmac0_regs_xmac_rx,	0x1018B488
 .equ Adr_NX56_xmac1_regs_xmac_rx,	0x1018B688

 .equ MSK_NX56_xmac_rx_rx,	0x0000ffff
 .equ SRT_NX56_xmac_rx_rx,	0

@ ---------------------------------------------------------------------
@ Register xmac_other_rx
@ => RX Register of other xMAC.
@    Used for fast forward of data between 2 xMACs (specially in MII-HUB-mode)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_other_rx       ,	0x0000008C
 .equ Adr_NX56_xmac0_regs_xmac_other_rx,	0x1018B48C
 .equ Adr_NX56_xmac1_regs_xmac_other_rx,	0x1018B68C

 .equ MSK_NX56_xmac_other_rx_rx,	0x0000ffff
 .equ SRT_NX56_xmac_other_rx_rx,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_hw
@ => xMAC RX_HW Register
@    rx_hw bit in RPU-code writes actually received bit from rx to this register.
@    Useful in case of bitwise format, to collect source bits from raw input bitstream (e.g. in HDLC-coding).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_hw       ,	0x00000090
 .equ Adr_NX56_xmac0_regs_xmac_rx_hw,	0x1018B490
 .equ Adr_NX56_xmac1_regs_xmac_rx_hw,	0x1018B690

 .equ MSK_NX56_xmac_rx_hw_rx_hw,	0x0000ffff
 .equ SRT_NX56_xmac_rx_hw_rx_hw,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_hw_count
@ => xMAC RX_HW_COUNT Register
@    Counts bits collected by rx_hw bit RPU-code.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_hw_count       ,	0x00000094
 .equ Adr_NX56_xmac0_regs_xmac_rx_hw_count,	0x1018B494
 .equ Adr_NX56_xmac1_regs_xmac_rx_hw_count,	0x1018B694

 .equ MSK_NX56_xmac_rx_hw_count_rx_hw_count,	0x0000ffff
 .equ SRT_NX56_xmac_rx_hw_count_rx_hw_count,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx
@ => xMAC TX Register
@    Transmitted bits read automatically by OBU from this register, \
@    i.e. if a bit is send (sync), other bits are rotated accordingly (direction programmable).
@    Same behavior in MII-Modes (4 bits arrive in parallel and the other bits are rotated by 4).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx       ,	0x00000098
 .equ Adr_NX56_xmac0_regs_xmac_tx,	0x1018B498
 .equ Adr_NX56_xmac1_regs_xmac_tx,	0x1018B698

 .equ MSK_NX56_xmac_tx_tx,	0x0000ffff
 .equ SRT_NX56_xmac_tx_tx,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_hw
@ => xMAC TX_HW Register
@    tx_hw bit in TPU-code writes to be transmitted bit in tx register from this register
@    Useful in case of bitwise format, to insert source bits into output bitstream.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_hw       ,	0x0000009C
 .equ Adr_NX56_xmac0_regs_xmac_tx_hw,	0x1018B49C
 .equ Adr_NX56_xmac1_regs_xmac_tx_hw,	0x1018B69C

 .equ MSK_NX56_xmac_tx_hw_tx_hw,	0x0000ffff
 .equ SRT_NX56_xmac_tx_hw_tx_hw,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_hw_count
@ => xMAC TX_HW_COUNT Register
@    Counts bits transmitted by tx_hw bit in TPU-code.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_hw_count       ,	0x000000A0
 .equ Adr_NX56_xmac0_regs_xmac_tx_hw_count,	0x1018B4A0
 .equ Adr_NX56_xmac1_regs_xmac_tx_hw_count,	0x1018B6A0

 .equ MSK_NX56_xmac_tx_hw_count_tx_hw_count,	0x0000ffff
 .equ SRT_NX56_xmac_tx_hw_count_tx_hw_count,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_sent
@ => xMAC TX Sent Register
@    Collects already transmitted bits.
@    Useful for pattern match.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_sent       ,	0x000000A4
 .equ Adr_NX56_xmac0_regs_xmac_tx_sent,	0x1018B4A4
 .equ Adr_NX56_xmac1_regs_xmac_tx_sent,	0x1018B6A4

 .equ MSK_NX56_xmac_tx_sent_tx_sent,	0x0000ffff
 .equ SRT_NX56_xmac_tx_sent_tx_sent,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpu_pc
@ => RPU Progamm counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpu_pc       ,	0x000000A8
 .equ Adr_NX56_xmac0_regs_xmac_rpu_pc,	0x1018B4A8
 .equ Adr_NX56_xmac1_regs_xmac_rpu_pc,	0x1018B6A8

 .equ MSK_NX56_xmac_rpu_pc_rpu_pc,	0x0000007f
 .equ SRT_NX56_xmac_rpu_pc_rpu_pc,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpu_jmp_latch
@ => RPU Jump Latch:
@    Stores old PC at jump (via write to pc or via jump to address different from pc+1).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpu_jmp_latch       ,	0x000000AC
 .equ Adr_NX56_xmac0_regs_xmac_rpu_jmp_latch,	0x1018B4AC
 .equ Adr_NX56_xmac1_regs_xmac_rpu_jmp_latch,	0x1018B6AC

 .equ MSK_NX56_xmac_rpu_jmp_latch_old_pc,	0x0000007f
 .equ SRT_NX56_xmac_rpu_jmp_latch_old_pc,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpu_pc
@ => TPU Progamm counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpu_pc       ,	0x000000B0
 .equ Adr_NX56_xmac0_regs_xmac_tpu_pc,	0x1018B4B0
 .equ Adr_NX56_xmac1_regs_xmac_tpu_pc,	0x1018B6B0

 .equ MSK_NX56_xmac_tpu_pc_tpu_pc,	0x0000007f
 .equ SRT_NX56_xmac_tpu_pc_tpu_pc,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpu_jmp_latch
@ => TPU Jump Latch:
@    Stores old PC at jump (via write to pc or via jump to address different from pc+1).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpu_jmp_latch       ,	0x000000B4
 .equ Adr_NX56_xmac0_regs_xmac_tpu_jmp_latch,	0x1018B4B4
 .equ Adr_NX56_xmac1_regs_xmac_tpu_jmp_latch,	0x1018B6B4

 .equ MSK_NX56_xmac_tpu_jmp_latch_old_pc,	0x0000007f
 .equ SRT_NX56_xmac_tpu_jmp_latch_old_pc,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr0
@ => xMAC internal Work Register 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr0       ,	0x000000B8
 .equ Adr_NX56_xmac0_regs_xmac_wr0,	0x1018B4B8
 .equ Adr_NX56_xmac1_regs_xmac_wr0,	0x1018B6B8

 .equ MSK_NX56_xmac_wr0_wr0,	0x0000ffff
 .equ SRT_NX56_xmac_wr0_wr0,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr1
@ => xMAC internal Work Register 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr1       ,	0x000000BC
 .equ Adr_NX56_xmac0_regs_xmac_wr1,	0x1018B4BC
 .equ Adr_NX56_xmac1_regs_xmac_wr1,	0x1018B6BC

 .equ MSK_NX56_xmac_wr1_wr1,	0x0000ffff
 .equ SRT_NX56_xmac_wr1_wr1,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr2
@ => xMAC internal Work Register 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr2       ,	0x000000C0
 .equ Adr_NX56_xmac0_regs_xmac_wr2,	0x1018B4C0
 .equ Adr_NX56_xmac1_regs_xmac_wr2,	0x1018B6C0

 .equ MSK_NX56_xmac_wr2_wr2,	0x0000ffff
 .equ SRT_NX56_xmac_wr2_wr2,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr3
@ => xMAC internal Work Register 3
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr3       ,	0x000000C4
 .equ Adr_NX56_xmac0_regs_xmac_wr3,	0x1018B4C4
 .equ Adr_NX56_xmac1_regs_xmac_wr3,	0x1018B6C4

 .equ MSK_NX56_xmac_wr3_wr3,	0x0000ffff
 .equ SRT_NX56_xmac_wr3_wr3,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr4
@ => xMAC internal Work Register 4
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr4       ,	0x000000C8
 .equ Adr_NX56_xmac0_regs_xmac_wr4,	0x1018B4C8
 .equ Adr_NX56_xmac1_regs_xmac_wr4,	0x1018B6C8

 .equ MSK_NX56_xmac_wr4_wr4,	0x0000ffff
 .equ SRT_NX56_xmac_wr4_wr4,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr5
@ => xMAC internal Work Register 5
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr5       ,	0x000000CC
 .equ Adr_NX56_xmac0_regs_xmac_wr5,	0x1018B4CC
 .equ Adr_NX56_xmac1_regs_xmac_wr5,	0x1018B6CC

 .equ MSK_NX56_xmac_wr5_wr5,	0x0000ffff
 .equ SRT_NX56_xmac_wr5_wr5,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr6
@ => xMAC internal Work Register 6
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr6       ,	0x000000D0
 .equ Adr_NX56_xmac0_regs_xmac_wr6,	0x1018B4D0
 .equ Adr_NX56_xmac1_regs_xmac_wr6,	0x1018B6D0

 .equ MSK_NX56_xmac_wr6_wr6,	0x0000ffff
 .equ SRT_NX56_xmac_wr6_wr6,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr7
@ => xMAC internal Work Register 7
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr7       ,	0x000000D4
 .equ Adr_NX56_xmac0_regs_xmac_wr7,	0x1018B4D4
 .equ Adr_NX56_xmac1_regs_xmac_wr7,	0x1018B6D4

 .equ MSK_NX56_xmac_wr7_wr7,	0x0000ffff
 .equ SRT_NX56_xmac_wr7_wr7,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr8
@ => xMAC internal Work Register 8
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr8       ,	0x000000D8
 .equ Adr_NX56_xmac0_regs_xmac_wr8,	0x1018B4D8
 .equ Adr_NX56_xmac1_regs_xmac_wr8,	0x1018B6D8

 .equ MSK_NX56_xmac_wr8_wr8,	0x0000ffff
 .equ SRT_NX56_xmac_wr8_wr8,	0

@ ---------------------------------------------------------------------
@ Register xmac_wr9
@ => xMAC internal Work Register 9
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_wr9       ,	0x000000DC
 .equ Adr_NX56_xmac0_regs_xmac_wr9,	0x1018B4DC
 .equ Adr_NX56_xmac1_regs_xmac_wr9,	0x1018B6DC

 .equ MSK_NX56_xmac_wr9_wr9,	0x0000ffff
 .equ SRT_NX56_xmac_wr9_wr9,	0

@ ---------------------------------------------------------------------
@ Register xmac_sys_time
@ => xMAC System Time
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sys_time       ,	0x000000E0
 .equ Adr_NX56_xmac0_regs_xmac_sys_time,	0x1018B4E0
 .equ Adr_NX56_xmac1_regs_xmac_sys_time,	0x1018B6E0

 .equ MSK_NX56_xmac_sys_time_sys_time,	0x0000ffff
 .equ SRT_NX56_xmac_sys_time_sys_time,	0

@ ---------------------------------------------------------------------
@ Register xmac_sys_time_upper
@ => xMAC System Time uppler bits,
@    latched at read access of xmac_sys_time.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sys_time_upper       ,	0x000000E4
 .equ Adr_NX56_xmac0_regs_xmac_sys_time_upper,	0x1018B4E4
 .equ Adr_NX56_xmac1_regs_xmac_sys_time_upper,	0x1018B6E4

 .equ MSK_NX56_xmac_sys_time_upper_val,	0x0000ffff
 .equ SRT_NX56_xmac_sys_time_upper_val,	0

@ ---------------------------------------------------------------------
@ Register xmac_sys_time_uc
@ => xMAC System Time Uncontrolled
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sys_time_uc       ,	0x000000E8
 .equ Adr_NX56_xmac0_regs_xmac_sys_time_uc,	0x1018B4E8
 .equ Adr_NX56_xmac1_regs_xmac_sys_time_uc,	0x1018B6E8

 .equ MSK_NX56_xmac_sys_time_uc_val,	0x0000ffff
 .equ SRT_NX56_xmac_sys_time_uc_val,	0

@ ---------------------------------------------------------------------
@ Register xmac_sys_time_uc_upper
@ => xMAC System Time uppler bits,
@    latched at read access of xmac_sys_time.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sys_time_uc_upper       ,	0x000000EC
 .equ Adr_NX56_xmac0_regs_xmac_sys_time_uc_upper,	0x1018B4EC
 .equ Adr_NX56_xmac1_regs_xmac_sys_time_uc_upper,	0x1018B6EC

 .equ MSK_NX56_xmac_sys_time_uc_upper_val,	0x0000ffff
 .equ SRT_NX56_xmac_sys_time_uc_upper_val,	0

@ ---------------------------------------------------------------------
@ Register xmac_cmp0_status
@ => xMAC Compare0 Status Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_cmp0_status       ,	0x000000F0
 .equ Adr_NX56_xmac0_regs_xmac_cmp0_status,	0x1018B4F0
 .equ Adr_NX56_xmac1_regs_xmac_cmp0_status,	0x1018B6F0

 .equ MSK_NX56_xmac_cmp0_status_sr0_z      ,	0x00000001
 .equ SRT_NX56_xmac_cmp0_status_sr0_z      ,	0
 .equ MSK_NX56_xmac_cmp0_status_sr1_z      ,	0x00000002
 .equ SRT_NX56_xmac_cmp0_status_sr1_z      ,	1
 .equ MSK_NX56_xmac_cmp0_status_sr2_z      ,	0x00000004
 .equ SRT_NX56_xmac_cmp0_status_sr2_z      ,	2
 .equ MSK_NX56_xmac_cmp0_status_sr3_z      ,	0x00000008
 .equ SRT_NX56_xmac_cmp0_status_sr3_z      ,	3
 .equ MSK_NX56_xmac_cmp0_status_sr4_z      ,	0x00000010
 .equ SRT_NX56_xmac_cmp0_status_sr4_z      ,	4
 .equ MSK_NX56_xmac_cmp0_status_sr5_z      ,	0x00000020
 .equ SRT_NX56_xmac_cmp0_status_sr5_z      ,	5
 .equ MSK_NX56_xmac_cmp0_status_sr6_z      ,	0x00000040
 .equ SRT_NX56_xmac_cmp0_status_sr6_z      ,	6
 .equ MSK_NX56_xmac_cmp0_status_sr7_z      ,	0x00000080
 .equ SRT_NX56_xmac_cmp0_status_sr7_z      ,	7
 .equ MSK_NX56_xmac_cmp0_status_cnt_rx_z   ,	0x00000100
 .equ SRT_NX56_xmac_cmp0_status_cnt_rx_z   ,	8
 .equ MSK_NX56_xmac_cmp0_status_cnt_tx_z   ,	0x00000200
 .equ SRT_NX56_xmac_cmp0_status_cnt_tx_z   ,	9
 .equ MSK_NX56_xmac_cmp0_status_cnt_rx_hw_z,	0x00000400
 .equ SRT_NX56_xmac_cmp0_status_cnt_rx_hw_z,	10
 .equ MSK_NX56_xmac_cmp0_status_cnt_tx_hw_z,	0x00000800
 .equ SRT_NX56_xmac_cmp0_status_cnt_tx_hw_z,	11
 .equ MSK_NX56_xmac_cmp0_status_cnt1_rpu_z ,	0x00001000
 .equ SRT_NX56_xmac_cmp0_status_cnt1_rpu_z ,	12
 .equ MSK_NX56_xmac_cmp0_status_cnt2_rpu_z ,	0x00002000
 .equ SRT_NX56_xmac_cmp0_status_cnt2_rpu_z ,	13
 .equ MSK_NX56_xmac_cmp0_status_cnt1_tpu_z ,	0x00004000
 .equ SRT_NX56_xmac_cmp0_status_cnt1_tpu_z ,	14
 .equ MSK_NX56_xmac_cmp0_status_cnt2_tpu_z ,	0x00008000
 .equ SRT_NX56_xmac_cmp0_status_cnt2_tpu_z ,	15

@ ---------------------------------------------------------------------
@ Register xmac_cmp1_status
@ => xMAC Compare1 Status Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_cmp1_status       ,	0x000000F4
 .equ Adr_NX56_xmac0_regs_xmac_cmp1_status,	0x1018B4F4
 .equ Adr_NX56_xmac1_regs_xmac_cmp1_status,	0x1018B6F4

 .equ MSK_NX56_xmac_cmp1_status_wr0_z  ,	0x00000001
 .equ SRT_NX56_xmac_cmp1_status_wr0_z  ,	0
 .equ MSK_NX56_xmac_cmp1_status_wr1_z  ,	0x00000002
 .equ SRT_NX56_xmac_cmp1_status_wr1_z  ,	1
 .equ MSK_NX56_xmac_cmp1_status_wr2_z  ,	0x00000004
 .equ SRT_NX56_xmac_cmp1_status_wr2_z  ,	2
 .equ MSK_NX56_xmac_cmp1_status_wr3_z  ,	0x00000008
 .equ SRT_NX56_xmac_cmp1_status_wr3_z  ,	3
 .equ MSK_NX56_xmac_cmp1_status_wr4_z  ,	0x00000010
 .equ SRT_NX56_xmac_cmp1_status_wr4_z  ,	4
 .equ MSK_NX56_xmac_cmp1_status_wr5_z  ,	0x00000020
 .equ SRT_NX56_xmac_cmp1_status_wr5_z  ,	5
 .equ MSK_NX56_xmac_cmp1_status_wr6_z  ,	0x00000040
 .equ SRT_NX56_xmac_cmp1_status_wr6_z  ,	6
 .equ MSK_NX56_xmac_cmp1_status_wr7_z  ,	0x00000080
 .equ SRT_NX56_xmac_cmp1_status_wr7_z  ,	7
 .equ MSK_NX56_xmac_cmp1_status_wr8_z  ,	0x00000100
 .equ SRT_NX56_xmac_cmp1_status_wr8_z  ,	8
 .equ MSK_NX56_xmac_cmp1_status_wr9_z  ,	0x00000200
 .equ SRT_NX56_xmac_cmp1_status_wr9_z  ,	9
 .equ MSK_NX56_xmac_cmp1_status_wr0_wr1,	0x00000400
 .equ SRT_NX56_xmac_cmp1_status_wr0_wr1,	10
 .equ MSK_NX56_xmac_cmp1_status_wr2_wr3,	0x00000800
 .equ SRT_NX56_xmac_cmp1_status_wr2_wr3,	11
 .equ MSK_NX56_xmac_cmp1_status_wr4_wr5,	0x00001000
 .equ SRT_NX56_xmac_cmp1_status_wr4_wr5,	12
 .equ MSK_NX56_xmac_cmp1_status_wr6_wr7,	0x00002000
 .equ SRT_NX56_xmac_cmp1_status_wr6_wr7,	13
 .equ MSK_NX56_xmac_cmp1_status_wr8_wr9,	0x00004000
 .equ SRT_NX56_xmac_cmp1_status_wr8_wr9,	14
 .equ MSK_NX56_xmac_cmp1_status_zero   ,	0x00008000
 .equ SRT_NX56_xmac_cmp1_status_zero   ,	15

@ ---------------------------------------------------------------------
@ Register xmac_cmp2_status
@ => xMAC Compare2 Status Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_cmp2_status       ,	0x000000F8
 .equ Adr_NX56_xmac0_regs_xmac_cmp2_status,	0x1018B4F8
 .equ Adr_NX56_xmac1_regs_xmac_cmp2_status,	0x1018B6F8

 .equ MSK_NX56_xmac_cmp2_status_wr0_sr0 ,	0x00000001
 .equ SRT_NX56_xmac_cmp2_status_wr0_sr0 ,	0
 .equ MSK_NX56_xmac_cmp2_status_wr1_sr1 ,	0x00000002
 .equ SRT_NX56_xmac_cmp2_status_wr1_sr1 ,	1
 .equ MSK_NX56_xmac_cmp2_status_wr2_sr2 ,	0x00000004
 .equ SRT_NX56_xmac_cmp2_status_wr2_sr2 ,	2
 .equ MSK_NX56_xmac_cmp2_status_wr3_sr3 ,	0x00000008
 .equ SRT_NX56_xmac_cmp2_status_wr3_sr3 ,	3
 .equ MSK_NX56_xmac_cmp2_status_wr4_sr4 ,	0x00000010
 .equ SRT_NX56_xmac_cmp2_status_wr4_sr4 ,	4
 .equ MSK_NX56_xmac_cmp2_status_wr5_sr5 ,	0x00000020
 .equ SRT_NX56_xmac_cmp2_status_wr5_sr5 ,	5
 .equ MSK_NX56_xmac_cmp2_status_wr6_sr6 ,	0x00000040
 .equ SRT_NX56_xmac_cmp2_status_wr6_sr6 ,	6
 .equ MSK_NX56_xmac_cmp2_status_wr7_sr7 ,	0x00000080
 .equ SRT_NX56_xmac_cmp2_status_wr7_sr7 ,	7
 .equ MSK_NX56_xmac_cmp2_status_wr8_sr8 ,	0x00000100
 .equ SRT_NX56_xmac_cmp2_status_wr8_sr8 ,	8
 .equ MSK_NX56_xmac_cmp2_status_wr9_sr9 ,	0x00000200
 .equ SRT_NX56_xmac_cmp2_status_wr9_sr9 ,	9
 .equ MSK_NX56_xmac_cmp2_status_wr5_sr10,	0x00000400
 .equ SRT_NX56_xmac_cmp2_status_wr5_sr10,	10
 .equ MSK_NX56_xmac_cmp2_status_wr6_sr11,	0x00000800
 .equ SRT_NX56_xmac_cmp2_status_wr6_sr11,	11
 .equ MSK_NX56_xmac_cmp2_status_wr5_sr12,	0x00001000
 .equ SRT_NX56_xmac_cmp2_status_wr5_sr12,	12
 .equ MSK_NX56_xmac_cmp2_status_wr6_sr13,	0x00002000
 .equ SRT_NX56_xmac_cmp2_status_wr6_sr13,	13
 .equ MSK_NX56_xmac_cmp2_status_wr5_sr14,	0x00004000
 .equ SRT_NX56_xmac_cmp2_status_wr5_sr14,	14
 .equ MSK_NX56_xmac_cmp2_status_wr6_sr15,	0x00008000
 .equ SRT_NX56_xmac_cmp2_status_wr6_sr15,	15

@ ---------------------------------------------------------------------
@ Register xmac_cmp3_status
@ => xMAC Compare3 Status Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_cmp3_status       ,	0x000000FC
 .equ Adr_NX56_xmac0_regs_xmac_cmp3_status,	0x1018B4FC
 .equ Adr_NX56_xmac1_regs_xmac_cmp3_status,	0x1018B6FC

 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr0,	0x00000001
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr0,	0
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr1,	0x00000002
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr1,	1
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr2,	0x00000004
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr2,	2
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr3,	0x00000008
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr3,	3
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr4,	0x00000010
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr4,	4
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr5,	0x00000020
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr5,	5
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr6,	0x00000040
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr6,	6
 .equ MSK_NX56_xmac_cmp3_status_rpucnt1_wr7,	0x00000080
 .equ SRT_NX56_xmac_cmp3_status_rpucnt1_wr7,	7
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr0,	0x00000100
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr0,	8
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr1,	0x00000200
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr1,	9
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr2,	0x00000400
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr2,	10
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr3,	0x00000800
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr3,	11
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr4,	0x00001000
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr4,	12
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr5,	0x00002000
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr5,	13
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr6,	0x00004000
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr6,	14
 .equ MSK_NX56_xmac_cmp3_status_tpucnt1_wr7,	0x00008000
 .equ SRT_NX56_xmac_cmp3_status_tpucnt1_wr7,	15

@ ---------------------------------------------------------------------
@ Register xmac_cmp4_status
@ => xMAC Compare4 Status Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_cmp4_status       ,	0x00000100
 .equ Adr_NX56_xmac0_regs_xmac_cmp4_status,	0x1018B500
 .equ Adr_NX56_xmac1_regs_xmac_cmp4_status,	0x1018B700

 .equ MSK_NX56_xmac_cmp4_status_rpm_hit0          ,	0x00000001
 .equ SRT_NX56_xmac_cmp4_status_rpm_hit0          ,	0
 .equ MSK_NX56_xmac_cmp4_status_rpm_hit1          ,	0x00000002
 .equ SRT_NX56_xmac_cmp4_status_rpm_hit1          ,	1
 .equ MSK_NX56_xmac_cmp4_status_rpm_hit0or1       ,	0x00000004
 .equ SRT_NX56_xmac_cmp4_status_rpm_hit0or1       ,	2
 .equ MSK_NX56_xmac_cmp4_status_tpm_hit0          ,	0x00000008
 .equ SRT_NX56_xmac_cmp4_status_tpm_hit0          ,	3
 .equ MSK_NX56_xmac_cmp4_status_tpm_hit1          ,	0x00000010
 .equ SRT_NX56_xmac_cmp4_status_tpm_hit1          ,	4
 .equ MSK_NX56_xmac_cmp4_status_tpm_hit0or1       ,	0x00000020
 .equ SRT_NX56_xmac_cmp4_status_tpm_hit0or1       ,	5
 .equ MSK_NX56_xmac_cmp4_status_rpm_hit0_tx       ,	0x00000040
 .equ SRT_NX56_xmac_cmp4_status_rpm_hit0_tx       ,	6
 .equ MSK_NX56_xmac_cmp4_status_rpm_hit1_tx       ,	0x00000080
 .equ SRT_NX56_xmac_cmp4_status_rpm_hit1_tx       ,	7
 .equ MSK_NX56_xmac_cmp4_status_rpm_hit0or1_tx    ,	0x00000100
 .equ SRT_NX56_xmac_cmp4_status_rpm_hit0or1_tx    ,	8
 .equ MSK_NX56_xmac_cmp4_status_tpm_hit0_rx       ,	0x00000200
 .equ SRT_NX56_xmac_cmp4_status_tpm_hit0_rx       ,	9
 .equ MSK_NX56_xmac_cmp4_status_tpm_hit1_rx       ,	0x00000400
 .equ SRT_NX56_xmac_cmp4_status_tpm_hit1_rx       ,	10
 .equ MSK_NX56_xmac_cmp4_status_tpm_hit0or1_rx    ,	0x00000800
 .equ SRT_NX56_xmac_cmp4_status_tpm_hit0or1_rx    ,	11
 .equ MSK_NX56_xmac_cmp4_status_tx_eq_wr45        ,	0x00001000
 .equ SRT_NX56_xmac_cmp4_status_tx_eq_wr45        ,	12
 .equ MSK_NX56_xmac_cmp4_status_sys_time          ,	0x00002000
 .equ SRT_NX56_xmac_cmp4_status_sys_time          ,	13
 .equ MSK_NX56_xmac_cmp4_status_sys_time_uc       ,	0x00004000
 .equ SRT_NX56_xmac_cmp4_status_sys_time_uc       ,	14
 .equ MSK_NX56_xmac_cmp4_status_sys_time_uc_eq_wr2,	0x00008000
 .equ SRT_NX56_xmac_cmp4_status_sys_time_uc_eq_wr2,	15

@ ---------------------------------------------------------------------
@ Register xmac_alu_flags
@ => xMAC RPU and TPU ALU Flags:
@    ALU Flags are only influenced by combinatonal commands like add, sub, rotate, shift.
@    Bitwise commands (e.g. and, or, ...) do not influence ALU-Flags.
@    In case of bitwise commands, ALU-Flags keep their old value.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_alu_flags       ,	0x00000104
 .equ Adr_NX56_xmac0_regs_xmac_alu_flags,	0x1018B504
 .equ Adr_NX56_xmac1_regs_xmac_alu_flags,	0x1018B704

 .equ MSK_NX56_xmac_alu_flags_rpu_carry,	0x00000001
 .equ SRT_NX56_xmac_alu_flags_rpu_carry,	0
 .equ MSK_NX56_xmac_alu_flags_rpu_zero ,	0x00000002
 .equ SRT_NX56_xmac_alu_flags_rpu_zero ,	1
 .equ MSK_NX56_xmac_alu_flags_rpu_neg  ,	0x00000004
 .equ SRT_NX56_xmac_alu_flags_rpu_neg  ,	2
 .equ MSK_NX56_xmac_alu_flags_rpu_ovf  ,	0x00000008
 .equ SRT_NX56_xmac_alu_flags_rpu_ovf  ,	3
 .equ MSK_NX56_xmac_alu_flags_tpu_carry,	0x00000010
 .equ SRT_NX56_xmac_alu_flags_tpu_carry,	4
 .equ MSK_NX56_xmac_alu_flags_tpu_zero ,	0x00000020
 .equ SRT_NX56_xmac_alu_flags_tpu_zero ,	5
 .equ MSK_NX56_xmac_alu_flags_tpu_neg  ,	0x00000040
 .equ SRT_NX56_xmac_alu_flags_tpu_neg  ,	6
 .equ MSK_NX56_xmac_alu_flags_tpu_ovf  ,	0x00000080
 .equ SRT_NX56_xmac_alu_flags_tpu_ovf  ,	7
 .equ MSK_NX56_xmac_alu_flags_rxcnt_wr0,	0x00000100
 .equ SRT_NX56_xmac_alu_flags_rxcnt_wr0,	8
 .equ MSK_NX56_xmac_alu_flags_rxcnt_wr1,	0x00000200
 .equ SRT_NX56_xmac_alu_flags_rxcnt_wr1,	9
 .equ MSK_NX56_xmac_alu_flags_rxcnt_wr2,	0x00000400
 .equ SRT_NX56_xmac_alu_flags_rxcnt_wr2,	10
 .equ MSK_NX56_xmac_alu_flags_rxcnt_wr3,	0x00000800
 .equ SRT_NX56_xmac_alu_flags_rxcnt_wr3,	11
 .equ MSK_NX56_xmac_alu_flags_txcnt_wr4,	0x00001000
 .equ SRT_NX56_xmac_alu_flags_txcnt_wr4,	12
 .equ MSK_NX56_xmac_alu_flags_txcnt_wr5,	0x00002000
 .equ SRT_NX56_xmac_alu_flags_txcnt_wr5,	13
 .equ MSK_NX56_xmac_alu_flags_txcnt_wr6,	0x00004000
 .equ SRT_NX56_xmac_alu_flags_txcnt_wr6,	14
 .equ MSK_NX56_xmac_alu_flags_txcnt_wr7,	0x00008000
 .equ SRT_NX56_xmac_alu_flags_txcnt_wr7,	15

@ ---------------------------------------------------------------------
@ Register xmac_status_int
@ => xMAC Status Internal Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_status_int       ,	0x00000108
 .equ Adr_NX56_xmac0_regs_xmac_status_int,	0x1018B508
 .equ Adr_NX56_xmac1_regs_xmac_status_int,	0x1018B708

 .equ MSK_NX56_xmac_status_int_rx_crc_ok            ,	0x00000001
 .equ SRT_NX56_xmac_status_int_rx_crc_ok            ,	0
 .equ MSK_NX56_xmac_status_int_tx_crc_ok            ,	0x00000002
 .equ SRT_NX56_xmac_status_int_tx_crc_ok            ,	1
 .equ MSK_NX56_xmac_status_int_rx_crc32_ok          ,	0x00000004
 .equ SRT_NX56_xmac_status_int_rx_crc32_ok          ,	2
 .equ MSK_NX56_xmac_status_int_bitstream_in_filtered,	0x00000008
 .equ SRT_NX56_xmac_status_int_bitstream_in_filtered,	3
 .equ MSK_NX56_xmac_status_int_lbit_eq_bit          ,	0x00000010
 .equ SRT_NX56_xmac_status_int_lbit_eq_bit          ,	4
 .equ MSK_NX56_xmac_status_int_recbit               ,	0x00000020
 .equ SRT_NX56_xmac_status_int_recbit               ,	5
 .equ MSK_NX56_xmac_status_int_brec                 ,	0x00000040
 .equ SRT_NX56_xmac_status_int_brec                 ,	6
 .equ MSK_NX56_xmac_status_int_btran                ,	0x00000080
 .equ SRT_NX56_xmac_status_int_btran                ,	7
 .equ MSK_NX56_xmac_status_int_rpucnt2_wr0          ,	0x00000100
 .equ SRT_NX56_xmac_status_int_rpucnt2_wr0          ,	8
 .equ MSK_NX56_xmac_status_int_rpucnt2_wr1          ,	0x00000200
 .equ SRT_NX56_xmac_status_int_rpucnt2_wr1          ,	9
 .equ MSK_NX56_xmac_status_int_rpucnt2_wr2          ,	0x00000400
 .equ SRT_NX56_xmac_status_int_rpucnt2_wr2          ,	10
 .equ MSK_NX56_xmac_status_int_rpucnt2_wr3          ,	0x00000800
 .equ SRT_NX56_xmac_status_int_rpucnt2_wr3          ,	11
 .equ MSK_NX56_xmac_status_int_tpucnt2_wr4          ,	0x00001000
 .equ SRT_NX56_xmac_status_int_tpucnt2_wr4          ,	12
 .equ MSK_NX56_xmac_status_int_tpucnt2_wr5          ,	0x00002000
 .equ SRT_NX56_xmac_status_int_tpucnt2_wr5          ,	13
 .equ MSK_NX56_xmac_status_int_tpucnt2_wr6          ,	0x00004000
 .equ SRT_NX56_xmac_status_int_tpucnt2_wr6          ,	14
 .equ MSK_NX56_xmac_status_int_tpucnt2_wr7          ,	0x00008000
 .equ SRT_NX56_xmac_status_int_tpucnt2_wr7          ,	15

@ ---------------------------------------------------------------------
@ Register xmac_stat_bits
@ => xMAC stat_bits:
@    set and reset by hw_support bits (set_stat and reset_stat) and selected by src1_adr,
@    accessible by all RPUs and TPUs with higher set than reset priority
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_stat_bits       ,	0x0000010C
 .equ Adr_NX56_xmac0_regs_xmac_stat_bits,	0x1018B50C
 .equ Adr_NX56_xmac1_regs_xmac_stat_bits,	0x1018B70C

 .equ MSK_NX56_xmac_stat_bits_stat_bits,	0x0000ffff
 .equ SRT_NX56_xmac_stat_bits_stat_bits,	0

@ ---------------------------------------------------------------------
@ Register xmac_stat_bits_shared_lower
@ => stat_bits_shared (lower):
@    These bits can be accessed by all xMACs and xPECs in parallel, all accesses with write bit mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_stat_bits_shared_lower       ,	0x00000110
 .equ Adr_NX56_xmac0_regs_xmac_stat_bits_shared_lower,	0x1018B510
 .equ Adr_NX56_xmac1_regs_xmac_stat_bits_shared_lower,	0x1018B710

 .equ MSK_NX56_xmac_stat_bits_shared_lower_val       ,	0x000000ff
 .equ SRT_NX56_xmac_stat_bits_shared_lower_val       ,	0
 .equ MSK_NX56_xmac_stat_bits_shared_lower_write_mask,	0x0000ff00
 .equ SRT_NX56_xmac_stat_bits_shared_lower_write_mask,	8

@ ---------------------------------------------------------------------
@ Register xmac_stat_bits_shared_upper
@ => stat_bits_shared (upper):
@    These bits can be accessed by all xMACs and xPECs in parallel, all accesses with write bit mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_stat_bits_shared_upper       ,	0x00000114
 .equ Adr_NX56_xmac0_regs_xmac_stat_bits_shared_upper,	0x1018B514
 .equ Adr_NX56_xmac1_regs_xmac_stat_bits_shared_upper,	0x1018B714

 .equ MSK_NX56_xmac_stat_bits_shared_upper_val       ,	0x000000ff
 .equ SRT_NX56_xmac_stat_bits_shared_upper_val       ,	0
 .equ MSK_NX56_xmac_stat_bits_shared_upper_write_mask,	0x0000ff00
 .equ SRT_NX56_xmac_stat_bits_shared_upper_write_mask,	8

@ ---------------------------------------------------------------------
@ Register xmac_status_mii
@ => xMAC MII receive status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_status_mii       ,	0x00000118
 .equ Adr_NX56_xmac0_regs_xmac_status_mii,	0x1018B518
 .equ Adr_NX56_xmac1_regs_xmac_status_mii,	0x1018B718

 .equ MSK_NX56_xmac_status_mii_rx_dv      ,	0x00000001
 .equ SRT_NX56_xmac_status_mii_rx_dv      ,	0
 .equ MSK_NX56_xmac_status_mii_rx_err     ,	0x00000002
 .equ SRT_NX56_xmac_status_mii_rx_err     ,	1
 .equ MSK_NX56_xmac_status_mii_crs        ,	0x00000004
 .equ SRT_NX56_xmac_status_mii_crs        ,	2
 .equ MSK_NX56_xmac_status_mii_col        ,	0x00000008
 .equ SRT_NX56_xmac_status_mii_col        ,	3
 .equ MSK_NX56_xmac_status_mii_s_nc       ,	0x00000010
 .equ SRT_NX56_xmac_status_mii_s_nc       ,	4
 .equ MSK_NX56_xmac_status_mii_v_ne_ns_nc ,	0x00000020
 .equ SRT_NX56_xmac_status_mii_v_ne_ns_nc ,	5
 .equ MSK_NX56_xmac_status_mii_v_ne_nc    ,	0x00000040
 .equ SRT_NX56_xmac_status_mii_v_ne_nc    ,	6
 .equ MSK_NX56_xmac_status_mii_v_ne_ns    ,	0x00000080
 .equ SRT_NX56_xmac_status_mii_v_ne_ns    ,	7
 .equ MSK_NX56_xmac_status_mii_v_ne       ,	0x00000100
 .equ SRT_NX56_xmac_status_mii_v_ne       ,	8
 .equ MSK_NX56_xmac_status_mii_v_ne_s_nc  ,	0x00000200
 .equ SRT_NX56_xmac_status_mii_v_ne_s_nc  ,	9
 .equ MSK_NX56_xmac_status_mii_v_ne_s     ,	0x00000400
 .equ SRT_NX56_xmac_status_mii_v_ne_s     ,	10
 .equ MSK_NX56_xmac_status_mii_v_ne_nc_p0 ,	0x00000800
 .equ SRT_NX56_xmac_status_mii_v_ne_nc_p0 ,	11
 .equ MSK_NX56_xmac_status_mii_v_ne_nc_p1 ,	0x00001000
 .equ SRT_NX56_xmac_status_mii_v_ne_nc_p1 ,	12
 .equ MSK_NX56_xmac_status_mii_v_ne_nc_p01,	0x00002000
 .equ SRT_NX56_xmac_status_mii_v_ne_nc_p01,	13
 .equ MSK_NX56_xmac_status_mii_anycol     ,	0x00004000
 .equ SRT_NX56_xmac_status_mii_anycol     ,	14

@ ---------------------------------------------------------------------
@ Register xmac_status_mii2
@ => xMAC 2nd MII receive status register:
@    All bits are read only, writing 1 to rx_err_was_here, col_was_here or crs_was_here resets these bits.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_status_mii2       ,	0x0000011C
 .equ Adr_NX56_xmac0_regs_xmac_status_mii2,	0x1018B51C
 .equ Adr_NX56_xmac1_regs_xmac_status_mii2,	0x1018B71C

 .equ MSK_NX56_xmac_status_mii2_dv                   ,	0x00000001
 .equ SRT_NX56_xmac_status_mii2_dv                   ,	0
 .equ MSK_NX56_xmac_status_mii2_rx_dv                ,	0x00000002
 .equ SRT_NX56_xmac_status_mii2_rx_dv                ,	1
 .equ MSK_NX56_xmac_status_mii2_rx_err               ,	0x00000004
 .equ SRT_NX56_xmac_status_mii2_rx_err               ,	2
 .equ MSK_NX56_xmac_status_mii2_rx_crs               ,	0x00000008
 .equ SRT_NX56_xmac_status_mii2_rx_crs               ,	3
 .equ MSK_NX56_xmac_status_mii2_v_ne                 ,	0x00000010
 .equ SRT_NX56_xmac_status_mii2_v_ne                 ,	4
 .equ MSK_NX56_xmac_status_mii2_rx_miif_error_ro     ,	0x00000020
 .equ SRT_NX56_xmac_status_mii2_rx_miif_error_ro     ,	5
 .equ MSK_NX56_xmac_status_mii2_rx_miif_ovfl_ro      ,	0x00000040
 .equ SRT_NX56_xmac_status_mii2_rx_miif_ovfl_ro      ,	6
 .equ MSK_NX56_xmac_status_mii2_rx_miif_unfl_ro      ,	0x00000080
 .equ SRT_NX56_xmac_status_mii2_rx_miif_unfl_ro      ,	7
 .equ MSK_NX56_xmac_status_mii2_rx_miif_short_dv_ro  ,	0x00000100
 .equ SRT_NX56_xmac_status_mii2_rx_miif_short_dv_ro  ,	8
 .equ MSK_NX56_xmac_status_mii2_tx_miif_error_ro     ,	0x00000200
 .equ SRT_NX56_xmac_status_mii2_tx_miif_error_ro     ,	9
 .equ MSK_NX56_xmac_status_mii2_tx_miif_ovfl_ro      ,	0x00000400
 .equ SRT_NX56_xmac_status_mii2_tx_miif_ovfl_ro      ,	10
 .equ MSK_NX56_xmac_status_mii2_tx_miif_unfl_ro      ,	0x00000800
 .equ SRT_NX56_xmac_status_mii2_tx_miif_unfl_ro      ,	11
 .equ MSK_NX56_xmac_status_mii2_tx_miif_short_txen_ro,	0x00001000
 .equ SRT_NX56_xmac_status_mii2_tx_miif_short_txen_ro,	12
 .equ MSK_NX56_xmac_status_mii2_rx_err_was_here      ,	0x00002000
 .equ SRT_NX56_xmac_status_mii2_rx_err_was_here      ,	13
 .equ MSK_NX56_xmac_status_mii2_col_was_here         ,	0x00004000
 .equ SRT_NX56_xmac_status_mii2_col_was_here         ,	14
 .equ MSK_NX56_xmac_status_mii2_crs_was_here         ,	0x00008000
 .equ SRT_NX56_xmac_status_mii2_crs_was_here         ,	15

@ ---------------------------------------------------------------------
@ Register xmac_other_status_mii2
@ => xMAC 2nd MII receive status register of other xMAC:
@    Used for fast forward of data between 2 xMACs (specially in MII-HUB-mode)
@    All bits are read only, writing 1 to rx_err_was_here, col_was_here or crs_was_here resets these bits.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_other_status_mii2       ,	0x00000120
 .equ Adr_NX56_xmac0_regs_xmac_other_status_mii2,	0x1018B520
 .equ Adr_NX56_xmac1_regs_xmac_other_status_mii2,	0x1018B720

 .equ MSK_NX56_xmac_other_status_mii2_dv                   ,	0x00000001
 .equ SRT_NX56_xmac_other_status_mii2_dv                   ,	0
 .equ MSK_NX56_xmac_other_status_mii2_rx_dv                ,	0x00000002
 .equ SRT_NX56_xmac_other_status_mii2_rx_dv                ,	1
 .equ MSK_NX56_xmac_other_status_mii2_rx_err               ,	0x00000004
 .equ SRT_NX56_xmac_other_status_mii2_rx_err               ,	2
 .equ MSK_NX56_xmac_other_status_mii2_rx_crs               ,	0x00000008
 .equ SRT_NX56_xmac_other_status_mii2_rx_crs               ,	3
 .equ MSK_NX56_xmac_other_status_mii2_v_ne                 ,	0x00000010
 .equ SRT_NX56_xmac_other_status_mii2_v_ne                 ,	4
 .equ MSK_NX56_xmac_other_status_mii2_rx_miif_error_ro     ,	0x00000020
 .equ SRT_NX56_xmac_other_status_mii2_rx_miif_error_ro     ,	5
 .equ MSK_NX56_xmac_other_status_mii2_rx_miif_ovfl_ro      ,	0x00000040
 .equ SRT_NX56_xmac_other_status_mii2_rx_miif_ovfl_ro      ,	6
 .equ MSK_NX56_xmac_other_status_mii2_rx_miif_unfl_ro      ,	0x00000080
 .equ SRT_NX56_xmac_other_status_mii2_rx_miif_unfl_ro      ,	7
 .equ MSK_NX56_xmac_other_status_mii2_rx_miif_short_dv_ro  ,	0x00000100
 .equ SRT_NX56_xmac_other_status_mii2_rx_miif_short_dv_ro  ,	8
 .equ MSK_NX56_xmac_other_status_mii2_tx_miif_error_ro     ,	0x00000200
 .equ SRT_NX56_xmac_other_status_mii2_tx_miif_error_ro     ,	9
 .equ MSK_NX56_xmac_other_status_mii2_tx_miif_ovfl_ro      ,	0x00000400
 .equ SRT_NX56_xmac_other_status_mii2_tx_miif_ovfl_ro      ,	10
 .equ MSK_NX56_xmac_other_status_mii2_tx_miif_unfl_ro      ,	0x00000800
 .equ SRT_NX56_xmac_other_status_mii2_tx_miif_unfl_ro      ,	11
 .equ MSK_NX56_xmac_other_status_mii2_tx_miif_short_txen_ro,	0x00001000
 .equ SRT_NX56_xmac_other_status_mii2_tx_miif_short_txen_ro,	12
 .equ MSK_NX56_xmac_other_status_mii2_rx_err_was_here      ,	0x00002000
 .equ SRT_NX56_xmac_other_status_mii2_rx_err_was_here      ,	13
 .equ MSK_NX56_xmac_other_status_mii2_col_was_here         ,	0x00004000
 .equ SRT_NX56_xmac_other_status_mii2_col_was_here         ,	14
 .equ MSK_NX56_xmac_other_status_mii2_crs_was_here         ,	0x00008000
 .equ SRT_NX56_xmac_other_status_mii2_crs_was_here         ,	15

@ ---------------------------------------------------------------------
@ Register xmac_config_mii
@ => xMAC MII transmit config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_mii       ,	0x00000124
 .equ Adr_NX56_xmac0_regs_xmac_config_mii,	0x1018B524
 .equ Adr_NX56_xmac1_regs_xmac_config_mii,	0x1018B724

 .equ MSK_NX56_xmac_config_mii_tx_en ,	0x00000001
 .equ SRT_NX56_xmac_config_mii_tx_en ,	0
 .equ MSK_NX56_xmac_config_mii_tx_err,	0x00000002
 .equ SRT_NX56_xmac_config_mii_tx_err,	1

@ ---------------------------------------------------------------------
@ Register xmac_config_rx_nibble_fifo
@ => xMAC RX MII Nibble FIFO config register
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_rx_nibble_fifo       ,	0x00000128
 .equ Adr_NX56_xmac0_regs_xmac_config_rx_nibble_fifo,	0x1018B528
 .equ Adr_NX56_xmac1_regs_xmac_config_rx_nibble_fifo,	0x1018B728

 .equ MSK_NX56_xmac_config_rx_nibble_fifo_sample_phase     ,	0x00000007
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_sample_phase     ,	0
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_delay_rx_data    ,	0x00000008
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_delay_rx_data    ,	3
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_fifo_depth_add   ,	0x00000030
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_fifo_depth_add   ,	4
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_fifo_depth       ,	0x000003c0
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_fifo_depth       ,	6
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_rx_write_phase   ,	0x00000c00
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_rx_write_phase   ,	10
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_rpu_sync_delay   ,	0x00003000
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_rpu_sync_delay   ,	12
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_rx_err_low_active,	0x00004000
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_rx_err_low_active,	14
 .equ MSK_NX56_xmac_config_rx_nibble_fifo_crs_low_active   ,	0x00008000
 .equ SRT_NX56_xmac_config_rx_nibble_fifo_crs_low_active   ,	15

@ ---------------------------------------------------------------------
@ Register xmac_config_tx_nibble_fifo
@ => xMAC TX NII Nibble FIFO config register
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_tx_nibble_fifo       ,	0x0000012C
 .equ Adr_NX56_xmac0_regs_xmac_config_tx_nibble_fifo,	0x1018B52C
 .equ Adr_NX56_xmac1_regs_xmac_config_tx_nibble_fifo,	0x1018B72C

 .equ MSK_NX56_xmac_config_tx_nibble_fifo_output_phase        ,	0x00000007
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_output_phase        ,	0
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_fifo_depth_add      ,	0x00000018
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_fifo_depth_add      ,	3
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_fifo_depth          ,	0x000001e0
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_fifo_depth          ,	5
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_tx_read_phase       ,	0x00000600
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_tx_read_phase       ,	9
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_tpu_sync_delay      ,	0x00001800
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_tpu_sync_delay      ,	11
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_outputedge_tx_clk   ,	0x00002000
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_outputedge_tx_clk   ,	13
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_send_at_tx_count_pos,	0x00004000
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_send_at_tx_count_pos,	14
 .equ MSK_NX56_xmac_config_tx_nibble_fifo_col_low_active      ,	0x00008000
 .equ SRT_NX56_xmac_config_tx_nibble_fifo_col_low_active      ,	15

@ ---------------------------------------------------------------------
@ Register xmac_config_sbu
@ => xMAC Config Register for SBU
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_sbu       ,	0x00000130
 .equ Adr_NX56_xmac0_regs_xmac_config_sbu,	0x1018B530
 .equ Adr_NX56_xmac1_regs_xmac_config_sbu,	0x1018B730

 .equ MSK_NX56_xmac_config_sbu_sync_to_eclk                ,	0x00000001
 .equ SRT_NX56_xmac_config_sbu_sync_to_eclk                ,	0
 .equ MSK_NX56_xmac_config_sbu_sync_to_bitstream           ,	0x00000002
 .equ SRT_NX56_xmac_config_sbu_sync_to_bitstream           ,	1
 .equ MSK_NX56_xmac_config_sbu_sync_to_posedge             ,	0x00000004
 .equ SRT_NX56_xmac_config_sbu_sync_to_posedge             ,	2
 .equ MSK_NX56_xmac_config_sbu_sync_to_negedge             ,	0x00000008
 .equ SRT_NX56_xmac_config_sbu_sync_to_negedge             ,	3
 .equ MSK_NX56_xmac_config_sbu_count_modulo                ,	0x00000010
 .equ SRT_NX56_xmac_config_sbu_count_modulo                ,	4
 .equ MSK_NX56_xmac_config_sbu_invert_bit                  ,	0x00000020
 .equ SRT_NX56_xmac_config_sbu_invert_bit                  ,	5
 .equ MSK_NX56_xmac_config_sbu_predivide_clk               ,	0x00000040
 .equ SRT_NX56_xmac_config_sbu_predivide_clk               ,	6
 .equ MSK_NX56_xmac_config_sbu_phy_led_en                  ,	0x00000080
 .equ SRT_NX56_xmac_config_sbu_phy_led_en                  ,	7
 .equ MSK_NX56_xmac_config_sbu_ext_mode                    ,	0x00000300
 .equ SRT_NX56_xmac_config_sbu_ext_mode                    ,	8
 .equ MSK_NX56_xmac_config_sbu_drop_bit_at_sync            ,	0x00000400
 .equ SRT_NX56_xmac_config_sbu_drop_bit_at_sync            ,	10
 .equ MSK_NX56_xmac_config_sbu_disable_sync_in_sample_phase,	0x00000800
 .equ SRT_NX56_xmac_config_sbu_disable_sync_in_sample_phase,	11
 .equ MSK_NX56_xmac_config_sbu_filter_sample_rate          ,	0x00007000
 .equ SRT_NX56_xmac_config_sbu_filter_sample_rate          ,	12

@ ---------------------------------------------------------------------
@ Register xmac_config_sbu2
@ => xMAC 2nd Config Register for SBU
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_sbu2       ,	0x00000134
 .equ Adr_NX56_xmac0_regs_xmac_config_sbu2,	0x1018B534
 .equ Adr_NX56_xmac1_regs_xmac_config_sbu2,	0x1018B734

 .equ MSK_NX56_xmac_config_sbu2_rx_nof_bits           ,	0x0000000f
 .equ SRT_NX56_xmac_config_sbu2_rx_nof_bits           ,	0
 .equ MSK_NX56_xmac_config_sbu2_rx_shift_lr           ,	0x00000010
 .equ SRT_NX56_xmac_config_sbu2_rx_shift_lr           ,	4
 .equ MSK_NX56_xmac_config_sbu2_rx_count_stops_at_ovfl,	0x00000020
 .equ SRT_NX56_xmac_config_sbu2_rx_count_stops_at_ovfl,	5
 .equ MSK_NX56_xmac_config_sbu2_urx_write_odd         ,	0x00000040
 .equ SRT_NX56_xmac_config_sbu2_urx_write_odd         ,	6
 .equ MSK_NX56_xmac_config_sbu2_rx_clk_phase          ,	0x00000380
 .equ SRT_NX56_xmac_config_sbu2_rx_clk_phase          ,	7

@ ---------------------------------------------------------------------
@ Register xmac_sbu_rate_mul_add
@ => xMAC SBU rate_mul_add:
@    Value added each cc to Rate Multiplier.
@    rate_mul_add = eclk / clk * 65536
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sbu_rate_mul_add       ,	0x00000138
 .equ Adr_NX56_xmac0_regs_xmac_sbu_rate_mul_add,	0x1018B538
 .equ Adr_NX56_xmac1_regs_xmac_sbu_rate_mul_add,	0x1018B738

 .equ MSK_NX56_xmac_sbu_rate_mul_add_rate_mul_add,	0x0000ffff
 .equ SRT_NX56_xmac_sbu_rate_mul_add_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register xmac_sbu_rate_mul_start
@ => xMAC SBU rate_mul_start
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sbu_rate_mul_start       ,	0x0000013C
 .equ Adr_NX56_xmac0_regs_xmac_sbu_rate_mul_start,	0x1018B53C
 .equ Adr_NX56_xmac1_regs_xmac_sbu_rate_mul_start,	0x1018B73C

 .equ MSK_NX56_xmac_sbu_rate_mul_start_rate_mul_start,	0x0000ffff
 .equ SRT_NX56_xmac_sbu_rate_mul_start_rate_mul_start,	0

@ ---------------------------------------------------------------------
@ Register xmac_sbu_rate_mul
@ => xMAC SBU rate_mul
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_sbu_rate_mul       ,	0x00000140
 .equ Adr_NX56_xmac0_regs_xmac_sbu_rate_mul,	0x1018B540
 .equ Adr_NX56_xmac1_regs_xmac_sbu_rate_mul,	0x1018B740

 .equ MSK_NX56_xmac_sbu_rate_mul_rate_mul,	0x0000ffff
 .equ SRT_NX56_xmac_sbu_rate_mul_rate_mul,	0

@ ---------------------------------------------------------------------
@ Register xmac_start_sample_pos
@ => xMAC SBU start_sample_pos
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_start_sample_pos       ,	0x00000144
 .equ Adr_NX56_xmac0_regs_xmac_start_sample_pos,	0x1018B544
 .equ Adr_NX56_xmac1_regs_xmac_start_sample_pos,	0x1018B744

 .equ MSK_NX56_xmac_start_sample_pos_start_sample_pos,	0x0000ffff
 .equ SRT_NX56_xmac_start_sample_pos_start_sample_pos,	0

@ ---------------------------------------------------------------------
@ Register xmac_stop_sample_pos
@ => xMAC SBU stop_sample_pos
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_stop_sample_pos       ,	0x00000148
 .equ Adr_NX56_xmac0_regs_xmac_stop_sample_pos,	0x1018B548
 .equ Adr_NX56_xmac1_regs_xmac_stop_sample_pos,	0x1018B748

 .equ MSK_NX56_xmac_stop_sample_pos_stop_sample_pos,	0x0000ffff
 .equ SRT_NX56_xmac_stop_sample_pos_stop_sample_pos,	0

@ ---------------------------------------------------------------------
@ Register xmac_config_obu
@ => xMAC Config Register for OBU
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_obu       ,	0x0000014C
 .equ Adr_NX56_xmac0_regs_xmac_config_obu,	0x1018B54C
 .equ Adr_NX56_xmac1_regs_xmac_config_obu,	0x1018B74C

 .equ MSK_NX56_xmac_config_obu_sync_to_eclk                ,	0x00000001
 .equ SRT_NX56_xmac_config_obu_sync_to_eclk                ,	0
 .equ MSK_NX56_xmac_config_obu_sync_to_bitstream           ,	0x00000002
 .equ SRT_NX56_xmac_config_obu_sync_to_bitstream           ,	1
 .equ MSK_NX56_xmac_config_obu_sync_to_posedge             ,	0x00000004
 .equ SRT_NX56_xmac_config_obu_sync_to_posedge             ,	2
 .equ MSK_NX56_xmac_config_obu_sync_to_negedge             ,	0x00000008
 .equ SRT_NX56_xmac_config_obu_sync_to_negedge             ,	3
 .equ MSK_NX56_xmac_config_obu_count_modulo                ,	0x00000010
 .equ SRT_NX56_xmac_config_obu_count_modulo                ,	4
 .equ MSK_NX56_xmac_config_obu_invert_tx_oe                ,	0x00000020
 .equ SRT_NX56_xmac_config_obu_invert_tx_oe                ,	5
 .equ MSK_NX56_xmac_config_obu_predivide_clk               ,	0x00000040
 .equ SRT_NX56_xmac_config_obu_predivide_clk               ,	6
 .equ MSK_NX56_xmac_config_obu_tx_three_state              ,	0x00000080
 .equ SRT_NX56_xmac_config_obu_tx_three_state              ,	7
 .equ MSK_NX56_xmac_config_obu_eclk_noe                    ,	0x00000100
 .equ SRT_NX56_xmac_config_obu_eclk_noe                    ,	8
 .equ MSK_NX56_xmac_config_obu_sample_bitstream_eclk       ,	0x00000200
 .equ SRT_NX56_xmac_config_obu_sample_bitstream_eclk       ,	9
 .equ MSK_NX56_xmac_config_obu_repeat_bit_at_sync          ,	0x00000400
 .equ SRT_NX56_xmac_config_obu_repeat_bit_at_sync          ,	10
 .equ MSK_NX56_xmac_config_obu_disable_sync_in_output_phase,	0x00000800
 .equ SRT_NX56_xmac_config_obu_disable_sync_in_output_phase,	11

@ ---------------------------------------------------------------------
@ Register xmac_config_obu2
@ => xMAC 2nd Config Register for OBU
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_config_obu2       ,	0x00000150
 .equ Adr_NX56_xmac0_regs_xmac_config_obu2,	0x1018B550
 .equ Adr_NX56_xmac1_regs_xmac_config_obu2,	0x1018B750

 .equ MSK_NX56_xmac_config_obu2_tx_nof_bits           ,	0x0000000f
 .equ SRT_NX56_xmac_config_obu2_tx_nof_bits           ,	0
 .equ MSK_NX56_xmac_config_obu2_tx_shift_lr           ,	0x00000010
 .equ SRT_NX56_xmac_config_obu2_tx_shift_lr           ,	4
 .equ MSK_NX56_xmac_config_obu2_tx_count_stops_at_ovfl,	0x00000020
 .equ SRT_NX56_xmac_config_obu2_tx_count_stops_at_ovfl,	5
 .equ MSK_NX56_xmac_config_obu2_utx_watermark         ,	0x000007c0
 .equ SRT_NX56_xmac_config_obu2_utx_watermark         ,	6
 .equ MSK_NX56_xmac_config_obu2_tx_clk_phase          ,	0x00003800
 .equ SRT_NX56_xmac_config_obu2_tx_clk_phase          ,	11

@ ---------------------------------------------------------------------
@ Register xmac_obu_rate_mul_add
@ => xMAC OBU rate_mul_add:
@    Value added each cc to Rate Multiplier.
@    rate_mul_add = eclk / clk * 65536
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_obu_rate_mul_add       ,	0x00000154
 .equ Adr_NX56_xmac0_regs_xmac_obu_rate_mul_add,	0x1018B554
 .equ Adr_NX56_xmac1_regs_xmac_obu_rate_mul_add,	0x1018B754

 .equ MSK_NX56_xmac_obu_rate_mul_add_rate_mul_add,	0x0000ffff
 .equ SRT_NX56_xmac_obu_rate_mul_add_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register xmac_obu_rate_mul_start
@ => xMAC OBU rate_mul_start
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_obu_rate_mul_start       ,	0x00000158
 .equ Adr_NX56_xmac0_regs_xmac_obu_rate_mul_start,	0x1018B558
 .equ Adr_NX56_xmac1_regs_xmac_obu_rate_mul_start,	0x1018B758

 .equ MSK_NX56_xmac_obu_rate_mul_start_rate_mul_start,	0x0000ffff
 .equ SRT_NX56_xmac_obu_rate_mul_start_rate_mul_start,	0

@ ---------------------------------------------------------------------
@ Register xmac_obu_rate_mul
@ => xMAC OBU rate_mul
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_obu_rate_mul       ,	0x0000015C
 .equ Adr_NX56_xmac0_regs_xmac_obu_rate_mul,	0x1018B55C
 .equ Adr_NX56_xmac1_regs_xmac_obu_rate_mul,	0x1018B75C

 .equ MSK_NX56_xmac_obu_rate_mul_rate_mul,	0x0000ffff
 .equ SRT_NX56_xmac_obu_rate_mul_rate_mul,	0

@ ---------------------------------------------------------------------
@ Register xmac_start_trans_pos
@ => xMAC SBU start_trans_pos
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_start_trans_pos       ,	0x00000160
 .equ Adr_NX56_xmac0_regs_xmac_start_trans_pos,	0x1018B560
 .equ Adr_NX56_xmac1_regs_xmac_start_trans_pos,	0x1018B760

 .equ MSK_NX56_xmac_start_trans_pos_start_trans_pos,	0x0000ffff
 .equ SRT_NX56_xmac_start_trans_pos_start_trans_pos,	0

@ ---------------------------------------------------------------------
@ Register xmac_stop_trans_pos
@ => xMAC SBU stop_trans_pos
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_stop_trans_pos       ,	0x00000164
 .equ Adr_NX56_xmac0_regs_xmac_stop_trans_pos,	0x1018B564
 .equ Adr_NX56_xmac1_regs_xmac_stop_trans_pos,	0x1018B764

 .equ MSK_NX56_xmac_stop_trans_pos_stop_trans_pos,	0x0000ffff
 .equ SRT_NX56_xmac_stop_trans_pos_stop_trans_pos,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpu_count1
@ => xMAC RPU Counter 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpu_count1       ,	0x00000168
 .equ Adr_NX56_xmac0_regs_xmac_rpu_count1,	0x1018B568
 .equ Adr_NX56_xmac1_regs_xmac_rpu_count1,	0x1018B768

 .equ MSK_NX56_xmac_rpu_count1_rpu_count1,	0x0000ffff
 .equ SRT_NX56_xmac_rpu_count1_rpu_count1,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpu_count2
@ => xMAC RPU Counter 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpu_count2       ,	0x0000016C
 .equ Adr_NX56_xmac0_regs_xmac_rpu_count2,	0x1018B56C
 .equ Adr_NX56_xmac1_regs_xmac_rpu_count2,	0x1018B76C

 .equ MSK_NX56_xmac_rpu_count2_rpu_count2,	0x0000ffff
 .equ SRT_NX56_xmac_rpu_count2_rpu_count2,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpu_count1
@ => xMAC TPU Counter 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpu_count1       ,	0x00000170
 .equ Adr_NX56_xmac0_regs_xmac_tpu_count1,	0x1018B570
 .equ Adr_NX56_xmac1_regs_xmac_tpu_count1,	0x1018B770

 .equ MSK_NX56_xmac_tpu_count1_tpu_count1,	0x0000ffff
 .equ SRT_NX56_xmac_tpu_count1_tpu_count1,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpu_count2
@ => xMAC TPU Counter 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpu_count2       ,	0x00000174
 .equ Adr_NX56_xmac0_regs_xmac_tpu_count2,	0x1018B574
 .equ Adr_NX56_xmac1_regs_xmac_tpu_count2,	0x1018B774

 .equ MSK_NX56_xmac_tpu_count2_tpu_count2,	0x0000ffff
 .equ SRT_NX56_xmac_tpu_count2_tpu_count2,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_count
@ => xMAC RX Counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_count       ,	0x00000178
 .equ Adr_NX56_xmac0_regs_xmac_rx_count,	0x1018B578
 .equ Adr_NX56_xmac1_regs_xmac_rx_count,	0x1018B778

 .equ MSK_NX56_xmac_rx_count_rx_count,	0x0000ffff
 .equ SRT_NX56_xmac_rx_count_rx_count,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_count
@ => xMAC TX Counter
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_count       ,	0x0000017C
 .equ Adr_NX56_xmac0_regs_xmac_tx_count,	0x1018B57C
 .equ Adr_NX56_xmac1_regs_xmac_tx_count,	0x1018B77C

 .equ MSK_NX56_xmac_tx_count_tx_count,	0x0000ffff
 .equ SRT_NX56_xmac_tx_count_tx_count,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpm_mask0
@ => xMAC Receive Pattern Match Mask 0 Register:
@    Defines, which bits are compared between xmac_rpm_val0 and xmac_rx.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpm_mask0       ,	0x00000180
 .equ Adr_NX56_xmac0_regs_xmac_rpm_mask0,	0x1018B580
 .equ Adr_NX56_xmac1_regs_xmac_rpm_mask0,	0x1018B780

 .equ MSK_NX56_xmac_rpm_mask0_pm_mask0,	0x0000ffff
 .equ SRT_NX56_xmac_rpm_mask0_pm_mask0,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpm_val0
@ => xMAC Receive Pattern Match Value 0 Register:
@    Defines value of bits to be compared with xmac_rx.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpm_val0       ,	0x00000184
 .equ Adr_NX56_xmac0_regs_xmac_rpm_val0,	0x1018B584
 .equ Adr_NX56_xmac1_regs_xmac_rpm_val0,	0x1018B784

 .equ MSK_NX56_xmac_rpm_val0_pm_val0,	0x0000ffff
 .equ SRT_NX56_xmac_rpm_val0_pm_val0,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpm_mask1
@ => xMAC Receive Pattern Match Mask 1 Register:
@    Defines, which bits are compared between xmac_rpm_val1 and xmac_rx
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpm_mask1       ,	0x00000188
 .equ Adr_NX56_xmac0_regs_xmac_rpm_mask1,	0x1018B588
 .equ Adr_NX56_xmac1_regs_xmac_rpm_mask1,	0x1018B788

 .equ MSK_NX56_xmac_rpm_mask1_pm_mask1,	0x0000ffff
 .equ SRT_NX56_xmac_rpm_mask1_pm_mask1,	0

@ ---------------------------------------------------------------------
@ Register xmac_rpm_val1
@ => xMAC Receive Pattern Match Value 1 Register:
@    Defines value of bits to be compared with xmac_rx.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rpm_val1       ,	0x0000018C
 .equ Adr_NX56_xmac0_regs_xmac_rpm_val1,	0x1018B58C
 .equ Adr_NX56_xmac1_regs_xmac_rpm_val1,	0x1018B78C

 .equ MSK_NX56_xmac_rpm_val1_pm_val1,	0x0000ffff
 .equ SRT_NX56_xmac_rpm_val1_pm_val1,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpm_mask0
@ => xMAC Transmit Pattern Match Mask 0 Register:
@    Defines, which bits are compared between xmac_tpm_val0 and xmac_tx_sent.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpm_mask0       ,	0x00000190
 .equ Adr_NX56_xmac0_regs_xmac_tpm_mask0,	0x1018B590
 .equ Adr_NX56_xmac1_regs_xmac_tpm_mask0,	0x1018B790

 .equ MSK_NX56_xmac_tpm_mask0_pm_mask0,	0x0000ffff
 .equ SRT_NX56_xmac_tpm_mask0_pm_mask0,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpm_val0
@ => xMAC Transmit Pattern Match Value 0 Register:
@    Defines value of bits to be compared with xmac_tx_sent.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpm_val0       ,	0x00000194
 .equ Adr_NX56_xmac0_regs_xmac_tpm_val0,	0x1018B594
 .equ Adr_NX56_xmac1_regs_xmac_tpm_val0,	0x1018B794

 .equ MSK_NX56_xmac_tpm_val0_pm_val0,	0x0000ffff
 .equ SRT_NX56_xmac_tpm_val0_pm_val0,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpm_mask1
@ => xMAC Transmit Pattern Match Mask 1 Register:
@    Defines, which bits are compared between xmac_tpm_val1 and xmac_tx_sent.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpm_mask1       ,	0x00000198
 .equ Adr_NX56_xmac0_regs_xmac_tpm_mask1,	0x1018B598
 .equ Adr_NX56_xmac1_regs_xmac_tpm_mask1,	0x1018B798

 .equ MSK_NX56_xmac_tpm_mask1_pm_mask1,	0x0000ffff
 .equ SRT_NX56_xmac_tpm_mask1_pm_mask1,	0

@ ---------------------------------------------------------------------
@ Register xmac_tpm_val1
@ => xMAC Transmit Pattern Match Value 1 Register:
@    Defines value of bits to be compared with xmac_tx_sent.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tpm_val1       ,	0x0000019C
 .equ Adr_NX56_xmac0_regs_xmac_tpm_val1,	0x1018B59C
 .equ Adr_NX56_xmac1_regs_xmac_tpm_val1,	0x1018B79C

 .equ MSK_NX56_xmac_tpm_val1_pm_val1,	0x0000ffff
 .equ SRT_NX56_xmac_tpm_val1_pm_val1,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc32_l
@ => xMAC RX CRC32 lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc32_l       ,	0x000001C0
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc32_l,	0x1018B5C0
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc32_l,	0x1018B7C0

 .equ MSK_NX56_xmac_rx_crc32_l_rx_crc32_l,	0x0000ffff
 .equ SRT_NX56_xmac_rx_crc32_l_rx_crc32_l,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc32_h
@ => xMAC RX CRC32 upper part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc32_h       ,	0x000001C4
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc32_h,	0x1018B5C4
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc32_h,	0x1018B7C4

 .equ MSK_NX56_xmac_rx_crc32_h_rx_crc32_h,	0x0000ffff
 .equ SRT_NX56_xmac_rx_crc32_h_rx_crc32_h,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc32_cfg
@ => xMAC RX CRC32 Config Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc32_cfg       ,	0x000001C8
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc32_cfg,	0x1018B5C8
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc32_cfg,	0x1018B7C8

 .equ MSK_NX56_xmac_rx_crc32_cfg_shift_right,	0x00000001
 .equ SRT_NX56_xmac_rx_crc32_cfg_shift_right,	0
 .equ MSK_NX56_xmac_rx_crc32_cfg_zero       ,	0x00000002
 .equ SRT_NX56_xmac_rx_crc32_cfg_zero       ,	1
 .equ MSK_NX56_xmac_rx_crc32_cfg_invert     ,	0x00000004
 .equ SRT_NX56_xmac_rx_crc32_cfg_invert     ,	2
 .equ MSK_NX56_xmac_rx_crc32_cfg_nof_bits   ,	0x00000300
 .equ SRT_NX56_xmac_rx_crc32_cfg_nof_bits   ,	8
 .equ MSK_NX56_xmac_rx_crc32_cfg_direct_div ,	0x00000400
 .equ SRT_NX56_xmac_rx_crc32_cfg_direct_div ,	10
 .equ MSK_NX56_xmac_rx_crc32_cfg_endian     ,	0x00000800
 .equ SRT_NX56_xmac_rx_crc32_cfg_endian     ,	11
 .equ MSK_NX56_xmac_rx_crc32_cfg_swap_output,	0x00001000
 .equ SRT_NX56_xmac_rx_crc32_cfg_swap_output,	12

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc32_l
@ => xMAC TX CRC32 lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc32_l       ,	0x000001CC
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc32_l,	0x1018B5CC
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc32_l,	0x1018B7CC

 .equ MSK_NX56_xmac_tx_crc32_l_tx_crc32_l,	0x0000ffff
 .equ SRT_NX56_xmac_tx_crc32_l_tx_crc32_l,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc32_h
@ => xMAC TX CRC32 upper part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc32_h       ,	0x000001D0
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc32_h,	0x1018B5D0
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc32_h,	0x1018B7D0

 .equ MSK_NX56_xmac_tx_crc32_h_tx_crc32_h,	0x0000ffff
 .equ SRT_NX56_xmac_tx_crc32_h_tx_crc32_h,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc32_cfg
@ => xMAC TX CRC32 Config Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc32_cfg       ,	0x000001D4
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc32_cfg,	0x1018B5D4
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc32_cfg,	0x1018B7D4

 .equ MSK_NX56_xmac_tx_crc32_cfg_shift_right,	0x00000001
 .equ SRT_NX56_xmac_tx_crc32_cfg_shift_right,	0
 .equ MSK_NX56_xmac_tx_crc32_cfg_zero       ,	0x00000002
 .equ SRT_NX56_xmac_tx_crc32_cfg_zero       ,	1
 .equ MSK_NX56_xmac_tx_crc32_cfg_invert     ,	0x00000004
 .equ SRT_NX56_xmac_tx_crc32_cfg_invert     ,	2
 .equ MSK_NX56_xmac_tx_crc32_cfg_nof_bits   ,	0x00000300
 .equ SRT_NX56_xmac_tx_crc32_cfg_nof_bits   ,	8
 .equ MSK_NX56_xmac_tx_crc32_cfg_direct_div ,	0x00000400
 .equ SRT_NX56_xmac_tx_crc32_cfg_direct_div ,	10
 .equ MSK_NX56_xmac_tx_crc32_cfg_endian     ,	0x00000800
 .equ SRT_NX56_xmac_tx_crc32_cfg_endian     ,	11
 .equ MSK_NX56_xmac_tx_crc32_cfg_swap_output,	0x00001000
 .equ SRT_NX56_xmac_tx_crc32_cfg_swap_output,	12

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc_polynomial_l
@ => xMAC RX CRC Polynomial lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc_polynomial_l       ,	0x000001D8
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc_polynomial_l,	0x1018B5D8
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc_polynomial_l,	0x1018B7D8

 .equ MSK_NX56_xmac_rx_crc_polynomial_l_rx_pol_l,	0x0000ffff
 .equ SRT_NX56_xmac_rx_crc_polynomial_l_rx_pol_l,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc_polynomial_h
@ => xMAC RX CRC Polynomial lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc_polynomial_h       ,	0x000001DC
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc_polynomial_h,	0x1018B5DC
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc_polynomial_h,	0x1018B7DC

 .equ MSK_NX56_xmac_rx_crc_polynomial_h_rx_pol_h,	0x0000ffff
 .equ SRT_NX56_xmac_rx_crc_polynomial_h_rx_pol_h,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc_l
@ => xMAC RX CRC lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc_l       ,	0x000001E0
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc_l,	0x1018B5E0
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc_l,	0x1018B7E0

 .equ MSK_NX56_xmac_rx_crc_l_rx_crc_l,	0x0000ffff
 .equ SRT_NX56_xmac_rx_crc_l_rx_crc_l,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc_h
@ => xMAC RX CRC upper part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc_h       ,	0x000001E4
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc_h,	0x1018B5E4
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc_h,	0x1018B7E4

 .equ MSK_NX56_xmac_rx_crc_h_rx_crc_h,	0x0000ffff
 .equ SRT_NX56_xmac_rx_crc_h_rx_crc_h,	0

@ ---------------------------------------------------------------------
@ Register xmac_rx_crc_cfg
@ => xMAC RX CRC Config Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_rx_crc_cfg       ,	0x000001E8
 .equ Adr_NX56_xmac0_regs_xmac_rx_crc_cfg,	0x1018B5E8
 .equ Adr_NX56_xmac1_regs_xmac_rx_crc_cfg,	0x1018B7E8

 .equ MSK_NX56_xmac_rx_crc_cfg_shift_right,	0x00000001
 .equ SRT_NX56_xmac_rx_crc_cfg_shift_right,	0
 .equ MSK_NX56_xmac_rx_crc_cfg_zero       ,	0x00000002
 .equ SRT_NX56_xmac_rx_crc_cfg_zero       ,	1
 .equ MSK_NX56_xmac_rx_crc_cfg_invert     ,	0x00000004
 .equ SRT_NX56_xmac_rx_crc_cfg_invert     ,	2
 .equ MSK_NX56_xmac_rx_crc_cfg_len        ,	0x000000f8
 .equ SRT_NX56_xmac_rx_crc_cfg_len        ,	3
 .equ MSK_NX56_xmac_rx_crc_cfg_nof_bits   ,	0x00000300
 .equ SRT_NX56_xmac_rx_crc_cfg_nof_bits   ,	8
 .equ MSK_NX56_xmac_rx_crc_cfg_direct_div ,	0x00000400
 .equ SRT_NX56_xmac_rx_crc_cfg_direct_div ,	10
 .equ MSK_NX56_xmac_rx_crc_cfg_endian     ,	0x00000800
 .equ SRT_NX56_xmac_rx_crc_cfg_endian     ,	11
 .equ MSK_NX56_xmac_rx_crc_cfg_swap_output,	0x00001000
 .equ SRT_NX56_xmac_rx_crc_cfg_swap_output,	12

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc_polynomial_l
@ => xMAC TX CRC Polynomial lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc_polynomial_l       ,	0x000001EC
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc_polynomial_l,	0x1018B5EC
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc_polynomial_l,	0x1018B7EC

 .equ MSK_NX56_xmac_tx_crc_polynomial_l_tx_pol_l,	0x0000ffff
 .equ SRT_NX56_xmac_tx_crc_polynomial_l_tx_pol_l,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc_polynomial_h
@ => xMAC TX CRC Polynomial lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc_polynomial_h       ,	0x000001F0
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc_polynomial_h,	0x1018B5F0
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc_polynomial_h,	0x1018B7F0

 .equ MSK_NX56_xmac_tx_crc_polynomial_h_tx_pol_h,	0x0000ffff
 .equ SRT_NX56_xmac_tx_crc_polynomial_h_tx_pol_h,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc_l
@ => xMAC TX CRC lower part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc_l       ,	0x000001F4
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc_l,	0x1018B5F4
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc_l,	0x1018B7F4

 .equ MSK_NX56_xmac_tx_crc_l_tx_crc_l,	0x0000ffff
 .equ SRT_NX56_xmac_tx_crc_l_tx_crc_l,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc_h
@ => xMAC TX CRC upper part
@    This register has a write pipeline delay of 1 clock cycle.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc_h       ,	0x000001F8
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc_h,	0x1018B5F8
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc_h,	0x1018B7F8

 .equ MSK_NX56_xmac_tx_crc_h_tx_crc_h,	0x0000ffff
 .equ SRT_NX56_xmac_tx_crc_h_tx_crc_h,	0

@ ---------------------------------------------------------------------
@ Register xmac_tx_crc_cfg
@ => xMAC TX CRC Config Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xmac_tx_crc_cfg       ,	0x000001FC
 .equ Adr_NX56_xmac0_regs_xmac_tx_crc_cfg,	0x1018B5FC
 .equ Adr_NX56_xmac1_regs_xmac_tx_crc_cfg,	0x1018B7FC

 .equ MSK_NX56_xmac_tx_crc_cfg_shift_right,	0x00000001
 .equ SRT_NX56_xmac_tx_crc_cfg_shift_right,	0
 .equ MSK_NX56_xmac_tx_crc_cfg_zero       ,	0x00000002
 .equ SRT_NX56_xmac_tx_crc_cfg_zero       ,	1
 .equ MSK_NX56_xmac_tx_crc_cfg_invert     ,	0x00000004
 .equ SRT_NX56_xmac_tx_crc_cfg_invert     ,	2
 .equ MSK_NX56_xmac_tx_crc_cfg_len        ,	0x000000f8
 .equ SRT_NX56_xmac_tx_crc_cfg_len        ,	3
 .equ MSK_NX56_xmac_tx_crc_cfg_nof_bits   ,	0x00000300
 .equ SRT_NX56_xmac_tx_crc_cfg_nof_bits   ,	8
 .equ MSK_NX56_xmac_tx_crc_cfg_direct_div ,	0x00000400
 .equ SRT_NX56_xmac_tx_crc_cfg_direct_div ,	10
 .equ MSK_NX56_xmac_tx_crc_cfg_endian     ,	0x00000800
 .equ SRT_NX56_xmac_tx_crc_cfg_endian     ,	11
 .equ MSK_NX56_xmac_tx_crc_cfg_swap_output,	0x00001000
 .equ SRT_NX56_xmac_tx_crc_cfg_swap_output,	12


@ =====================================================================
@
@ Area of pointer_fifo, pointer_fifo_motion
@
@ =====================================================================

 .equ Addr_NX56_pointer_fifo, 0x1018B800
 .equ Addr_NX56_pointer_fifo_motion, 0x10100000

@ ---------------------------------------------------------------------
@ Register pfifo_start
@ => Pointer FIFO table:
@    Each of the following 32 addresses accesses a FIFO.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_start                ,	0x00000000
 .equ Adr_NX56_pointer_fifo_pfifo_start       ,	0x1018B800
 .equ Adr_NX56_pointer_fifo_motion_pfifo_start,	0x10100000

 .equ MSK_NX56_pfifo_start_fifo_data,	0xffffffff
 .equ SRT_NX56_pfifo_start_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register pfifo_end
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_end                ,	0x0000007C
 .equ Adr_NX56_pointer_fifo_pfifo_end       ,	0x1018B87C
 .equ Adr_NX56_pointer_fifo_motion_pfifo_end,	0x1010007C

@ ---------------------------------------------------------------------
@ Register pfifo_border_start
@ => Pointer FIFO Upper Borders table:
@    The sizes of all FIFOs are programmable. The total size of all FIFOs must not exceed 3200 dwords. \
@    Each of the following 32 addresses accesses the upper border of the appropriate FIFO in a 3200x32 bit RAM. \
@    All upper borders should be rising with number of FIFO. \
@    Each FIFO starts at the upper border + 1 of the preceding FIFO and ends at its upper border.
@    If a border between two FIFOs is moved, the adjacent FIFOs should be reset first.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_border_start                ,	0x00000080
 .equ Adr_NX56_pointer_fifo_pfifo_border_start       ,	0x1018B880
 .equ Adr_NX56_pointer_fifo_motion_pfifo_border_start,	0x10100080

 .equ MSK_NX56_pfifo_border_start_border,	0x00000fff
 .equ SRT_NX56_pfifo_border_start_border,	0

@ ---------------------------------------------------------------------
@ Register pfifo_border_end
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_border_end                ,	0x000000FC
 .equ Adr_NX56_pointer_fifo_pfifo_border_end       ,	0x1018B8FC
 .equ Adr_NX56_pointer_fifo_motion_pfifo_border_end,	0x101000FC

@ ---------------------------------------------------------------------
@ Register pfifo_reset
@ => Pointer FIFO Reset Vector:
@    This register allows to reset each of 32 FIFOs, \
@    i.e. set read and write pointer to lower border of FIFO, reset full, overflow, underrun flag and set empty flag.
@    The reset flag of adjacent FIFOs should be set before resizing the FIFO.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_reset                ,	0x00000100
 .equ Adr_NX56_pointer_fifo_pfifo_reset       ,	0x1018B900
 .equ Adr_NX56_pointer_fifo_motion_pfifo_reset,	0x10100100

 .equ MSK_NX56_pfifo_reset_reset_fifo,	0xffffffff
 .equ SRT_NX56_pfifo_reset_reset_fifo,	0

@ ---------------------------------------------------------------------
@ Register pfifo_full
@ => Pointer FIFO Full Vector:
@    This read only address shows the fifo_full flag of each FIFO.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_full                ,	0x00000104
 .equ Adr_NX56_pointer_fifo_pfifo_full       ,	0x1018B904
 .equ Adr_NX56_pointer_fifo_motion_pfifo_full,	0x10100104

 .equ MSK_NX56_pfifo_full_fifo_full,	0xffffffff
 .equ SRT_NX56_pfifo_full_fifo_full,	0

@ ---------------------------------------------------------------------
@ Register pfifo_empty
@ => Pointer FIFO Empty Vector:
@    This read only address shows the fifo_empty flag of each FIFO.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_empty                ,	0x00000108
 .equ Adr_NX56_pointer_fifo_pfifo_empty       ,	0x1018B908
 .equ Adr_NX56_pointer_fifo_motion_pfifo_empty,	0x10100108

 .equ MSK_NX56_pfifo_empty_fifo_empty,	0xffffffff
 .equ SRT_NX56_pfifo_empty_fifo_empty,	0

@ ---------------------------------------------------------------------
@ Register pfifo_overflow
@ => Pointer FIFO Overflow Vector:
@    This read only address shows the fifo_overflow flag of each FIFO.
@    If the FIFO had an overflow, it should be reset.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_overflow                ,	0x0000010C
 .equ Adr_NX56_pointer_fifo_pfifo_overflow       ,	0x1018B90C
 .equ Adr_NX56_pointer_fifo_motion_pfifo_overflow,	0x1010010C

 .equ MSK_NX56_pfifo_overflow_fifo_overflow,	0xffffffff
 .equ SRT_NX56_pfifo_overflow_fifo_overflow,	0

@ ---------------------------------------------------------------------
@ Register pfifo_underrun
@ => Pointer FIFO Underrun Vector:
@    This read only address shows the fifo_underrun flag of each FIFO.
@    If the FIFO had an underrun, it should be reset.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_underrun                ,	0x00000110
 .equ Adr_NX56_pointer_fifo_pfifo_underrun       ,	0x1018B910
 .equ Adr_NX56_pointer_fifo_motion_pfifo_underrun,	0x10100110

 .equ MSK_NX56_pfifo_underrun_fifo_underrun,	0xffffffff
 .equ SRT_NX56_pfifo_underrun_fifo_underrun,	0

@ ---------------------------------------------------------------------
@ Register pfifo_fill_level_start
@ => Pointer FIFO Fill-Level table:
@    Each of the following 32 addresses reads the fill-level of the appropriate FIFO.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_fill_level_start                ,	0x00000180
 .equ Adr_NX56_pointer_fifo_pfifo_fill_level_start       ,	0x1018B980
 .equ Adr_NX56_pointer_fifo_motion_pfifo_fill_level_start,	0x10100180

 .equ MSK_NX56_pfifo_fill_level_start_fill_level,	0x000003ff
 .equ SRT_NX56_pfifo_fill_level_start_fill_level,	0

@ ---------------------------------------------------------------------
@ Register pfifo_fill_level_end
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pfifo_fill_level_end                ,	0x000001FC
 .equ Adr_NX56_pointer_fifo_pfifo_fill_level_end       ,	0x1018B9FC
 .equ Adr_NX56_pointer_fifo_motion_pfifo_fill_level_end,	0x101001FC


@ =====================================================================
@
@ Area of fmmusm
@
@ =====================================================================

 .equ Addr_NX56_fmmusm, 0x1018BA00

@ ---------------------------------------------------------------------
@ Register fmmu0_cfg_log_startaddr
@ => FMMU 0 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu0_cfg_log_startaddr   ,	0x00000000
 .equ Adr_NX56_fmmusm_fmmu0_cfg_log_startaddr,	0x1018BA00
 .equ Adr_NX56_fmmu0_cfg_log_startaddr       ,	0x1018BA00

 .equ MSK_NX56_fmmu0_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu0_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu0_cfg_length
@ => FMMU 0 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu0_cfg_length   ,	0x00000004
 .equ Adr_NX56_fmmusm_fmmu0_cfg_length,	0x1018BA04
 .equ Adr_NX56_fmmu0_cfg_length       ,	0x1018BA04

 .equ MSK_NX56_fmmu0_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu0_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu0_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu0_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu0_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu0_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu0_cfg_phys_startaddr
@ => FMMU 0 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu0_cfg_phys_startaddr   ,	0x00000008
 .equ Adr_NX56_fmmusm_fmmu0_cfg_phys_startaddr,	0x1018BA08
 .equ Adr_NX56_fmmu0_cfg_phys_startaddr       ,	0x1018BA08

 .equ MSK_NX56_fmmu0_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu0_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu0_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu0_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu0_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu0_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu0_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu0_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu0_cfg_enable
@ => FMMU 0 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu0_cfg_enable   ,	0x0000000C
 .equ Adr_NX56_fmmusm_fmmu0_cfg_enable,	0x1018BA0C
 .equ Adr_NX56_fmmu0_cfg_enable       ,	0x1018BA0C

 .equ MSK_NX56_fmmu0_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu0_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu1_cfg_log_startaddr
@ => FMMU 1 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu1_cfg_log_startaddr   ,	0x00000010
 .equ Adr_NX56_fmmusm_fmmu1_cfg_log_startaddr,	0x1018BA10
 .equ Adr_NX56_fmmu1_cfg_log_startaddr       ,	0x1018BA10

 .equ MSK_NX56_fmmu1_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu1_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu1_cfg_length
@ => FMMU 1 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu1_cfg_length   ,	0x00000014
 .equ Adr_NX56_fmmusm_fmmu1_cfg_length,	0x1018BA14
 .equ Adr_NX56_fmmu1_cfg_length       ,	0x1018BA14

 .equ MSK_NX56_fmmu1_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu1_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu1_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu1_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu1_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu1_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu1_cfg_phys_startaddr
@ => FMMU 1 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu1_cfg_phys_startaddr   ,	0x00000018
 .equ Adr_NX56_fmmusm_fmmu1_cfg_phys_startaddr,	0x1018BA18
 .equ Adr_NX56_fmmu1_cfg_phys_startaddr       ,	0x1018BA18

 .equ MSK_NX56_fmmu1_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu1_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu1_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu1_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu1_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu1_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu1_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu1_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu1_cfg_enable
@ => FMMU 1 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu1_cfg_enable   ,	0x0000001C
 .equ Adr_NX56_fmmusm_fmmu1_cfg_enable,	0x1018BA1C
 .equ Adr_NX56_fmmu1_cfg_enable       ,	0x1018BA1C

 .equ MSK_NX56_fmmu1_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu1_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu2_cfg_log_startaddr
@ => FMMU 2 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu2_cfg_log_startaddr   ,	0x00000020
 .equ Adr_NX56_fmmusm_fmmu2_cfg_log_startaddr,	0x1018BA20
 .equ Adr_NX56_fmmu2_cfg_log_startaddr       ,	0x1018BA20

 .equ MSK_NX56_fmmu2_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu2_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu2_cfg_length
@ => FMMU 2 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu2_cfg_length   ,	0x00000024
 .equ Adr_NX56_fmmusm_fmmu2_cfg_length,	0x1018BA24
 .equ Adr_NX56_fmmu2_cfg_length       ,	0x1018BA24

 .equ MSK_NX56_fmmu2_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu2_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu2_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu2_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu2_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu2_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu2_cfg_phys_startaddr
@ => FMMU 2 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu2_cfg_phys_startaddr   ,	0x00000028
 .equ Adr_NX56_fmmusm_fmmu2_cfg_phys_startaddr,	0x1018BA28
 .equ Adr_NX56_fmmu2_cfg_phys_startaddr       ,	0x1018BA28

 .equ MSK_NX56_fmmu2_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu2_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu2_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu2_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu2_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu2_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu2_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu2_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu2_cfg_enable
@ => FMMU 2 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu2_cfg_enable   ,	0x0000002C
 .equ Adr_NX56_fmmusm_fmmu2_cfg_enable,	0x1018BA2C
 .equ Adr_NX56_fmmu2_cfg_enable       ,	0x1018BA2C

 .equ MSK_NX56_fmmu2_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu2_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu3_cfg_log_startaddr
@ => FMMU 3 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu3_cfg_log_startaddr   ,	0x00000030
 .equ Adr_NX56_fmmusm_fmmu3_cfg_log_startaddr,	0x1018BA30
 .equ Adr_NX56_fmmu3_cfg_log_startaddr       ,	0x1018BA30

 .equ MSK_NX56_fmmu3_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu3_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu3_cfg_length
@ => FMMU 3 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu3_cfg_length   ,	0x00000034
 .equ Adr_NX56_fmmusm_fmmu3_cfg_length,	0x1018BA34
 .equ Adr_NX56_fmmu3_cfg_length       ,	0x1018BA34

 .equ MSK_NX56_fmmu3_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu3_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu3_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu3_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu3_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu3_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu3_cfg_phys_startaddr
@ => FMMU 3 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu3_cfg_phys_startaddr   ,	0x00000038
 .equ Adr_NX56_fmmusm_fmmu3_cfg_phys_startaddr,	0x1018BA38
 .equ Adr_NX56_fmmu3_cfg_phys_startaddr       ,	0x1018BA38

 .equ MSK_NX56_fmmu3_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu3_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu3_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu3_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu3_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu3_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu3_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu3_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu3_cfg_enable
@ => FMMU 3 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu3_cfg_enable   ,	0x0000003C
 .equ Adr_NX56_fmmusm_fmmu3_cfg_enable,	0x1018BA3C
 .equ Adr_NX56_fmmu3_cfg_enable       ,	0x1018BA3C

 .equ MSK_NX56_fmmu3_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu3_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu4_cfg_log_startaddr
@ => FMMU 4 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu4_cfg_log_startaddr   ,	0x00000040
 .equ Adr_NX56_fmmusm_fmmu4_cfg_log_startaddr,	0x1018BA40
 .equ Adr_NX56_fmmu4_cfg_log_startaddr       ,	0x1018BA40

 .equ MSK_NX56_fmmu4_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu4_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu4_cfg_length
@ => FMMU 4 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu4_cfg_length   ,	0x00000044
 .equ Adr_NX56_fmmusm_fmmu4_cfg_length,	0x1018BA44
 .equ Adr_NX56_fmmu4_cfg_length       ,	0x1018BA44

 .equ MSK_NX56_fmmu4_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu4_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu4_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu4_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu4_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu4_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu4_cfg_phys_startaddr
@ => FMMU 4 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu4_cfg_phys_startaddr   ,	0x00000048
 .equ Adr_NX56_fmmusm_fmmu4_cfg_phys_startaddr,	0x1018BA48
 .equ Adr_NX56_fmmu4_cfg_phys_startaddr       ,	0x1018BA48

 .equ MSK_NX56_fmmu4_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu4_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu4_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu4_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu4_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu4_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu4_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu4_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu4_cfg_enable
@ => FMMU 4 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu4_cfg_enable   ,	0x0000004C
 .equ Adr_NX56_fmmusm_fmmu4_cfg_enable,	0x1018BA4C
 .equ Adr_NX56_fmmu4_cfg_enable       ,	0x1018BA4C

 .equ MSK_NX56_fmmu4_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu4_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu5_cfg_log_startaddr
@ => FMMU 5 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu5_cfg_log_startaddr   ,	0x00000050
 .equ Adr_NX56_fmmusm_fmmu5_cfg_log_startaddr,	0x1018BA50
 .equ Adr_NX56_fmmu5_cfg_log_startaddr       ,	0x1018BA50

 .equ MSK_NX56_fmmu5_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu5_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu5_cfg_length
@ => FMMU 5 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu5_cfg_length   ,	0x00000054
 .equ Adr_NX56_fmmusm_fmmu5_cfg_length,	0x1018BA54
 .equ Adr_NX56_fmmu5_cfg_length       ,	0x1018BA54

 .equ MSK_NX56_fmmu5_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu5_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu5_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu5_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu5_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu5_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu5_cfg_phys_startaddr
@ => FMMU 5 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu5_cfg_phys_startaddr   ,	0x00000058
 .equ Adr_NX56_fmmusm_fmmu5_cfg_phys_startaddr,	0x1018BA58
 .equ Adr_NX56_fmmu5_cfg_phys_startaddr       ,	0x1018BA58

 .equ MSK_NX56_fmmu5_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu5_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu5_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu5_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu5_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu5_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu5_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu5_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu5_cfg_enable
@ => FMMU 5 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu5_cfg_enable   ,	0x0000005C
 .equ Adr_NX56_fmmusm_fmmu5_cfg_enable,	0x1018BA5C
 .equ Adr_NX56_fmmu5_cfg_enable       ,	0x1018BA5C

 .equ MSK_NX56_fmmu5_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu5_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu6_cfg_log_startaddr
@ => FMMU 6 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu6_cfg_log_startaddr   ,	0x00000060
 .equ Adr_NX56_fmmusm_fmmu6_cfg_log_startaddr,	0x1018BA60
 .equ Adr_NX56_fmmu6_cfg_log_startaddr       ,	0x1018BA60

 .equ MSK_NX56_fmmu6_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu6_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu6_cfg_length
@ => FMMU 6 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu6_cfg_length   ,	0x00000064
 .equ Adr_NX56_fmmusm_fmmu6_cfg_length,	0x1018BA64
 .equ Adr_NX56_fmmu6_cfg_length       ,	0x1018BA64

 .equ MSK_NX56_fmmu6_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu6_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu6_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu6_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu6_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu6_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu6_cfg_phys_startaddr
@ => FMMU 6 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu6_cfg_phys_startaddr   ,	0x00000068
 .equ Adr_NX56_fmmusm_fmmu6_cfg_phys_startaddr,	0x1018BA68
 .equ Adr_NX56_fmmu6_cfg_phys_startaddr       ,	0x1018BA68

 .equ MSK_NX56_fmmu6_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu6_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu6_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu6_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu6_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu6_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu6_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu6_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu6_cfg_enable
@ => FMMU 6 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu6_cfg_enable   ,	0x0000006C
 .equ Adr_NX56_fmmusm_fmmu6_cfg_enable,	0x1018BA6C
 .equ Adr_NX56_fmmu6_cfg_enable       ,	0x1018BA6C

 .equ MSK_NX56_fmmu6_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu6_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register fmmu7_cfg_log_startaddr
@ => FMMU 7 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu7_cfg_log_startaddr   ,	0x00000070
 .equ Adr_NX56_fmmusm_fmmu7_cfg_log_startaddr,	0x1018BA70
 .equ Adr_NX56_fmmu7_cfg_log_startaddr       ,	0x1018BA70

 .equ MSK_NX56_fmmu7_cfg_log_startaddr_log_startaddr,	0xffffffff
 .equ SRT_NX56_fmmu7_cfg_log_startaddr_log_startaddr,	0

@ ---------------------------------------------------------------------
@ Register fmmu7_cfg_length
@ => FMMU 7 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu7_cfg_length   ,	0x00000074
 .equ Adr_NX56_fmmusm_fmmu7_cfg_length,	0x1018BA74
 .equ Adr_NX56_fmmu7_cfg_length       ,	0x1018BA74

 .equ MSK_NX56_fmmu7_cfg_length_length       ,	0x00001fff
 .equ SRT_NX56_fmmu7_cfg_length_length       ,	0
 .equ MSK_NX56_fmmu7_cfg_length_log_start_bit,	0x00070000
 .equ SRT_NX56_fmmu7_cfg_length_log_start_bit,	16
 .equ MSK_NX56_fmmu7_cfg_length_log_stop_bit ,	0x07000000
 .equ SRT_NX56_fmmu7_cfg_length_log_stop_bit ,	24

@ ---------------------------------------------------------------------
@ Register fmmu7_cfg_phys_startaddr
@ => FMMU 7 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu7_cfg_phys_startaddr   ,	0x00000078
 .equ Adr_NX56_fmmusm_fmmu7_cfg_phys_startaddr,	0x1018BA78
 .equ Adr_NX56_fmmu7_cfg_phys_startaddr       ,	0x1018BA78

 .equ MSK_NX56_fmmu7_cfg_phys_startaddr_phys_startaddr,	0x00003fff
 .equ SRT_NX56_fmmu7_cfg_phys_startaddr_phys_startaddr,	0
 .equ MSK_NX56_fmmu7_cfg_phys_startaddr_phys_start_bit,	0x00070000
 .equ SRT_NX56_fmmu7_cfg_phys_startaddr_phys_start_bit,	16
 .equ MSK_NX56_fmmu7_cfg_phys_startaddr_proc_rd_enable,	0x01000000
 .equ SRT_NX56_fmmu7_cfg_phys_startaddr_proc_rd_enable,	24
 .equ MSK_NX56_fmmu7_cfg_phys_startaddr_proc_wr_enable,	0x02000000
 .equ SRT_NX56_fmmu7_cfg_phys_startaddr_proc_wr_enable,	25

@ ---------------------------------------------------------------------
@ Register fmmu7_cfg_enable
@ => FMMU 7 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu7_cfg_enable   ,	0x0000007C
 .equ Adr_NX56_fmmusm_fmmu7_cfg_enable,	0x1018BA7C
 .equ Adr_NX56_fmmu7_cfg_enable       ,	0x1018BA7C

 .equ MSK_NX56_fmmu7_cfg_enable_proc_enable,	0x00000001
 .equ SRT_NX56_fmmu7_cfg_enable_proc_enable,	0

@ ---------------------------------------------------------------------
@ Register sm0_cfg_adr_len
@ => SM 0 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm0_cfg_adr_len   ,	0x00000080
 .equ Adr_NX56_fmmusm_sm0_cfg_adr_len,	0x1018BA80
 .equ Adr_NX56_sm0_cfg_adr_len       ,	0x1018BA80

 .equ MSK_NX56_sm0_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm0_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm0_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm0_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm0_cfg_mode
@ => SM 0 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm0_cfg_mode   ,	0x00000084
 .equ Adr_NX56_fmmusm_sm0_cfg_mode,	0x1018BA84
 .equ Adr_NX56_sm0_cfg_mode       ,	0x1018BA84

 .equ MSK_NX56_sm0_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm0_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm0_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm0_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm0_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm0_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm0_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm0_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm1_cfg_adr_len
@ => SM 1 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm1_cfg_adr_len   ,	0x00000088
 .equ Adr_NX56_fmmusm_sm1_cfg_adr_len,	0x1018BA88
 .equ Adr_NX56_sm1_cfg_adr_len       ,	0x1018BA88

 .equ MSK_NX56_sm1_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm1_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm1_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm1_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm1_cfg_mode
@ => SM 1 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm1_cfg_mode   ,	0x0000008C
 .equ Adr_NX56_fmmusm_sm1_cfg_mode,	0x1018BA8C
 .equ Adr_NX56_sm1_cfg_mode       ,	0x1018BA8C

 .equ MSK_NX56_sm1_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm1_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm1_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm1_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm1_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm1_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm1_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm1_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm2_cfg_adr_len
@ => SM 2 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm2_cfg_adr_len   ,	0x00000090
 .equ Adr_NX56_fmmusm_sm2_cfg_adr_len,	0x1018BA90
 .equ Adr_NX56_sm2_cfg_adr_len       ,	0x1018BA90

 .equ MSK_NX56_sm2_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm2_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm2_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm2_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm2_cfg_mode
@ => SM 2 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm2_cfg_mode   ,	0x00000094
 .equ Adr_NX56_fmmusm_sm2_cfg_mode,	0x1018BA94
 .equ Adr_NX56_sm2_cfg_mode       ,	0x1018BA94

 .equ MSK_NX56_sm2_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm2_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm2_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm2_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm2_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm2_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm2_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm2_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm3_cfg_adr_len
@ => SM 3 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm3_cfg_adr_len   ,	0x00000098
 .equ Adr_NX56_fmmusm_sm3_cfg_adr_len,	0x1018BA98
 .equ Adr_NX56_sm3_cfg_adr_len       ,	0x1018BA98

 .equ MSK_NX56_sm3_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm3_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm3_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm3_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm3_cfg_mode
@ => SM 3 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm3_cfg_mode   ,	0x0000009C
 .equ Adr_NX56_fmmusm_sm3_cfg_mode,	0x1018BA9C
 .equ Adr_NX56_sm3_cfg_mode       ,	0x1018BA9C

 .equ MSK_NX56_sm3_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm3_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm3_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm3_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm3_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm3_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm3_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm3_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm4_cfg_adr_len
@ => SM 4 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm4_cfg_adr_len   ,	0x000000A0
 .equ Adr_NX56_fmmusm_sm4_cfg_adr_len,	0x1018BAA0
 .equ Adr_NX56_sm4_cfg_adr_len       ,	0x1018BAA0

 .equ MSK_NX56_sm4_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm4_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm4_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm4_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm4_cfg_mode
@ => SM 4 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm4_cfg_mode   ,	0x000000A4
 .equ Adr_NX56_fmmusm_sm4_cfg_mode,	0x1018BAA4
 .equ Adr_NX56_sm4_cfg_mode       ,	0x1018BAA4

 .equ MSK_NX56_sm4_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm4_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm4_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm4_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm4_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm4_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm4_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm4_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm5_cfg_adr_len
@ => SM 5 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm5_cfg_adr_len   ,	0x000000A8
 .equ Adr_NX56_fmmusm_sm5_cfg_adr_len,	0x1018BAA8
 .equ Adr_NX56_sm5_cfg_adr_len       ,	0x1018BAA8

 .equ MSK_NX56_sm5_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm5_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm5_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm5_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm5_cfg_mode
@ => SM 5 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm5_cfg_mode   ,	0x000000AC
 .equ Adr_NX56_fmmusm_sm5_cfg_mode,	0x1018BAAC
 .equ Adr_NX56_sm5_cfg_mode       ,	0x1018BAAC

 .equ MSK_NX56_sm5_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm5_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm5_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm5_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm5_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm5_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm5_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm5_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm6_cfg_adr_len
@ => SM 6 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm6_cfg_adr_len   ,	0x000000B0
 .equ Adr_NX56_fmmusm_sm6_cfg_adr_len,	0x1018BAB0
 .equ Adr_NX56_sm6_cfg_adr_len       ,	0x1018BAB0

 .equ MSK_NX56_sm6_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm6_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm6_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm6_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm6_cfg_mode
@ => SM 6 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm6_cfg_mode   ,	0x000000B4
 .equ Adr_NX56_fmmusm_sm6_cfg_mode,	0x1018BAB4
 .equ Adr_NX56_sm6_cfg_mode       ,	0x1018BAB4

 .equ MSK_NX56_sm6_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm6_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm6_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm6_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm6_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm6_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm6_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm6_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register sm7_cfg_adr_len
@ => SM 7 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm7_cfg_adr_len   ,	0x000000B8
 .equ Adr_NX56_fmmusm_sm7_cfg_adr_len,	0x1018BAB8
 .equ Adr_NX56_sm7_cfg_adr_len       ,	0x1018BAB8

 .equ MSK_NX56_sm7_cfg_adr_len_startaddr,	0x0000ffff
 .equ SRT_NX56_sm7_cfg_adr_len_startaddr,	0
 .equ MSK_NX56_sm7_cfg_adr_len_length   ,	0xffff0000
 .equ SRT_NX56_sm7_cfg_adr_len_length   ,	16

@ ---------------------------------------------------------------------
@ Register sm7_cfg_mode
@ => SM 7 config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm7_cfg_mode   ,	0x000000BC
 .equ Adr_NX56_fmmusm_sm7_cfg_mode,	0x1018BABC
 .equ Adr_NX56_sm7_cfg_mode       ,	0x1018BABC

 .equ MSK_NX56_sm7_cfg_mode_buf_method ,	0x00000002
 .equ SRT_NX56_sm7_cfg_mode_buf_method ,	1
 .equ MSK_NX56_sm7_cfg_mode_write_read ,	0x00000004
 .equ SRT_NX56_sm7_cfg_mode_write_read ,	2
 .equ MSK_NX56_sm7_cfg_mode_proc_enable,	0x00010000
 .equ SRT_NX56_sm7_cfg_mode_proc_enable,	16
 .equ MSK_NX56_sm7_cfg_mode_dis_by_arm ,	0x01000000
 .equ SRT_NX56_sm7_cfg_mode_dis_by_arm ,	24

@ ---------------------------------------------------------------------
@ Register phys_addr_offset
@ => Physical offset of phys. ECAT address and xPEC data ram address
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_phys_addr_offset   ,	0x000000D0
 .equ Adr_NX56_fmmusm_phys_addr_offset,	0x1018BAD0
 .equ Adr_NX56_phys_addr_offset       ,	0x1018BAD0

 .equ MSK_NX56_phys_addr_offset_phys_addr_offset              ,	0x0000ffff
 .equ SRT_NX56_phys_addr_offset_phys_addr_offset              ,	0
 .equ MSK_NX56_phys_addr_offset_phys_addr_offset_register_area,	0xffff0000
 .equ SRT_NX56_phys_addr_offset_phys_addr_offset_register_area,	16

@ ---------------------------------------------------------------------
@ Register phys_last_addr
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_phys_last_addr   ,	0x000000D4
 .equ Adr_NX56_fmmusm_phys_last_addr,	0x1018BAD4
 .equ Adr_NX56_phys_last_addr       ,	0x1018BAD4

 .equ MSK_NX56_phys_last_addr_phys_last_addr,	0x0000ffff
 .equ SRT_NX56_phys_last_addr_phys_last_addr,	0
 .equ MSK_NX56_phys_last_addr_sm0_cfg_add   ,	0x00030000
 .equ SRT_NX56_phys_last_addr_sm0_cfg_add   ,	16
 .equ MSK_NX56_phys_last_addr_sm1_cfg_add   ,	0x000c0000
 .equ SRT_NX56_phys_last_addr_sm1_cfg_add   ,	18
 .equ MSK_NX56_phys_last_addr_sm2_cfg_add   ,	0x00300000
 .equ SRT_NX56_phys_last_addr_sm2_cfg_add   ,	20
 .equ MSK_NX56_phys_last_addr_sm3_cfg_add   ,	0x00c00000
 .equ SRT_NX56_phys_last_addr_sm3_cfg_add   ,	22
 .equ MSK_NX56_phys_last_addr_sm4_cfg_add   ,	0x03000000
 .equ SRT_NX56_phys_last_addr_sm4_cfg_add   ,	24
 .equ MSK_NX56_phys_last_addr_sm5_cfg_add   ,	0x0c000000
 .equ SRT_NX56_phys_last_addr_sm5_cfg_add   ,	26
 .equ MSK_NX56_phys_last_addr_sm6_cfg_add   ,	0x30000000
 .equ SRT_NX56_phys_last_addr_sm6_cfg_add   ,	28
 .equ MSK_NX56_phys_last_addr_sm7_cfg_add   ,	0xc0000000
 .equ SRT_NX56_phys_last_addr_sm7_cfg_add   ,	30

@ ---------------------------------------------------------------------
@ Register fmmusm_xpec_nr
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmusm_xpec_nr   ,	0x000000D8
 .equ Adr_NX56_fmmusm_fmmusm_xpec_nr,	0x1018BAD8
 .equ Adr_NX56_fmmusm_xpec_nr       ,	0x1018BAD8

 .equ MSK_NX56_fmmusm_xpec_nr_xpec_nr,	0x00000001
 .equ SRT_NX56_fmmusm_xpec_nr_xpec_nr,	0

@ ---------------------------------------------------------------------
@ Register fmmusm_read_addr_in
@ => Read address from EtherCAT telegram
@    Write access by xPEC at adr_xpec_r6
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmusm_read_addr_in   ,	0x00000100
 .equ Adr_NX56_fmmusm_fmmusm_read_addr_in,	0x1018BB00
 .equ Adr_NX56_fmmusm_read_addr_in       ,	0x1018BB00

 .equ MSK_NX56_fmmusm_read_addr_in_read_adr,	0xffffffff
 .equ SRT_NX56_fmmusm_read_addr_in_read_adr,	0

@ ---------------------------------------------------------------------
@ Register fmmusm_write_addr_in
@ => Write address from EtherCAT telegram
@    Write access by xPEC at adr_xpec_r7
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmusm_write_addr_in   ,	0x00000104
 .equ Adr_NX56_fmmusm_fmmusm_write_addr_in,	0x1018BB04
 .equ Adr_NX56_fmmusm_write_addr_in       ,	0x1018BB04

 .equ MSK_NX56_fmmusm_write_addr_in_write_adr,	0xffffffff
 .equ SRT_NX56_fmmusm_write_addr_in_write_adr,	0

@ ---------------------------------------------------------------------
@ Register sm_read_addr_out
@ => Physical read address in xPEC RAM
@    Read access by xPEC at adr_xpec_r6
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_read_addr_out   ,	0x00000108
 .equ Adr_NX56_fmmusm_sm_read_addr_out,	0x1018BB08
 .equ Adr_NX56_sm_read_addr_out       ,	0x1018BB08

 .equ MSK_NX56_sm_read_addr_out_sm_read_adr_out,	0x00001fff
 .equ SRT_NX56_sm_read_addr_out_sm_read_adr_out,	0

@ ---------------------------------------------------------------------
@ Register sm_write_addr_out
@ => Physical write address in xPEC RAM
@    Read access by xPEC at adr_xpec_r7
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_write_addr_out   ,	0x0000010C
 .equ Adr_NX56_fmmusm_sm_write_addr_out,	0x1018BB0C
 .equ Adr_NX56_sm_write_addr_out       ,	0x1018BB0C

 .equ MSK_NX56_sm_write_addr_out_sm_write_adr_out,	0x00001fff
 .equ SRT_NX56_sm_write_addr_out_sm_write_adr_out,	0

@ ---------------------------------------------------------------------
@ Register fmmu_read_bit_rol_pos
@ => Shift and mask value for bitwise read access
@    For direct use with combined rol-and command.
@    Read access by xPEC at adr_statcfg2
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu_read_bit_rol_pos   ,	0x00000110
 .equ Adr_NX56_fmmusm_fmmu_read_bit_rol_pos,	0x1018BB10
 .equ Adr_NX56_fmmu_read_bit_rol_pos       ,	0x1018BB10

 .equ MSK_NX56_fmmu_read_bit_rol_pos_fmmu_read_bit_rol     ,	0x0000001f
 .equ SRT_NX56_fmmu_read_bit_rol_pos_fmmu_read_bit_rol     ,	0
 .equ MSK_NX56_fmmu_read_bit_rol_pos_fmmu_read_bit_maskmode,	0x000000e0
 .equ SRT_NX56_fmmu_read_bit_rol_pos_fmmu_read_bit_maskmode,	5
 .equ MSK_NX56_fmmu_read_bit_rol_pos_fmmu_read_bit_mask    ,	0x0000ff00
 .equ SRT_NX56_fmmu_read_bit_rol_pos_fmmu_read_bit_mask    ,	8
 .equ MSK_NX56_fmmu_read_bit_rol_pos_zero                  ,	0xffff0000
 .equ SRT_NX56_fmmu_read_bit_rol_pos_zero                  ,	16

@ ---------------------------------------------------------------------
@ Register fmmu_read_bit_mask
@ => AND-mask for bitwise read access
@    In case of read_allowed==0, mask is set to 0.
@    Read access by xPEC at adr_statcfg3
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu_read_bit_mask   ,	0x00000114
 .equ Adr_NX56_fmmusm_fmmu_read_bit_mask,	0x1018BB14
 .equ Adr_NX56_fmmu_read_bit_mask       ,	0x1018BB14

 .equ MSK_NX56_fmmu_read_bit_mask_fmmu_read_bit_mask,	0x000000ff
 .equ SRT_NX56_fmmu_read_bit_mask_fmmu_read_bit_mask,	0

@ ---------------------------------------------------------------------
@ Register fmmu_write_bit_rol_pos
@ => Shift and mask value for bitwise write access.
@    For direct use with combined rol-and command.
@    Read access by xPEC at adr_urtx2
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu_write_bit_rol_pos   ,	0x00000118
 .equ Adr_NX56_fmmusm_fmmu_write_bit_rol_pos,	0x1018BB18
 .equ Adr_NX56_fmmu_write_bit_rol_pos       ,	0x1018BB18

 .equ MSK_NX56_fmmu_write_bit_rol_pos_fmmu_write_bit_rol     ,	0x0000001f
 .equ SRT_NX56_fmmu_write_bit_rol_pos_fmmu_write_bit_rol     ,	0
 .equ MSK_NX56_fmmu_write_bit_rol_pos_fmmu_write_bit_maskmode,	0x000000e0
 .equ SRT_NX56_fmmu_write_bit_rol_pos_fmmu_write_bit_maskmode,	5
 .equ MSK_NX56_fmmu_write_bit_rol_pos_fmmu_write_bit_mask    ,	0x0000ff00
 .equ SRT_NX56_fmmu_write_bit_rol_pos_fmmu_write_bit_mask    ,	8
 .equ MSK_NX56_fmmu_write_bit_rol_pos_zero                   ,	0xffff0000
 .equ SRT_NX56_fmmu_write_bit_rol_pos_zero                   ,	16

@ ---------------------------------------------------------------------
@ Register fmmu_write_bit_mask
@ => AND-mask for bitwise write access
@    In case of write_allowed==0, mask is set to 0.
@    Read access by xPEC at adr_urtx3
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmu_write_bit_mask   ,	0x0000011C
 .equ Adr_NX56_fmmusm_fmmu_write_bit_mask,	0x1018BB1C
 .equ Adr_NX56_fmmu_write_bit_mask       ,	0x1018BB1C

 .equ MSK_NX56_fmmu_write_bit_mask_fmmu_write_bit_mask,	0x000000ff
 .equ SRT_NX56_fmmu_write_bit_mask_fmmu_write_bit_mask,	0

@ ---------------------------------------------------------------------
@ Register fmmusm_len_en
@ => Logical address enable from EtherCAT command
@    Read/Write access by xPEC at adr_xpec_sr8
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmusm_len_en   ,	0x00000120
 .equ Adr_NX56_fmmusm_fmmusm_len_en,	0x1018BB20
 .equ Adr_NX56_fmmusm_len_en       ,	0x1018BB20

 .equ MSK_NX56_fmmusm_len_en_ecat_len   ,	0x0000ffff
 .equ SRT_NX56_fmmusm_len_en_ecat_len   ,	0
 .equ MSK_NX56_fmmusm_len_en_log_addr_en,	0x00010000
 .equ SRT_NX56_fmmusm_len_en_log_addr_en,	16
 .equ MSK_NX56_fmmusm_len_en_rd_en      ,	0x00020000
 .equ SRT_NX56_fmmusm_len_en_rd_en      ,	17
 .equ MSK_NX56_fmmusm_len_en_wr_en      ,	0x00040000
 .equ SRT_NX56_fmmusm_len_en_wr_en      ,	18

@ ---------------------------------------------------------------------
@ Register fmmusm_status_out
@ => FMMU and SM match status:
@    Flags [31,30] are connected to event controller.
@    Read access by xPEC at adr_xpec_sr9
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fmmusm_status_out   ,	0x00000124
 .equ Adr_NX56_fmmusm_fmmusm_status_out,	0x1018BB24
 .equ Adr_NX56_fmmusm_status_out       ,	0x1018BB24

 .equ MSK_NX56_fmmusm_status_out_read_sm_nr              ,	0x00000007
 .equ SRT_NX56_fmmusm_status_out_read_sm_nr              ,	0
 .equ MSK_NX56_fmmusm_status_out_read_sm_no_match        ,	0x00000008
 .equ SRT_NX56_fmmusm_status_out_read_sm_no_match        ,	3
 .equ MSK_NX56_fmmusm_status_out_read_sm_fba             ,	0x00000010
 .equ SRT_NX56_fmmusm_status_out_read_sm_fba             ,	4
 .equ MSK_NX56_fmmusm_status_out_read_sm_lba             ,	0x00000020
 .equ SRT_NX56_fmmusm_status_out_read_sm_lba             ,	5
 .equ MSK_NX56_fmmusm_status_out_read_allowed            ,	0x00000040
 .equ SRT_NX56_fmmusm_status_out_read_allowed            ,	6
 .equ MSK_NX56_fmmusm_status_out_read_allowed_bitwise    ,	0x00000080
 .equ SRT_NX56_fmmusm_status_out_read_allowed_bitwise    ,	7
 .equ MSK_NX56_fmmusm_status_out_write_sm_nr             ,	0x00000700
 .equ SRT_NX56_fmmusm_status_out_write_sm_nr             ,	8
 .equ MSK_NX56_fmmusm_status_out_write_sm_no_match       ,	0x00000800
 .equ SRT_NX56_fmmusm_status_out_write_sm_no_match       ,	11
 .equ MSK_NX56_fmmusm_status_out_write_sm_fba            ,	0x00001000
 .equ SRT_NX56_fmmusm_status_out_write_sm_fba            ,	12
 .equ MSK_NX56_fmmusm_status_out_write_sm_lba            ,	0x00002000
 .equ SRT_NX56_fmmusm_status_out_write_sm_lba            ,	13
 .equ MSK_NX56_fmmusm_status_out_write_allowed           ,	0x00004000
 .equ SRT_NX56_fmmusm_status_out_write_allowed           ,	14
 .equ MSK_NX56_fmmusm_status_out_write_allowed_bitwise   ,	0x00008000
 .equ SRT_NX56_fmmusm_status_out_write_allowed_bitwise   ,	15
 .equ MSK_NX56_fmmusm_status_out_read_fmmu_match_nr      ,	0x00070000
 .equ SRT_NX56_fmmusm_status_out_read_fmmu_match_nr      ,	16
 .equ MSK_NX56_fmmusm_status_out_read_fmmu_no_match      ,	0x00080000
 .equ SRT_NX56_fmmusm_status_out_read_fmmu_no_match      ,	19
 .equ MSK_NX56_fmmusm_status_out_write_fmmu_match_nr     ,	0x00700000
 .equ SRT_NX56_fmmusm_status_out_write_fmmu_match_nr     ,	20
 .equ MSK_NX56_fmmusm_status_out_write_fmmu_no_match     ,	0x00800000
 .equ SRT_NX56_fmmusm_status_out_write_fmmu_no_match     ,	23
 .equ MSK_NX56_fmmusm_status_out_read_fmmu_match_bitwise ,	0x01000000
 .equ SRT_NX56_fmmusm_status_out_read_fmmu_match_bitwise ,	24
 .equ MSK_NX56_fmmusm_status_out_write_fmmu_match_bitwise,	0x02000000
 .equ SRT_NX56_fmmusm_status_out_write_fmmu_match_bitwise,	25
 .equ MSK_NX56_fmmusm_status_out_allowed_bitwise         ,	0x20000000
 .equ SRT_NX56_fmmusm_status_out_allowed_bitwise         ,	29
 .equ MSK_NX56_fmmusm_status_out_allowed                 ,	0x40000000
 .equ SRT_NX56_fmmusm_status_out_allowed                 ,	30
 .equ MSK_NX56_fmmusm_status_out_ecat_fin                ,	0x80000000
 .equ SRT_NX56_fmmusm_status_out_ecat_fin                ,	31

@ ---------------------------------------------------------------------
@ Register sm_buf_statcfg
@ => Config bits set by xPEC, if any 3-buffer-SM gets new buffer.
@    Writable in parallel with mask by all xPECs, ARM and BUF_MAN.
@    Read/Write access by xPEC at adr_xpec_sr10
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_buf_statcfg   ,	0x00000128
 .equ Adr_NX56_fmmusm_sm_buf_statcfg,	0x1018BB28
 .equ Adr_NX56_sm_buf_statcfg       ,	0x1018BB28

 .equ MSK_NX56_sm_buf_statcfg_buf_full_0,	0x00000001
 .equ SRT_NX56_sm_buf_statcfg_buf_full_0,	0
 .equ MSK_NX56_sm_buf_statcfg_buf_full_1,	0x00000002
 .equ SRT_NX56_sm_buf_statcfg_buf_full_1,	1
 .equ MSK_NX56_sm_buf_statcfg_buf_full_2,	0x00000004
 .equ SRT_NX56_sm_buf_statcfg_buf_full_2,	2
 .equ MSK_NX56_sm_buf_statcfg_buf_full_3,	0x00000008
 .equ SRT_NX56_sm_buf_statcfg_buf_full_3,	3
 .equ MSK_NX56_sm_buf_statcfg_buf_full_4,	0x00000010
 .equ SRT_NX56_sm_buf_statcfg_buf_full_4,	4
 .equ MSK_NX56_sm_buf_statcfg_buf_full_5,	0x00000020
 .equ SRT_NX56_sm_buf_statcfg_buf_full_5,	5
 .equ MSK_NX56_sm_buf_statcfg_buf_full_6,	0x00000040
 .equ SRT_NX56_sm_buf_statcfg_buf_full_6,	6
 .equ MSK_NX56_sm_buf_statcfg_buf_full_7,	0x00000080
 .equ SRT_NX56_sm_buf_statcfg_buf_full_7,	7
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_0  ,	0x00000300
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_0  ,	8
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_1  ,	0x00000c00
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_1  ,	10
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_2  ,	0x00003000
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_2  ,	12
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_3  ,	0x0000c000
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_3  ,	14
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_4  ,	0x00030000
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_4  ,	16
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_5  ,	0x000c0000
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_5  ,	18
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_6  ,	0x00300000
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_6  ,	20
 .equ MSK_NX56_sm_buf_statcfg_buf_nr_7  ,	0x00c00000
 .equ SRT_NX56_sm_buf_statcfg_buf_nr_7  ,	22
 .equ MSK_NX56_sm_buf_statcfg_buf_mask0 ,	0x01000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask0 ,	24
 .equ MSK_NX56_sm_buf_statcfg_buf_mask1 ,	0x02000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask1 ,	25
 .equ MSK_NX56_sm_buf_statcfg_buf_mask2 ,	0x04000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask2 ,	26
 .equ MSK_NX56_sm_buf_statcfg_buf_mask3 ,	0x08000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask3 ,	27
 .equ MSK_NX56_sm_buf_statcfg_buf_mask4 ,	0x10000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask4 ,	28
 .equ MSK_NX56_sm_buf_statcfg_buf_mask5 ,	0x20000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask5 ,	29
 .equ MSK_NX56_sm_buf_statcfg_buf_mask6 ,	0x40000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask6 ,	30
 .equ MSK_NX56_sm_buf_statcfg_buf_mask7 ,	0x80000000
 .equ SRT_NX56_sm_buf_statcfg_buf_mask7 ,	31

@ ---------------------------------------------------------------------
@ Register sm_read_event
@ => Read Event status bits of all SM, process channel:
@    Writable in parallel with mask by all xPECs and ARM.
@    Reset by FMMUSM at first_byte_addressed and write_allowed.
@    Read/Write access by xPEC at adr_xpec_sr11
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_read_event   ,	0x0000012C
 .equ Adr_NX56_fmmusm_sm_read_event,	0x1018BB2C
 .equ Adr_NX56_sm_read_event       ,	0x1018BB2C

 .equ MSK_NX56_sm_read_event_read_event_0    ,	0x00000001
 .equ SRT_NX56_sm_read_event_read_event_0    ,	0
 .equ MSK_NX56_sm_read_event_read_event_1    ,	0x00000002
 .equ SRT_NX56_sm_read_event_read_event_1    ,	1
 .equ MSK_NX56_sm_read_event_read_event_2    ,	0x00000004
 .equ SRT_NX56_sm_read_event_read_event_2    ,	2
 .equ MSK_NX56_sm_read_event_read_event_3    ,	0x00000008
 .equ SRT_NX56_sm_read_event_read_event_3    ,	3
 .equ MSK_NX56_sm_read_event_read_event_4    ,	0x00000010
 .equ SRT_NX56_sm_read_event_read_event_4    ,	4
 .equ MSK_NX56_sm_read_event_read_event_5    ,	0x00000020
 .equ SRT_NX56_sm_read_event_read_event_5    ,	5
 .equ MSK_NX56_sm_read_event_read_event_6    ,	0x00000040
 .equ SRT_NX56_sm_read_event_read_event_6    ,	6
 .equ MSK_NX56_sm_read_event_read_event_7    ,	0x00000080
 .equ SRT_NX56_sm_read_event_read_event_7    ,	7
 .equ MSK_NX56_sm_read_event_read_event_mask0,	0x00010000
 .equ SRT_NX56_sm_read_event_read_event_mask0,	16
 .equ MSK_NX56_sm_read_event_read_event_mask1,	0x00020000
 .equ SRT_NX56_sm_read_event_read_event_mask1,	17
 .equ MSK_NX56_sm_read_event_read_event_mask2,	0x00040000
 .equ SRT_NX56_sm_read_event_read_event_mask2,	18
 .equ MSK_NX56_sm_read_event_read_event_mask3,	0x00080000
 .equ SRT_NX56_sm_read_event_read_event_mask3,	19
 .equ MSK_NX56_sm_read_event_read_event_mask4,	0x00100000
 .equ SRT_NX56_sm_read_event_read_event_mask4,	20
 .equ MSK_NX56_sm_read_event_read_event_mask5,	0x00200000
 .equ SRT_NX56_sm_read_event_read_event_mask5,	21
 .equ MSK_NX56_sm_read_event_read_event_mask6,	0x00400000
 .equ SRT_NX56_sm_read_event_read_event_mask6,	22
 .equ MSK_NX56_sm_read_event_read_event_mask7,	0x00800000
 .equ SRT_NX56_sm_read_event_read_event_mask7,	23

@ ---------------------------------------------------------------------
@ Register sm_write_event
@ => Write Event status bits of all SM, process channel
@    Writable in parallel with mask by all xPECs and ARM.
@    Reset by FMMUSM at first_byte_addressed and read_allowed.
@    Read/Write access by xPEC at adr_xpec_sr12
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_write_event   ,	0x00000130
 .equ Adr_NX56_fmmusm_sm_write_event,	0x1018BB30
 .equ Adr_NX56_sm_write_event       ,	0x1018BB30

 .equ MSK_NX56_sm_write_event_write_event_0    ,	0x00000001
 .equ SRT_NX56_sm_write_event_write_event_0    ,	0
 .equ MSK_NX56_sm_write_event_write_event_1    ,	0x00000002
 .equ SRT_NX56_sm_write_event_write_event_1    ,	1
 .equ MSK_NX56_sm_write_event_write_event_2    ,	0x00000004
 .equ SRT_NX56_sm_write_event_write_event_2    ,	2
 .equ MSK_NX56_sm_write_event_write_event_3    ,	0x00000008
 .equ SRT_NX56_sm_write_event_write_event_3    ,	3
 .equ MSK_NX56_sm_write_event_write_event_4    ,	0x00000010
 .equ SRT_NX56_sm_write_event_write_event_4    ,	4
 .equ MSK_NX56_sm_write_event_write_event_5    ,	0x00000020
 .equ SRT_NX56_sm_write_event_write_event_5    ,	5
 .equ MSK_NX56_sm_write_event_write_event_6    ,	0x00000040
 .equ SRT_NX56_sm_write_event_write_event_6    ,	6
 .equ MSK_NX56_sm_write_event_write_event_7    ,	0x00000080
 .equ SRT_NX56_sm_write_event_write_event_7    ,	7
 .equ MSK_NX56_sm_write_event_write_event_mask0,	0x00010000
 .equ SRT_NX56_sm_write_event_write_event_mask0,	16
 .equ MSK_NX56_sm_write_event_write_event_mask1,	0x00020000
 .equ SRT_NX56_sm_write_event_write_event_mask1,	17
 .equ MSK_NX56_sm_write_event_write_event_mask2,	0x00040000
 .equ SRT_NX56_sm_write_event_write_event_mask2,	18
 .equ MSK_NX56_sm_write_event_write_event_mask3,	0x00080000
 .equ SRT_NX56_sm_write_event_write_event_mask3,	19
 .equ MSK_NX56_sm_write_event_write_event_mask4,	0x00100000
 .equ SRT_NX56_sm_write_event_write_event_mask4,	20
 .equ MSK_NX56_sm_write_event_write_event_mask5,	0x00200000
 .equ SRT_NX56_sm_write_event_write_event_mask5,	21
 .equ MSK_NX56_sm_write_event_write_event_mask6,	0x00400000
 .equ SRT_NX56_sm_write_event_write_event_mask6,	22
 .equ MSK_NX56_sm_write_event_write_event_mask7,	0x00800000
 .equ SRT_NX56_sm_write_event_write_event_mask7,	23

@ ---------------------------------------------------------------------
@ Register sm_first_byte_addressed
@ => First byte addressed status bits of all SM, process channel:
@    Set by HW, if first byte was addressed.
@    Reset by SW (xPEC or ARM), by writing 1 on appropriate bit (usually after FCSok/fail).
@    Resetable in parallel by all xPECs and ARM.
@    Bits 31:8 are read only versions of other registers for faster update of register area.
@    Read/Write access by xPEC at adr_xpec_sr13
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_first_byte_addressed   ,	0x00000134
 .equ Adr_NX56_fmmusm_sm_first_byte_addressed,	0x1018BB34
 .equ Adr_NX56_sm_first_byte_addressed       ,	0x1018BB34

 .equ MSK_NX56_sm_first_byte_addressed_fba_0        ,	0x00000001
 .equ SRT_NX56_sm_first_byte_addressed_fba_0        ,	0
 .equ MSK_NX56_sm_first_byte_addressed_fba_1        ,	0x00000002
 .equ SRT_NX56_sm_first_byte_addressed_fba_1        ,	1
 .equ MSK_NX56_sm_first_byte_addressed_fba_2        ,	0x00000004
 .equ SRT_NX56_sm_first_byte_addressed_fba_2        ,	2
 .equ MSK_NX56_sm_first_byte_addressed_fba_3        ,	0x00000008
 .equ SRT_NX56_sm_first_byte_addressed_fba_3        ,	3
 .equ MSK_NX56_sm_first_byte_addressed_fba_4        ,	0x00000010
 .equ SRT_NX56_sm_first_byte_addressed_fba_4        ,	4
 .equ MSK_NX56_sm_first_byte_addressed_fba_5        ,	0x00000020
 .equ SRT_NX56_sm_first_byte_addressed_fba_5        ,	5
 .equ MSK_NX56_sm_first_byte_addressed_fba_6        ,	0x00000040
 .equ SRT_NX56_sm_first_byte_addressed_fba_6        ,	6
 .equ MSK_NX56_sm_first_byte_addressed_fba_7        ,	0x00000080
 .equ SRT_NX56_sm_first_byte_addressed_fba_7        ,	7
 .equ MSK_NX56_sm_first_byte_addressed_write_event_0,	0x00000100
 .equ SRT_NX56_sm_first_byte_addressed_write_event_0,	8
 .equ MSK_NX56_sm_first_byte_addressed_read_event_0 ,	0x00000200
 .equ SRT_NX56_sm_first_byte_addressed_read_event_0 ,	9
 .equ MSK_NX56_sm_first_byte_addressed_buf_full_0   ,	0x00000800
 .equ SRT_NX56_sm_first_byte_addressed_buf_full_0   ,	11
 .equ MSK_NX56_sm_first_byte_addressed_buf_nr_0     ,	0x00003000
 .equ SRT_NX56_sm_first_byte_addressed_buf_nr_0     ,	12
 .equ MSK_NX56_sm_first_byte_addressed_write_event_1,	0x00004000
 .equ SRT_NX56_sm_first_byte_addressed_write_event_1,	14
 .equ MSK_NX56_sm_first_byte_addressed_read_event_1 ,	0x00008000
 .equ SRT_NX56_sm_first_byte_addressed_read_event_1 ,	15
 .equ MSK_NX56_sm_first_byte_addressed_buf_full_1   ,	0x00020000
 .equ SRT_NX56_sm_first_byte_addressed_buf_full_1   ,	17
 .equ MSK_NX56_sm_first_byte_addressed_buf_nr_1     ,	0x000c0000
 .equ SRT_NX56_sm_first_byte_addressed_buf_nr_1     ,	18
 .equ MSK_NX56_sm_first_byte_addressed_write_event_2,	0x00100000
 .equ SRT_NX56_sm_first_byte_addressed_write_event_2,	20
 .equ MSK_NX56_sm_first_byte_addressed_read_event_2 ,	0x00200000
 .equ SRT_NX56_sm_first_byte_addressed_read_event_2 ,	21
 .equ MSK_NX56_sm_first_byte_addressed_buf_full_2   ,	0x00800000
 .equ SRT_NX56_sm_first_byte_addressed_buf_full_2   ,	23
 .equ MSK_NX56_sm_first_byte_addressed_buf_nr_2     ,	0x03000000
 .equ SRT_NX56_sm_first_byte_addressed_buf_nr_2     ,	24
 .equ MSK_NX56_sm_first_byte_addressed_write_event_3,	0x04000000
 .equ SRT_NX56_sm_first_byte_addressed_write_event_3,	26
 .equ MSK_NX56_sm_first_byte_addressed_read_event_3 ,	0x08000000
 .equ SRT_NX56_sm_first_byte_addressed_read_event_3 ,	27
 .equ MSK_NX56_sm_first_byte_addressed_buf_full_3   ,	0x20000000
 .equ SRT_NX56_sm_first_byte_addressed_buf_full_3   ,	29
 .equ MSK_NX56_sm_first_byte_addressed_buf_nr_3     ,	0xc0000000
 .equ SRT_NX56_sm_first_byte_addressed_buf_nr_3     ,	30

@ ---------------------------------------------------------------------
@ Register sm_last_byte_addressed
@ => Last byte addressed status bits of all SM, process channel:
@    Set by HW, if last byte was addressed.
@    Reset by SW (xPEC or ARM), by writing 1 on appropriate bit (usually after FCSok/fail).
@    Resetable in parallel by all xPECs and ARM.
@    Bits 31:8 are read only versions of other registers for faster update of register area.
@    Read/Write access by xPEC at adr_xpec_sr14
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_last_byte_addressed   ,	0x00000138
 .equ Adr_NX56_fmmusm_sm_last_byte_addressed,	0x1018BB38
 .equ Adr_NX56_sm_last_byte_addressed       ,	0x1018BB38

 .equ MSK_NX56_sm_last_byte_addressed_lba_0        ,	0x00000001
 .equ SRT_NX56_sm_last_byte_addressed_lba_0        ,	0
 .equ MSK_NX56_sm_last_byte_addressed_lba_1        ,	0x00000002
 .equ SRT_NX56_sm_last_byte_addressed_lba_1        ,	1
 .equ MSK_NX56_sm_last_byte_addressed_lba_2        ,	0x00000004
 .equ SRT_NX56_sm_last_byte_addressed_lba_2        ,	2
 .equ MSK_NX56_sm_last_byte_addressed_lba_3        ,	0x00000008
 .equ SRT_NX56_sm_last_byte_addressed_lba_3        ,	3
 .equ MSK_NX56_sm_last_byte_addressed_lba_4        ,	0x00000010
 .equ SRT_NX56_sm_last_byte_addressed_lba_4        ,	4
 .equ MSK_NX56_sm_last_byte_addressed_lba_5        ,	0x00000020
 .equ SRT_NX56_sm_last_byte_addressed_lba_5        ,	5
 .equ MSK_NX56_sm_last_byte_addressed_lba_6        ,	0x00000040
 .equ SRT_NX56_sm_last_byte_addressed_lba_6        ,	6
 .equ MSK_NX56_sm_last_byte_addressed_lba_7        ,	0x00000080
 .equ SRT_NX56_sm_last_byte_addressed_lba_7        ,	7
 .equ MSK_NX56_sm_last_byte_addressed_write_event_4,	0x00000100
 .equ SRT_NX56_sm_last_byte_addressed_write_event_4,	8
 .equ MSK_NX56_sm_last_byte_addressed_read_event_4 ,	0x00000200
 .equ SRT_NX56_sm_last_byte_addressed_read_event_4 ,	9
 .equ MSK_NX56_sm_last_byte_addressed_buf_full_4   ,	0x00000800
 .equ SRT_NX56_sm_last_byte_addressed_buf_full_4   ,	11
 .equ MSK_NX56_sm_last_byte_addressed_buf_nr_4     ,	0x00003000
 .equ SRT_NX56_sm_last_byte_addressed_buf_nr_4     ,	12
 .equ MSK_NX56_sm_last_byte_addressed_write_event_5,	0x00004000
 .equ SRT_NX56_sm_last_byte_addressed_write_event_5,	14
 .equ MSK_NX56_sm_last_byte_addressed_read_event_5 ,	0x00008000
 .equ SRT_NX56_sm_last_byte_addressed_read_event_5 ,	15
 .equ MSK_NX56_sm_last_byte_addressed_buf_full_5   ,	0x00020000
 .equ SRT_NX56_sm_last_byte_addressed_buf_full_5   ,	17
 .equ MSK_NX56_sm_last_byte_addressed_buf_nr_5     ,	0x000c0000
 .equ SRT_NX56_sm_last_byte_addressed_buf_nr_5     ,	18
 .equ MSK_NX56_sm_last_byte_addressed_write_event_6,	0x00100000
 .equ SRT_NX56_sm_last_byte_addressed_write_event_6,	20
 .equ MSK_NX56_sm_last_byte_addressed_read_event_6 ,	0x00200000
 .equ SRT_NX56_sm_last_byte_addressed_read_event_6 ,	21
 .equ MSK_NX56_sm_last_byte_addressed_buf_full_6   ,	0x00800000
 .equ SRT_NX56_sm_last_byte_addressed_buf_full_6   ,	23
 .equ MSK_NX56_sm_last_byte_addressed_buf_nr_6     ,	0x03000000
 .equ SRT_NX56_sm_last_byte_addressed_buf_nr_6     ,	24
 .equ MSK_NX56_sm_last_byte_addressed_write_event_7,	0x04000000
 .equ SRT_NX56_sm_last_byte_addressed_write_event_7,	26
 .equ MSK_NX56_sm_last_byte_addressed_read_event_7 ,	0x08000000
 .equ SRT_NX56_sm_last_byte_addressed_read_event_7 ,	27
 .equ MSK_NX56_sm_last_byte_addressed_buf_full_7   ,	0x20000000
 .equ SRT_NX56_sm_last_byte_addressed_buf_full_7   ,	29
 .equ MSK_NX56_sm_last_byte_addressed_buf_nr_7     ,	0xc0000000
 .equ SRT_NX56_sm_last_byte_addressed_buf_nr_7     ,	30

@ ---------------------------------------------------------------------
@ Register sm_served
@ => Served status bits of all SM, process channel:
@    Set by HW, if SM gives write_allowed or read_allowed.
@    Reset by SW (xPEC or ARM), by writing 1 on appropriate bit (usually after FCSok/fail).
@    Read/Write access by xPEC at adr_xpec_sr15
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sm_served   ,	0x0000013C
 .equ Adr_NX56_fmmusm_sm_served,	0x1018BB3C
 .equ Adr_NX56_sm_served       ,	0x1018BB3C

 .equ MSK_NX56_sm_served_srvd_0              ,	0x00000001
 .equ SRT_NX56_sm_served_srvd_0              ,	0
 .equ MSK_NX56_sm_served_srvd_1              ,	0x00000002
 .equ SRT_NX56_sm_served_srvd_1              ,	1
 .equ MSK_NX56_sm_served_srvd_2              ,	0x00000004
 .equ SRT_NX56_sm_served_srvd_2              ,	2
 .equ MSK_NX56_sm_served_srvd_3              ,	0x00000008
 .equ SRT_NX56_sm_served_srvd_3              ,	3
 .equ MSK_NX56_sm_served_srvd_4              ,	0x00000010
 .equ SRT_NX56_sm_served_srvd_4              ,	4
 .equ MSK_NX56_sm_served_srvd_5              ,	0x00000020
 .equ SRT_NX56_sm_served_srvd_5              ,	5
 .equ MSK_NX56_sm_served_srvd_6              ,	0x00000040
 .equ SRT_NX56_sm_served_srvd_6              ,	6
 .equ MSK_NX56_sm_served_srvd_7              ,	0x00000080
 .equ SRT_NX56_sm_served_srvd_7              ,	7
 .equ MSK_NX56_sm_served_any_proc_read_match ,	0x00000100
 .equ SRT_NX56_sm_served_any_proc_read_match ,	8
 .equ MSK_NX56_sm_served_any_proc_write_match,	0x00000200
 .equ SRT_NX56_sm_served_any_proc_write_match,	9


@ =====================================================================
@
@ Area of trigger_sample_unit
@
@ =====================================================================

 .equ Addr_NX56_trigger_sample_unit, 0x1018BD00

@ ---------------------------------------------------------------------
@ Register trigger_sample_config
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_sample_config                ,	0x00000000
 .equ Adr_NX56_trigger_sample_unit_trigger_sample_config,	0x1018BD00
 .equ Adr_NX56_trigger_sample_config                    ,	0x1018BD00

 .equ MSK_NX56_trigger_sample_config_sync0_output_driver  ,	0x00000001
 .equ SRT_NX56_trigger_sample_config_sync0_output_driver  ,	0
 .equ MSK_NX56_trigger_sample_config_sync0_polarity       ,	0x00000002
 .equ SRT_NX56_trigger_sample_config_sync0_polarity       ,	1
 .equ MSK_NX56_trigger_sample_config_sync0_oe             ,	0x00000004
 .equ SRT_NX56_trigger_sample_config_sync0_oe             ,	2
 .equ MSK_NX56_trigger_sample_config_sync0_irq_en         ,	0x00000008
 .equ SRT_NX56_trigger_sample_config_sync0_irq_en         ,	3
 .equ MSK_NX56_trigger_sample_config_sync1_output_driver  ,	0x00000010
 .equ SRT_NX56_trigger_sample_config_sync1_output_driver  ,	4
 .equ MSK_NX56_trigger_sample_config_sync1_polarity       ,	0x00000020
 .equ SRT_NX56_trigger_sample_config_sync1_polarity       ,	5
 .equ MSK_NX56_trigger_sample_config_sync1_oe             ,	0x00000040
 .equ SRT_NX56_trigger_sample_config_sync1_oe             ,	6
 .equ MSK_NX56_trigger_sample_config_sync1_irq_en         ,	0x00000080
 .equ SRT_NX56_trigger_sample_config_sync1_irq_en         ,	7
 .equ MSK_NX56_trigger_sample_config_trigger_mode         ,	0x00000300
 .equ SRT_NX56_trigger_sample_config_trigger_mode         ,	8
 .equ MSK_NX56_trigger_sample_config_cyc1_count           ,	0x0000f000
 .equ SRT_NX56_trigger_sample_config_cyc1_count           ,	12
 .equ MSK_NX56_trigger_sample_config_latch_unit_activate  ,	0x00010000
 .equ SRT_NX56_trigger_sample_config_latch_unit_activate  ,	16
 .equ MSK_NX56_trigger_sample_config_latch0_posedge_irq_en,	0x01000000
 .equ SRT_NX56_trigger_sample_config_latch0_posedge_irq_en,	24
 .equ MSK_NX56_trigger_sample_config_latch0_negedge_irq_en,	0x02000000
 .equ SRT_NX56_trigger_sample_config_latch0_negedge_irq_en,	25
 .equ MSK_NX56_trigger_sample_config_latch1_posedge_irq_en,	0x04000000
 .equ SRT_NX56_trigger_sample_config_latch1_posedge_irq_en,	26
 .equ MSK_NX56_trigger_sample_config_latch1_negedge_irq_en,	0x08000000
 .equ SRT_NX56_trigger_sample_config_latch1_negedge_irq_en,	27

@ ---------------------------------------------------------------------
@ Register trigger_sample_status
@ => r/w access by xPEC and ARM, set by trigger_sample_unit, write access (1'b1) clears the events, all status signals are connected to the xPEC event controller of each xPEC
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_sample_status                ,	0x00000004
 .equ Adr_NX56_trigger_sample_unit_trigger_sample_status,	0x1018BD04
 .equ Adr_NX56_trigger_sample_status                    ,	0x1018BD04

 .equ MSK_NX56_trigger_sample_status_sync0_status           ,	0x00000001
 .equ SRT_NX56_trigger_sample_status_sync0_status           ,	0
 .equ MSK_NX56_trigger_sample_status_sync1_status           ,	0x00000100
 .equ SRT_NX56_trigger_sample_status_sync1_status           ,	8
 .equ MSK_NX56_trigger_sample_status_sample_0_posedge_status,	0x00010000
 .equ SRT_NX56_trigger_sample_status_sample_0_posedge_status,	16
 .equ MSK_NX56_trigger_sample_status_sample_0_negedge_status,	0x00020000
 .equ SRT_NX56_trigger_sample_status_sample_0_negedge_status,	17
 .equ MSK_NX56_trigger_sample_status_sample_0_in            ,	0x00040000
 .equ SRT_NX56_trigger_sample_status_sample_0_in            ,	18
 .equ MSK_NX56_trigger_sample_status_sample_1_posedge_status,	0x01000000
 .equ SRT_NX56_trigger_sample_status_sample_1_posedge_status,	24
 .equ MSK_NX56_trigger_sample_status_sample_1_negedge_status,	0x02000000
 .equ SRT_NX56_trigger_sample_status_sample_1_negedge_status,	25
 .equ MSK_NX56_trigger_sample_status_sample_1_in            ,	0x04000000
 .equ SRT_NX56_trigger_sample_status_sample_1_in            ,	26

@ ---------------------------------------------------------------------
@ Register trigger_sample_irq
@ => r/w by xPEC and ARM, one global irq register for trigger_sample unit (must be also visible for HIF); irq set by xPEC, reset by arm (always with writing a 1 at appropriate bit position)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_sample_irq                ,	0x00000008
 .equ Adr_NX56_trigger_sample_unit_trigger_sample_irq,	0x1018BD08
 .equ Adr_NX56_trigger_sample_irq                    ,	0x1018BD08

 .equ MSK_NX56_trigger_sample_irq_sync0_irq         ,	0x00000001
 .equ SRT_NX56_trigger_sample_irq_sync0_irq         ,	0
 .equ MSK_NX56_trigger_sample_irq_sync1_irq         ,	0x00000002
 .equ SRT_NX56_trigger_sample_irq_sync1_irq         ,	1
 .equ MSK_NX56_trigger_sample_irq_latch0_posedge_irq,	0x00000100
 .equ SRT_NX56_trigger_sample_irq_latch0_posedge_irq,	8
 .equ MSK_NX56_trigger_sample_irq_latch0_negedge_irq,	0x00000200
 .equ SRT_NX56_trigger_sample_irq_latch0_negedge_irq,	9
 .equ MSK_NX56_trigger_sample_irq_latch1_posedge_irq,	0x00000400
 .equ SRT_NX56_trigger_sample_irq_latch1_posedge_irq,	10
 .equ MSK_NX56_trigger_sample_irq_latch1_negedge_irq,	0x00000800
 .equ SRT_NX56_trigger_sample_irq_latch1_negedge_irq,	11

@ ---------------------------------------------------------------------
@ Register trigger_activate
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_activate                ,	0x0000000C
 .equ Adr_NX56_trigger_sample_unit_trigger_activate,	0x1018BD0C
 .equ Adr_NX56_trigger_activate                    ,	0x1018BD0C

 .equ MSK_NX56_trigger_activate_trigger_unit_activate,	0x00000100
 .equ SRT_NX56_trigger_activate_trigger_unit_activate,	8
 .equ MSK_NX56_trigger_activate_sync0_activate       ,	0x00000200
 .equ SRT_NX56_trigger_activate_sync0_activate       ,	9
 .equ MSK_NX56_trigger_activate_sync1_activate       ,	0x00000400
 .equ SRT_NX56_trigger_activate_sync1_activate       ,	10

@ ---------------------------------------------------------------------
@ Register trigger_impulse_length
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_impulse_length                ,	0x00000010
 .equ Adr_NX56_trigger_sample_unit_trigger_impulse_length,	0x1018BD10
 .equ Adr_NX56_trigger_impulse_length                    ,	0x1018BD10

 .equ MSK_NX56_trigger_impulse_length_sync0_impulse_length,	0x0000ffff
 .equ SRT_NX56_trigger_impulse_length_sync0_impulse_length,	0
 .equ MSK_NX56_trigger_impulse_length_sync1_impulse_length,	0xffff0000
 .equ SRT_NX56_trigger_impulse_length_sync1_impulse_length,	16

@ ---------------------------------------------------------------------
@ Register trigger_0_starttime_ns
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_0_starttime_ns                ,	0x00000014
 .equ Adr_NX56_trigger_sample_unit_trigger_0_starttime_ns,	0x1018BD14
 .equ Adr_NX56_trigger_0_starttime_ns                    ,	0x1018BD14

 .equ MSK_NX56_trigger_0_starttime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_trigger_0_starttime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register trigger_1_starttime_ns
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_1_starttime_ns                ,	0x00000018
 .equ Adr_NX56_trigger_sample_unit_trigger_1_starttime_ns,	0x1018BD18
 .equ Adr_NX56_trigger_1_starttime_ns                    ,	0x1018BD18

 .equ MSK_NX56_trigger_1_starttime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_trigger_1_starttime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register trigger_0_cyc_time
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_0_cyc_time                ,	0x0000001C
 .equ Adr_NX56_trigger_sample_unit_trigger_0_cyc_time,	0x1018BD1C
 .equ Adr_NX56_trigger_0_cyc_time                    ,	0x1018BD1C

 .equ MSK_NX56_trigger_0_cyc_time_systime_ns,	0xffffffff
 .equ SRT_NX56_trigger_0_cyc_time_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register trigger_1_cyc_time
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_1_cyc_time                ,	0x00000020
 .equ Adr_NX56_trigger_sample_unit_trigger_1_cyc_time,	0x1018BD20
 .equ Adr_NX56_trigger_1_cyc_time                    ,	0x1018BD20

 .equ MSK_NX56_trigger_1_cyc_time_systime_ns,	0xffffffff
 .equ SRT_NX56_trigger_1_cyc_time_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register sample_mode
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sample_mode                ,	0x00000024
 .equ Adr_NX56_trigger_sample_unit_sample_mode,	0x1018BD24
 .equ Adr_NX56_sample_mode                    ,	0x1018BD24

 .equ MSK_NX56_sample_mode_sample_0_posedge_mode,	0x00000001
 .equ SRT_NX56_sample_mode_sample_0_posedge_mode,	0
 .equ MSK_NX56_sample_mode_sample_0_negedge_mode,	0x00000002
 .equ SRT_NX56_sample_mode_sample_0_negedge_mode,	1
 .equ MSK_NX56_sample_mode_sample_1_posedge_mode,	0x00000100
 .equ SRT_NX56_sample_mode_sample_1_posedge_mode,	8
 .equ MSK_NX56_sample_mode_sample_1_negedge_mode,	0x00000200
 .equ SRT_NX56_sample_mode_sample_1_negedge_mode,	9

@ ---------------------------------------------------------------------
@ Register sample_0_pos_systime_ns
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sample_0_pos_systime_ns                ,	0x00000028
 .equ Adr_NX56_trigger_sample_unit_sample_0_pos_systime_ns,	0x1018BD28
 .equ Adr_NX56_sample_0_pos_systime_ns                    ,	0x1018BD28

 .equ MSK_NX56_sample_0_pos_systime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_sample_0_pos_systime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register sample_0_neg_systime_ns
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sample_0_neg_systime_ns                ,	0x0000002C
 .equ Adr_NX56_trigger_sample_unit_sample_0_neg_systime_ns,	0x1018BD2C
 .equ Adr_NX56_sample_0_neg_systime_ns                    ,	0x1018BD2C

 .equ MSK_NX56_sample_0_neg_systime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_sample_0_neg_systime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register sample_1_pos_systime_ns
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sample_1_pos_systime_ns                ,	0x00000030
 .equ Adr_NX56_trigger_sample_unit_sample_1_pos_systime_ns,	0x1018BD30
 .equ Adr_NX56_sample_1_pos_systime_ns                    ,	0x1018BD30

 .equ MSK_NX56_sample_1_pos_systime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_sample_1_pos_systime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register sample_1_neg_systime_ns
@ => r/w access by xPEC and ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sample_1_neg_systime_ns                ,	0x00000034
 .equ Adr_NX56_trigger_sample_unit_sample_1_neg_systime_ns,	0x1018BD34
 .equ Adr_NX56_sample_1_neg_systime_ns                    ,	0x1018BD34

 .equ MSK_NX56_sample_1_neg_systime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_sample_1_neg_systime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register trigger_offset
@ => r/w access by ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_trigger_offset                ,	0x00000038
 .equ Adr_NX56_trigger_sample_unit_trigger_offset,	0x1018BD38
 .equ Adr_NX56_trigger_offset                    ,	0x1018BD38

 .equ MSK_NX56_trigger_offset_trigger_offset,	0xffffffff
 .equ SRT_NX56_trigger_offset_trigger_offset,	0

@ ---------------------------------------------------------------------
@ Register sync1_interval
@ => r/w access by ARM
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sync1_interval                ,	0x0000003C
 .equ Adr_NX56_trigger_sample_unit_sync1_interval,	0x1018BD3C
 .equ Adr_NX56_sync1_interval                    ,	0x1018BD3C

 .equ MSK_NX56_sync1_interval_sync1_interval,	0x03ffffff
 .equ SRT_NX56_sync1_interval_sync1_interval,	0


@ =====================================================================
@
@ Area of buf_man, buf_man_motion
@
@ =====================================================================

 .equ Addr_NX56_buf_man, 0x1018BE00
 .equ Addr_NX56_buf_man_motion, 0x10100600

@ ---------------------------------------------------------------------
@ Register buf_man_rpec0
@ => BMU port of 1st master (xPEC0):
@    This register address allows to access 16 buffer controllers, where each one handles buffer numbers (0..4) between up
@    to four processors. Due to the complex functionality in one register address, bits have different meaning depending on
@    request type and mode.
@    Getting a new buffer always happens with two command accesses:
@    1st: Write access: Tell the buf_manager the channel(s) (0..15) and whether you request read or write buffer.
@         Wait for two clock cycles, until new buffer number is calculated after any write access.
@    2nd: Read access: Read the buffer number (0..4).
@    This register is also accessible directly by xPEC0 with higher priority. Do not use this address, if xPEC0 uses the buffer manager.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_buf_man_rpec0           ,	0x00000000
 .equ Adr_NX56_buf_man_buf_man_rpec0       ,	0x1018BE00
 .equ Adr_NX56_buf_man_motion_buf_man_rpec0,	0x10100600

 .equ MSK_NX56_buf_man_rpec0_buf_nr        ,	0x0000000f
 .equ SRT_NX56_buf_man_rpec0_buf_nr        ,	0
 .equ MSK_NX56_buf_man_rpec0_req_type      ,	0x00000060
 .equ SRT_NX56_buf_man_rpec0_req_type      ,	5
 .equ MSK_NX56_buf_man_rpec0_semaphore_mode,	0x00000080
 .equ SRT_NX56_buf_man_rpec0_semaphore_mode,	7
 .equ MSK_NX56_buf_man_rpec0_parallel_mode ,	0x00000100
 .equ SRT_NX56_buf_man_rpec0_parallel_mode ,	8
 .equ MSK_NX56_buf_man_rpec0_reset         ,	0x00000200
 .equ SRT_NX56_buf_man_rpec0_reset         ,	9
 .equ MSK_NX56_buf_man_rpec0_sm_update_en  ,	0x00000400
 .equ SRT_NX56_buf_man_rpec0_sm_update_en  ,	10
 .equ MSK_NX56_buf_man_rpec0_sm_update_dis ,	0x00000800
 .equ SRT_NX56_buf_man_rpec0_sm_update_dis ,	11

@ ---------------------------------------------------------------------
@ Register buf_man_rpec1
@ => BMU port of 2nd master (xPEC1):
@    This register address allows to access 16 buffer controllers, where each one handles buffer numbers (0..4) between up
@    to four processors. Due to the complex functionality in one register address, bits have different meaning depending on
@    request type and mode.
@    Getting a new buffer always happens with two command accesses:
@    1st: Write access: Tell the buf_manager the channel(s) (0..15) and whether you request read or write buffer.
@         Wait for two clock cycles, until new buffer number is calculated after any write access.
@    2nd: Read access: Read the buffer number (0..4).
@    This register is also accessible directly by xPEC1 with higher priority. Do not use this address, if xPEC1 uses the buffer manager.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_buf_man_rpec1           ,	0x00000004
 .equ Adr_NX56_buf_man_buf_man_rpec1       ,	0x1018BE04
 .equ Adr_NX56_buf_man_motion_buf_man_rpec1,	0x10100604

 .equ MSK_NX56_buf_man_rpec1_buf_nr        ,	0x0000000f
 .equ SRT_NX56_buf_man_rpec1_buf_nr        ,	0
 .equ MSK_NX56_buf_man_rpec1_req_type      ,	0x00000060
 .equ SRT_NX56_buf_man_rpec1_req_type      ,	5
 .equ MSK_NX56_buf_man_rpec1_semaphore_mode,	0x00000080
 .equ SRT_NX56_buf_man_rpec1_semaphore_mode,	7
 .equ MSK_NX56_buf_man_rpec1_parallel_mode ,	0x00000100
 .equ SRT_NX56_buf_man_rpec1_parallel_mode ,	8
 .equ MSK_NX56_buf_man_rpec1_reset         ,	0x00000200
 .equ SRT_NX56_buf_man_rpec1_reset         ,	9
 .equ MSK_NX56_buf_man_rpec1_sm_update_en  ,	0x00000400
 .equ SRT_NX56_buf_man_rpec1_sm_update_en  ,	10
 .equ MSK_NX56_buf_man_rpec1_sm_update_dis ,	0x00000800
 .equ SRT_NX56_buf_man_rpec1_sm_update_dis ,	11

@ ---------------------------------------------------------------------
@ Register buf_man
@ => BMU-port of 3rd master (intlogic address area) or 4th master (intlogic-motion address area):
@    This register address allows to access 16 buffer controllers, where each one handles buffer numbers (0..4) between up
@    to four processors. Due to the complex functionality in one register address, bits have different meaning depending on
@    request type and mode.
@    Getting a new buffer always happens with two command accesses:
@    1st: Write access: Tell the buf_manager the channel(s) (0..15) and whether you request read or write buffer.
@         Wait for two clock cycles, until new buffer number is calculated after any write access.
@    2nd: Read access: Read the buffer number (0..4).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_buf_man           ,	0x00000008
 .equ Adr_NX56_buf_man_buf_man       ,	0x1018BE08
 .equ Adr_NX56_buf_man_motion_buf_man,	0x10100608

 .equ MSK_NX56_buf_man_buf_nr        ,	0x0000000f
 .equ SRT_NX56_buf_man_buf_nr        ,	0
 .equ MSK_NX56_buf_man_req_type      ,	0x00000060
 .equ SRT_NX56_buf_man_req_type      ,	5
 .equ MSK_NX56_buf_man_semaphore_mode,	0x00000080
 .equ SRT_NX56_buf_man_semaphore_mode,	7
 .equ MSK_NX56_buf_man_parallel_mode ,	0x00000100
 .equ SRT_NX56_buf_man_parallel_mode ,	8
 .equ MSK_NX56_buf_man_reset         ,	0x00000200
 .equ SRT_NX56_buf_man_reset         ,	9


@ =====================================================================
@
@ Area of xpec_irq_registers
@
@ =====================================================================

 .equ Addr_NX56_xpec_irq_registers, 0x1018BE20

@ ---------------------------------------------------------------------
@ Register irq_xpec0
@ => IRQ_RPEC 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_irq_xpec0               ,	0x00000000
 .equ Adr_NX56_xpec_irq_registers_irq_xpec0,	0x1018BE20
 .equ Adr_NX56_irq_xpec0                   ,	0x1018BE20

 .equ MSK_NX56_irq_xpec0_rtpec0_irq,	0x0000ffff
 .equ SRT_NX56_irq_xpec0_rtpec0_irq,	0
 .equ MSK_NX56_irq_xpec0_arm_irq   ,	0xffff0000
 .equ SRT_NX56_irq_xpec0_arm_irq   ,	16

@ ---------------------------------------------------------------------
@ Register irq_xpec1
@ => IRQ_TPEC 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_irq_xpec1               ,	0x00000004
 .equ Adr_NX56_xpec_irq_registers_irq_xpec1,	0x1018BE24
 .equ Adr_NX56_irq_xpec1                   ,	0x1018BE24

 .equ MSK_NX56_irq_xpec1_rtpec1_irq,	0x0000ffff
 .equ SRT_NX56_irq_xpec1_rtpec1_irq,	0
 .equ MSK_NX56_irq_xpec1_arm_irq   ,	0xffff0000
 .equ SRT_NX56_irq_xpec1_arm_irq   ,	16


@ =====================================================================
@
@ Area of xc_debug
@
@ =====================================================================

 .equ Addr_NX56_xc_debug, 0x1018BE30

@ ---------------------------------------------------------------------
@ Register xc_debug_config
@ => config XC debug module
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xc_debug_config     ,	0x00000000
 .equ Adr_NX56_xc_debug_xc_debug_config,	0x1018BE30
 .equ Adr_NX56_xc_debug_config         ,	0x1018BE30

 .equ MSK_NX56_xc_debug_config_select_xpec ,	0x00000003
 .equ SRT_NX56_xc_debug_config_select_xpec ,	0
 .equ MSK_NX56_xc_debug_config_debug_enable,	0x80000000
 .equ SRT_NX56_xc_debug_config_debug_enable,	31


@ =====================================================================
@
@ Area of xc_start_stop
@
@ =====================================================================

 .equ Addr_NX56_xc_start_stop, 0x1018BE40

@ ---------------------------------------------------------------------
@ Register xc_start_stop_ctrl
@ => Start / Stop Register for XC CPUs (rPECs / tPECs / xMACs)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xc_start_stop_ctrl          ,	0x00000000
 .equ Adr_NX56_xc_start_stop_xc_start_stop_ctrl,	0x1018BE40
 .equ Adr_NX56_xc_start_stop_ctrl              ,	0x1018BE40

 .equ MSK_NX56_xc_start_stop_ctrl_start_rpec0,	0x00000001
 .equ SRT_NX56_xc_start_stop_ctrl_start_rpec0,	0
 .equ MSK_NX56_xc_start_stop_ctrl_start_tpec0,	0x00000002
 .equ SRT_NX56_xc_start_stop_ctrl_start_tpec0,	1
 .equ MSK_NX56_xc_start_stop_ctrl_start_rpu0 ,	0x00000004
 .equ SRT_NX56_xc_start_stop_ctrl_start_rpu0 ,	2
 .equ MSK_NX56_xc_start_stop_ctrl_start_tpu0 ,	0x00000008
 .equ SRT_NX56_xc_start_stop_ctrl_start_tpu0 ,	3
 .equ MSK_NX56_xc_start_stop_ctrl_start_rpec1,	0x00000010
 .equ SRT_NX56_xc_start_stop_ctrl_start_rpec1,	4
 .equ MSK_NX56_xc_start_stop_ctrl_start_tpec1,	0x00000020
 .equ SRT_NX56_xc_start_stop_ctrl_start_tpec1,	5
 .equ MSK_NX56_xc_start_stop_ctrl_start_rpu1 ,	0x00000040
 .equ SRT_NX56_xc_start_stop_ctrl_start_rpu1 ,	6
 .equ MSK_NX56_xc_start_stop_ctrl_start_tpu1 ,	0x00000080
 .equ SRT_NX56_xc_start_stop_ctrl_start_tpu1 ,	7
 .equ MSK_NX56_xc_start_stop_ctrl_stop_rpec0 ,	0x00010000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_rpec0 ,	16
 .equ MSK_NX56_xc_start_stop_ctrl_stop_tpec0 ,	0x00020000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_tpec0 ,	17
 .equ MSK_NX56_xc_start_stop_ctrl_stop_rpu0  ,	0x00040000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_rpu0  ,	18
 .equ MSK_NX56_xc_start_stop_ctrl_stop_tpu0  ,	0x00080000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_tpu0  ,	19
 .equ MSK_NX56_xc_start_stop_ctrl_stop_rpec1 ,	0x00100000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_rpec1 ,	20
 .equ MSK_NX56_xc_start_stop_ctrl_stop_tpec1 ,	0x00200000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_tpec1 ,	21
 .equ MSK_NX56_xc_start_stop_ctrl_stop_rpu1  ,	0x00400000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_rpu1  ,	22
 .equ MSK_NX56_xc_start_stop_ctrl_stop_tpu1  ,	0x00800000
 .equ SRT_NX56_xc_start_stop_ctrl_stop_tpu1  ,	23

@ ---------------------------------------------------------------------
@ Register xc_hold_status
@ => Hold Status Register for XC CPUs (rPECs / tPECs / xMACs)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xc_hold_status          ,	0x00000004
 .equ Adr_NX56_xc_start_stop_xc_hold_status,	0x1018BE44
 .equ Adr_NX56_xc_hold_status              ,	0x1018BE44

 .equ MSK_NX56_xc_hold_status_hold_rpec0,	0x00000001
 .equ SRT_NX56_xc_hold_status_hold_rpec0,	0
 .equ MSK_NX56_xc_hold_status_hold_tpec0,	0x00000002
 .equ SRT_NX56_xc_hold_status_hold_tpec0,	1
 .equ MSK_NX56_xc_hold_status_hold_rpu0 ,	0x00000004
 .equ SRT_NX56_xc_hold_status_hold_rpu0 ,	2
 .equ MSK_NX56_xc_hold_status_hold_tpu0 ,	0x00000008
 .equ SRT_NX56_xc_hold_status_hold_tpu0 ,	3
 .equ MSK_NX56_xc_hold_status_hold_rpec1,	0x00000010
 .equ SRT_NX56_xc_hold_status_hold_rpec1,	4
 .equ MSK_NX56_xc_hold_status_hold_tpec1,	0x00000020
 .equ SRT_NX56_xc_hold_status_hold_tpec1,	5
 .equ MSK_NX56_xc_hold_status_hold_rpu1 ,	0x00000040
 .equ SRT_NX56_xc_hold_status_hold_rpu1 ,	6
 .equ MSK_NX56_xc_hold_status_hold_tpu1 ,	0x00000080
 .equ SRT_NX56_xc_hold_status_hold_tpu1 ,	7


@ =====================================================================
@
@ Area of dpm
@
@ =====================================================================

 .equ Addr_NX56_dpm, 0x1018C000

@ ---------------------------------------------------------------------
@ Register dpm_cfg0x0
@ => DPM IO Control Register 0.
@    This register is accessible in any DPM-mode (8, 16, 32 bit, SRAM, Intel, Motorola, little endian, big endian) by access to DPM address 0.
@    Basic DPM settings are configurable here to make higher addresses accessible.
@    To avoid instable system configurations, global changes of important configuration registers must be confirmed
@    (re)writing 'mode' bit field of this register. View 'mode' description for details.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_cfg0x0,	0x00000000
 .equ Adr_NX56_dpm_dpm_cfg0x0,	0x1018C000
 .equ Adr_NX56_dpm_cfg0x0    ,	0x1018C000

 .equ MSK_NX56_dpm_cfg0x0_mode  ,	0x0000000f
 .equ SRT_NX56_dpm_cfg0x0_mode  ,	0
 .equ MSK_NX56_dpm_cfg0x0_endian,	0x00000030
 .equ SRT_NX56_dpm_cfg0x0_endian,	4

@ ---------------------------------------------------------------------
@ Register dpm_if_cfg
@ => DPM interface configuration register.
@    DPM interface mode must be basically configured in 'dpm_cfg0x0' register. Interface configuration is
@    split up into two registers to support setup from external host CPU when DPM is in 8 bit non-multiplexed default mode after reset.
@    However this does not work for all interfaces. E.g. for modes where DPM_WRN is not write trigger this is not
@    possible. Interface setup must be done by netX internal CPU then.
@    To avoid instable system configurations, changes of this registers must be confirmed
@    (re)writing 'mode' bit field of dpm_cfg0x0 register. View 'mode' description there for details.
@    {                                      |         |         |         |         |         |           |       |        |        |          |
@      Host connection                       isa_bhe3   cs_ctrl   addr_sh   aen_pol   aen_sel   be_wr       be_rd   be_pol   be_sel   dir_ctrl   cfg_0x0.mode
@                                            memcs16n                                           _dis        _dis
@      Intel, 8bit (SRAM)                          0         0         x         x        0       x           x       x         0         0         0x0
@      Intel, 16bit,byte-write                     0         0         0         x        0       0           1       0         1         1         0x4
@      Intel, 16bit,byte-enable (SRAM)             0         0         0         x        0       0           0       0         0         0         0x4
@      Intel, 32bit,byte-write                     0         0         0         x        0       0           1       0         0         1         0x8
@      Intel, 32bit,byte-enable (SRAM)             0         0         0         x        0       0           0       0         0         0         0x8
@      Intel, 8bit multiplexed                     0         0         x         1        1       x           x       x         0         0         0x2
@      Intel, 16bit mul. netx50: no BEs            0         0         0         1        1       1           1       x         0         0         0x6
@      Intel, 16bit mul. byte-write                0         0         1         1        1       0           1       0         1         1         0x6
@      Intel, 16bit mul. 2BEs, byte-addr           0         0         0         1        1       0           0       0         0         0         0x6
@      Intel, 16bit mul. 2BEs, word-addr           0         0         1         1        1       0           0       0         0         0         0x6
@      Intel, 32bit mul. netx50: byte-addr         0         0         0         1        1       0           1       0         0         1         0xa
@      Intel, 32bit mul. byte-write DWord-addr     0         0         1         1        1       0           1       0         0         1         0xa
@      Intel, 32bit mul. 4BEs, byte-addr           0         0         0         1        1       0           0       0         0         0         0xa
@      Intel, 32bit mul. 4BEs, DWord-addr          0         0         1         1        1       0           0       0         0         0         0xa
@      TI OMAP, 16bit non-multiplexed              0         0         0         x        0       0           0       0         0         0         0x4
@      TI OMAP, 16bit multiplexed                  0         0         1         0        1       0           0       0         0         0         0x6
@      Motorola, 8bit (6800)                       0         0         x         x        0       0           0       1         1         2         0x0
@      Motorola, 16bit                             0         0         0         x        0       0           0       0         0         2         0x4
@      Motorola, 16bit (68000)                     0         0         0         0        1       0           0       0         0         2         0x4
@      Motorola, 32bit                             0         0         0         x        0       0           0       0         0         2         0x8
@      Motorola, 8bit multiplexed                  0         0         x         x        0       0           0       1         1         2         0x2
@      Motorola, 16bit mul.netx50: byte-addr       0         0         0         1        1       0           0       0         0         2         0x6
@      Motorola, 16bit mul.word-addr               0         0         1         1        1       0           0       0         0         2         0x6
@      Motorola, 32bit mul.netx50: byte-addr       0         0         0         1        1       0           0       0         0         2         0xa
@      Motorola, 32bit mul.DWord-addr              0         0         1         1        1       0           0       0         0         2         0xa
@      ISA, 8bit                                   0         4         x         0        1       0           0       0         0         0         0x0
@      ISA, 16bit                                  1         4         0         0        1       0           0       0         0         0         0x4}
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_if_cfg,	0x00000004
 .equ Adr_NX56_dpm_dpm_if_cfg,	0x1018C004
 .equ Adr_NX56_dpm_if_cfg    ,	0x1018C004

 .equ MSK_NX56_dpm_if_cfg_dir_ctrl            ,	0x00000003
 .equ SRT_NX56_dpm_if_cfg_dir_ctrl            ,	0
 .equ MSK_NX56_dpm_if_cfg_be_sel              ,	0x00000010
 .equ SRT_NX56_dpm_if_cfg_be_sel              ,	4
 .equ MSK_NX56_dpm_if_cfg_be_rd_dis           ,	0x00000040
 .equ SRT_NX56_dpm_if_cfg_be_rd_dis           ,	6
 .equ MSK_NX56_dpm_if_cfg_be_wr_dis           ,	0x00000080
 .equ SRT_NX56_dpm_if_cfg_be_wr_dis           ,	7
 .equ MSK_NX56_dpm_if_cfg_be_pol              ,	0x00000f00
 .equ SRT_NX56_dpm_if_cfg_be_pol              ,	8
 .equ MSK_NX56_dpm_if_cfg_aen_sel             ,	0x00003000
 .equ SRT_NX56_dpm_if_cfg_aen_sel             ,	12
 .equ MSK_NX56_dpm_if_cfg_aen_pol             ,	0x00004000
 .equ SRT_NX56_dpm_if_cfg_aen_pol             ,	14
 .equ MSK_NX56_dpm_if_cfg_addr_sh             ,	0x00008000
 .equ SRT_NX56_dpm_if_cfg_addr_sh             ,	15
 .equ MSK_NX56_dpm_if_cfg_cs_ctrl             ,	0x00070000
 .equ SRT_NX56_dpm_if_cfg_cs_ctrl             ,	16
 .equ MSK_NX56_dpm_if_cfg_isa_bhe3_is_memcs16n,	0x01000000
 .equ SRT_NX56_dpm_if_cfg_isa_bhe3_is_memcs16n,	24

@ ---------------------------------------------------------------------
@ Register dpm_pio_cfg0
@ => DPM PIO Configuration Register0.
@    Signals to be used as PIOs when netX DPM is active must be selected here or in 'dpm_pio_cfg1' register. Since netx56
@    PIO function will not be automatically activated depending on other settings. E.g. DPM_D31..8 can not be used
@    automatically when 8 bit data mode is selected.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_pio_cfg0,	0x00000008
 .equ Adr_NX56_dpm_dpm_pio_cfg0,	0x1018C008
 .equ Adr_NX56_dpm_pio_cfg0    ,	0x1018C008

 .equ MSK_NX56_dpm_pio_cfg0_sel_d_pio,	0xffffffff
 .equ SRT_NX56_dpm_pio_cfg0_sel_d_pio,	0

@ ---------------------------------------------------------------------
@ Register dpm_pio_cfg1
@ => DPM PIO Configuration Register1.
@    PIO usage of DPM_SIRQ, DPM_DIRQ and DPM_RDY has moved from 'dpm_io_cfg_misc' to this register since netx56.
@    Signals to be used as PIOs when netX DPM is active must be selected here or in 'dpm_pio_cfg0' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_pio_cfg1,	0x0000000C
 .equ Adr_NX56_dpm_dpm_pio_cfg1,	0x1018C00C
 .equ Adr_NX56_dpm_pio_cfg1    ,	0x1018C00C

 .equ MSK_NX56_dpm_pio_cfg1_sel_a_pio   ,	0x000fffff
 .equ SRT_NX56_dpm_pio_cfg1_sel_a_pio   ,	0
 .equ MSK_NX56_dpm_pio_cfg1_sel_bhe1_pio,	0x01000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_bhe1_pio,	24
 .equ MSK_NX56_dpm_pio_cfg1_sel_bhe3_pio,	0x02000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_bhe3_pio,	25
 .equ MSK_NX56_dpm_pio_cfg1_sel_csn_pio ,	0x04000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_csn_pio ,	26
 .equ MSK_NX56_dpm_pio_cfg1_sel_rdn_pio ,	0x08000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_rdn_pio ,	27
 .equ MSK_NX56_dpm_pio_cfg1_sel_wrn_pio ,	0x10000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_wrn_pio ,	28
 .equ MSK_NX56_dpm_pio_cfg1_sel_rdy_pio ,	0x20000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_rdy_pio ,	29
 .equ MSK_NX56_dpm_pio_cfg1_sel_dirq_pio,	0x40000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_dirq_pio,	30
 .equ MSK_NX56_dpm_pio_cfg1_sel_sirq_pio,	0x80000000
 .equ SRT_NX56_dpm_pio_cfg1_sel_sirq_pio,	31

@ ---------------------------------------------------------------------
@ Register dpm_addr_cfg
@ => DPM External Address Configuration Register.
@    Note:
@       Address compare logic as part of netX DPM Chip-Select decoding logic is a new netx56 feature.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_addr_cfg,	0x00000010
 .equ Adr_NX56_dpm_dpm_addr_cfg,	0x1018C010
 .equ Adr_NX56_dpm_addr_cfg    ,	0x1018C010

 .equ MSK_NX56_dpm_addr_cfg_addr_range      ,	0x0000000f
 .equ SRT_NX56_dpm_addr_cfg_addr_range      ,	0
 .equ MSK_NX56_dpm_addr_cfg_cfg_win_addr_cfg,	0x00000030
 .equ SRT_NX56_dpm_addr_cfg_cfg_win_addr_cfg,	4
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a11    ,	0x0000c000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a11    ,	14
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a12    ,	0x00030000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a12    ,	16
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a13    ,	0x000c0000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a13    ,	18
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a14    ,	0x00300000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a14    ,	20
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a15    ,	0x00c00000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a15    ,	22
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a16    ,	0x03000000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a16    ,	24
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a17    ,	0x0c000000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a17    ,	26
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a18    ,	0x30000000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a18    ,	28
 .equ MSK_NX56_dpm_addr_cfg_addr_cmp_a19    ,	0xc0000000
 .equ SRT_NX56_dpm_addr_cfg_addr_cmp_a19    ,	30

@ ---------------------------------------------------------------------
@ Register dpm_timing_cfg
@ => DPM timing and access configuration register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_timing_cfg,	0x00000014
 .equ Adr_NX56_dpm_dpm_timing_cfg,	0x1018C014
 .equ Adr_NX56_dpm_timing_cfg    ,	0x1018C014

 .equ MSK_NX56_dpm_timing_cfg_t_osa            ,	0x00000003
 .equ SRT_NX56_dpm_timing_cfg_t_osa            ,	0
 .equ MSK_NX56_dpm_timing_cfg_filter           ,	0x00000004
 .equ SRT_NX56_dpm_timing_cfg_filter           ,	2
 .equ MSK_NX56_dpm_timing_cfg_t_rds            ,	0x00000070
 .equ SRT_NX56_dpm_timing_cfg_t_rds            ,	4
 .equ MSK_NX56_dpm_timing_cfg_rd_burst_en      ,	0x00000080
 .equ SRT_NX56_dpm_timing_cfg_rd_burst_en      ,	7
 .equ MSK_NX56_dpm_timing_cfg_en_dpm_serial_sqi,	0x40000000
 .equ SRT_NX56_dpm_timing_cfg_en_dpm_serial_sqi,	30
 .equ MSK_NX56_dpm_timing_cfg_sdpm_miso_early  ,	0x80000000
 .equ SRT_NX56_dpm_timing_cfg_sdpm_miso_early  ,	31

@ ---------------------------------------------------------------------
@ Register dpm_rdy_cfg
@ => DPM Ready (DPM_RDY) Signal Configuration Register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_rdy_cfg,	0x00000018
 .equ Adr_NX56_dpm_dpm_rdy_cfg,	0x1018C018
 .equ Adr_NX56_dpm_rdy_cfg    ,	0x1018C018

 .equ MSK_NX56_dpm_rdy_cfg_rdy_pol     ,	0x00000001
 .equ SRT_NX56_dpm_rdy_cfg_rdy_pol     ,	0
 .equ MSK_NX56_dpm_rdy_cfg_rdy_drv_mode,	0x00000006
 .equ SRT_NX56_dpm_rdy_cfg_rdy_drv_mode,	1
 .equ MSK_NX56_dpm_rdy_cfg_rdy_sig_mode,	0x00000008
 .equ SRT_NX56_dpm_rdy_cfg_rdy_sig_mode,	3
 .equ MSK_NX56_dpm_rdy_cfg_rdy_to_cfg  ,	0x00000030
 .equ SRT_NX56_dpm_rdy_cfg_rdy_to_cfg  ,	4

@ ---------------------------------------------------------------------
@ Register dpm_status
@ => DPM Status Register.
@    DPM access errors can generate IRQ for host device (view DPM IRQ registers further down). For
@    error handling, the address an error occurred with is logged in dpm_status_err_addr register. Error bits can be cleared by
@    access to dpm_status_err_reset register.
@    Note for 'bus_conflict_rd_addr_err', 'bus_conflict_rd_err' and 'bus_conflict_wr_err':
@       Bus-conflict error detection is basically implemented as debug feature. Detected errors could be result of hazardous
@       signals, incorrect configured DPM mode or not supported host interfaces. However there could some be some applications
@       where error detection is too strict (see description of 'dis_bus_conflict_err_detect' of 'dpm_misc_cfg'). For that reason
@       bus-conflict error behaviour can be controlled by 'dis_bus_conflict_err_detect' of 'dpm_misc_cfg'
@       register. However, status bits inside this register (and inside 'dpm_status_err_reset') will always be set when an
@       error was detected.
@       When error detection is enabled ('dis_bus_conflict_err_detect' is not set), an error-access will be aborted (ready-signal will
@       be set to ready state when used) and DPM will wait for idle bus (dir_mode==0: deselected or read and write control signal
@       inactive, dir_mode!=0: deselected or all byte-enables inactive). The error IRQ ('dpm_err') will be asserted. Read data
@       of related access will be unvalid and write data will be junked.
@       When error detection is disabled ('dis_bus_conflict_err_detect' is set) bus-conflict errors do not assert the 'dpm_err'
@       IRQ, erroneous access will not be aborted and DPM will not wait for bus idle state. I.e. the erroneous access will be
@       finished as read or write. However consequences of an error access are not predictable: Read or write data or address
@       could be invalid.
@       Error detection is disabled by default after power on and must be enabled before usage.
@    Note for 'rdy_to_err', 'wr_err' and 'rd_err':
@       These errors are basically set when an host access is too fast to be handled by netX internally. NetX internal access
@       times depend on target address area. However there are some address areas where other netX modules have higher access
@       priority than DPM (especially local memories of netX internal CPUs like xPEC or xPIC). Fore these address areas
@       access times could become unpredictable (depending on application running netX inside). Especially when using host
@       devices without ready-signal handshaking (i.e. also serial DPM) where netX access times could not be met under all
@       conditions error detection handling becomes mandatory. It is recommended to check for errors after each access. In
@       error-case the last access must be repeated. If an error occurs permanently the host must stretch external DPM access
@       by inserting wait states. For all other DPM connections this error detection should only be a debug feature.
@       Behaviour of 'wr_err' and 'rd_err' can be additionally controlled by 'dis_access_err_halt' of 'dpm_misc_cfg' register:
@       When error detection is enabled ('dis_access_err_halt' is not set), all read-access after occurrence of a read-error
@       and all write-access after occurrence of a write-error will be ignored. Error states must be reset first before new
@       accesses are performed internally. This is implemented to protect netX from unpredictable results of access errors.
@       However some applications always require access to netX internal address area (e.g. as DPM configuration window 0
@       for error handling was disabled). For this purpose error-detection could be disabled.
@       DPM error IRQ ('dpm_err') and error-staus flags will always be set in error case independent of 'dis_access_err_halt'.
@       Error detection is disabled by default after power on and must be enabled before usage.
@    Note:
@      Errors could be avoided by programming input filtering, burst support or timing.
@      That can be configured by dpm_timing_cfg register.
@    Note:
@      Serial DPM status send on the first byte of a serial access by netX is reordered and bus_conflict-errors
@      are omitted (as they are related to parallel DPM only). Serial DPM status byte is transferred MSB first
@      and contains following information (serial DPM protokol was completely revised for netx56 and this is a new netx56 feature):
@    {                          |
@      bit of first serial byte   status information
@                 7 (MSB)                          0
@                 6                                0
@                 5                                0
@                 4                   sel_dpm_serial
@                 3                       rdy_to_err
@                 2                           wr_err
@                 1                           rd_err
@                 0 (LSB)                   unlocked}
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_status,	0x0000001C
 .equ Adr_NX56_dpm_dpm_status,	0x1018C01C
 .equ Adr_NX56_dpm_status    ,	0x1018C01C

 .equ MSK_NX56_dpm_status_unlocked                ,	0x00000001
 .equ SRT_NX56_dpm_status_unlocked                ,	0
 .equ MSK_NX56_dpm_status_rd_err                  ,	0x00000002
 .equ SRT_NX56_dpm_status_rd_err                  ,	1
 .equ MSK_NX56_dpm_status_wr_err                  ,	0x00000004
 .equ SRT_NX56_dpm_status_wr_err                  ,	2
 .equ MSK_NX56_dpm_status_rdy_to_err              ,	0x00000008
 .equ SRT_NX56_dpm_status_rdy_to_err              ,	3
 .equ MSK_NX56_dpm_status_bus_conflict_wr_err     ,	0x00000010
 .equ SRT_NX56_dpm_status_bus_conflict_wr_err     ,	4
 .equ MSK_NX56_dpm_status_bus_conflict_rd_err     ,	0x00000020
 .equ SRT_NX56_dpm_status_bus_conflict_rd_err     ,	5
 .equ MSK_NX56_dpm_status_bus_conflict_rd_addr_err,	0x00000040
 .equ SRT_NX56_dpm_status_bus_conflict_rd_addr_err,	6
 .equ MSK_NX56_dpm_status_sel_dpm_serial          ,	0x00000080
 .equ SRT_NX56_dpm_status_sel_dpm_serial          ,	7

@ ---------------------------------------------------------------------
@ Register dpm_status_err_reset
@ => DPM Error Status Reset Register.
@    Each flags can be reset by writing a '1' to it. For fast error detection for DPM interfaces without ready usage,
@    reset-on-read-function can be enabled for this register.
@    Note:
@       If reset-on-read-function is enabled, this register must be read with a single access as bits are cleared
@       immediately after the access. You should always use a byte access in this case.
@    Note:
@       View dpm_status register for detailed error description.
@    Note:
@       reset-on-read-function is controlled by enable_flag_reset_on_rd-bit in dpm_misc_cfg-register.
@    Note:
@       In cases where internal access time is not predictable and host provides no
@       ready function, it is recommended to enable reset-on-read-function. There is only one access
@       necessary for error detection and clearing this flag then.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_status_err_reset,	0x00000020
 .equ Adr_NX56_dpm_dpm_status_err_reset,	0x1018C020
 .equ Adr_NX56_dpm_status_err_reset    ,	0x1018C020

 .equ MSK_NX56_dpm_status_err_reset_rd_err_rst                  ,	0x00000002
 .equ SRT_NX56_dpm_status_err_reset_rd_err_rst                  ,	1
 .equ MSK_NX56_dpm_status_err_reset_wr_err_rst                  ,	0x00000004
 .equ SRT_NX56_dpm_status_err_reset_wr_err_rst                  ,	2
 .equ MSK_NX56_dpm_status_err_reset_rdy_to_err_rst              ,	0x00000008
 .equ SRT_NX56_dpm_status_err_reset_rdy_to_err_rst              ,	3
 .equ MSK_NX56_dpm_status_err_reset_bus_conflict_wr_err_rst     ,	0x00000010
 .equ SRT_NX56_dpm_status_err_reset_bus_conflict_wr_err_rst     ,	4
 .equ MSK_NX56_dpm_status_err_reset_bus_conflict_rd_err_rst     ,	0x00000020
 .equ SRT_NX56_dpm_status_err_reset_bus_conflict_rd_err_rst     ,	5
 .equ MSK_NX56_dpm_status_err_reset_bus_conflict_rd_addr_err_rst,	0x00000040
 .equ SRT_NX56_dpm_status_err_reset_bus_conflict_rd_addr_err_rst,	6

@ ---------------------------------------------------------------------
@ Register dpm_status_err_addr
@ => DPM Error Address Status Register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_status_err_addr,	0x00000024
 .equ Adr_NX56_dpm_dpm_status_err_addr,	0x1018C024
 .equ Adr_NX56_dpm_status_err_addr    ,	0x1018C024

 .equ MSK_NX56_dpm_status_err_addr_err_addr,	0x000fffff
 .equ SRT_NX56_dpm_status_err_addr_err_addr,	0

@ ---------------------------------------------------------------------
@ Register dpm_misc_cfg
@ => DPM Configuration Register for some Special Functions.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_misc_cfg,	0x00000028
 .equ Adr_NX56_dpm_dpm_misc_cfg,	0x1018C028
 .equ Adr_NX56_dpm_misc_cfg    ,	0x1018C028

 .equ MSK_NX56_dpm_misc_cfg_enable_flag_reset_on_rd    ,	0x00000001
 .equ SRT_NX56_dpm_misc_cfg_enable_flag_reset_on_rd    ,	0
 .equ MSK_NX56_dpm_misc_cfg_dis_access_err_halt        ,	0x00000002
 .equ SRT_NX56_dpm_misc_cfg_dis_access_err_halt        ,	1
 .equ MSK_NX56_dpm_misc_cfg_dis_bus_conflict_err_detect,	0x00000004
 .equ SRT_NX56_dpm_misc_cfg_dis_bus_conflict_err_detect,	2

@ ---------------------------------------------------------------------
@ Register dpm_io_cfg_misc
@ => DPM IO Configuration Register.
@    PIO usage of DPM_SIRQ, DPM_DIRQ and DPM_RDY has moved from this register to register'dpm_pio_cfg1' since netx56.
@    Signals which should be used as PIOs when netX DPM is active must be selected there.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_io_cfg_misc,	0x0000002C
 .equ Adr_NX56_dpm_dpm_io_cfg_misc,	0x1018C02C
 .equ Adr_NX56_dpm_io_cfg_misc    ,	0x1018C02C

 .equ MSK_NX56_dpm_io_cfg_misc_irq_pol,	0x00000010
 .equ SRT_NX56_dpm_io_cfg_misc_irq_pol,	4
 .equ MSK_NX56_dpm_io_cfg_misc_irq_oec,	0x00000020
 .equ SRT_NX56_dpm_io_cfg_misc_irq_oec,	5
 .equ MSK_NX56_dpm_io_cfg_misc_fiq_pol,	0x00000040
 .equ SRT_NX56_dpm_io_cfg_misc_fiq_pol,	6
 .equ MSK_NX56_dpm_io_cfg_misc_fiq_oec,	0x00000080
 .equ SRT_NX56_dpm_io_cfg_misc_fiq_oec,	7

@ ---------------------------------------------------------------------
@ Register dpm_tunnel_cfg
@ => DPM Access Tunnel Configuration Register.
@    DPM Access Tunnel (DATunnel) is a 64 byte (16DWord) address window which can be mapped on any 64 byte boundary of the external visible address space.
@    In the last DWord (15) of DATunnel a netX Internal 32 bit Target Base Address (ITBAddr) matching a 64 byte boundary can be programmed.
@    By DWords 0..14 netX data starting at ITBAddr can be accessed then (read-only functionality can be configured by 'wp_data' bit).
@    For access to netX data with ITBAddr DWord offset 15, bits 5 to 2 of programmed ITBAddr are interpreted as mapping value. This value
@    will be added to internal access address before tunnelling (wrapping around at the 64 byte boundary). Hence it is possible to access
@    always 15 of the 16 netX DWord while the missing one can be selected by an appropriate mapping value.
@    ITBAddr can also be programmed or read from netX using dpm_itbaddr register. Also ITBAddr can be write-protected from host
@    by a configuration bit (wp_itbaddr) of this register.
@    External to internal address mapping for DATunnel area can be calculated by following formula:
@       INAAdr = (ITBAddr & 0xffffffc0) + ((EDAAdr + ITBAddr) & 0x3C)
@    With:
@       INAAdr:  Internal netX Access Address
@       ITBAddr: Internal netX 32 bit Tunnel Target Base Address
@       EDAAdr:  External DPM Access Address
@    Condition for DATunnel access is:
@       EDAAdr>>6 equals value of bit field 'base' from this register.
@    To map netX internal DWord N to invisible last external DWord (15), use mapping value
@       map = (N - 15) & 0xf
@    on bits 5 to 2.
@    Internal to external address offset inside DATunnel area for internal DWord N can be calculated by following formula:
@       External offset = (N*4 - map*4) & 0x3C = (N*4 - ITBAddr) & 0x3C
@    Example 1:
@       Access to netX sys_time module by host via DATunnel on external DPM addresses are starting at 0x240.
@       - Set bit field 'base' of this register to 9 (0x240>>6), set enable bit (and write protection depending on application).
@         DATunnel now is enabled on external DPM addresses 0x240 to 0x27f.
@       - ITBAddr of netX10 sys_time module is 0x101c1000.
@         For direct DATunnel to this address, host must write 0x101c1000 to external DPM address 0x27c. This
@         can be done e.g. by four byte accesses to 0x27c, 0x27d, 0x27e and 0x27f or by two 16 bit accesses to 0x27c and 0x27e.
@         Now sys_time module registers 0 to 14 can be accessed on external DPM address 0x240 to 0x27b.
@    Example 2:
@       Register 15 of sys_time is hidden by ITBAddr configuration on 0x27c in example 1 but must also be accessed. However, sys_time
@       Register 6 is never kind of interest.
@       - Configure this register like described in example 1.
@       - To map Register 6 (Module offset 6*4) to external offset 0x3C (hidden data on DWord 15),
@         the following rule must be complied:
@            0x3C + map*4 = 6*4.
@         That leads to a mapping value of:
@            map*4 = (6*4 - 0x3C) & 0x3C = 1C
@         Hence, write 0x101c101C to DATunnel DWord 15 (external DPM address 0x27c) to map sys_time Register 6 to
@         hidden DWord 15.
@         INAAdr now will be derived from EDAAdr before tunneling as follows:
@            INAAdr = 0x101c1000 + ((EDAAdr + 0x1C) & 0x3C)
@         External offset of Module DWord N results from:
@            External offset = (N*4 - 0x1C) & 0x3C
@         Register 15 of sys_time unit now can be accessed by external DPM address 0x240+((0xf*4-0x1C) & 0x3C) = 0x260 (i.e. Tunnel DWord 8).
@         Register 0  of sys_time unit now can be accessed by external DPM address 0x240+((0x0*4-0x1C) & 0x3C) = 0x264 (i.e. Tunnel DWord 9).
@         Register 1  of sys_time unit now can be accessed by external DPM address 0x240+((0x1*4-0x1C) & 0x3C) = 0x268 (i.e. Tunnel DWord 10).
@         and so on.
@         Register 6  of sys_time unit can not be accessed as it is hidden by ITBAddr configuration on 0x27c (i.e. Tunnel DWord 15).
@         Register 7  of sys_time unit now can be accessed by external DPM address 0x240+((0x7*4-0x1C) & 0x3C) = 0x240 (i.e. Tunnel DWord 0).
@    Note:
@      Access to netX ITBAddr data is done without read ahead and with byte collecting (view adr_dpm_win1_map for details).
@    Note:
@      Configuration Window 0 access detection has higher priority than normal DPM Window
@      detection but lower priority than Access Tunnel access detection.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_tunnel_cfg,	0x00000038
 .equ Adr_NX56_dpm_dpm_tunnel_cfg,	0x1018C038
 .equ Adr_NX56_dpm_tunnel_cfg    ,	0x1018C038

 .equ MSK_NX56_dpm_tunnel_cfg_wp_data     ,	0x00000001
 .equ SRT_NX56_dpm_tunnel_cfg_wp_data     ,	0
 .equ MSK_NX56_dpm_tunnel_cfg_wp_itbaddr  ,	0x00000002
 .equ SRT_NX56_dpm_tunnel_cfg_wp_itbaddr  ,	1
 .equ MSK_NX56_dpm_tunnel_cfg_enable      ,	0x00000004
 .equ SRT_NX56_dpm_tunnel_cfg_enable      ,	2
 .equ MSK_NX56_dpm_tunnel_cfg_tunnel_all  ,	0x00000008
 .equ SRT_NX56_dpm_tunnel_cfg_tunnel_all  ,	3
 .equ MSK_NX56_dpm_tunnel_cfg_byte_area   ,	0x00000010
 .equ SRT_NX56_dpm_tunnel_cfg_byte_area   ,	4
 .equ MSK_NX56_dpm_tunnel_cfg_dis_rd_latch,	0x00000020
 .equ SRT_NX56_dpm_tunnel_cfg_dis_rd_latch,	5
 .equ MSK_NX56_dpm_tunnel_cfg_base        ,	0x000fffc0
 .equ SRT_NX56_dpm_tunnel_cfg_base        ,	6

@ ---------------------------------------------------------------------
@ Register dpm_itbaddr
@ => DPM Access Tunnel (DATunnel) netX Internal Target Base Address (ITBAddr) Configuration Register.
@    For DPM Access Tunnel (DATunnel) function view description of dpm_tunnel_cfg register.
@    This register contains ITBAddr value that can also be changed by host on last offset 0x3c (last DWord) of
@    external DATunnel area (defined by bit field 'base' in 'dpm_tunnel_cfg' register). However this register can
@    also be write-protected from host if bit 'wp_itbaddr' in 'dpm_tunnel_cfg' register is set.
@    Write protection bits of DATunnel configured in 'dpm_tunnel_cfg' register can also be read from this register. Host
@    can read access rights from these bits on last DWord of external DATunnel address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_itbaddr,	0x0000003C
 .equ Adr_NX56_dpm_dpm_itbaddr,	0x1018C03C
 .equ Adr_NX56_dpm_itbaddr    ,	0x1018C03C

 .equ MSK_NX56_dpm_itbaddr_wp_data_ro   ,	0x00000001
 .equ SRT_NX56_dpm_itbaddr_wp_data_ro   ,	0
 .equ MSK_NX56_dpm_itbaddr_wp_itbaddr_ro,	0x00000002
 .equ SRT_NX56_dpm_itbaddr_wp_itbaddr_ro,	1
 .equ MSK_NX56_dpm_itbaddr_map          ,	0x0000003c
 .equ SRT_NX56_dpm_itbaddr_map          ,	2
 .equ MSK_NX56_dpm_itbaddr_base         ,	0xffffffc0
 .equ SRT_NX56_dpm_itbaddr_base         ,	6

@ ---------------------------------------------------------------------
@ Register dpm_win1_end
@ => DPM Window 1 End Address Configuration Register.
@    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0).
@    At address 0x0 DPM configuration window is mapped after reset (length: 256 bytes, containing all DPM addresses defined here). Each window starts at
@    window end address of the preceding window. Hence external window 1 start address is 0x100, window 2 starts at value programmed in this register and so on.
@    Windows with programmed end addresses exceeding external address range (view dpm_addr_cfg) can not be accessed by host device.
@    Note:
@      Configuration Window 0 access detection has higher priority than normal DPM Window
@      detection but lower priority than Access Tunnel access detection.
@    Note:
@      Since netX10 window configuration can be done in steps of 128 bytes. In netx5 only steps of 256 bytes are possible.
@    Note:
@      Since netX10 there are 4 programmable DPM windows provided. Only for netX5 there are 5 windows.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win1_end,	0x00000040
 .equ Adr_NX56_dpm_dpm_win1_end,	0x1018C040
 .equ Adr_NX56_dpm_win1_end    ,	0x1018C040

 .equ MSK_NX56_dpm_win1_end_win_end,	0x001fff80
 .equ SRT_NX56_dpm_win1_end_win_end,	7

@ ---------------------------------------------------------------------
@ Register dpm_win1_map
@ => DPM Window 1 Address Map Configuration Register.
@    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 8 bits of address configuration are always 0).
@    For further information view description of 'dpm_win1_end' register.
@    Note:
@      Since netX10 window pages of 1MB is supported. For netX5 this was not necessary as all netX5 addresses are in bound of 1MB..
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win1_map,	0x00000044
 .equ Adr_NX56_dpm_dpm_win1_map,	0x1018C044
 .equ Adr_NX56_dpm_win1_map    ,	0x1018C044

 .equ MSK_NX56_dpm_win1_map_byte_area   ,	0x00000001
 .equ SRT_NX56_dpm_win1_map_byte_area   ,	0
 .equ MSK_NX56_dpm_win1_map_read_ahead  ,	0x00000002
 .equ SRT_NX56_dpm_win1_map_read_ahead  ,	1
 .equ MSK_NX56_dpm_win1_map_win_map_alt ,	0x0000000c
 .equ SRT_NX56_dpm_win1_map_win_map_alt ,	2
 .equ MSK_NX56_dpm_win1_map_dis_rd_latch,	0x00000010
 .equ SRT_NX56_dpm_win1_map_dis_rd_latch,	4
 .equ MSK_NX56_dpm_win1_map_win_map     ,	0x000fff80
 .equ SRT_NX56_dpm_win1_map_win_map     ,	7
 .equ MSK_NX56_dpm_win1_map_win_page    ,	0xfff00000
 .equ SRT_NX56_dpm_win1_map_win_page    ,	20

@ ---------------------------------------------------------------------
@ Register dpm_win2_end
@ => DPM Window 2 End Address Configuration Register.
@    For detailed information view dpm_win1_end description.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win2_end,	0x00000048
 .equ Adr_NX56_dpm_dpm_win2_end,	0x1018C048
 .equ Adr_NX56_dpm_win2_end    ,	0x1018C048

 .equ MSK_NX56_dpm_win2_end_win_end,	0x001fff80
 .equ SRT_NX56_dpm_win2_end_win_end,	7

@ ---------------------------------------------------------------------
@ Register dpm_win2_map
@ => DPM Window 2 Address Map Configuration Register.
@    For detailed information view dpm_win1_map description.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win2_map,	0x0000004C
 .equ Adr_NX56_dpm_dpm_win2_map,	0x1018C04C
 .equ Adr_NX56_dpm_win2_map    ,	0x1018C04C

 .equ MSK_NX56_dpm_win2_map_byte_area   ,	0x00000001
 .equ SRT_NX56_dpm_win2_map_byte_area   ,	0
 .equ MSK_NX56_dpm_win2_map_read_ahead  ,	0x00000002
 .equ SRT_NX56_dpm_win2_map_read_ahead  ,	1
 .equ MSK_NX56_dpm_win2_map_win_map_alt ,	0x0000000c
 .equ SRT_NX56_dpm_win2_map_win_map_alt ,	2
 .equ MSK_NX56_dpm_win2_map_dis_rd_latch,	0x00000010
 .equ SRT_NX56_dpm_win2_map_dis_rd_latch,	4
 .equ MSK_NX56_dpm_win2_map_win_map     ,	0x000fff80
 .equ SRT_NX56_dpm_win2_map_win_map     ,	7
 .equ MSK_NX56_dpm_win2_map_win_page    ,	0xfff00000
 .equ SRT_NX56_dpm_win2_map_win_page    ,	20

@ ---------------------------------------------------------------------
@ Register dpm_win3_end
@ => DPM Window 3 End Address Configuration Register.
@    For detailed information view dpm_win1_end description.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win3_end,	0x00000050
 .equ Adr_NX56_dpm_dpm_win3_end,	0x1018C050
 .equ Adr_NX56_dpm_win3_end    ,	0x1018C050

 .equ MSK_NX56_dpm_win3_end_win_end,	0x001fff80
 .equ SRT_NX56_dpm_win3_end_win_end,	7

@ ---------------------------------------------------------------------
@ Register dpm_win3_map
@ => DPM Window 3 Address Map Configuration Register.
@    For detailed information view dpm_win1_map description.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win3_map,	0x00000054
 .equ Adr_NX56_dpm_dpm_win3_map,	0x1018C054
 .equ Adr_NX56_dpm_win3_map    ,	0x1018C054

 .equ MSK_NX56_dpm_win3_map_byte_area   ,	0x00000001
 .equ SRT_NX56_dpm_win3_map_byte_area   ,	0
 .equ MSK_NX56_dpm_win3_map_read_ahead  ,	0x00000002
 .equ SRT_NX56_dpm_win3_map_read_ahead  ,	1
 .equ MSK_NX56_dpm_win3_map_win_map_alt ,	0x0000000c
 .equ SRT_NX56_dpm_win3_map_win_map_alt ,	2
 .equ MSK_NX56_dpm_win3_map_dis_rd_latch,	0x00000010
 .equ SRT_NX56_dpm_win3_map_dis_rd_latch,	4
 .equ MSK_NX56_dpm_win3_map_win_map     ,	0x000fff80
 .equ SRT_NX56_dpm_win3_map_win_map     ,	7
 .equ MSK_NX56_dpm_win3_map_win_page    ,	0xfff00000
 .equ SRT_NX56_dpm_win3_map_win_page    ,	20

@ ---------------------------------------------------------------------
@ Register dpm_win4_end
@ => DPM Window 4 End Address Configuration Register.
@    For detailed information view dpm_win1_end description.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win4_end,	0x00000058
 .equ Adr_NX56_dpm_dpm_win4_end,	0x1018C058
 .equ Adr_NX56_dpm_win4_end    ,	0x1018C058

 .equ MSK_NX56_dpm_win4_end_win_end,	0x001fff80
 .equ SRT_NX56_dpm_win4_end_win_end,	7

@ ---------------------------------------------------------------------
@ Register dpm_win4_map
@ => DPM Window 4 Address Map Configuration Register.
@    For detailed information view dpm_win1_map description.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_win4_map,	0x0000005C
 .equ Adr_NX56_dpm_dpm_win4_map,	0x1018C05C
 .equ Adr_NX56_dpm_win4_map    ,	0x1018C05C

 .equ MSK_NX56_dpm_win4_map_byte_area   ,	0x00000001
 .equ SRT_NX56_dpm_win4_map_byte_area   ,	0
 .equ MSK_NX56_dpm_win4_map_read_ahead  ,	0x00000002
 .equ SRT_NX56_dpm_win4_map_read_ahead  ,	1
 .equ MSK_NX56_dpm_win4_map_win_map_alt ,	0x0000000c
 .equ SRT_NX56_dpm_win4_map_win_map_alt ,	2
 .equ MSK_NX56_dpm_win4_map_dis_rd_latch,	0x00000010
 .equ SRT_NX56_dpm_win4_map_dis_rd_latch,	4
 .equ MSK_NX56_dpm_win4_map_win_map     ,	0x000fff80
 .equ SRT_NX56_dpm_win4_map_win_map     ,	7
 .equ MSK_NX56_dpm_win4_map_win_page    ,	0xfff00000
 .equ SRT_NX56_dpm_win4_map_win_page    ,	20

@ ---------------------------------------------------------------------
@ Register dpm_irq_raw
@ => DPM Raw (before masking) IRQ Status Register.
@    If a bit is set, the related interrupt is asserted.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    Important: There are two completely independent sets of IRQ registers:
@       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers).
@       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2).
@       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs
@       can be found in both sets (e.g. com0).
@    Note:
@       The 'dpm_sw' IRQ can be controlled by the 'dpm_sw_irq' register for each
@       IRQ target differently, i.e. there are 4 different 'dpm_sw' IRQs internally, one
@       for each IRQ target. However, 'dpm_sw' will be set inside the 'dpm_irq_raw' register here
@       when the 'dpm_sw' is activated for at least one IRQ target. But each IRQ target
@       obtains only the 'dpm_sw' IRQ state programmed for this target inside the 'dpm_sw_irq'
@       register. For an example view description of 'dpm_sw_irq' register.
@    Note:
@        The 'test' function is obsolte since netX56, the 'dpm_sw' bit can be used instead of this.
@    Note:
@        The 'firmware' IRQ can be used to flag handshake and netX firmware system status events to the
@        host. Firmware IRQ generation can be controlled by dpm_firmware_irq_mask register. Detailed
@        firmware IRQ status can be read from dpm_firmware_irq_raw register.
@    Note:
@        For all netX modules which are capable generating IRQs for ARM and xPIC, ARM-IRQ is taken here.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_raw,	0x00000080
 .equ Adr_NX56_dpm_dpm_irq_raw,	0x1018C080
 .equ Adr_NX56_dpm_irq_raw    ,	0x1018C080

 .equ MSK_NX56_dpm_irq_raw_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_raw_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_raw_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_raw_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_raw_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_raw_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_raw_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_raw_systime_ns,	4
 .equ MSK_NX56_dpm_irq_raw_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_raw_systime_s ,	5
 .equ MSK_NX56_dpm_irq_raw_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_raw_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_raw_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_raw_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_raw_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_raw_uart0     ,	8
 .equ MSK_NX56_dpm_irq_raw_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_raw_uart1     ,	9
 .equ MSK_NX56_dpm_irq_raw_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_raw_uart2     ,	10
 .equ MSK_NX56_dpm_irq_raw_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_raw_usb       ,	11
 .equ MSK_NX56_dpm_irq_raw_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_raw_spi       ,	12
 .equ MSK_NX56_dpm_irq_raw_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_raw_i2c       ,	13
 .equ MSK_NX56_dpm_irq_raw_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_raw_firmware  ,	15
 .equ MSK_NX56_dpm_irq_raw_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_raw_gpio      ,	16
 .equ MSK_NX56_dpm_irq_raw_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_raw_com0      ,	17
 .equ MSK_NX56_dpm_irq_raw_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_raw_com1      ,	18
 .equ MSK_NX56_dpm_irq_raw_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_raw_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_raw_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_raw_msync0    ,	21
 .equ MSK_NX56_dpm_irq_raw_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_raw_msync1    ,	22
 .equ MSK_NX56_dpm_irq_raw_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_raw_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_raw_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_raw_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_raw_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_raw_dmac      ,	27
 .equ MSK_NX56_dpm_irq_raw_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_raw_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_raw_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_raw_can       ,	29
 .equ MSK_NX56_dpm_irq_raw_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_raw_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_arm_mask_set
@ => DPM Interrupt Mask Register for netX internal ARM-CPU.
@    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for netX internal ARM-CPU.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for netX internal ARM-CPU without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_arm_mask_set,	0x00000084
 .equ Adr_NX56_dpm_dpm_irq_arm_mask_set,	0x1018C084
 .equ Adr_NX56_dpm_irq_arm_mask_set    ,	0x1018C084

 .equ MSK_NX56_dpm_irq_arm_mask_set_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_arm_mask_set_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_arm_mask_set_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_arm_mask_set_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_arm_mask_set_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_arm_mask_set_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_arm_mask_set_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_arm_mask_set_systime_ns,	4
 .equ MSK_NX56_dpm_irq_arm_mask_set_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_arm_mask_set_systime_s ,	5
 .equ MSK_NX56_dpm_irq_arm_mask_set_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_arm_mask_set_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_arm_mask_set_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_arm_mask_set_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_arm_mask_set_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_arm_mask_set_uart0     ,	8
 .equ MSK_NX56_dpm_irq_arm_mask_set_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_arm_mask_set_uart1     ,	9
 .equ MSK_NX56_dpm_irq_arm_mask_set_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_arm_mask_set_uart2     ,	10
 .equ MSK_NX56_dpm_irq_arm_mask_set_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_arm_mask_set_usb       ,	11
 .equ MSK_NX56_dpm_irq_arm_mask_set_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_arm_mask_set_spi       ,	12
 .equ MSK_NX56_dpm_irq_arm_mask_set_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_arm_mask_set_i2c       ,	13
 .equ MSK_NX56_dpm_irq_arm_mask_set_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_arm_mask_set_firmware  ,	15
 .equ MSK_NX56_dpm_irq_arm_mask_set_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_arm_mask_set_gpio      ,	16
 .equ MSK_NX56_dpm_irq_arm_mask_set_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_arm_mask_set_com0      ,	17
 .equ MSK_NX56_dpm_irq_arm_mask_set_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_arm_mask_set_com1      ,	18
 .equ MSK_NX56_dpm_irq_arm_mask_set_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_arm_mask_set_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_arm_mask_set_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_arm_mask_set_msync0    ,	21
 .equ MSK_NX56_dpm_irq_arm_mask_set_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_arm_mask_set_msync1    ,	22
 .equ MSK_NX56_dpm_irq_arm_mask_set_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_arm_mask_set_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_arm_mask_set_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_arm_mask_set_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_arm_mask_set_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_arm_mask_set_dmac      ,	27
 .equ MSK_NX56_dpm_irq_arm_mask_set_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_arm_mask_set_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_arm_mask_set_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_arm_mask_set_can       ,	29
 .equ MSK_NX56_dpm_irq_arm_mask_set_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_arm_mask_set_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_arm_mask_reset
@ => DPM Interrupt Mask Reset Register for netX internal ARM-CPU.
@    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for netX internal ARM-CPU.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for netX internal ARM-CPU without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_arm_mask_reset,	0x00000088
 .equ Adr_NX56_dpm_dpm_irq_arm_mask_reset,	0x1018C088
 .equ Adr_NX56_dpm_irq_arm_mask_reset    ,	0x1018C088

 .equ MSK_NX56_dpm_irq_arm_mask_reset_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_arm_mask_reset_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_arm_mask_reset_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_arm_mask_reset_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_arm_mask_reset_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_arm_mask_reset_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_arm_mask_reset_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_arm_mask_reset_systime_ns,	4
 .equ MSK_NX56_dpm_irq_arm_mask_reset_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_arm_mask_reset_systime_s ,	5
 .equ MSK_NX56_dpm_irq_arm_mask_reset_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_arm_mask_reset_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_arm_mask_reset_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_arm_mask_reset_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_arm_mask_reset_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_arm_mask_reset_uart0     ,	8
 .equ MSK_NX56_dpm_irq_arm_mask_reset_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_arm_mask_reset_uart1     ,	9
 .equ MSK_NX56_dpm_irq_arm_mask_reset_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_arm_mask_reset_uart2     ,	10
 .equ MSK_NX56_dpm_irq_arm_mask_reset_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_arm_mask_reset_usb       ,	11
 .equ MSK_NX56_dpm_irq_arm_mask_reset_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_spi       ,	12
 .equ MSK_NX56_dpm_irq_arm_mask_reset_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_i2c       ,	13
 .equ MSK_NX56_dpm_irq_arm_mask_reset_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_firmware  ,	15
 .equ MSK_NX56_dpm_irq_arm_mask_reset_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_gpio      ,	16
 .equ MSK_NX56_dpm_irq_arm_mask_reset_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_com0      ,	17
 .equ MSK_NX56_dpm_irq_arm_mask_reset_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_com1      ,	18
 .equ MSK_NX56_dpm_irq_arm_mask_reset_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_arm_mask_reset_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_msync0    ,	21
 .equ MSK_NX56_dpm_irq_arm_mask_reset_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_msync1    ,	22
 .equ MSK_NX56_dpm_irq_arm_mask_reset_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_arm_mask_reset_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_arm_mask_reset_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_dmac      ,	27
 .equ MSK_NX56_dpm_irq_arm_mask_reset_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_arm_mask_reset_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_can       ,	29
 .equ MSK_NX56_dpm_irq_arm_mask_reset_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_arm_mask_reset_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_arm_masked
@ => DPM Masked Interrupt Status Register for netX internal ARM-CPU.
@    A bit is set, when the related mask bit is set in 'dpm_irq_arm_mask'-register and the related interrupt is asserted.
@    IRQ for netX internal ARM-CPU is asserted if at least one bit is set here.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for netX internal ARM-CPU without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_arm_masked,	0x0000008C
 .equ Adr_NX56_dpm_dpm_irq_arm_masked,	0x1018C08C
 .equ Adr_NX56_dpm_irq_arm_masked    ,	0x1018C08C

 .equ MSK_NX56_dpm_irq_arm_masked_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_arm_masked_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_arm_masked_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_arm_masked_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_arm_masked_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_arm_masked_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_arm_masked_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_arm_masked_systime_ns,	4
 .equ MSK_NX56_dpm_irq_arm_masked_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_arm_masked_systime_s ,	5
 .equ MSK_NX56_dpm_irq_arm_masked_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_arm_masked_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_arm_masked_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_arm_masked_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_arm_masked_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_arm_masked_uart0     ,	8
 .equ MSK_NX56_dpm_irq_arm_masked_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_arm_masked_uart1     ,	9
 .equ MSK_NX56_dpm_irq_arm_masked_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_arm_masked_uart2     ,	10
 .equ MSK_NX56_dpm_irq_arm_masked_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_arm_masked_usb       ,	11
 .equ MSK_NX56_dpm_irq_arm_masked_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_arm_masked_spi       ,	12
 .equ MSK_NX56_dpm_irq_arm_masked_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_arm_masked_i2c       ,	13
 .equ MSK_NX56_dpm_irq_arm_masked_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_arm_masked_firmware  ,	15
 .equ MSK_NX56_dpm_irq_arm_masked_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_arm_masked_gpio      ,	16
 .equ MSK_NX56_dpm_irq_arm_masked_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_arm_masked_com0      ,	17
 .equ MSK_NX56_dpm_irq_arm_masked_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_arm_masked_com1      ,	18
 .equ MSK_NX56_dpm_irq_arm_masked_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_arm_masked_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_arm_masked_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_arm_masked_msync0    ,	21
 .equ MSK_NX56_dpm_irq_arm_masked_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_arm_masked_msync1    ,	22
 .equ MSK_NX56_dpm_irq_arm_masked_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_arm_masked_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_arm_masked_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_arm_masked_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_arm_masked_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_arm_masked_dmac      ,	27
 .equ MSK_NX56_dpm_irq_arm_masked_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_arm_masked_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_arm_masked_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_arm_masked_can       ,	29
 .equ MSK_NX56_dpm_irq_arm_masked_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_arm_masked_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_xpic_mask_set
@ => DPM Interrupt Mask Register for netX internal xPIC-CPU.
@    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for netX internal xPIC-CPU.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for netX internal xPIC-CPU without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_xpic_mask_set,	0x00000090
 .equ Adr_NX56_dpm_dpm_irq_xpic_mask_set,	0x1018C090
 .equ Adr_NX56_dpm_irq_xpic_mask_set    ,	0x1018C090

 .equ MSK_NX56_dpm_irq_xpic_mask_set_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_xpic_mask_set_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_xpic_mask_set_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_xpic_mask_set_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_xpic_mask_set_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_xpic_mask_set_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_xpic_mask_set_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_xpic_mask_set_systime_ns,	4
 .equ MSK_NX56_dpm_irq_xpic_mask_set_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_xpic_mask_set_systime_s ,	5
 .equ MSK_NX56_dpm_irq_xpic_mask_set_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_xpic_mask_set_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_xpic_mask_set_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_xpic_mask_set_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_xpic_mask_set_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_xpic_mask_set_uart0     ,	8
 .equ MSK_NX56_dpm_irq_xpic_mask_set_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_xpic_mask_set_uart1     ,	9
 .equ MSK_NX56_dpm_irq_xpic_mask_set_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_xpic_mask_set_uart2     ,	10
 .equ MSK_NX56_dpm_irq_xpic_mask_set_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_xpic_mask_set_usb       ,	11
 .equ MSK_NX56_dpm_irq_xpic_mask_set_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_spi       ,	12
 .equ MSK_NX56_dpm_irq_xpic_mask_set_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_i2c       ,	13
 .equ MSK_NX56_dpm_irq_xpic_mask_set_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_firmware  ,	15
 .equ MSK_NX56_dpm_irq_xpic_mask_set_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_gpio      ,	16
 .equ MSK_NX56_dpm_irq_xpic_mask_set_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_com0      ,	17
 .equ MSK_NX56_dpm_irq_xpic_mask_set_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_com1      ,	18
 .equ MSK_NX56_dpm_irq_xpic_mask_set_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_xpic_mask_set_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_msync0    ,	21
 .equ MSK_NX56_dpm_irq_xpic_mask_set_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_msync1    ,	22
 .equ MSK_NX56_dpm_irq_xpic_mask_set_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_xpic_mask_set_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_xpic_mask_set_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_dmac      ,	27
 .equ MSK_NX56_dpm_irq_xpic_mask_set_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_xpic_mask_set_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_can       ,	29
 .equ MSK_NX56_dpm_irq_xpic_mask_set_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_xpic_mask_set_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_xpic_mask_reset
@ => DPM Interrupt Mask Reset Register for netX internal xPIC-CPU.
@    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for netX internal xPIC-CPU.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for netX internal xPIC-CPU without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_xpic_mask_reset,	0x00000094
 .equ Adr_NX56_dpm_dpm_irq_xpic_mask_reset,	0x1018C094
 .equ Adr_NX56_dpm_irq_xpic_mask_reset    ,	0x1018C094

 .equ MSK_NX56_dpm_irq_xpic_mask_reset_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_systime_ns,	4
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_systime_s ,	5
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_uart0     ,	8
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_uart1     ,	9
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_uart2     ,	10
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_usb       ,	11
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_spi       ,	12
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_i2c       ,	13
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_firmware  ,	15
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_gpio      ,	16
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_com0      ,	17
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_com1      ,	18
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_msync0    ,	21
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_msync1    ,	22
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_dmac      ,	27
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_can       ,	29
 .equ MSK_NX56_dpm_irq_xpic_mask_reset_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_xpic_mask_reset_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_xpic_masked
@ => DPM Masked Interrupt Status Register for netX internal xPIC-CPU.
@    A bit is set, when the related mask bit is set in 'dpm_irq_xpic_mask'-register and the related interrupt is asserted.
@    IRQ for netX internal xPIC-CPU is asserted if at least one bit is set here.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for netX internal xPIC-CPU without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_xpic_masked,	0x00000098
 .equ Adr_NX56_dpm_dpm_irq_xpic_masked,	0x1018C098
 .equ Adr_NX56_dpm_irq_xpic_masked    ,	0x1018C098

 .equ MSK_NX56_dpm_irq_xpic_masked_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_xpic_masked_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_xpic_masked_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_xpic_masked_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_xpic_masked_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_xpic_masked_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_xpic_masked_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_xpic_masked_systime_ns,	4
 .equ MSK_NX56_dpm_irq_xpic_masked_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_xpic_masked_systime_s ,	5
 .equ MSK_NX56_dpm_irq_xpic_masked_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_xpic_masked_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_xpic_masked_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_xpic_masked_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_xpic_masked_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_xpic_masked_uart0     ,	8
 .equ MSK_NX56_dpm_irq_xpic_masked_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_xpic_masked_uart1     ,	9
 .equ MSK_NX56_dpm_irq_xpic_masked_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_xpic_masked_uart2     ,	10
 .equ MSK_NX56_dpm_irq_xpic_masked_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_xpic_masked_usb       ,	11
 .equ MSK_NX56_dpm_irq_xpic_masked_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_xpic_masked_spi       ,	12
 .equ MSK_NX56_dpm_irq_xpic_masked_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_xpic_masked_i2c       ,	13
 .equ MSK_NX56_dpm_irq_xpic_masked_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_xpic_masked_firmware  ,	15
 .equ MSK_NX56_dpm_irq_xpic_masked_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_xpic_masked_gpio      ,	16
 .equ MSK_NX56_dpm_irq_xpic_masked_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_xpic_masked_com0      ,	17
 .equ MSK_NX56_dpm_irq_xpic_masked_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_xpic_masked_com1      ,	18
 .equ MSK_NX56_dpm_irq_xpic_masked_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_xpic_masked_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_xpic_masked_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_xpic_masked_msync0    ,	21
 .equ MSK_NX56_dpm_irq_xpic_masked_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_xpic_masked_msync1    ,	22
 .equ MSK_NX56_dpm_irq_xpic_masked_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_xpic_masked_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_xpic_masked_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_xpic_masked_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_xpic_masked_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_xpic_masked_dmac      ,	27
 .equ MSK_NX56_dpm_irq_xpic_masked_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_xpic_masked_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_xpic_masked_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_xpic_masked_can       ,	29
 .equ MSK_NX56_dpm_irq_xpic_masked_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_xpic_masked_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_fiq_mask_set
@ => DPM Interrupt Mask Register for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ).
@    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ).
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_fiq_mask_set,	0x0000009C
 .equ Adr_NX56_dpm_dpm_irq_fiq_mask_set,	0x1018C09C
 .equ Adr_NX56_dpm_irq_fiq_mask_set    ,	0x1018C09C

 .equ MSK_NX56_dpm_irq_fiq_mask_set_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_fiq_mask_set_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_fiq_mask_set_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_fiq_mask_set_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_fiq_mask_set_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_fiq_mask_set_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_fiq_mask_set_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_fiq_mask_set_systime_ns,	4
 .equ MSK_NX56_dpm_irq_fiq_mask_set_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_fiq_mask_set_systime_s ,	5
 .equ MSK_NX56_dpm_irq_fiq_mask_set_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_fiq_mask_set_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_fiq_mask_set_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_fiq_mask_set_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_fiq_mask_set_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_fiq_mask_set_uart0     ,	8
 .equ MSK_NX56_dpm_irq_fiq_mask_set_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_fiq_mask_set_uart1     ,	9
 .equ MSK_NX56_dpm_irq_fiq_mask_set_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_fiq_mask_set_uart2     ,	10
 .equ MSK_NX56_dpm_irq_fiq_mask_set_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_fiq_mask_set_usb       ,	11
 .equ MSK_NX56_dpm_irq_fiq_mask_set_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_spi       ,	12
 .equ MSK_NX56_dpm_irq_fiq_mask_set_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_i2c       ,	13
 .equ MSK_NX56_dpm_irq_fiq_mask_set_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_firmware  ,	15
 .equ MSK_NX56_dpm_irq_fiq_mask_set_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_gpio      ,	16
 .equ MSK_NX56_dpm_irq_fiq_mask_set_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_com0      ,	17
 .equ MSK_NX56_dpm_irq_fiq_mask_set_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_com1      ,	18
 .equ MSK_NX56_dpm_irq_fiq_mask_set_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_fiq_mask_set_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_msync0    ,	21
 .equ MSK_NX56_dpm_irq_fiq_mask_set_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_msync1    ,	22
 .equ MSK_NX56_dpm_irq_fiq_mask_set_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_fiq_mask_set_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_fiq_mask_set_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_dmac      ,	27
 .equ MSK_NX56_dpm_irq_fiq_mask_set_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_fiq_mask_set_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_can       ,	29
 .equ MSK_NX56_dpm_irq_fiq_mask_set_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_fiq_mask_set_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_fiq_mask_reset
@ => DPM Interrupt Mask Reset Register for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ).
@    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ).
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_fiq_mask_reset,	0x000000A0
 .equ Adr_NX56_dpm_dpm_irq_fiq_mask_reset,	0x1018C0A0
 .equ Adr_NX56_dpm_irq_fiq_mask_reset    ,	0x1018C0A0

 .equ MSK_NX56_dpm_irq_fiq_mask_reset_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_systime_ns,	4
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_systime_s ,	5
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_uart0     ,	8
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_uart1     ,	9
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_uart2     ,	10
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_usb       ,	11
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_spi       ,	12
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_i2c       ,	13
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_firmware  ,	15
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_gpio      ,	16
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_com0      ,	17
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_com1      ,	18
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_msync0    ,	21
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_msync1    ,	22
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_dmac      ,	27
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_can       ,	29
 .equ MSK_NX56_dpm_irq_fiq_mask_reset_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_fiq_mask_reset_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_fiq_masked
@ => DPM Masked Interrupt Status Register for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ).
@    A bit is set, when the related mask bit is set in 'dpm_irq_fiq_mask'-register and the related interrupt is asserted.
@    IRQ for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ) is asserted if at least one bit is set here.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for fast netX interrupt output signal (DPM_FIQ/HIF_SIRQ) without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_fiq_masked,	0x000000A4
 .equ Adr_NX56_dpm_dpm_irq_fiq_masked,	0x1018C0A4
 .equ Adr_NX56_dpm_irq_fiq_masked    ,	0x1018C0A4

 .equ MSK_NX56_dpm_irq_fiq_masked_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_fiq_masked_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_fiq_masked_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_fiq_masked_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_fiq_masked_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_fiq_masked_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_fiq_masked_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_fiq_masked_systime_ns,	4
 .equ MSK_NX56_dpm_irq_fiq_masked_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_fiq_masked_systime_s ,	5
 .equ MSK_NX56_dpm_irq_fiq_masked_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_fiq_masked_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_fiq_masked_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_fiq_masked_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_fiq_masked_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_fiq_masked_uart0     ,	8
 .equ MSK_NX56_dpm_irq_fiq_masked_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_fiq_masked_uart1     ,	9
 .equ MSK_NX56_dpm_irq_fiq_masked_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_fiq_masked_uart2     ,	10
 .equ MSK_NX56_dpm_irq_fiq_masked_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_fiq_masked_usb       ,	11
 .equ MSK_NX56_dpm_irq_fiq_masked_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_fiq_masked_spi       ,	12
 .equ MSK_NX56_dpm_irq_fiq_masked_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_fiq_masked_i2c       ,	13
 .equ MSK_NX56_dpm_irq_fiq_masked_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_fiq_masked_firmware  ,	15
 .equ MSK_NX56_dpm_irq_fiq_masked_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_fiq_masked_gpio      ,	16
 .equ MSK_NX56_dpm_irq_fiq_masked_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_fiq_masked_com0      ,	17
 .equ MSK_NX56_dpm_irq_fiq_masked_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_fiq_masked_com1      ,	18
 .equ MSK_NX56_dpm_irq_fiq_masked_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_fiq_masked_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_fiq_masked_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_fiq_masked_msync0    ,	21
 .equ MSK_NX56_dpm_irq_fiq_masked_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_fiq_masked_msync1    ,	22
 .equ MSK_NX56_dpm_irq_fiq_masked_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_fiq_masked_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_fiq_masked_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_fiq_masked_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_fiq_masked_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_fiq_masked_dmac      ,	27
 .equ MSK_NX56_dpm_irq_fiq_masked_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_fiq_masked_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_fiq_masked_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_fiq_masked_can       ,	29
 .equ MSK_NX56_dpm_irq_fiq_masked_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_fiq_masked_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_irq_mask_set
@ => DPM Interrupt Mask Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ).
@    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ).
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_irq_mask_set,	0x000000A8
 .equ Adr_NX56_dpm_dpm_irq_irq_mask_set,	0x1018C0A8
 .equ Adr_NX56_dpm_irq_irq_mask_set    ,	0x1018C0A8

 .equ MSK_NX56_dpm_irq_irq_mask_set_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_irq_mask_set_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_irq_mask_set_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_irq_mask_set_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_irq_mask_set_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_irq_mask_set_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_irq_mask_set_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_irq_mask_set_systime_ns,	4
 .equ MSK_NX56_dpm_irq_irq_mask_set_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_irq_mask_set_systime_s ,	5
 .equ MSK_NX56_dpm_irq_irq_mask_set_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_irq_mask_set_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_irq_mask_set_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_irq_mask_set_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_irq_mask_set_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_irq_mask_set_uart0     ,	8
 .equ MSK_NX56_dpm_irq_irq_mask_set_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_irq_mask_set_uart1     ,	9
 .equ MSK_NX56_dpm_irq_irq_mask_set_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_irq_mask_set_uart2     ,	10
 .equ MSK_NX56_dpm_irq_irq_mask_set_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_irq_mask_set_usb       ,	11
 .equ MSK_NX56_dpm_irq_irq_mask_set_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_irq_mask_set_spi       ,	12
 .equ MSK_NX56_dpm_irq_irq_mask_set_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_irq_mask_set_i2c       ,	13
 .equ MSK_NX56_dpm_irq_irq_mask_set_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_irq_mask_set_firmware  ,	15
 .equ MSK_NX56_dpm_irq_irq_mask_set_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_irq_mask_set_gpio      ,	16
 .equ MSK_NX56_dpm_irq_irq_mask_set_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_irq_mask_set_com0      ,	17
 .equ MSK_NX56_dpm_irq_irq_mask_set_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_irq_mask_set_com1      ,	18
 .equ MSK_NX56_dpm_irq_irq_mask_set_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_irq_mask_set_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_irq_mask_set_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_irq_mask_set_msync0    ,	21
 .equ MSK_NX56_dpm_irq_irq_mask_set_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_irq_mask_set_msync1    ,	22
 .equ MSK_NX56_dpm_irq_irq_mask_set_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_irq_mask_set_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_irq_mask_set_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_irq_mask_set_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_irq_mask_set_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_irq_mask_set_dmac      ,	27
 .equ MSK_NX56_dpm_irq_irq_mask_set_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_irq_mask_set_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_irq_mask_set_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_irq_mask_set_can       ,	29
 .equ MSK_NX56_dpm_irq_irq_mask_set_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_irq_mask_set_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_irq_mask_reset
@ => DPM Interrupt Mask Reset Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ).
@    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence related interrupt mask bit.
@    Read access shows actual interrupt mask.
@    If a mask bit is set, the related interrupt will activate the IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ).
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_irq_mask_reset,	0x000000AC
 .equ Adr_NX56_dpm_dpm_irq_irq_mask_reset,	0x1018C0AC
 .equ Adr_NX56_dpm_irq_irq_mask_reset    ,	0x1018C0AC

 .equ MSK_NX56_dpm_irq_irq_mask_reset_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_irq_mask_reset_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_irq_mask_reset_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_irq_mask_reset_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_irq_mask_reset_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_irq_mask_reset_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_irq_mask_reset_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_irq_mask_reset_systime_ns,	4
 .equ MSK_NX56_dpm_irq_irq_mask_reset_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_irq_mask_reset_systime_s ,	5
 .equ MSK_NX56_dpm_irq_irq_mask_reset_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_irq_mask_reset_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_irq_mask_reset_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_irq_mask_reset_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_irq_mask_reset_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_irq_mask_reset_uart0     ,	8
 .equ MSK_NX56_dpm_irq_irq_mask_reset_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_irq_mask_reset_uart1     ,	9
 .equ MSK_NX56_dpm_irq_irq_mask_reset_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_irq_mask_reset_uart2     ,	10
 .equ MSK_NX56_dpm_irq_irq_mask_reset_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_irq_mask_reset_usb       ,	11
 .equ MSK_NX56_dpm_irq_irq_mask_reset_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_spi       ,	12
 .equ MSK_NX56_dpm_irq_irq_mask_reset_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_i2c       ,	13
 .equ MSK_NX56_dpm_irq_irq_mask_reset_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_firmware  ,	15
 .equ MSK_NX56_dpm_irq_irq_mask_reset_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_gpio      ,	16
 .equ MSK_NX56_dpm_irq_irq_mask_reset_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_com0      ,	17
 .equ MSK_NX56_dpm_irq_irq_mask_reset_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_com1      ,	18
 .equ MSK_NX56_dpm_irq_irq_mask_reset_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_irq_mask_reset_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_msync0    ,	21
 .equ MSK_NX56_dpm_irq_irq_mask_reset_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_msync1    ,	22
 .equ MSK_NX56_dpm_irq_irq_mask_reset_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_irq_mask_reset_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_irq_mask_reset_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_dmac      ,	27
 .equ MSK_NX56_dpm_irq_irq_mask_reset_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_irq_mask_reset_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_can       ,	29
 .equ MSK_NX56_dpm_irq_irq_mask_reset_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_irq_mask_reset_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_irq_irq_masked
@ => DPM Masked Interrupt Status Register for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ).
@    A bit is set, when the related mask bit is set in 'dpm_irq_irq_mask'-register and the related interrupt is asserted.
@    IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) is asserted if at least one bit is set here.
@    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here.
@    To release IRQ for normal netX interrupt output signal (DPM_IRQ/HIF_DIRQ) without clearing interrupt in module, reset related mask bit to 0.
@    Note:
@       For further information view description of 'dpm_irq_raw' register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_irq_irq_masked,	0x000000B0
 .equ Adr_NX56_dpm_dpm_irq_irq_masked,	0x1018C0B0
 .equ Adr_NX56_dpm_irq_irq_masked    ,	0x1018C0B0

 .equ MSK_NX56_dpm_irq_irq_masked_dpm_sw    ,	0x00000001
 .equ SRT_NX56_dpm_irq_irq_masked_dpm_sw    ,	0
 .equ MSK_NX56_dpm_irq_irq_masked_dpm_err   ,	0x00000002
 .equ SRT_NX56_dpm_irq_irq_masked_dpm_err   ,	1
 .equ MSK_NX56_dpm_irq_irq_masked_gpio_timer,	0x00000008
 .equ SRT_NX56_dpm_irq_irq_masked_gpio_timer,	3
 .equ MSK_NX56_dpm_irq_irq_masked_systime_ns,	0x00000010
 .equ SRT_NX56_dpm_irq_irq_masked_systime_ns,	4
 .equ MSK_NX56_dpm_irq_irq_masked_systime_s ,	0x00000020
 .equ SRT_NX56_dpm_irq_irq_masked_systime_s ,	5
 .equ MSK_NX56_dpm_irq_irq_masked_gpio31    ,	0x00000040
 .equ SRT_NX56_dpm_irq_irq_masked_gpio31    ,	6
 .equ MSK_NX56_dpm_irq_irq_masked_watchdog  ,	0x00000080
 .equ SRT_NX56_dpm_irq_irq_masked_watchdog  ,	7
 .equ MSK_NX56_dpm_irq_irq_masked_uart0     ,	0x00000100
 .equ SRT_NX56_dpm_irq_irq_masked_uart0     ,	8
 .equ MSK_NX56_dpm_irq_irq_masked_uart1     ,	0x00000200
 .equ SRT_NX56_dpm_irq_irq_masked_uart1     ,	9
 .equ MSK_NX56_dpm_irq_irq_masked_uart2     ,	0x00000400
 .equ SRT_NX56_dpm_irq_irq_masked_uart2     ,	10
 .equ MSK_NX56_dpm_irq_irq_masked_usb       ,	0x00000800
 .equ SRT_NX56_dpm_irq_irq_masked_usb       ,	11
 .equ MSK_NX56_dpm_irq_irq_masked_spi       ,	0x00001000
 .equ SRT_NX56_dpm_irq_irq_masked_spi       ,	12
 .equ MSK_NX56_dpm_irq_irq_masked_i2c       ,	0x00002000
 .equ SRT_NX56_dpm_irq_irq_masked_i2c       ,	13
 .equ MSK_NX56_dpm_irq_irq_masked_firmware  ,	0x00008000
 .equ SRT_NX56_dpm_irq_irq_masked_firmware  ,	15
 .equ MSK_NX56_dpm_irq_irq_masked_gpio      ,	0x00010000
 .equ SRT_NX56_dpm_irq_irq_masked_gpio      ,	16
 .equ MSK_NX56_dpm_irq_irq_masked_com0      ,	0x00020000
 .equ SRT_NX56_dpm_irq_irq_masked_com0      ,	17
 .equ MSK_NX56_dpm_irq_irq_masked_com1      ,	0x00040000
 .equ SRT_NX56_dpm_irq_irq_masked_com1      ,	18
 .equ MSK_NX56_dpm_irq_irq_masked_xpic_debug,	0x00100000
 .equ SRT_NX56_dpm_irq_irq_masked_xpic_debug,	20
 .equ MSK_NX56_dpm_irq_irq_masked_msync0    ,	0x00200000
 .equ SRT_NX56_dpm_irq_irq_masked_msync0    ,	21
 .equ MSK_NX56_dpm_irq_irq_masked_msync1    ,	0x00400000
 .equ SRT_NX56_dpm_irq_irq_masked_msync1    ,	22
 .equ MSK_NX56_dpm_irq_irq_masked_int_phy   ,	0x02000000
 .equ SRT_NX56_dpm_irq_irq_masked_int_phy   ,	25
 .equ MSK_NX56_dpm_irq_irq_masked_sysstate  ,	0x04000000
 .equ SRT_NX56_dpm_irq_irq_masked_sysstate  ,	26
 .equ MSK_NX56_dpm_irq_irq_masked_dmac      ,	0x08000000
 .equ SRT_NX56_dpm_irq_irq_masked_dmac      ,	27
 .equ MSK_NX56_dpm_irq_irq_masked_trigger_lt,	0x10000000
 .equ SRT_NX56_dpm_irq_irq_masked_trigger_lt,	28
 .equ MSK_NX56_dpm_irq_irq_masked_can       ,	0x20000000
 .equ SRT_NX56_dpm_irq_irq_masked_can       ,	29
 .equ MSK_NX56_dpm_irq_irq_masked_osac      ,	0x40000000
 .equ SRT_NX56_dpm_irq_irq_masked_osac      ,	30

@ ---------------------------------------------------------------------
@ Register dpm_sw_irq
@ => DPM Register for Software Interrupt Generation to Host and netX Interrupt Targets.
@    Host and netX masters can generate an interrupt to netX interrupt targets (e.g. ARM-VIC, xPIC-VIC)
@    or DPM IRQ signals by this register.
@    To propagate interrupt states from this register to the interrupt target the 'dpm_sw' bit must
@    be set inside the appropriate interrupt mask (e.g. 'dpm_irq_arm_mask_set' register).
@    Example:
@       The 'dpm_sw' IRQs can be used by the host to flag one IRQ to the ARM by
@       setting the arm-dpm_sw and another IRQ to the xPIC by setting the xpic-dpm_sw. The
@       ARM can use at the same time the irq-dpm_sw to flag an IRQ to the host while the
@       xPIC could use the fiq-dpm_sw to flag another IRQ to the host.
@    Note:
@       For each netX interrupt target  there is a set and a reset bit provided to avoid read-modify-write sequences.
@       When both (set and reset) bits are set for the same target, the related interrupt will be set (set will win).
@       Reset bits are always 0 on read. Set-bits show current interrupt status when read.
@    Note:
@       This register is a new netx56 feature..
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_sw_irq,	0x000000B8
 .equ Adr_NX56_dpm_dpm_sw_irq,	0x1018C0B8
 .equ Adr_NX56_dpm_sw_irq    ,	0x1018C0B8

 .equ MSK_NX56_dpm_sw_irq_set_arm   ,	0x00000001
 .equ SRT_NX56_dpm_sw_irq_set_arm   ,	0
 .equ MSK_NX56_dpm_sw_irq_set_xpic  ,	0x00000002
 .equ SRT_NX56_dpm_sw_irq_set_xpic  ,	1
 .equ MSK_NX56_dpm_sw_irq_set_fiq   ,	0x00000004
 .equ SRT_NX56_dpm_sw_irq_set_fiq   ,	2
 .equ MSK_NX56_dpm_sw_irq_set_irq   ,	0x00000008
 .equ SRT_NX56_dpm_sw_irq_set_irq   ,	3
 .equ MSK_NX56_dpm_sw_irq_reset_arm ,	0x00000100
 .equ SRT_NX56_dpm_sw_irq_reset_arm ,	8
 .equ MSK_NX56_dpm_sw_irq_reset_xpic,	0x00000200
 .equ SRT_NX56_dpm_sw_irq_reset_xpic,	9
 .equ MSK_NX56_dpm_sw_irq_reset_fiq ,	0x00000400
 .equ SRT_NX56_dpm_sw_irq_reset_fiq ,	10
 .equ MSK_NX56_dpm_sw_irq_reset_irq ,	0x00000800
 .equ SRT_NX56_dpm_sw_irq_reset_irq ,	11

@ ---------------------------------------------------------------------
@ Register dpm_reserved_netx50_wgd_host_timeout
@ => Address reserved for netx50 DPM_HOST_WDG_HOST_TIMEOUT.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_reserved_netx50_wgd_host_timeout,	0x000000C0
 .equ Adr_NX56_dpm_dpm_reserved_netx50_wgd_host_timeout,	0x1018C0C0
 .equ Adr_NX56_dpm_reserved_netx50_wgd_host_timeout    ,	0x1018C0C0

 .equ MSK_NX56_dpm_reserved_netx50_wgd_host_timeout_zero_ro,	0xffffffff
 .equ SRT_NX56_dpm_reserved_netx50_wgd_host_timeout_zero_ro,	0

@ ---------------------------------------------------------------------
@ Register dpm_reserved_netx50_wgd_host_trigger
@ => Address reserved for netx50 DPM_HOST_WDG_HOST_TRIG.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_reserved_netx50_wgd_host_trigger,	0x000000C4
 .equ Adr_NX56_dpm_dpm_reserved_netx50_wgd_host_trigger,	0x1018C0C4
 .equ Adr_NX56_dpm_reserved_netx50_wgd_host_trigger    ,	0x1018C0C4

 .equ MSK_NX56_dpm_reserved_netx50_wgd_host_trigger_zero_ro,	0xffffffff
 .equ SRT_NX56_dpm_reserved_netx50_wgd_host_trigger_zero_ro,	0

@ ---------------------------------------------------------------------
@ Register dpm_reserved_netx50_wgd_netx_timeout
@ => Address reserved for netx50 DPM_HOST_WDG_ARM_TIMEOUT.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_reserved_netx50_wgd_netx_timeout,	0x000000C8
 .equ Adr_NX56_dpm_dpm_reserved_netx50_wgd_netx_timeout,	0x1018C0C8
 .equ Adr_NX56_dpm_reserved_netx50_wgd_netx_timeout    ,	0x1018C0C8

 .equ MSK_NX56_dpm_reserved_netx50_wgd_netx_timeout_zero_ro,	0xffffffff
 .equ SRT_NX56_dpm_reserved_netx50_wgd_netx_timeout_zero_ro,	0

@ ---------------------------------------------------------------------
@ Register dpm_sys_sta_bigend16
@ => DPM System Status Information Register in big endianess 16 data mapping.
@    Read-only, use dpm_sys_sta for programming.
@    This register can be used for firmware status information.
@    Reading this register data can be done from uninitialized DPM interface in the same way
@    as reading netx version (adr_dpm_netx_version_bigend16, adr_dpm_netx_version) by using dpm_sys_sta_bigend16 register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_sys_sta_bigend16,	0x000000CC
 .equ Adr_NX56_dpm_dpm_sys_sta_bigend16,	0x1018C0CC
 .equ Adr_NX56_dpm_sys_sta_bigend16    ,	0x1018C0CC

 .equ MSK_NX56_dpm_sys_sta_bigend16_NETX_STA_CODE_swap_ro,	0x000000ff
 .equ SRT_NX56_dpm_sys_sta_bigend16_NETX_STA_CODE_swap_ro,	0
 .equ MSK_NX56_dpm_sys_sta_bigend16_RDY_ro               ,	0x00000100
 .equ SRT_NX56_dpm_sys_sta_bigend16_RDY_ro               ,	8
 .equ MSK_NX56_dpm_sys_sta_bigend16_RUN_ro               ,	0x00000200
 .equ SRT_NX56_dpm_sys_sta_bigend16_RUN_ro               ,	9
 .equ MSK_NX56_dpm_sys_sta_bigend16_NETX_STATE_swap_ro   ,	0x00000c00
 .equ SRT_NX56_dpm_sys_sta_bigend16_NETX_STATE_swap_ro   ,	10
 .equ MSK_NX56_dpm_sys_sta_bigend16_HOST_STATE_swap_ro   ,	0x0000f000
 .equ SRT_NX56_dpm_sys_sta_bigend16_HOST_STATE_swap_ro   ,	12

@ ---------------------------------------------------------------------
@ Register dpm_reserved_netx50_timer_ctrl
@ => Address reserved for netx50 DPM_HOST_TMR_CTRL.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_reserved_netx50_timer_ctrl,	0x000000D0
 .equ Adr_NX56_dpm_dpm_reserved_netx50_timer_ctrl,	0x1018C0D0
 .equ Adr_NX56_dpm_reserved_netx50_timer_ctrl    ,	0x1018C0D0

 .equ MSK_NX56_dpm_reserved_netx50_timer_ctrl_zero_ro,	0xffffffff
 .equ SRT_NX56_dpm_reserved_netx50_timer_ctrl_zero_ro,	0

@ ---------------------------------------------------------------------
@ Register dpm_reserved_netx50_timer_start_val
@ => Address reserved for netx50 DPM_HOST_TMR_START_VAL.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_reserved_netx50_timer_start_val,	0x000000D4
 .equ Adr_NX56_dpm_dpm_reserved_netx50_timer_start_val,	0x1018C0D4
 .equ Adr_NX56_dpm_reserved_netx50_timer_start_val    ,	0x1018C0D4

 .equ MSK_NX56_dpm_reserved_netx50_timer_start_val_zero_ro,	0xffffffff
 .equ SRT_NX56_dpm_reserved_netx50_timer_start_val_zero_ro,	0

@ ---------------------------------------------------------------------
@ Register dpm_sys_sta
@ => DPM System Status Information Register.
@    This register can be used for firmware status information.
@    Reading this register data can be done from uninitialized DPM interface in the same way
@    as reading netx version (adr_dpm_netx_version_bigend16, adr_dpm_netx_version) by using dpm_sys_sta_bigend16 register.
@    Note: This register is compatible to netx50 DPM_HOST_SYS_STAT register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_sys_sta,	0x000000D8
 .equ Adr_NX56_dpm_dpm_sys_sta,	0x1018C0D8
 .equ Adr_NX56_dpm_sys_sta    ,	0x1018C0D8

 .equ MSK_NX56_dpm_sys_sta_RDY_ro          ,	0x00000001
 .equ SRT_NX56_dpm_sys_sta_RDY_ro          ,	0
 .equ MSK_NX56_dpm_sys_sta_RUN_ro          ,	0x00000002
 .equ SRT_NX56_dpm_sys_sta_RUN_ro          ,	1
 .equ MSK_NX56_dpm_sys_sta_NETX_STATE_ro   ,	0x0000000c
 .equ SRT_NX56_dpm_sys_sta_NETX_STATE_ro   ,	2
 .equ MSK_NX56_dpm_sys_sta_HOST_STATE      ,	0x000000f0
 .equ SRT_NX56_dpm_sys_sta_HOST_STATE      ,	4
 .equ MSK_NX56_dpm_sys_sta_NETX_STA_CODE_ro,	0x0000ff00
 .equ SRT_NX56_dpm_sys_sta_NETX_STA_CODE_ro,	8

@ ---------------------------------------------------------------------
@ Register dpm_reset_request
@ => DPM Reset Request Register.
@    Note: This register is compatible to netx50 DPM_HOST_RESET_REQ register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_reset_request,	0x000000DC
 .equ Adr_NX56_dpm_dpm_reset_request,	0x1018C0DC
 .equ Adr_NX56_dpm_reset_request    ,	0x1018C0DC

 .equ MSK_NX56_dpm_reset_request_reset_key,	0x000000ff
 .equ SRT_NX56_dpm_reset_request_reset_key,	0

@ ---------------------------------------------------------------------
@ Register dpm_firmware_irq_raw
@ => 1st netx50 compatible DPM Interrupt Status Register (related to 'dpm_firmware_irq_mask'-register).
@    Writing a '1' to an IRQ flag will clear the Interrupt. This is always done even if related bit inside
@    'dpm_firmware_irq_mask'-register is not set (this is compatible to netx50).
@    Important: There are two completely independent sets of IRQ registers:
@       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers).
@       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2).
@       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs
@       can be found in both sets (e.g. com0).
@    Note: This register is compatible to netx50 DPM_HOST_INT_STAT0 register, however some unused
@       IRQs have been removed.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_firmware_irq_raw,	0x000000E0
 .equ Adr_NX56_dpm_dpm_firmware_irq_raw,	0x1018C0E0
 .equ Adr_NX56_dpm_firmware_irq_raw    ,	0x1018C0E0

 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT0      ,	0x00000001
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT0      ,	0
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT1      ,	0x00000002
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT1      ,	1
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT2      ,	0x00000004
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT2      ,	2
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT3      ,	0x00000008
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT3      ,	3
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT4      ,	0x00000010
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT4      ,	4
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT5      ,	0x00000020
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT5      ,	5
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT6      ,	0x00000040
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT6      ,	6
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT7      ,	0x00000080
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT7      ,	7
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT8      ,	0x00000100
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT8      ,	8
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT9      ,	0x00000200
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT9      ,	9
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT10     ,	0x00000400
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT10     ,	10
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT11     ,	0x00000800
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT11     ,	11
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT12     ,	0x00001000
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT12     ,	12
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT13     ,	0x00002000
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT13     ,	13
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT14     ,	0x00004000
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT14     ,	14
 .equ MSK_NX56_dpm_firmware_irq_raw_HS_EVENT15     ,	0x00008000
 .equ SRT_NX56_dpm_firmware_irq_raw_HS_EVENT15     ,	15
 .equ MSK_NX56_dpm_firmware_irq_raw_IRQ_VECTOR     ,	0x00ff0000
 .equ SRT_NX56_dpm_firmware_irq_raw_IRQ_VECTOR     ,	16
 .equ MSK_NX56_dpm_firmware_irq_raw_res_TMR_ro     ,	0x02000000
 .equ SRT_NX56_dpm_firmware_irq_raw_res_TMR_ro     ,	25
 .equ MSK_NX56_dpm_firmware_irq_raw_SYS_STA        ,	0x04000000
 .equ SRT_NX56_dpm_firmware_irq_raw_SYS_STA        ,	26
 .equ MSK_NX56_dpm_firmware_irq_raw_RDY_TIMEOUT    ,	0x10000000
 .equ SRT_NX56_dpm_firmware_irq_raw_RDY_TIMEOUT    ,	28
 .equ MSK_NX56_dpm_firmware_irq_raw_res_WDG_NETX_ro,	0x20000000
 .equ SRT_NX56_dpm_firmware_irq_raw_res_WDG_NETX_ro,	29
 .equ MSK_NX56_dpm_firmware_irq_raw_res_MEM_LCK_ro ,	0x40000000
 .equ SRT_NX56_dpm_firmware_irq_raw_res_MEM_LCK_ro ,	30
 .equ MSK_NX56_dpm_firmware_irq_raw_INT_REQ        ,	0x80000000
 .equ SRT_NX56_dpm_firmware_irq_raw_INT_REQ        ,	31

@ ---------------------------------------------------------------------
@ Register dpm_firmware_irq_raw2
@ => 2nd netx50 compatible DPM Interrupt Status Register (related to 'dpm_firmware_irq_mask2'-register).
@    All IRQs from this register are also part of 'DPM_HOST_INT_STAT.IRQ_VECTOR' bit-field.
@    Important: This is a read-only status register. IRQs can not be cleared here: In contrast to
@       'dpm_firmware_irq_raw'/'STAT0'-register writing '1's will have no effect. IRQs are straight forwarded
@       from IRQ generating units (e.g. 'trigger_lt'-IRQ from netX trigger-sample-unit).
@    Important: There are two completely independent sets of IRQ registers:
@       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers).
@       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2).
@       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs
@       can be found in both sets (e.g. com0).
@    Note: This register is compatible to netx50 DPM_HOST_INT_STAT2 register, however some unused
@       IRQs have been removed.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_firmware_irq_raw2,	0x000000E8
 .equ Adr_NX56_dpm_dpm_firmware_irq_raw2,	0x1018C0E8
 .equ Adr_NX56_dpm_firmware_irq_raw2    ,	0x1018C0E8

 .equ MSK_NX56_dpm_firmware_irq_raw2_com0      ,	0x00000001
 .equ SRT_NX56_dpm_firmware_irq_raw2_com0      ,	0
 .equ MSK_NX56_dpm_firmware_irq_raw2_com1      ,	0x00000002
 .equ SRT_NX56_dpm_firmware_irq_raw2_com1      ,	1
 .equ MSK_NX56_dpm_firmware_irq_raw2_msync0    ,	0x00000010
 .equ SRT_NX56_dpm_firmware_irq_raw2_msync0    ,	4
 .equ MSK_NX56_dpm_firmware_irq_raw2_msync1    ,	0x00000020
 .equ SRT_NX56_dpm_firmware_irq_raw2_msync1    ,	5
 .equ MSK_NX56_dpm_firmware_irq_raw2_trigger_lt,	0x00000100
 .equ SRT_NX56_dpm_firmware_irq_raw2_trigger_lt,	8

@ ---------------------------------------------------------------------
@ Register dpm_firmware_irq_mask
@ => DPM Handshake Interrupt Enable Register.
@    Only netx50 compatible 'dpm_firmware_irq' registers are related to settings of this register.
@    Note: This register is compatible to netx50 DPM_HOST_INT_EN0 register, however some unused
@       IRQs have been removed.
@    Note: HS_EVENT-bits are not read-only. This is netX50 compliant.
@       Recent netX50 Documentation marks HS_EVENT-bits as read-only. This is an dokumentation error.
@       For netX50 compatibility, these bits can also be controlled from netX-side in HANDSHAKE_CTRL address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_firmware_irq_mask,	0x000000F0
 .equ Adr_NX56_dpm_dpm_firmware_irq_mask,	0x1018C0F0
 .equ Adr_NX56_dpm_firmware_irq_mask    ,	0x1018C0F0

 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT0      ,	0x00000001
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT0      ,	0
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT1      ,	0x00000002
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT1      ,	1
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT2      ,	0x00000004
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT2      ,	2
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT3      ,	0x00000008
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT3      ,	3
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT4      ,	0x00000010
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT4      ,	4
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT5      ,	0x00000020
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT5      ,	5
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT6      ,	0x00000040
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT6      ,	6
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT7      ,	0x00000080
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT7      ,	7
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT8      ,	0x00000100
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT8      ,	8
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT9      ,	0x00000200
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT9      ,	9
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT10     ,	0x00000400
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT10     ,	10
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT11     ,	0x00000800
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT11     ,	11
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT12     ,	0x00001000
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT12     ,	12
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT13     ,	0x00002000
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT13     ,	13
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT14     ,	0x00004000
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT14     ,	14
 .equ MSK_NX56_dpm_firmware_irq_mask_HS_EVENT15     ,	0x00008000
 .equ SRT_NX56_dpm_firmware_irq_mask_HS_EVENT15     ,	15
 .equ MSK_NX56_dpm_firmware_irq_mask_res_TMR_ro     ,	0x02000000
 .equ SRT_NX56_dpm_firmware_irq_mask_res_TMR_ro     ,	25
 .equ MSK_NX56_dpm_firmware_irq_mask_SYS_STA        ,	0x04000000
 .equ SRT_NX56_dpm_firmware_irq_mask_SYS_STA        ,	26
 .equ MSK_NX56_dpm_firmware_irq_mask_RDY_TIMEOUT    ,	0x10000000
 .equ SRT_NX56_dpm_firmware_irq_mask_RDY_TIMEOUT    ,	28
 .equ MSK_NX56_dpm_firmware_irq_mask_res_WDG_NETX_ro,	0x20000000
 .equ SRT_NX56_dpm_firmware_irq_mask_res_WDG_NETX_ro,	29
 .equ MSK_NX56_dpm_firmware_irq_mask_res_MEM_LCK_ro ,	0x40000000
 .equ SRT_NX56_dpm_firmware_irq_mask_res_MEM_LCK_ro ,	30
 .equ MSK_NX56_dpm_firmware_irq_mask_INT_EN         ,	0x80000000
 .equ SRT_NX56_dpm_firmware_irq_mask_INT_EN         ,	31

@ ---------------------------------------------------------------------
@ Register dpm_netx_version_bigend16
@ => DPM netX Version Register in big endianess 16 data mapping.
@    This registers content is mirrored form asic_ctrl register area and can be set during netX booting phase by netX firmware.
@    This register is not valid if unlocked bit is not set in dpm_status register.
@    Together with dpm_netx_version register, full 32 bit version can be read by any host device, even if DPM interface is not initialized yet.
@    Bytes byte1 and byte3 can be always read here even if DPM is uninitialized (8 bit default from dpm_cfg0x0 after power on) and
@    host device has 8, 16 or 32 bit data width.
@    {                 |                           |                           |
@                        8 bit DPM                   16 bit DPM                  32 bit DPM
@      byte 0 (D7:0)     byte read this address +1   adr_dpm_netx_version        adr_dpm_netx_version
@      byte 1 (D15:8)    byte read this address +0   byte read this address      DWord read this address
@      byte 2 (D23:16)   byte read this address +3   adr_dpm_netx_version        adr_dpm_netx_version
@      byte 3 (D31:24)   byte read this address +2   byte read this address +2   byte read this address +0 }
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_netx_version_bigend16,	0x000000F4
 .equ Adr_NX56_dpm_dpm_netx_version_bigend16,	0x1018C0F4
 .equ Adr_NX56_dpm_netx_version_bigend16    ,	0x1018C0F4

 .equ MSK_NX56_dpm_netx_version_bigend16_netx_version_byte1_swap,	0x000000ff
 .equ SRT_NX56_dpm_netx_version_bigend16_netx_version_byte1_swap,	0
 .equ MSK_NX56_dpm_netx_version_bigend16_netx_version_byte0_swap,	0x0000ff00
 .equ SRT_NX56_dpm_netx_version_bigend16_netx_version_byte0_swap,	8
 .equ MSK_NX56_dpm_netx_version_bigend16_netx_version_byte3_swap,	0x00ff0000
 .equ SRT_NX56_dpm_netx_version_bigend16_netx_version_byte3_swap,	16
 .equ MSK_NX56_dpm_netx_version_bigend16_netx_version_byte2_swap,	0xff000000
 .equ SRT_NX56_dpm_netx_version_bigend16_netx_version_byte2_swap,	24

@ ---------------------------------------------------------------------
@ Register dpm_firmware_irq_mask2
@ => netX50 compatible Interrupt Enable Register No.2.
@    Only netx50 compatible 'dpm_firmware_irq' registers are related to settings of this register.
@    Important: There are two completely independent sets of IRQ registers:
@       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers).
@       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2).
@       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs
@       can be found in both sets (e.g. com0).
@    Note: This register is compatible to netx50 DPM_HOST_INT_EN2 register, however some unused
@       IRQs have been removed.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_firmware_irq_mask2,	0x000000F8
 .equ Adr_NX56_dpm_dpm_firmware_irq_mask2,	0x1018C0F8
 .equ Adr_NX56_dpm_firmware_irq_mask2    ,	0x1018C0F8

 .equ MSK_NX56_dpm_firmware_irq_mask2_com0      ,	0x00000001
 .equ SRT_NX56_dpm_firmware_irq_mask2_com0      ,	0
 .equ MSK_NX56_dpm_firmware_irq_mask2_com1      ,	0x00000002
 .equ SRT_NX56_dpm_firmware_irq_mask2_com1      ,	1
 .equ MSK_NX56_dpm_firmware_irq_mask2_msync0    ,	0x00000010
 .equ SRT_NX56_dpm_firmware_irq_mask2_msync0    ,	4
 .equ MSK_NX56_dpm_firmware_irq_mask2_msync1    ,	0x00000020
 .equ SRT_NX56_dpm_firmware_irq_mask2_msync1    ,	5
 .equ MSK_NX56_dpm_firmware_irq_mask2_trigger_lt,	0x00000100
 .equ SRT_NX56_dpm_firmware_irq_mask2_trigger_lt,	8

@ ---------------------------------------------------------------------
@ Register dpm_netx_version
@ => DPM netX Version Register.
@    This register is mirrored form asic_ctrl register area and can be set during netX booting phase by netX firmware.
@    This register is not valid if unlocked bit is not set in dpm_status register.
@    Together with dpm_netx_version register, full 32 bit version can be read by any host device, even if DPM interface is not initialized yet.
@    Bytes byte0 and byte2 can be always read here even if DPM is uninitialized (8 bit default from dpm_cfg0x0 after power on) and
@    host device has 8, 16 or 32 bit data width.
@    {                 |                           |                               |
@                        8 bit DPM                   16 bit DPM                     32 bit DPM
@      byte 0 (D7:0)     byte read this address +0   byte read this address          DWord read this address
@      byte 1 (D15:8)    byte read this address +1   adr_dpm_netx_version_bigend16   adr_dpm_netx_version_bigend16
@      byte 2 (D23:16)   byte read this address +2   byte read this address +2       byte read this address +0
@      byte 3 (D31:24)   byte read this address +3   adr_dpm_netx_version_bigend16   adr_dpm_netx_version_bigend16 }
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dpm_netx_version,	0x000000FC
 .equ Adr_NX56_dpm_dpm_netx_version,	0x1018C0FC
 .equ Adr_NX56_dpm_netx_version    ,	0x1018C0FC

 .equ MSK_NX56_dpm_netx_version_netx_version_byte0,	0x000000ff
 .equ SRT_NX56_dpm_netx_version_netx_version_byte0,	0
 .equ MSK_NX56_dpm_netx_version_netx_version_byte1,	0x0000ff00
 .equ SRT_NX56_dpm_netx_version_netx_version_byte1,	8
 .equ MSK_NX56_dpm_netx_version_netx_version_byte2,	0x00ff0000
 .equ SRT_NX56_dpm_netx_version_netx_version_byte2,	16
 .equ MSK_NX56_dpm_netx_version_netx_version_byte3,	0xff000000
 .equ SRT_NX56_dpm_netx_version_netx_version_byte3,	24


@ =====================================================================
@
@ Area of asic_ctrl
@
@ =====================================================================

 .equ Addr_NX56_asic_ctrl, 0x1018C100

@ ---------------------------------------------------------------------
@ Register io_config
@ => IO Config Register:
@    Selects of output pin multiplexing.
@    See Excel pinning sheet for details.
@    Selects can only be activated, if appropriate bit of io_config_mask is set.
@    Bits will be reset according to the io_config_mask-register if a new mask is correctly written (netX locking algorithm).
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_config      ,	0x00000000
 .equ Adr_NX56_asic_ctrl_io_config,	0x1018C100
 .equ Adr_NX56_io_config          ,	0x1018C100

 .equ MSK_NX56_io_config_sel_xm0_tx        ,	0x00000001
 .equ SRT_NX56_io_config_sel_xm0_tx        ,	0
 .equ MSK_NX56_io_config_sel_xm0_txoe      ,	0x00000002
 .equ SRT_NX56_io_config_sel_xm0_txoe      ,	1
 .equ MSK_NX56_io_config_sel_xm0_eclk      ,	0x00000004
 .equ SRT_NX56_io_config_sel_xm0_eclk      ,	2
 .equ MSK_NX56_io_config_sel_fb0clk_a      ,	0x00000008
 .equ SRT_NX56_io_config_sel_fb0clk_a      ,	3
 .equ MSK_NX56_io_config_sel_fb0clk_b      ,	0x00000010
 .equ SRT_NX56_io_config_sel_fb0clk_b      ,	4
 .equ MSK_NX56_io_config_sel_fo0_a         ,	0x00000020
 .equ SRT_NX56_io_config_sel_fo0_a         ,	5
 .equ MSK_NX56_io_config_sel_fo0_b         ,	0x00000040
 .equ SRT_NX56_io_config_sel_fo0_b         ,	6
 .equ MSK_NX56_io_config_sel_xm1_tx        ,	0x00000080
 .equ SRT_NX56_io_config_sel_xm1_tx        ,	7
 .equ MSK_NX56_io_config_sel_xm1_txoe      ,	0x00000100
 .equ SRT_NX56_io_config_sel_xm1_txoe      ,	8
 .equ MSK_NX56_io_config_sel_xm1_eclk      ,	0x00000200
 .equ SRT_NX56_io_config_sel_xm1_eclk      ,	9
 .equ MSK_NX56_io_config_sel_fb1clk_a      ,	0x00000400
 .equ SRT_NX56_io_config_sel_fb1clk_a      ,	10
 .equ MSK_NX56_io_config_sel_fb1clk_b      ,	0x00000800
 .equ SRT_NX56_io_config_sel_fb1clk_b      ,	11
 .equ MSK_NX56_io_config_sel_fo1_a         ,	0x00001000
 .equ SRT_NX56_io_config_sel_fo1_a         ,	12
 .equ MSK_NX56_io_config_sel_fo1_b         ,	0x00002000
 .equ SRT_NX56_io_config_sel_fo1_b         ,	13
 .equ MSK_NX56_io_config_usb2jtag_en       ,	0x00004000
 .equ SRT_NX56_io_config_usb2jtag_en       ,	14
 .equ MSK_NX56_io_config_mem_d31to16_pio_en,	0x00008000
 .equ SRT_NX56_io_config_mem_d31to16_pio_en,	15

@ ---------------------------------------------------------------------
@ Register io_config_mask
@ => IO Config Mask Register:
@    This register might be used to lock special IO configurations for restricted netX devices. \
@    Any bit of the io_config register can only be set, if the corresponding mask bit in this register is set either.
@    This register is lockable by netX locking algorithm. It will only be reset on Power on, not on normal system nres.
@    The io_config-register will change according to this register if a new mask is correctly written (netX locking algorithm).
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_config_mask      ,	0x00000004
 .equ Adr_NX56_asic_ctrl_io_config_mask,	0x1018C104
 .equ Adr_NX56_io_config_mask          ,	0x1018C104

 .equ MSK_NX56_io_config_mask_sel_xm0_tx        ,	0x00000001
 .equ SRT_NX56_io_config_mask_sel_xm0_tx        ,	0
 .equ MSK_NX56_io_config_mask_sel_xm0_txoe      ,	0x00000002
 .equ SRT_NX56_io_config_mask_sel_xm0_txoe      ,	1
 .equ MSK_NX56_io_config_mask_sel_xm0_eclk      ,	0x00000004
 .equ SRT_NX56_io_config_mask_sel_xm0_eclk      ,	2
 .equ MSK_NX56_io_config_mask_sel_fb0clk_a      ,	0x00000008
 .equ SRT_NX56_io_config_mask_sel_fb0clk_a      ,	3
 .equ MSK_NX56_io_config_mask_sel_fb0clk_b      ,	0x00000010
 .equ SRT_NX56_io_config_mask_sel_fb0clk_b      ,	4
 .equ MSK_NX56_io_config_mask_sel_fo0_a         ,	0x00000020
 .equ SRT_NX56_io_config_mask_sel_fo0_a         ,	5
 .equ MSK_NX56_io_config_mask_sel_fo0_b         ,	0x00000040
 .equ SRT_NX56_io_config_mask_sel_fo0_b         ,	6
 .equ MSK_NX56_io_config_mask_sel_xm1_tx        ,	0x00000080
 .equ SRT_NX56_io_config_mask_sel_xm1_tx        ,	7
 .equ MSK_NX56_io_config_mask_sel_xm1_txoe      ,	0x00000100
 .equ SRT_NX56_io_config_mask_sel_xm1_txoe      ,	8
 .equ MSK_NX56_io_config_mask_sel_xm1_eclk      ,	0x00000200
 .equ SRT_NX56_io_config_mask_sel_xm1_eclk      ,	9
 .equ MSK_NX56_io_config_mask_sel_fb1clk_a      ,	0x00000400
 .equ SRT_NX56_io_config_mask_sel_fb1clk_a      ,	10
 .equ MSK_NX56_io_config_mask_sel_fb1clk_b      ,	0x00000800
 .equ SRT_NX56_io_config_mask_sel_fb1clk_b      ,	11
 .equ MSK_NX56_io_config_mask_sel_fo1_a         ,	0x00001000
 .equ SRT_NX56_io_config_mask_sel_fo1_a         ,	12
 .equ MSK_NX56_io_config_mask_sel_fo1_b         ,	0x00002000
 .equ SRT_NX56_io_config_mask_sel_fo1_b         ,	13
 .equ MSK_NX56_io_config_mask_usb2jtag_en       ,	0x00004000
 .equ SRT_NX56_io_config_mask_usb2jtag_en       ,	14
 .equ MSK_NX56_io_config_mask_mem_d31to16_pio_en,	0x00008000
 .equ SRT_NX56_io_config_mask_mem_d31to16_pio_en,	15

@ ---------------------------------------------------------------------
@ Register io_config2
@ => IO Config2 Register:
@    Selects of output pin multiplexing.
@    See Excel pinning sheet for details.
@    Selects can only be activated, if appropriate bit of io_config2_mask is set.
@    Bits will be reset according to the io_config2_mask-register if a new mask is correctly written (netX locking algorithm).
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@    Note: Selecting MMIO40..47 on HIF IOs:
@      Selecting MMIO40..47 on HIF IOs is done by programming related MMIO to non-PIO function in MMIO_CTRL address area.
@      E.g.: Programming MMIO40 as MMIO-PIO: HIF_D16 will be HIF IO.
@      Programming MMIO40 to non-PIO function (e.g. xm0_io0) will switch HIF_D16 to MMIO (XM0_IO0) function.
@      PIO function of MMIO40..47 is not available via MMIO_CTRL address area. PIO function of related HIF-IOs
@      must be configured inside HIF_IO_CTRL address area.
@    Note:
@      HIF IO configuration must be done inside hif_io_cfg-register (area HIF_IO_CTRL).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_config2      ,	0x00000008
 .equ Adr_NX56_asic_ctrl_io_config2,	0x1018C108
 .equ Adr_NX56_io_config2          ,	0x1018C108

 .equ MSK_NX56_io_config2_sel_iolink0       ,	0x00000001
 .equ SRT_NX56_io_config2_sel_iolink0       ,	0
 .equ MSK_NX56_io_config2_sel_iolink1       ,	0x00000002
 .equ SRT_NX56_io_config2_sel_iolink1       ,	1
 .equ MSK_NX56_io_config2_sel_iolink2       ,	0x00000004
 .equ SRT_NX56_io_config2_sel_iolink2       ,	2
 .equ MSK_NX56_io_config2_sel_iolink3       ,	0x00000008
 .equ SRT_NX56_io_config2_sel_iolink3       ,	3
 .equ MSK_NX56_io_config2_sel_iolink4       ,	0x00000010
 .equ SRT_NX56_io_config2_sel_iolink4       ,	4
 .equ MSK_NX56_io_config2_sel_iolink5       ,	0x00000020
 .equ SRT_NX56_io_config2_sel_iolink5       ,	5
 .equ MSK_NX56_io_config2_sel_iolink6       ,	0x00000040
 .equ SRT_NX56_io_config2_sel_iolink6       ,	6
 .equ MSK_NX56_io_config2_sel_iolink7       ,	0x00000080
 .equ SRT_NX56_io_config2_sel_iolink7       ,	7
 .equ MSK_NX56_io_config2_sel_xm0_mii       ,	0x00000700
 .equ SRT_NX56_io_config2_sel_xm0_mii       ,	8
 .equ MSK_NX56_io_config2_sel_xm1_mii       ,	0x00003800
 .equ SRT_NX56_io_config2_sel_xm1_mii       ,	11
 .equ MSK_NX56_io_config2_sel_eth_mii       ,	0x0007c000
 .equ SRT_NX56_io_config2_sel_eth_mii       ,	14
 .equ MSK_NX56_io_config2_sel_phy_devel     ,	0x00080000
 .equ SRT_NX56_io_config2_sel_phy_devel     ,	19
 .equ MSK_NX56_io_config2_nsel_clkout_mmio48,	0x00100000
 .equ SRT_NX56_io_config2_nsel_clkout_mmio48,	20
 .equ MSK_NX56_io_config2_sel_i2c_mmio      ,	0x00200000
 .equ SRT_NX56_io_config2_sel_i2c_mmio      ,	21
 .equ MSK_NX56_io_config2_sel_etm           ,	0x00400000
 .equ SRT_NX56_io_config2_sel_etm           ,	22
 .equ MSK_NX56_io_config2_sel_sqi           ,	0x00800000
 .equ SRT_NX56_io_config2_sel_sqi           ,	23

@ ---------------------------------------------------------------------
@ Register io_config2_mask
@ => IO Config2 Mask Register:
@    This register might be used to lock special IO configurations for restricted netX devices. \
@    Any bit of the io_config2 register can only be set, if the corresponding mask bit in this register is set either.
@    This register is lockable by netX locking algorithm. It will only be reset on Power on, not on normal system nres.
@    The io_config-register will change according to this register if a new mask is correctly written (netX locking algorithm).
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@    Note: Selecting MMIO40..47 on HIF IOs:
@      Selecting MMIO40..47 on HIF IOs is done by programming related MMIO to non-PIO function in MMIO_CTRL address area.
@      E.g.: Programming MMIO40 as MMIO-PIO: HIF_D16 will be HIF IO.
@      Programming MMIO40 to non-PIO function (e.g. xm0_io0) will switch HIF_D16 to MMIO (XM0_IO0) function.
@      PIO function of MMIO40..47 is not available via MMIO_CTRL address area. PIO function of related HIF-IOs
@      must be configured inside HIF_IO_CTRL address area.
@    Note:
@      HIF IO configuration must be done inside hif_io_cfg-register (area HIF_IO_CTRL).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_io_config2_mask      ,	0x0000000C
 .equ Adr_NX56_asic_ctrl_io_config2_mask,	0x1018C10C
 .equ Adr_NX56_io_config2_mask          ,	0x1018C10C

 .equ MSK_NX56_io_config2_mask_sel_iolink0       ,	0x00000001
 .equ SRT_NX56_io_config2_mask_sel_iolink0       ,	0
 .equ MSK_NX56_io_config2_mask_sel_iolink1       ,	0x00000002
 .equ SRT_NX56_io_config2_mask_sel_iolink1       ,	1
 .equ MSK_NX56_io_config2_mask_sel_iolink2       ,	0x00000004
 .equ SRT_NX56_io_config2_mask_sel_iolink2       ,	2
 .equ MSK_NX56_io_config2_mask_sel_iolink3       ,	0x00000008
 .equ SRT_NX56_io_config2_mask_sel_iolink3       ,	3
 .equ MSK_NX56_io_config2_mask_sel_iolink4       ,	0x00000010
 .equ SRT_NX56_io_config2_mask_sel_iolink4       ,	4
 .equ MSK_NX56_io_config2_mask_sel_iolink5       ,	0x00000020
 .equ SRT_NX56_io_config2_mask_sel_iolink5       ,	5
 .equ MSK_NX56_io_config2_mask_sel_iolink6       ,	0x00000040
 .equ SRT_NX56_io_config2_mask_sel_iolink6       ,	6
 .equ MSK_NX56_io_config2_mask_sel_iolink7       ,	0x00000080
 .equ SRT_NX56_io_config2_mask_sel_iolink7       ,	7
 .equ MSK_NX56_io_config2_mask_sel_xm0_mii       ,	0x00000700
 .equ SRT_NX56_io_config2_mask_sel_xm0_mii       ,	8
 .equ MSK_NX56_io_config2_mask_sel_xm1_mii       ,	0x00003800
 .equ SRT_NX56_io_config2_mask_sel_xm1_mii       ,	11
 .equ MSK_NX56_io_config2_mask_sel_eth_mii       ,	0x0007c000
 .equ SRT_NX56_io_config2_mask_sel_eth_mii       ,	14
 .equ MSK_NX56_io_config2_mask_sel_phy_devel     ,	0x00080000
 .equ SRT_NX56_io_config2_mask_sel_phy_devel     ,	19
 .equ MSK_NX56_io_config2_mask_nsel_clkout_mmio48,	0x00100000
 .equ SRT_NX56_io_config2_mask_nsel_clkout_mmio48,	20
 .equ MSK_NX56_io_config2_mask_sel_i2c_mmio      ,	0x00200000
 .equ SRT_NX56_io_config2_mask_sel_i2c_mmio      ,	21
 .equ MSK_NX56_io_config2_mask_sel_etm           ,	0x00400000
 .equ SRT_NX56_io_config2_mask_sel_etm           ,	22
 .equ MSK_NX56_io_config2_mask_sel_sqi           ,	0x00800000
 .equ SRT_NX56_io_config2_mask_sel_sqi           ,	23

@ ---------------------------------------------------------------------
@ Register reset_ctrl
@ => Reset Control Register:
@    This register controls the reset functions of the netX chip and indicates the reset state. The reset state
@    shows which resets have occurred, allowing the firmware to detect which resets were active. In order to
@    determine the source of the last reset, the firmware should evaluate and reset these bits during its start
@    sequence. After a power on reset, the RESET_CTRL register is cleared completely.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_reset_ctrl      ,	0x00000010
 .equ Adr_NX56_asic_ctrl_reset_ctrl,	0x1018C110
 .equ Adr_NX56_reset_ctrl          ,	0x1018C110

 .equ MSK_NX56_reset_ctrl_RES_IN          ,	0x00000001
 .equ SRT_NX56_reset_ctrl_RES_IN          ,	0
 .equ MSK_NX56_reset_ctrl_RES_WDOG        ,	0x00000002
 .equ SRT_NX56_reset_ctrl_RES_WDOG        ,	1
 .equ MSK_NX56_reset_ctrl_RES_HOST        ,	0x00000004
 .equ SRT_NX56_reset_ctrl_RES_HOST        ,	2
 .equ MSK_NX56_reset_ctrl_RES_FIRMWARE    ,	0x00000008
 .equ SRT_NX56_reset_ctrl_RES_FIRMWARE    ,	3
 .equ MSK_NX56_reset_ctrl_FIRMWARE_STATUS0,	0x00100000
 .equ SRT_NX56_reset_ctrl_FIRMWARE_STATUS0,	20
 .equ MSK_NX56_reset_ctrl_FIRMWARE_STATUS1,	0x00200000
 .equ SRT_NX56_reset_ctrl_FIRMWARE_STATUS1,	21
 .equ MSK_NX56_reset_ctrl_FIRMWARE_STATUS2,	0x00400000
 .equ SRT_NX56_reset_ctrl_FIRMWARE_STATUS2,	22
 .equ MSK_NX56_reset_ctrl_FIRMWARE_STATUS3,	0x00800000
 .equ SRT_NX56_reset_ctrl_FIRMWARE_STATUS3,	23
 .equ MSK_NX56_reset_ctrl_RES_REQ_FIRMWARE,	0x01000000
 .equ SRT_NX56_reset_ctrl_RES_REQ_FIRMWARE,	24
 .equ MSK_NX56_reset_ctrl_RES_REQ_OUT     ,	0x02000000
 .equ SRT_NX56_reset_ctrl_RES_REQ_OUT     ,	25
 .equ MSK_NX56_reset_ctrl_EN_RES_REQ_OUT  ,	0x04000000
 .equ SRT_NX56_reset_ctrl_EN_RES_REQ_OUT  ,	26

@ ---------------------------------------------------------------------
@ Register phy_control
@ => PHY Control Register:
@    This register contains all static connectors of the NEC Ethernet PHY.
@    Usually the PHY reads these values only during reset, which can be controlled by Bit31.
@    This register is NOT protected by the netX access-key mechanism.
@    In total the programming sequence should be:
@    a: write new value with bit phy_reset=1
@    b: wait for proper reset of PHY(~100us)
@    c: write new value with bit phy_reset=0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_phy_control      ,	0x00000014
 .equ Adr_NX56_asic_ctrl_phy_control,	0x1018C114
 .equ Adr_NX56_phy_control          ,	0x1018C114

 .equ MSK_NX56_phy_control_phy0_mode       ,	0x0000000f
 .equ SRT_NX56_phy_control_phy0_mode       ,	0
 .equ MSK_NX56_phy_control_phy0_fxmode     ,	0x00000010
 .equ SRT_NX56_phy_control_phy0_fxmode     ,	4
 .equ MSK_NX56_phy_control_phy0_automdix   ,	0x00000020
 .equ SRT_NX56_phy_control_phy0_automdix   ,	5
 .equ MSK_NX56_phy_control_phy0_enable     ,	0x00000200
 .equ SRT_NX56_phy_control_phy0_enable     ,	9
 .equ MSK_NX56_phy_control_phy1_mode       ,	0x0000f000
 .equ SRT_NX56_phy_control_phy1_mode       ,	12
 .equ MSK_NX56_phy_control_phy1_fxmode     ,	0x00010000
 .equ SRT_NX56_phy_control_phy1_fxmode     ,	16
 .equ MSK_NX56_phy_control_phy1_automdix   ,	0x00020000
 .equ SRT_NX56_phy_control_phy1_automdix   ,	17
 .equ MSK_NX56_phy_control_phy1_enable     ,	0x00200000
 .equ SRT_NX56_phy_control_phy1_enable     ,	21
 .equ MSK_NX56_phy_control_phy_address     ,	0x0f000000
 .equ SRT_NX56_phy_control_phy_address     ,	24
 .equ MSK_NX56_phy_control_phy_inv_fo_fn_en,	0x20000000
 .equ SRT_NX56_phy_control_phy_inv_fo_fn_en,	29
 .equ MSK_NX56_phy_control_phy_sim_byp     ,	0x40000000
 .equ SRT_NX56_phy_control_phy_sim_byp     ,	30
 .equ MSK_NX56_phy_control_phy_reset       ,	0x80000000
 .equ SRT_NX56_phy_control_phy_reset       ,	31

@ ---------------------------------------------------------------------
@ Register armclk_rate_mul_add
@ => Rate Multiplier Add Value of System Clock:
@    This register might be used to change internal system frequency (100MHz of ARM and system).
@    Be careful when changing this value, as proper netX functionality is only qualified for the default value.
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_armclk_rate_mul_add      ,	0x00000018
 .equ Adr_NX56_asic_ctrl_armclk_rate_mul_add,	0x1018C118
 .equ Adr_NX56_armclk_rate_mul_add          ,	0x1018C118

 .equ MSK_NX56_armclk_rate_mul_add_armclk_rate_mul_add,	0x000001ff
 .equ SRT_NX56_armclk_rate_mul_add_armclk_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register usb12clk_rate_mul_add
@ => Rate Multiplier Add Value of 12MHz USB clock:
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb12clk_rate_mul_add      ,	0x0000001C
 .equ Adr_NX56_asic_ctrl_usb12clk_rate_mul_add,	0x1018C11C
 .equ Adr_NX56_usb12clk_rate_mul_add          ,	0x1018C11C

 .equ MSK_NX56_usb12clk_rate_mul_add_usb12clk_rate_mul_add,	0x0000ffff
 .equ SRT_NX56_usb12clk_rate_mul_add_usb12clk_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register fb0clk_rate_mul_add
@ => Rate Multiplier Add Value:
@    Fieldbus0 clock is generated by internal 400MHz rate multiplier. \
@    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \
@    xMAC fieldbus outputs (xm0_tx_out, xm0_tx_oe) can optionally (io_config-sel_xm0_eclk) be sampled by an extra register running on this clock,
@    resulting in jitter less fieldbus outputs.
@    Alternatively to this internally generated clock, an external clock (xm0_eclk) can be used to make xMAC outputs jitter free (clock_enable-fb0). \
@    Using external clocks to resample xMAC outputs requires modified xMAC software.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@    ------------------------------------
@    netX100/netX500 usage of this address: adcclk_rate_mul_add
@    ------------------------------------
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fb0clk_rate_mul_add      ,	0x00000020
 .equ Adr_NX56_asic_ctrl_fb0clk_rate_mul_add,	0x1018C120
 .equ Adr_NX56_fb0clk_rate_mul_add          ,	0x1018C120

 .equ MSK_NX56_fb0clk_rate_mul_add_fb0clk_rate_mul_add,	0xffffffff
 .equ SRT_NX56_fb0clk_rate_mul_add_fb0clk_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register fb0clk_div
@ => Rate Multiplier Predivider:
@    Fieldbus0 clock is generated from internal 400MHz by a predivider combined with a rate multiplier. \
@    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \
@    xMAC fieldbus output (xm0_tx_out) can optionally (io_config-sel_xm0_eclk) be sampled by an extra register running on this clock,
@    resulting in jitter less fieldbus outputs.
@    Alternatively to this internally generated clock, an external clock (xm0_eclk) can be used to make xMAC output jitter free (clock_enable-fb0). \
@    Using external clocks to resample xMAC outputs requires modified xMAC software.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fb0clk_div      ,	0x00000024
 .equ Adr_NX56_asic_ctrl_fb0clk_div,	0x1018C124
 .equ Adr_NX56_fb0clk_div          ,	0x1018C124

 .equ MSK_NX56_fb0clk_div_val,	0x000000ff
 .equ SRT_NX56_fb0clk_div_val,	0

@ ---------------------------------------------------------------------
@ Register fb1clk_rate_mul_add
@ => Rate Multiplier Add Value:
@    Fieldbus0 clock is generated by internal 400MHz rate multiplier. \
@    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \
@    xMAC fieldbus outputs (xm1_tx_out, xm1_tx_oe) can optionally (io_config-sel_xm1_eclk) be sampled by an extra register running on this clock,
@    resulting in jitter less fieldbus outputs.
@    Alternatively to this internally generated clock, an external clock (xm1_eclk) can be used to make xMAC outputs jitter free (clock_enable-fb1). \
@    Using external clocks to resample xMAC outputs requires modified xMAC software.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fb1clk_rate_mul_add      ,	0x00000028
 .equ Adr_NX56_asic_ctrl_fb1clk_rate_mul_add,	0x1018C128
 .equ Adr_NX56_fb1clk_rate_mul_add          ,	0x1018C128

 .equ MSK_NX56_fb1clk_rate_mul_add_fb1clk_rate_mul_add,	0xffffffff
 .equ SRT_NX56_fb1clk_rate_mul_add_fb1clk_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register fb1clk_div
@ => Rate Multiplier Predivider:
@    Fieldbus1 clock is generated from internal 400MHz by a predivider combined with a rate multiplier. \
@    At some fieldbus-frequencies, this clock has less jitter, than the xMAC generated output clock. \
@    xMAC fieldbus output (xm1_tx_out) can optionally (io_config-sel_xm1_eclk) be sampled by an extra register running on this clock,
@    resulting in jitter less fieldbus outputs.
@    Alternatively to this internally generated clock, an external clock (xm1_eclk) can be used to make xMAC output jitter free (clock_enable-fb1). \
@    Using external clocks to resample xMAC outputs requires modified xMAC software.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_fb1clk_div      ,	0x0000002C
 .equ Adr_NX56_asic_ctrl_fb1clk_div,	0x1018C12C
 .equ Adr_NX56_fb1clk_div          ,	0x1018C12C

 .equ MSK_NX56_fb1clk_div_val,	0x000000ff
 .equ SRT_NX56_fb1clk_div_val,	0

@ ---------------------------------------------------------------------
@ Register clkout_rate_mul_add
@ => Rate Multiplier Add Value:
@    Clkout clock is generated by internal 400MHz rate multiplier. \
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_clkout_rate_mul_add      ,	0x00000030
 .equ Adr_NX56_asic_ctrl_clkout_rate_mul_add,	0x1018C130
 .equ Adr_NX56_clkout_rate_mul_add          ,	0x1018C130

 .equ MSK_NX56_clkout_rate_mul_add_clkout_rate_mul_add,	0xffffffff
 .equ SRT_NX56_clkout_rate_mul_add_clkout_rate_mul_add,	0

@ ---------------------------------------------------------------------
@ Register clkout_div
@ => Rate Multiplier Predivider:
@    Clkout clock is generated from internal 400MHz by a predivider combined with a rate multiplier.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out Locking access-key
@    2.: write back Locking access-key
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_clkout_div      ,	0x00000034
 .equ Adr_NX56_asic_ctrl_clkout_div,	0x1018C134
 .equ Adr_NX56_clkout_div          ,	0x1018C134

 .equ MSK_NX56_clkout_div_val,	0x000000ff
 .equ SRT_NX56_clkout_div_val,	0

@ ---------------------------------------------------------------------
@ Register clock_enable
@ => Global Clock Enable Register:
@    Use this registers to disable modules completely for power saving purposes.
@    Changes will only have effect if according bit in clock_enable_mask-register is set. \
@    Bits will be reset according to the clock_enable_mask-register register, if a new mask is correctly written (netX locking algorithm).
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    Note: for low power consumption at power on, all switchable clocks are disabled after reset and mus be enabled before module usage.
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_clock_enable      ,	0x00000038
 .equ Adr_NX56_asic_ctrl_clock_enable,	0x1018C138
 .equ Adr_NX56_clock_enable          ,	0x1018C138

 .equ MSK_NX56_clock_enable_rpec0  ,	0x00000001
 .equ SRT_NX56_clock_enable_rpec0  ,	0
 .equ MSK_NX56_clock_enable_rpec1  ,	0x00000002
 .equ SRT_NX56_clock_enable_rpec1  ,	1
 .equ MSK_NX56_clock_enable_tpec0  ,	0x00000010
 .equ SRT_NX56_clock_enable_tpec0  ,	4
 .equ MSK_NX56_clock_enable_tpec1  ,	0x00000020
 .equ SRT_NX56_clock_enable_tpec1  ,	5
 .equ MSK_NX56_clock_enable_xmac0  ,	0x00000100
 .equ SRT_NX56_clock_enable_xmac0  ,	8
 .equ MSK_NX56_clock_enable_xmac1  ,	0x00000200
 .equ SRT_NX56_clock_enable_xmac1  ,	9
 .equ MSK_NX56_clock_enable_fb0    ,	0x00001000
 .equ SRT_NX56_clock_enable_fb0    ,	12
 .equ MSK_NX56_clock_enable_fb1    ,	0x00002000
 .equ SRT_NX56_clock_enable_fb1    ,	13
 .equ MSK_NX56_clock_enable_xc_misc,	0x00010000
 .equ SRT_NX56_clock_enable_xc_misc,	16
 .equ MSK_NX56_clock_enable_xpic   ,	0x00020000
 .equ SRT_NX56_clock_enable_xpic   ,	17
 .equ MSK_NX56_clock_enable_dma    ,	0x00040000
 .equ SRT_NX56_clock_enable_dma    ,	18
 .equ MSK_NX56_clock_enable_dpm    ,	0x00080000
 .equ SRT_NX56_clock_enable_dpm    ,	19

@ ---------------------------------------------------------------------
@ Register clock_enable_mask
@ => Global Clock Enable Mask Register:
@    allows to disable modules for different netX-versions
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    The clock_enable-register will change according to this register if a new mask is correctly written (netX locking algorithm).
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_clock_enable_mask      ,	0x0000003C
 .equ Adr_NX56_asic_ctrl_clock_enable_mask,	0x1018C13C
 .equ Adr_NX56_clock_enable_mask          ,	0x1018C13C

 .equ MSK_NX56_clock_enable_mask_rpec0  ,	0x00000001
 .equ SRT_NX56_clock_enable_mask_rpec0  ,	0
 .equ MSK_NX56_clock_enable_mask_rpec1  ,	0x00000002
 .equ SRT_NX56_clock_enable_mask_rpec1  ,	1
 .equ MSK_NX56_clock_enable_mask_tpec0  ,	0x00000010
 .equ SRT_NX56_clock_enable_mask_tpec0  ,	4
 .equ MSK_NX56_clock_enable_mask_tpec1  ,	0x00000020
 .equ SRT_NX56_clock_enable_mask_tpec1  ,	5
 .equ MSK_NX56_clock_enable_mask_xmac0  ,	0x00000100
 .equ SRT_NX56_clock_enable_mask_xmac0  ,	8
 .equ MSK_NX56_clock_enable_mask_xmac1  ,	0x00000200
 .equ SRT_NX56_clock_enable_mask_xmac1  ,	9
 .equ MSK_NX56_clock_enable_mask_fb0    ,	0x00001000
 .equ SRT_NX56_clock_enable_mask_fb0    ,	12
 .equ MSK_NX56_clock_enable_mask_fb1    ,	0x00002000
 .equ SRT_NX56_clock_enable_mask_fb1    ,	13
 .equ MSK_NX56_clock_enable_mask_xc_misc,	0x00010000
 .equ SRT_NX56_clock_enable_mask_xc_misc,	16
 .equ MSK_NX56_clock_enable_mask_xpic   ,	0x00020000
 .equ SRT_NX56_clock_enable_mask_xpic   ,	17
 .equ MSK_NX56_clock_enable_mask_dma    ,	0x00040000
 .equ SRT_NX56_clock_enable_mask_dma    ,	18
 .equ MSK_NX56_clock_enable_mask_dpm    ,	0x00080000
 .equ SRT_NX56_clock_enable_mask_dpm    ,	19

@ ---------------------------------------------------------------------
@ Register misc_asic_ctrl
@ => Miscellaneous ASIC Control Register:
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_misc_asic_ctrl      ,	0x00000040
 .equ Adr_NX56_asic_ctrl_misc_asic_ctrl,	0x1018C140
 .equ Adr_NX56_misc_asic_ctrl          ,	0x1018C140

 .equ MSK_NX56_misc_asic_ctrl_arm_dbgen       ,	0x00000001
 .equ SRT_NX56_misc_asic_ctrl_arm_dbgen       ,	0
 .equ MSK_NX56_misc_asic_ctrl_sysdebug_ir     ,	0x000000f0
 .equ SRT_NX56_misc_asic_ctrl_sysdebug_ir     ,	4
 .equ MSK_NX56_misc_asic_ctrl_lic_err_taint_en,	0x00000100
 .equ SRT_NX56_misc_asic_ctrl_lic_err_taint_en,	8
 .equ MSK_NX56_misc_asic_ctrl_lic_err_abort_en,	0x00000200
 .equ SRT_NX56_misc_asic_ctrl_lic_err_abort_en,	9
 .equ MSK_NX56_misc_asic_ctrl_lic_err_irq_en  ,	0x00000400
 .equ SRT_NX56_misc_asic_ctrl_lic_err_irq_en  ,	10
 .equ MSK_NX56_misc_asic_ctrl_lic_err_delay_en,	0x00000800
 .equ SRT_NX56_misc_asic_ctrl_lic_err_delay_en,	11
 .equ MSK_NX56_misc_asic_ctrl_netx50_io_comp  ,	0x80000000
 .equ SRT_NX56_misc_asic_ctrl_netx50_io_comp  ,	31

@ ---------------------------------------------------------------------
@ Register only_porn
@ => Firmware Status register:
@    This register is not Reset by SW resets, only PORn will reset this register.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_only_porn      ,	0x00000044
 .equ Adr_NX56_asic_ctrl_only_porn,	0x1018C144
 .equ Adr_NX56_only_porn          ,	0x1018C144

 .equ MSK_NX56_only_porn_only_porn,	0xffffffff
 .equ SRT_NX56_only_porn_only_porn,	0

@ ---------------------------------------------------------------------
@ Register netx_version
@ => netX Revision Register:
@    This register contains information about netX hardware and bootloader revision.
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_version      ,	0x00000048
 .equ Adr_NX56_asic_ctrl_netx_version,	0x1018C148
 .equ Adr_NX56_netx_version          ,	0x1018C148

 .equ MSK_NX56_netx_version_netx_version,	0x000000ff
 .equ SRT_NX56_netx_version_netx_version,	0

@ ---------------------------------------------------------------------
@ Register rom_wdg
@ => netX ROM Watchdog:
@    Write to this register to reset rom-hide-watchdog, no access-key-protection.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_rom_wdg      ,	0x0000004C
 .equ Adr_NX56_asic_ctrl_rom_wdg,	0x1018C14C
 .equ Adr_NX56_rom_wdg          ,	0x1018C14C

 .equ MSK_NX56_rom_wdg_rst_wdg,	0xffffffff
 .equ SRT_NX56_rom_wdg_rst_wdg,	0

@ ---------------------------------------------------------------------
@ Register sample_at_nres
@ => IO Sampled at Reset Status Register.
@    Note:
@       Configure sample_at_nres (sar_*)-IOs with pullups or down resistors to configure netX
@       environment (e.g. DPM enable, DPM serial mode selection,...). Related IOs are not driven by netX
@       by default. For correct functionality ensure that they are also not driven by external devices during
@       netX power up and reset.
@    Note:
@       MI data lines are not used for sample at nres: When reset is done during
@       SDRAM read access, SDRAM device will keep driving data bus. Pull-up/down values will be overdriven by that.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sample_at_nres      ,	0x00000050
 .equ Adr_NX56_asic_ctrl_sample_at_nres,	0x1018C150
 .equ Adr_NX56_sample_at_nres          ,	0x1018C150

 .equ MSK_NX56_sample_at_nres_sar_mem_a0     ,	0x00000001
 .equ SRT_NX56_sample_at_nres_sar_mem_a0     ,	0
 .equ MSK_NX56_sample_at_nres_sar_mem_a1     ,	0x00000002
 .equ SRT_NX56_sample_at_nres_sar_mem_a1     ,	1
 .equ MSK_NX56_sample_at_nres_sar_mem_a2     ,	0x00000004
 .equ SRT_NX56_sample_at_nres_sar_mem_a2     ,	2
 .equ MSK_NX56_sample_at_nres_sar_mem_a3     ,	0x00000008
 .equ SRT_NX56_sample_at_nres_sar_mem_a3     ,	3
 .equ MSK_NX56_sample_at_nres_sar_mem_a4     ,	0x00000010
 .equ SRT_NX56_sample_at_nres_sar_mem_a4     ,	4
 .equ MSK_NX56_sample_at_nres_sar_mem_a5     ,	0x00000020
 .equ SRT_NX56_sample_at_nres_sar_mem_a5     ,	5
 .equ MSK_NX56_sample_at_nres_sar_mem_a6     ,	0x00000040
 .equ SRT_NX56_sample_at_nres_sar_mem_a6     ,	6
 .equ MSK_NX56_sample_at_nres_sar_mem_a7     ,	0x00000080
 .equ SRT_NX56_sample_at_nres_sar_mem_a7     ,	7
 .equ MSK_NX56_sample_at_nres_sar_mem_a8     ,	0x00000100
 .equ SRT_NX56_sample_at_nres_sar_mem_a8     ,	8
 .equ MSK_NX56_sample_at_nres_sar_mem_a9     ,	0x00000200
 .equ SRT_NX56_sample_at_nres_sar_mem_a9     ,	9
 .equ MSK_NX56_sample_at_nres_sar_mem_a10    ,	0x00000400
 .equ SRT_NX56_sample_at_nres_sar_mem_a10    ,	10
 .equ MSK_NX56_sample_at_nres_sar_mem_a11    ,	0x00000800
 .equ SRT_NX56_sample_at_nres_sar_mem_a11    ,	11
 .equ MSK_NX56_sample_at_nres_sar_mem_a12    ,	0x00001000
 .equ SRT_NX56_sample_at_nres_sar_mem_a12    ,	12
 .equ MSK_NX56_sample_at_nres_sar_mem_a13    ,	0x00002000
 .equ SRT_NX56_sample_at_nres_sar_mem_a13    ,	13
 .equ MSK_NX56_sample_at_nres_sar_mem_a14    ,	0x00004000
 .equ SRT_NX56_sample_at_nres_sar_mem_a14    ,	14
 .equ MSK_NX56_sample_at_nres_sar_mem_a15    ,	0x00008000
 .equ SRT_NX56_sample_at_nres_sar_mem_a15    ,	15
 .equ MSK_NX56_sample_at_nres_sar_mem_a16    ,	0x00010000
 .equ SRT_NX56_sample_at_nres_sar_mem_a16    ,	16
 .equ MSK_NX56_sample_at_nres_sar_mem_a17    ,	0x00020000
 .equ SRT_NX56_sample_at_nres_sar_mem_a17    ,	17
 .equ MSK_NX56_sample_at_nres_sar_mem_a18    ,	0x00040000
 .equ SRT_NX56_sample_at_nres_sar_mem_a18    ,	18
 .equ MSK_NX56_sample_at_nres_sar_mem_a19    ,	0x00080000
 .equ SRT_NX56_sample_at_nres_sar_mem_a19    ,	19
 .equ MSK_NX56_sample_at_nres_sar_mem_a20    ,	0x00100000
 .equ SRT_NX56_sample_at_nres_sar_mem_a20    ,	20
 .equ MSK_NX56_sample_at_nres_sar_mem_a21    ,	0x00200000
 .equ SRT_NX56_sample_at_nres_sar_mem_a21    ,	21
 .equ MSK_NX56_sample_at_nres_sar_mem_a22    ,	0x00400000
 .equ SRT_NX56_sample_at_nres_sar_mem_a22    ,	22
 .equ MSK_NX56_sample_at_nres_sar_mem_a23    ,	0x00800000
 .equ SRT_NX56_sample_at_nres_sar_mem_a23    ,	23
 .equ MSK_NX56_sample_at_nres_sar_mem_dqm0   ,	0x01000000
 .equ SRT_NX56_sample_at_nres_sar_mem_dqm0   ,	24
 .equ MSK_NX56_sample_at_nres_sar_mem_dqm1   ,	0x02000000
 .equ SRT_NX56_sample_at_nres_sar_mem_dqm1   ,	25
 .equ MSK_NX56_sample_at_nres_sar_mem_dqm2   ,	0x04000000
 .equ SRT_NX56_sample_at_nres_sar_mem_dqm2   ,	26
 .equ MSK_NX56_sample_at_nres_sar_mem_dqm3   ,	0x08000000
 .equ SRT_NX56_sample_at_nres_sar_mem_dqm3   ,	27
 .equ MSK_NX56_sample_at_nres_sar_mem_sdwe_n ,	0x10000000
 .equ SRT_NX56_sample_at_nres_sar_mem_sdwe_n ,	28
 .equ MSK_NX56_sample_at_nres_sar_mem_sdras_n,	0x20000000
 .equ SRT_NX56_sample_at_nres_sar_mem_sdras_n,	29
 .equ MSK_NX56_sample_at_nres_sar_mem_sdcas_n,	0x40000000
 .equ SRT_NX56_sample_at_nres_sar_mem_sdcas_n,	30
 .equ MSK_NX56_sample_at_nres_sar_mem_sdcke  ,	0x80000000
 .equ SRT_NX56_sample_at_nres_sar_mem_sdcke  ,	31

@ ---------------------------------------------------------------------
@ Register netx_status
@ => netX System Status Configuration Register.
@    This Register was implemented in Hilscher HIF module originally.
@    From Hilscher Program Reference Guide: The general status of a netX based system is usually indicated by the System LED, which can either
@    consist of a dual LED or two single LEDs.
@    Access to this register is not protected by any locking or access protection algorithm.
@    IMPORTANT: netX50/100/500 Change Note:
@       The netX50/100/500 SYS_STA register was byte acessible. This changed: This register is only 32bit accessible.
@       In netx50/100/500, write access to bits 0..15 of SYS_STA register can generated an IRQ to external host CPU.
@       As the register now is 32bit accessible only, this is changed to whole register access. I.e. any write
@       access to this register will generate an host IRQ if enabled. To change the upper 16 bits of this register without
@       host IRQ generation, use register rdy_run_cfg.
@    Note:
@       Changing bits here will also change rdy_run_cfg register bits.
@    Note:
@       Bits 0..3 and 8..15 are read-only-mirrored to DPM/Host Status register dpm_sys_sta (DPM_HOST_SYS_STAT) (Area DPM).
@       Read-only bits 4..7 can be programmed by DPM/Host Status register dpm_sys_sta (DPM_HOST_SYS_STAT) (Area DPM).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_status      ,	0x00000054
 .equ Adr_NX56_asic_ctrl_netx_status,	0x1018C154
 .equ Adr_NX56_netx_status          ,	0x1018C154

 .equ MSK_NX56_netx_status_RDY          ,	0x00000001
 .equ SRT_NX56_netx_status_RDY          ,	0
 .equ MSK_NX56_netx_status_RUN          ,	0x00000002
 .equ SRT_NX56_netx_status_RUN          ,	1
 .equ MSK_NX56_netx_status_NETX_STATE   ,	0x0000000c
 .equ SRT_NX56_netx_status_NETX_STATE   ,	2
 .equ MSK_NX56_netx_status_HOST_STATE_ro,	0x000000f0
 .equ SRT_NX56_netx_status_HOST_STATE_ro,	4
 .equ MSK_NX56_netx_status_NETX_STA_CODE,	0x0000ff00
 .equ SRT_NX56_netx_status_NETX_STA_CODE,	8
 .equ MSK_NX56_netx_status_RDY_IN       ,	0x00010000
 .equ SRT_NX56_netx_status_RDY_IN       ,	16
 .equ MSK_NX56_netx_status_RUN_IN       ,	0x00020000
 .equ SRT_NX56_netx_status_RUN_IN       ,	17
 .equ MSK_NX56_netx_status_RDY_POL      ,	0x00040000
 .equ SRT_NX56_netx_status_RDY_POL      ,	18
 .equ MSK_NX56_netx_status_RUN_POL      ,	0x00080000
 .equ SRT_NX56_netx_status_RUN_POL      ,	19
 .equ MSK_NX56_netx_status_RDY_DRV      ,	0x01000000
 .equ SRT_NX56_netx_status_RDY_DRV      ,	24
 .equ MSK_NX56_netx_status_RUN_DRV      ,	0x02000000
 .equ SRT_NX56_netx_status_RUN_DRV      ,	25

@ ---------------------------------------------------------------------
@ Register rdy_run_cfg
@ => netX RDY/RUN IO System Status Configuration Register.
@    RDY/RUN signal programming was implemented in Hilscher HIF module originally.
@    From Hilscher Program Reference Guide: The general status of a netX based system is usually indicated by the System LED, which can either
@    consist of a dual LED or two single LEDs.
@    Access to this register is not protected by any locking or access protection algorithm.
@    Note:
@       Use this register to change the upper 16 bits of sys_sta (SYS_STA) register witout
@       host IRQ generation. For further information see sys_sta register description. Changing bits here
@       will also change sys_sta register bits, however no host IRQ will be generated.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_rdy_run_cfg      ,	0x00000058
 .equ Adr_NX56_asic_ctrl_rdy_run_cfg,	0x1018C158
 .equ Adr_NX56_rdy_run_cfg          ,	0x1018C158

 .equ MSK_NX56_rdy_run_cfg_RDY    ,	0x00000001
 .equ SRT_NX56_rdy_run_cfg_RDY    ,	0
 .equ MSK_NX56_rdy_run_cfg_RUN    ,	0x00000002
 .equ SRT_NX56_rdy_run_cfg_RUN    ,	1
 .equ MSK_NX56_rdy_run_cfg_RDY_IN ,	0x00010000
 .equ SRT_NX56_rdy_run_cfg_RDY_IN ,	16
 .equ MSK_NX56_rdy_run_cfg_RUN_IN ,	0x00020000
 .equ SRT_NX56_rdy_run_cfg_RUN_IN ,	17
 .equ MSK_NX56_rdy_run_cfg_RDY_POL,	0x00040000
 .equ SRT_NX56_rdy_run_cfg_RDY_POL,	18
 .equ MSK_NX56_rdy_run_cfg_RUN_POL,	0x00080000
 .equ SRT_NX56_rdy_run_cfg_RUN_POL,	19
 .equ MSK_NX56_rdy_run_cfg_RDY_DRV,	0x01000000
 .equ SRT_NX56_rdy_run_cfg_RDY_DRV,	24
 .equ MSK_NX56_rdy_run_cfg_RUN_DRV,	0x02000000
 .equ SRT_NX56_rdy_run_cfg_RUN_DRV,	25

@ ---------------------------------------------------------------------
@ Register system_status
@ => netX System Status Register.
@    This register provides information of special netX system events, e.g: System related interrupt activity, Abort activity.
@    Abort status flag can be cleared by writing a '1' to the according bits.
@    IRQ status flags can be cleared by writing a '1' to the according bits.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_system_status      ,	0x0000005C
 .equ Adr_NX56_asic_ctrl_system_status,	0x1018C15C
 .equ Adr_NX56_system_status          ,	0x1018C15C

 .equ MSK_NX56_system_status_lic_err_irq_status     ,	0x00000001
 .equ SRT_NX56_system_status_lic_err_irq_status     ,	0
 .equ MSK_NX56_system_status_extbus_to_irq_status   ,	0x00000002
 .equ SRT_NX56_system_status_extbus_to_irq_status   ,	1
 .equ MSK_NX56_system_status_mem_to_irq_status      ,	0x00000004
 .equ SRT_NX56_system_status_mem_to_irq_status      ,	2
 .equ MSK_NX56_system_status_parity_error_irq_status,	0x00000008
 .equ SRT_NX56_system_status_parity_error_irq_status,	3
 .equ MSK_NX56_system_status_lic_err_abort_status   ,	0x00010000
 .equ SRT_NX56_system_status_lic_err_abort_status   ,	16
 .equ MSK_NX56_system_status_TEST                   ,	0x00020000
 .equ SRT_NX56_system_status_TEST                   ,	17
 .equ MSK_NX56_system_status_pll_bypass             ,	0x00040000
 .equ SRT_NX56_system_status_pll_bypass             ,	18
 .equ MSK_NX56_system_status_quick_count            ,	0x00080000
 .equ SRT_NX56_system_status_quick_count            ,	19
 .equ MSK_NX56_system_status_arm_crashdetect        ,	0x00100000
 .equ SRT_NX56_system_status_arm_crashdetect        ,	20

@ ---------------------------------------------------------------------
@ Register netx_lic_id
@ => netX License ID Register:
@    This register contains license information read from security memory during boot phase
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lic_id      ,	0x00000060
 .equ Adr_NX56_asic_ctrl_netx_lic_id,	0x1018C160
 .equ Adr_NX56_netx_lic_id          ,	0x1018C160

 .equ MSK_NX56_netx_lic_id_id,	0xffffffff
 .equ SRT_NX56_netx_lic_id_id,	0

@ ---------------------------------------------------------------------
@ Register netx_lic_flags0
@ => netX License Flags 0 Register:
@    This register is part of netX licence error detection mechanism. If netX software requested an unavailable licence, this
@    will be flagged in netx_lic_errors0 register.
@    This register contains license information read from security memory during boot phase
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lic_flags0      ,	0x00000064
 .equ Adr_NX56_asic_ctrl_netx_lic_flags0,	0x1018C164
 .equ Adr_NX56_netx_lic_flags0          ,	0x1018C164

 .equ MSK_NX56_netx_lic_flags0_flags,	0xffffffff
 .equ SRT_NX56_netx_lic_flags0_flags,	0

@ ---------------------------------------------------------------------
@ Register netx_lic_flags1
@ => netX License Flags 1 Register:
@    This register is part of netX licence error detection mechanism. If netX software requested an unavailable licence, this
@    will be flagged in netx_lic_errors1 register.
@    This register contains license information read from security memory during boot phase
@    This register is lockable by netX locking algorithm. It will be only reset on Power on, not on normal system nres.
@    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access-key from ACCESS_KEY register
@    2.: write back access-key to ACCESS_KEY register
@    3.: write desired value to this register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lic_flags1      ,	0x00000068
 .equ Adr_NX56_asic_ctrl_netx_lic_flags1,	0x1018C168
 .equ Adr_NX56_netx_lic_flags1          ,	0x1018C168

 .equ MSK_NX56_netx_lic_flags1_flags,	0xffffffff
 .equ SRT_NX56_netx_lic_flags1_flags,	0

@ ---------------------------------------------------------------------
@ Register netx_lic_errors0
@ => netX License Errors 0 Status Register:
@    This register is part of netX licence error detection mechanism. If netX software requested a licence not
@    provided by netx_lic_flags0, this will be flagged here.
@    This register contains 0 in case of no license error
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lic_errors0      ,	0x0000006C
 .equ Adr_NX56_asic_ctrl_netx_lic_errors0,	0x1018C16C
 .equ Adr_NX56_netx_lic_errors0          ,	0x1018C16C

 .equ MSK_NX56_netx_lic_errors0_err_ro,	0xffffffff
 .equ SRT_NX56_netx_lic_errors0_err_ro,	0

@ ---------------------------------------------------------------------
@ Register netx_lic_errors1
@ => netX License Errors 1 Status Register:
@    This register is part of netX licence error detection mechanism. If netX software requested a licence not
@    provided by netx_lic_flags1, this will be flagged here.
@    This register contains 0 in case of no license error
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lic_errors1      ,	0x00000070
 .equ Adr_NX56_asic_ctrl_netx_lic_errors1,	0x1018C170
 .equ Adr_NX56_netx_lic_errors1          ,	0x1018C170

 .equ MSK_NX56_netx_lic_errors1_err_ro,	0xffffffff
 .equ SRT_NX56_netx_lic_errors1_err_ro,	0

@ ---------------------------------------------------------------------
@ Register netx_lock_reserved_ul
@ => prior adr_netx_lock_reserved00
@    reserved address for netX locking purpose
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lock_reserved_ul      ,	0x00000074
 .equ Adr_NX56_asic_ctrl_netx_lock_reserved_ul,	0x1018C174
 .equ Adr_NX56_netx_lock_reserved_ul          ,	0x1018C174

 .equ MSK_NX56_netx_lock_reserved_ul_lock,	0xffffffff
 .equ SRT_NX56_netx_lock_reserved_ul_lock,	0

@ ---------------------------------------------------------------------
@ Register netx_lock_reserved_lf
@ => prior adr_netx_lock_reserved01
@    reserved address for netX final locking purpose
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lock_reserved_lf      ,	0x00000078
 .equ Adr_NX56_asic_ctrl_netx_lock_reserved_lf,	0x1018C178
 .equ Adr_NX56_netx_lock_reserved_lf          ,	0x1018C178

 .equ MSK_NX56_netx_lock_reserved_lf_lock,	0xffffffff
 .equ SRT_NX56_netx_lock_reserved_lf_lock,	0

@ ---------------------------------------------------------------------
@ Register asic_ctrl_access_key
@ => ASIC Control Locking access-key Register:
@    Writing to any register in the asic_ctrl or mmio_ctrl address area is only possible after
@    setting the correct key here to avoid unmeant changes e.g. by crashed software.
@    ----
@    Changing a control register in the asic_ctrl or mmio_ctrl address area is only possible by the following sequence:
@    1.: Read out the Locking access-key from this register.
@    2.: Write back this Locking access-key to this register.
@    3.: Write desired value to the control register.
@    ----
@    The Locking access-key will become invalid after each access to any register in the asic_ctrl or mmio_ctrl address area
@    and has to be read out and set again for sequent accesses.
@    Note:
@       Since netX56 there are 3 separated instances of access-key-protection logic: One for ARM, one for xPIC and
@       one shared by all other netX system masters. That allows ARM and XPIC running access-key read-write sequence
@       and configuration access without any synchronisation or locking completely independent. Before netX56 a sequence
@       started by one master (e.g. ARM) became invalid when interrupted by another master (e.g. xPIC). That was changed: ARM
@       and xPIC are able to remove protection without being influenced by each other (or by any other master). Once a
@       access-key-sequence was performed protected configuration registers are only writable for the master which performed
@       it.
@       To allow access to protected register for other masters (e.g. XPECs or SYSDEBUG) the third instance of
@       access-key-protection logic is implemented. This is shared by all masters except ARM and xPIC. When more
@       than one of these masters should use this, locking must be done in software to avoid sequence of one master
@       being interrupted by another.
@       Access-key read and write address is the same for all masters. However, ARM-key is only readable or writable by ARM, xPIC-key
@       only by xPIC and shared key only by all other masters but never by ARM or xPIC.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_asic_ctrl_access_key      ,	0x0000007C
 .equ Adr_NX56_asic_ctrl_asic_ctrl_access_key,	0x1018C17C
 .equ Adr_NX56_asic_ctrl_access_key          ,	0x1018C17C

 .equ MSK_NX56_asic_ctrl_access_key_access_key,	0x0000ffff
 .equ SRT_NX56_asic_ctrl_access_key_access_key,	0

@ ---------------------------------------------------------------------
@ Register netx_lock_reserved_start
@ => Reserved start address for netX locking purpose address area
@    Don't implement other registers at 0x80 .. 0xfc!
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lock_reserved_start      ,	0x00000080
 .equ Adr_NX56_asic_ctrl_netx_lock_reserved_start,	0x1018C180
 .equ Adr_NX56_netx_lock_reserved_start          ,	0x1018C180

 .equ MSK_NX56_netx_lock_reserved_start_lock,	0xffffffff
 .equ SRT_NX56_netx_lock_reserved_start_lock,	0

@ ---------------------------------------------------------------------
@ Register netx_lock_reserved_end
@ => Reserved end address for netX locking purpose address area
@    Don't implement other registers at 0x80 .. 0xfc!
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_lock_reserved_end      ,	0x000000FC
 .equ Adr_NX56_asic_ctrl_netx_lock_reserved_end,	0x1018C1FC
 .equ Adr_NX56_netx_lock_reserved_end          ,	0x1018C1FC

 .equ MSK_NX56_netx_lock_reserved_end_lock,	0xffffffff
 .equ SRT_NX56_netx_lock_reserved_end_lock,	0


@ =====================================================================
@
@ Area of mmio_ctrl
@
@ =====================================================================

 .equ Addr_NX56_mmio_ctrl, 0x1018C200

@ ---------------------------------------------------------------------
@ Register mmio0_cfg
@ => Multiplexmatrix Configuration Register for MMIO0
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    -------------------------------
@    mmio*_sel - coding:
@    {     |                        |                           | border=1
@    Coding netX internal function \ signal type                 functional group
@           (core connection)
@    0x00   xm0_io0                  bidirectional,              Fieldbus0
@    0x01   xm0_io1                  bidirectional,              Fieldbus0
@    0x02   xm0_io2                  bidirectional,              Fieldbus0
@    0x03   xm0_io3                  bidirectional,              Fieldbus0
@    0x04   xm0_io4                  bidirectional,              Fieldbus0
@    0x05   xm0_io5                  bidirectional,              Fieldbus0
@    0x06   xm0_rx                   input,                      Fieldbus0
@    0x07   xm0_tx_out               tristatable output,         Fieldbus0
@    0x08   xm1_io0                  bidirectional,              Fieldbus1
@    0x09   xm1_io1                  bidirectional,              Fieldbus1
@    0x0a   xm1_io2                  bidirectional,              Fieldbus1
@    0x0b   xm1_io3                  bidirectional,              Fieldbus1
@    0x0c   xm1_io4                  bidirectional,              Fieldbus1
@    0x0d   xm1_io5                  bidirectional,              Fieldbus1
@    0x0e   xm1_rx                   input,                      Fieldbus1
@    0x0f   xm1_tx_out               tristatable output,         Fieldbus1
@    0x10   gpio0                    bidirectional,              GPIO/IO-Link
@    0x11   gpio1                    bidirectional,              GPIO/IO-Link
@    0x12   gpio2                    bidirectional,              GPIO/IO-Link
@    0x13   gpio3                    bidirectional,              GPIO/IO-Link
@    0x14   gpio4                    bidirectional,              GPIO/IO-Link
@    0x15   gpio5                    bidirectional,              GPIO/IO-Link
@    0x16   gpio6                    bidirectional,              GPIO/IO-Link
@    0x17   gpio7                    bidirectional,              GPIO/IO-Link
@    0x18   gpio8                    bidirectional,              GPIO/IO-Link
@    0x19   gpio9                    bidirectional,              GPIO/IO-Link
@    0x1a   gpio10                   bidirectional,              GPIO/IO-Link
@    0x1b   gpio11                   bidirectional,              GPIO/IO-Link
@    0x1c   gpio12                   bidirectional,              GPIO/IO-Link
@    0x1d   gpio13                   bidirectional,              GPIO/IO-Link
@    0x1e   gpio14                   bidirectional,              GPIO/IO-Link
@    0x1f   gpio15                   bidirectional,              GPIO/IO-Link
@    0x20   gpio16                   bidirectional,              GPIO/IO-Link
@    0x21   gpio17                   bidirectional,              GPIO/IO-Link
@    0x22   gpio18                   bidirectional,              GPIO/IO-Link
@    0x23   gpio19                   bidirectional,              GPIO/IO-Link
@    0x24   gpio20                   bidirectional,              GPIO/IO-Link
@    0x25   gpio21                   bidirectional,              GPIO/IO-Link
@    0x26   gpio22                   bidirectional,              GPIO/IO-Link
@    0x27   gpio23                   bidirectional,              GPIO/IO-Link
@    0x28   gpio24                   bidirectional,              GPIO/IO-Link
@    0x29   gpio25                   bidirectional,              GPIO/IO-Link
@    0x2a   gpio26                   bidirectional,              GPIO/IO-Link
@    0x2b   gpio27                   bidirectional,              GPIO/IO-Link
@    0x2c   gpio28                   bidirectional,              GPIO/IO-Link
@    0x2d   gpio29                   bidirectional,              GPIO/IO-Link
@    0x2e   gpio30                   bidirectional,              GPIO/IO-Link
@    0x2f   gpio31                   bidirectional,              GPIO/IO-Link
@    0x30   phy0_led0                always driven output,       INT_PHY_CTRL0 link
@    0x31   phy0_led1                always driven output,       INT_PHY_CTRL0 trans
@    0x32   phy0_led2                always driven output,       INT_PHY_CTRL0 speed100
@    0x33   phy0_led3                always driven output,       INT_PHY_CTRL0 duplex
@    0x34   phy1_led0                always driven output,       INT_PHY_CTRL1 link
@    0x35   phy1_led1                always driven output,       INT_PHY_CTRL1 trans
@    0x36   phy1_led2                always driven output,       INT_PHY_CTRL1 speed100
@    0x37   phy1_led3                always driven output,       INT_PHY_CTRL1 duplex
@    0x38   mii_mdc                  always driven output,       MDIO
@    0x39   mii_mdio                 bidirectional,              MDIO
@    0x3a   spi0_cs2n                bidirectional,              SPI0 3rd chip select
@    0x3b   spi0_sio2_mmio           bidirectional,              SPI0
@    0x3c   spi0_sio3_mmio           bidirectional,              SPI0
@    0x3d   spi1_clk                 bidirectional,              SPI1
@    0x3e   spi1_cs0n                bidirectional,              SPI1
@    0x3f   spi1_cs1n                bidirectional,              SPI1
@    0x40   spi1_cs2n                bidirectional,              SPI1
@    0x41   spi1_miso                bidirectional,              SPI1
@    0x42   spi1_mosi                bidirectional,              SPI1
@    0x43   i2c0_scl_mmio            bidirectional,              I2C
@    0x44   i2c0_sda_mmio            bidirectional,              I2C
@    0x45   i2c1_scl                 bidirectional,              I2C
@    0x46   i2c1_sda                 bidirectional,              I2C
@    0x47   xc_sample0               input,                      Trigger/Latch Unit
@    0x48   xc_sample1               input,                      Trigger/Latch Unit
@    0x49   xc_trigger0              tristatable output,         Trigger/Latch Unit
@    0x4a   xc_trigger1              tristatable output,         Trigger/Latch Unit
@    0x4b   uart0_ctsn               input,                      UART 0
@    0x4c   uart0_rtsn               tristatable output,         UART 0
@    0x4d   uart0_rxd                input,                      UART 0
@    0x4e   uart0_txd                tristatable output,         UART 0
@    0x4f   uart1_ctsn               input,                      UART 1
@    0x50   uart1_rtsn               tristatable output,         UART 1
@    0x51   uart1_rxd                input,                      UART 1
@    0x52   uart1_txd                tristatable output,         UART 1
@    0x53   uart2_ctsn               input,                      UART 2
@    0x54   uart2_rtsn               tristatable output,         UART 2
@    0x55   uart2_rxd                input,                      UART 2
@    0x56   uart2_txd                tristatable output,         UART 2
@    0x57   can_rx                   input,                      CAN
@    0x58   can_tx                   always driven output,       CAN
@    0x59   mem_rdy                  input,                      MEM IF ready/busy input
@    0x5a   pio0                     bidirectional,              PIO
@    0x5b   pio1                     bidirectional,              PIO
@    0x5c   pio2                     bidirectional,              PIO
@    0x5d   pio3                     bidirectional,              PIO
@    0x5e   pio4                     bidirectional,              PIO
@    0x5f   pio5                     bidirectional,              PIO
@    0x60   pio6                     bidirectional,              PIO
@    0x61   pio7                     bidirectional,              PIO
@    0x7f   PIO mode                 use MMIO PIO line registers PIO function}
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio0_cfg      ,	0x00000000
 .equ Adr_NX56_mmio_ctrl_mmio0_cfg,	0x1018C200
 .equ Adr_NX56_mmio0_cfg          ,	0x1018C200

 .equ MSK_NX56_mmio0_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio0_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio0_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio0_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio0_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio0_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio0_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio0_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio0_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio0_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio0_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio0_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio1_cfg
@ => Multiplexmatrix Configuration Register for MMIO1
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio1_cfg      ,	0x00000004
 .equ Adr_NX56_mmio_ctrl_mmio1_cfg,	0x1018C204
 .equ Adr_NX56_mmio1_cfg          ,	0x1018C204

 .equ MSK_NX56_mmio1_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio1_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio1_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio1_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio1_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio1_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio1_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio1_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio1_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio1_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio1_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio1_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio2_cfg
@ => Multiplexmatrix Configuration Register for MMIO2
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio2_cfg      ,	0x00000008
 .equ Adr_NX56_mmio_ctrl_mmio2_cfg,	0x1018C208
 .equ Adr_NX56_mmio2_cfg          ,	0x1018C208

 .equ MSK_NX56_mmio2_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio2_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio2_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio2_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio2_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio2_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio2_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio2_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio2_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio2_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio2_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio2_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio3_cfg
@ => Multiplexmatrix Configuration Register for MMIO3
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio3_cfg      ,	0x0000000C
 .equ Adr_NX56_mmio_ctrl_mmio3_cfg,	0x1018C20C
 .equ Adr_NX56_mmio3_cfg          ,	0x1018C20C

 .equ MSK_NX56_mmio3_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio3_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio3_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio3_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio3_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio3_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio3_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio3_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio3_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio3_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio3_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio3_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio4_cfg
@ => Multiplexmatrix Configuration Register for MMIO4
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio4_cfg      ,	0x00000010
 .equ Adr_NX56_mmio_ctrl_mmio4_cfg,	0x1018C210
 .equ Adr_NX56_mmio4_cfg          ,	0x1018C210

 .equ MSK_NX56_mmio4_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio4_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio4_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio4_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio4_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio4_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio4_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio4_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio4_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio4_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio4_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio4_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio5_cfg
@ => Multiplexmatrix Configuration Register for MMIO5
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio5_cfg      ,	0x00000014
 .equ Adr_NX56_mmio_ctrl_mmio5_cfg,	0x1018C214
 .equ Adr_NX56_mmio5_cfg          ,	0x1018C214

 .equ MSK_NX56_mmio5_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio5_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio5_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio5_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio5_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio5_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio5_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio5_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio5_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio5_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio5_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio5_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio6_cfg
@ => Multiplexmatrix Configuration Register for MMIO6
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio6_cfg      ,	0x00000018
 .equ Adr_NX56_mmio_ctrl_mmio6_cfg,	0x1018C218
 .equ Adr_NX56_mmio6_cfg          ,	0x1018C218

 .equ MSK_NX56_mmio6_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio6_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio6_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio6_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio6_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio6_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio6_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio6_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio6_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio6_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio6_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio6_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio7_cfg
@ => Multiplexmatrix Configuration Register for MMIO7
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio7_cfg      ,	0x0000001C
 .equ Adr_NX56_mmio_ctrl_mmio7_cfg,	0x1018C21C
 .equ Adr_NX56_mmio7_cfg          ,	0x1018C21C

 .equ MSK_NX56_mmio7_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio7_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio7_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio7_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio7_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio7_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio7_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio7_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio7_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio7_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio7_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio7_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio8_cfg
@ => Multiplexmatrix Configuration Register for MMIO8
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio8_cfg      ,	0x00000020
 .equ Adr_NX56_mmio_ctrl_mmio8_cfg,	0x1018C220
 .equ Adr_NX56_mmio8_cfg          ,	0x1018C220

 .equ MSK_NX56_mmio8_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio8_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio8_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio8_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio8_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio8_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio8_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio8_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio8_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio8_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio8_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio8_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio9_cfg
@ => Multiplexmatrix Configuration Register for MMIO9
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio9_cfg      ,	0x00000024
 .equ Adr_NX56_mmio_ctrl_mmio9_cfg,	0x1018C224
 .equ Adr_NX56_mmio9_cfg          ,	0x1018C224

 .equ MSK_NX56_mmio9_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio9_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio9_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio9_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio9_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio9_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio9_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio9_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio9_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio9_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio9_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio9_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio10_cfg
@ => Multiplexmatrix Configuration Register for MMIO10
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio10_cfg      ,	0x00000028
 .equ Adr_NX56_mmio_ctrl_mmio10_cfg,	0x1018C228
 .equ Adr_NX56_mmio10_cfg          ,	0x1018C228

 .equ MSK_NX56_mmio10_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio10_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio10_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio10_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio10_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio10_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio10_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio10_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio10_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio10_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio10_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio10_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio11_cfg
@ => Multiplexmatrix Configuration Register for MMIO11
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio11_cfg      ,	0x0000002C
 .equ Adr_NX56_mmio_ctrl_mmio11_cfg,	0x1018C22C
 .equ Adr_NX56_mmio11_cfg          ,	0x1018C22C

 .equ MSK_NX56_mmio11_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio11_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio11_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio11_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio11_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio11_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio11_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio11_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio11_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio11_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio11_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio11_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio12_cfg
@ => Multiplexmatrix Configuration Register for MMIO12
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio12_cfg      ,	0x00000030
 .equ Adr_NX56_mmio_ctrl_mmio12_cfg,	0x1018C230
 .equ Adr_NX56_mmio12_cfg          ,	0x1018C230

 .equ MSK_NX56_mmio12_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio12_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio12_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio12_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio12_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio12_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio12_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio12_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio12_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio12_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio12_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio12_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio13_cfg
@ => Multiplexmatrix Configuration Register for MMIO13
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio13_cfg      ,	0x00000034
 .equ Adr_NX56_mmio_ctrl_mmio13_cfg,	0x1018C234
 .equ Adr_NX56_mmio13_cfg          ,	0x1018C234

 .equ MSK_NX56_mmio13_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio13_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio13_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio13_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio13_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio13_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio13_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio13_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio13_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio13_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio13_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio13_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio14_cfg
@ => Multiplexmatrix Configuration Register for MMIO14
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio14_cfg      ,	0x00000038
 .equ Adr_NX56_mmio_ctrl_mmio14_cfg,	0x1018C238
 .equ Adr_NX56_mmio14_cfg          ,	0x1018C238

 .equ MSK_NX56_mmio14_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio14_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio14_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio14_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio14_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio14_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio14_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio14_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio14_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio14_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio14_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio14_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio15_cfg
@ => Multiplexmatrix Configuration Register for MMIO15
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio15_cfg      ,	0x0000003C
 .equ Adr_NX56_mmio_ctrl_mmio15_cfg,	0x1018C23C
 .equ Adr_NX56_mmio15_cfg          ,	0x1018C23C

 .equ MSK_NX56_mmio15_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio15_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio15_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio15_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio15_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio15_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio15_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio15_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio15_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio15_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio15_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio15_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio16_cfg
@ => Multiplexmatrix Configuration Register for MMIO16
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio16_cfg      ,	0x00000040
 .equ Adr_NX56_mmio_ctrl_mmio16_cfg,	0x1018C240
 .equ Adr_NX56_mmio16_cfg          ,	0x1018C240

 .equ MSK_NX56_mmio16_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio16_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio16_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio16_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio16_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio16_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio16_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio16_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio16_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio16_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio16_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio16_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio17_cfg
@ => Multiplexmatrix Configuration Register for MMIO17
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio17_cfg      ,	0x00000044
 .equ Adr_NX56_mmio_ctrl_mmio17_cfg,	0x1018C244
 .equ Adr_NX56_mmio17_cfg          ,	0x1018C244

 .equ MSK_NX56_mmio17_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio17_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio17_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio17_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio17_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio17_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio17_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio17_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio17_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio17_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio17_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio17_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio18_cfg
@ => Multiplexmatrix Configuration Register for MMIO18
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio18_cfg      ,	0x00000048
 .equ Adr_NX56_mmio_ctrl_mmio18_cfg,	0x1018C248
 .equ Adr_NX56_mmio18_cfg          ,	0x1018C248

 .equ MSK_NX56_mmio18_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio18_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio18_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio18_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio18_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio18_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio18_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio18_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio18_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio18_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio18_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio18_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio19_cfg
@ => Multiplexmatrix Configuration Register for MMIO19
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio19_cfg      ,	0x0000004C
 .equ Adr_NX56_mmio_ctrl_mmio19_cfg,	0x1018C24C
 .equ Adr_NX56_mmio19_cfg          ,	0x1018C24C

 .equ MSK_NX56_mmio19_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio19_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio19_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio19_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio19_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio19_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio19_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio19_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio19_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio19_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio19_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio19_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio20_cfg
@ => Multiplexmatrix Configuration Register for MMIO20
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio20_cfg      ,	0x00000050
 .equ Adr_NX56_mmio_ctrl_mmio20_cfg,	0x1018C250
 .equ Adr_NX56_mmio20_cfg          ,	0x1018C250

 .equ MSK_NX56_mmio20_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio20_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio20_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio20_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio20_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio20_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio20_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio20_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio20_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio20_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio20_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio20_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio21_cfg
@ => Multiplexmatrix Configuration Register for MMIO21
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio21_cfg      ,	0x00000054
 .equ Adr_NX56_mmio_ctrl_mmio21_cfg,	0x1018C254
 .equ Adr_NX56_mmio21_cfg          ,	0x1018C254

 .equ MSK_NX56_mmio21_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio21_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio21_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio21_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio21_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio21_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio21_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio21_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio21_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio21_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio21_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio21_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio22_cfg
@ => Multiplexmatrix Configuration Register for MMIO22
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio22_cfg      ,	0x00000058
 .equ Adr_NX56_mmio_ctrl_mmio22_cfg,	0x1018C258
 .equ Adr_NX56_mmio22_cfg          ,	0x1018C258

 .equ MSK_NX56_mmio22_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio22_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio22_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio22_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio22_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio22_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio22_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio22_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio22_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio22_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio22_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio22_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio23_cfg
@ => Multiplexmatrix Configuration Register for MMIO23
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio23_cfg      ,	0x0000005C
 .equ Adr_NX56_mmio_ctrl_mmio23_cfg,	0x1018C25C
 .equ Adr_NX56_mmio23_cfg          ,	0x1018C25C

 .equ MSK_NX56_mmio23_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio23_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio23_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio23_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio23_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio23_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio23_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio23_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio23_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio23_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio23_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio23_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio24_cfg
@ => Multiplexmatrix Configuration Register for MMIO24
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio24_cfg      ,	0x00000060
 .equ Adr_NX56_mmio_ctrl_mmio24_cfg,	0x1018C260
 .equ Adr_NX56_mmio24_cfg          ,	0x1018C260

 .equ MSK_NX56_mmio24_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio24_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio24_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio24_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio24_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio24_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio24_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio24_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio24_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio24_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio24_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio24_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio25_cfg
@ => Multiplexmatrix Configuration Register for MMIO25
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio25_cfg      ,	0x00000064
 .equ Adr_NX56_mmio_ctrl_mmio25_cfg,	0x1018C264
 .equ Adr_NX56_mmio25_cfg          ,	0x1018C264

 .equ MSK_NX56_mmio25_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio25_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio25_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio25_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio25_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio25_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio25_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio25_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio25_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio25_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio25_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio25_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio26_cfg
@ => Multiplexmatrix Configuration Register for MMIO26
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio26_cfg      ,	0x00000068
 .equ Adr_NX56_mmio_ctrl_mmio26_cfg,	0x1018C268
 .equ Adr_NX56_mmio26_cfg          ,	0x1018C268

 .equ MSK_NX56_mmio26_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio26_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio26_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio26_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio26_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio26_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio26_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio26_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio26_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio26_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio26_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio26_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio27_cfg
@ => Multiplexmatrix Configuration Register for MMIO27
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio27_cfg      ,	0x0000006C
 .equ Adr_NX56_mmio_ctrl_mmio27_cfg,	0x1018C26C
 .equ Adr_NX56_mmio27_cfg          ,	0x1018C26C

 .equ MSK_NX56_mmio27_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio27_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio27_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio27_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio27_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio27_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio27_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio27_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio27_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio27_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio27_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio27_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio28_cfg
@ => Multiplexmatrix Configuration Register for MMIO28
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio28_cfg      ,	0x00000070
 .equ Adr_NX56_mmio_ctrl_mmio28_cfg,	0x1018C270
 .equ Adr_NX56_mmio28_cfg          ,	0x1018C270

 .equ MSK_NX56_mmio28_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio28_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio28_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio28_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio28_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio28_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio28_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio28_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio28_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio28_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio28_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio28_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio29_cfg
@ => Multiplexmatrix Configuration Register for MMIO29
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio29_cfg      ,	0x00000074
 .equ Adr_NX56_mmio_ctrl_mmio29_cfg,	0x1018C274
 .equ Adr_NX56_mmio29_cfg          ,	0x1018C274

 .equ MSK_NX56_mmio29_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio29_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio29_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio29_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio29_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio29_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio29_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio29_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio29_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio29_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio29_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio29_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio30_cfg
@ => Multiplexmatrix Configuration Register for MMIO30
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio30_cfg      ,	0x00000078
 .equ Adr_NX56_mmio_ctrl_mmio30_cfg,	0x1018C278
 .equ Adr_NX56_mmio30_cfg          ,	0x1018C278

 .equ MSK_NX56_mmio30_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio30_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio30_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio30_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio30_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio30_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio30_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio30_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio30_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio30_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio30_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio30_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio31_cfg
@ => Multiplexmatrix Configuration Register for MMIO31
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio31_cfg      ,	0x0000007C
 .equ Adr_NX56_mmio_ctrl_mmio31_cfg,	0x1018C27C
 .equ Adr_NX56_mmio31_cfg          ,	0x1018C27C

 .equ MSK_NX56_mmio31_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio31_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio31_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio31_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio31_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio31_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio31_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio31_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio31_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio31_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio31_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio31_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio32_cfg
@ => Multiplexmatrix Configuration Register for MMIO32
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio32_cfg      ,	0x00000080
 .equ Adr_NX56_mmio_ctrl_mmio32_cfg,	0x1018C280
 .equ Adr_NX56_mmio32_cfg          ,	0x1018C280

 .equ MSK_NX56_mmio32_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio32_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio32_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio32_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio32_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio32_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio32_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio32_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio32_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio32_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio32_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio32_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio33_cfg
@ => Multiplexmatrix Configuration Register for MMIO33
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio33_cfg      ,	0x00000084
 .equ Adr_NX56_mmio_ctrl_mmio33_cfg,	0x1018C284
 .equ Adr_NX56_mmio33_cfg          ,	0x1018C284

 .equ MSK_NX56_mmio33_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio33_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio33_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio33_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio33_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio33_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio33_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio33_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio33_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio33_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio33_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio33_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio34_cfg
@ => Multiplexmatrix Configuration Register for MMIO34
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio34_cfg      ,	0x00000088
 .equ Adr_NX56_mmio_ctrl_mmio34_cfg,	0x1018C288
 .equ Adr_NX56_mmio34_cfg          ,	0x1018C288

 .equ MSK_NX56_mmio34_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio34_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio34_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio34_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio34_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio34_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio34_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio34_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio34_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio34_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio34_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio34_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio35_cfg
@ => Multiplexmatrix Configuration Register for MMIO35
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio35_cfg      ,	0x0000008C
 .equ Adr_NX56_mmio_ctrl_mmio35_cfg,	0x1018C28C
 .equ Adr_NX56_mmio35_cfg          ,	0x1018C28C

 .equ MSK_NX56_mmio35_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio35_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio35_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio35_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio35_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio35_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio35_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio35_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio35_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio35_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio35_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio35_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio36_cfg
@ => Multiplexmatrix Configuration Register for MMIO36
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio36_cfg      ,	0x00000090
 .equ Adr_NX56_mmio_ctrl_mmio36_cfg,	0x1018C290
 .equ Adr_NX56_mmio36_cfg          ,	0x1018C290

 .equ MSK_NX56_mmio36_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio36_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio36_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio36_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio36_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio36_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio36_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio36_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio36_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio36_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio36_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio36_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio37_cfg
@ => Multiplexmatrix Configuration Register for MMIO37
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio37_cfg      ,	0x00000094
 .equ Adr_NX56_mmio_ctrl_mmio37_cfg,	0x1018C294
 .equ Adr_NX56_mmio37_cfg          ,	0x1018C294

 .equ MSK_NX56_mmio37_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio37_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio37_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio37_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio37_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio37_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio37_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio37_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio37_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio37_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio37_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio37_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio38_cfg
@ => Multiplexmatrix Configuration Register for MMIO38
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio38_cfg      ,	0x00000098
 .equ Adr_NX56_mmio_ctrl_mmio38_cfg,	0x1018C298
 .equ Adr_NX56_mmio38_cfg          ,	0x1018C298

 .equ MSK_NX56_mmio38_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio38_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio38_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio38_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio38_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio38_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio38_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio38_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio38_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio38_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio38_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio38_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio39_cfg
@ => Multiplexmatrix Configuration Register for MMIO39
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio39_cfg      ,	0x0000009C
 .equ Adr_NX56_mmio_ctrl_mmio39_cfg,	0x1018C29C
 .equ Adr_NX56_mmio39_cfg          ,	0x1018C29C

 .equ MSK_NX56_mmio39_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio39_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio39_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio39_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio39_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio39_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio39_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio39_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio39_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio39_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio39_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio39_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio40_cfg
@ => Multiplexmatrix Configuration Register for MMIO40
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio40 signal is a multiplex option of HIF_D8 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio40_cfg      ,	0x000000A0
 .equ Adr_NX56_mmio_ctrl_mmio40_cfg,	0x1018C2A0
 .equ Adr_NX56_mmio40_cfg          ,	0x1018C2A0

 .equ MSK_NX56_mmio40_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio40_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio40_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio40_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio40_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio40_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio40_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio40_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio41_cfg
@ => Multiplexmatrix Configuration Register for MMIO41
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio41 signal is a multiplex option of HIF_D9 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio41_cfg      ,	0x000000A4
 .equ Adr_NX56_mmio_ctrl_mmio41_cfg,	0x1018C2A4
 .equ Adr_NX56_mmio41_cfg          ,	0x1018C2A4

 .equ MSK_NX56_mmio41_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio41_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio41_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio41_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio41_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio41_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio41_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio41_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio42_cfg
@ => Multiplexmatrix Configuration Register for MMIO42
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio42 signal is a multiplex option of HIF_D10 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio42_cfg      ,	0x000000A8
 .equ Adr_NX56_mmio_ctrl_mmio42_cfg,	0x1018C2A8
 .equ Adr_NX56_mmio42_cfg          ,	0x1018C2A8

 .equ MSK_NX56_mmio42_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio42_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio42_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio42_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio42_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio42_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio42_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio42_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio43_cfg
@ => Multiplexmatrix Configuration Register for MMIO43
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio43 signal is a multiplex option of HIF_D11 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio43_cfg      ,	0x000000AC
 .equ Adr_NX56_mmio_ctrl_mmio43_cfg,	0x1018C2AC
 .equ Adr_NX56_mmio43_cfg          ,	0x1018C2AC

 .equ MSK_NX56_mmio43_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio43_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio43_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio43_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio43_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio43_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio43_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio43_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio44_cfg
@ => Multiplexmatrix Configuration Register for MMIO44
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio44 signal is a multiplex option of HIF_D12 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio44_cfg      ,	0x000000B0
 .equ Adr_NX56_mmio_ctrl_mmio44_cfg,	0x1018C2B0
 .equ Adr_NX56_mmio44_cfg          ,	0x1018C2B0

 .equ MSK_NX56_mmio44_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio44_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio44_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio44_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio44_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio44_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio44_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio44_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio45_cfg
@ => Multiplexmatrix Configuration Register for MMIO45
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio45 signal is a multiplex option of HIF_D13 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio45_cfg      ,	0x000000B4
 .equ Adr_NX56_mmio_ctrl_mmio45_cfg,	0x1018C2B4
 .equ Adr_NX56_mmio45_cfg          ,	0x1018C2B4

 .equ MSK_NX56_mmio45_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio45_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio45_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio45_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio45_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio45_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio45_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio45_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio46_cfg
@ => Multiplexmatrix Configuration Register for MMIO46
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio46 signal is a multiplex option of HIF_D14 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio46_cfg      ,	0x000000B8
 .equ Adr_NX56_mmio_ctrl_mmio46_cfg,	0x1018C2B8
 .equ Adr_NX56_mmio46_cfg          ,	0x1018C2B8

 .equ MSK_NX56_mmio46_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio46_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio46_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio46_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio46_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio46_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio46_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio46_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio47_cfg
@ => Multiplexmatrix Configuration Register for MMIO47
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@    Note:
@       mmio47 signal is a multiplex option of HIF_D15 and has no PIO function.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio47_cfg      ,	0x000000BC
 .equ Adr_NX56_mmio_ctrl_mmio47_cfg,	0x1018C2BC
 .equ Adr_NX56_mmio47_cfg          ,	0x1018C2BC

 .equ MSK_NX56_mmio47_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio47_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio47_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio47_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio47_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio47_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio47_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio47_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio48_cfg
@ => Multiplexmatrix Configuration Register for MMIO48
@    -------------------------------
@    Some bits are protected by netX access-key algorithm. To change them run following sequence first:
@    1.: read out access key
@    2.: write back access key
@    3.: write desired value to this register
@    -------------------------------
@    Core-inputs not mapped to any MMIO will be assigned to 0.
@    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states.
@    For signal selection codings (mmio*_sel) look at header of register adr_mmio0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio48_cfg      ,	0x000000C0
 .equ Adr_NX56_mmio_ctrl_mmio48_cfg,	0x1018C2C0
 .equ Adr_NX56_mmio48_cfg          ,	0x1018C2C0

 .equ MSK_NX56_mmio48_cfg_mmio_sel    ,	0x0000007f
 .equ SRT_NX56_mmio48_cfg_mmio_sel    ,	0
 .equ MSK_NX56_mmio48_cfg_mmio_out_inv,	0x00000100
 .equ SRT_NX56_mmio48_cfg_mmio_out_inv,	8
 .equ MSK_NX56_mmio48_cfg_mmio_in_inv ,	0x00000200
 .equ SRT_NX56_mmio48_cfg_mmio_in_inv ,	9
 .equ MSK_NX56_mmio48_cfg_pio_oe      ,	0x00010000
 .equ SRT_NX56_mmio48_cfg_pio_oe      ,	16
 .equ MSK_NX56_mmio48_cfg_pio_out     ,	0x00020000
 .equ SRT_NX56_mmio48_cfg_pio_out     ,	17
 .equ MSK_NX56_mmio48_cfg_status_in_ro,	0x00040000
 .equ SRT_NX56_mmio48_cfg_status_in_ro,	18

@ ---------------------------------------------------------------------
@ Register mmio_pio_out_line_cfg0
@ => MMIO PIO line output level register of MMIO 0 to 31.
@    Changing bits here will change 'pio_out' bit of related mmio*_cfg register. Changes there will change related bit inside this register.
@    Note: This register is not protected by netX access-key algorithm.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_pio_out_line_cfg0      ,	0x000000C4
 .equ Adr_NX56_mmio_ctrl_mmio_pio_out_line_cfg0,	0x1018C2C4
 .equ Adr_NX56_mmio_pio_out_line_cfg0          ,	0x1018C2C4

 .equ MSK_NX56_mmio_pio_out_line_cfg0_line,	0xffffffff
 .equ SRT_NX56_mmio_pio_out_line_cfg0_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_pio_out_line_cfg1
@ => MMIO PIO line output level register of MMIO 32 to 48.
@    Changing bits here will change 'pio_out' bit of related mmio*_cfg register. Changes there will change related bit inside this register.
@    Note: This register is not protected by netX access-key algorithm.
@    Note
@       mmio40 has no PIO function. Settings of related bit 8 inside this register will be ignored.
@       mmio41 has no PIO function. Settings of related bit 9 inside this register will be ignored.
@       mmio42 has no PIO function. Settings of related bit 10 inside this register will be ignored.
@       mmio43 has no PIO function. Settings of related bit 11 inside this register will be ignored.
@       mmio44 has no PIO function. Settings of related bit 12 inside this register will be ignored.
@       mmio45 has no PIO function. Settings of related bit 13 inside this register will be ignored.
@       mmio46 has no PIO function. Settings of related bit 14 inside this register will be ignored.
@       mmio47 has no PIO function. Settings of related bit 15 inside this register will be ignored.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_pio_out_line_cfg1      ,	0x000000C8
 .equ Adr_NX56_mmio_ctrl_mmio_pio_out_line_cfg1,	0x1018C2C8
 .equ Adr_NX56_mmio_pio_out_line_cfg1          ,	0x1018C2C8

 .equ MSK_NX56_mmio_pio_out_line_cfg1_line,	0x0001ffff
 .equ SRT_NX56_mmio_pio_out_line_cfg1_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_pio_oe_line_cfg0
@ => MMIO PIO line output enable register of MMIO 0 to 31.
@    Changing bits here will change 'pio_oe' bit of related mmio*_cfg register. Changes there will change related bit inside this register.
@    Note: This register is not protected by netX access-key algorithm.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_pio_oe_line_cfg0      ,	0x000000CC
 .equ Adr_NX56_mmio_ctrl_mmio_pio_oe_line_cfg0,	0x1018C2CC
 .equ Adr_NX56_mmio_pio_oe_line_cfg0          ,	0x1018C2CC

 .equ MSK_NX56_mmio_pio_oe_line_cfg0_line,	0xffffffff
 .equ SRT_NX56_mmio_pio_oe_line_cfg0_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_pio_oe_line_cfg1
@ => MMIO PIO line output enable register of MMIO 32 to 48.
@    Changing bits here will change 'pio_oe' bit of related mmio*_cfg register. Changes there will change related bit inside this register.
@    Note: This register is not protected by netX access-key algorithm.
@    Note
@       mmio40 has no PIO function. Settings of related bit 8 inside this register will be ignored.
@       mmio41 has no PIO function. Settings of related bit 9 inside this register will be ignored.
@       mmio42 has no PIO function. Settings of related bit 10 inside this register will be ignored.
@       mmio43 has no PIO function. Settings of related bit 11 inside this register will be ignored.
@       mmio44 has no PIO function. Settings of related bit 12 inside this register will be ignored.
@       mmio45 has no PIO function. Settings of related bit 13 inside this register will be ignored.
@       mmio46 has no PIO function. Settings of related bit 14 inside this register will be ignored.
@       mmio47 has no PIO function. Settings of related bit 15 inside this register will be ignored.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_pio_oe_line_cfg1      ,	0x000000D0
 .equ Adr_NX56_mmio_ctrl_mmio_pio_oe_line_cfg1,	0x1018C2D0
 .equ Adr_NX56_mmio_pio_oe_line_cfg1          ,	0x1018C2D0

 .equ MSK_NX56_mmio_pio_oe_line_cfg1_line,	0x0001ffff
 .equ SRT_NX56_mmio_pio_oe_line_cfg1_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_in_line_status0
@ => MMIO input line register of MMIO 0 to 31.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_in_line_status0      ,	0x000000D4
 .equ Adr_NX56_mmio_ctrl_mmio_in_line_status0,	0x1018C2D4
 .equ Adr_NX56_mmio_in_line_status0          ,	0x1018C2D4

 .equ MSK_NX56_mmio_in_line_status0_line,	0xffffffff
 .equ SRT_NX56_mmio_in_line_status0_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_in_line_status1
@ => MMIO input line register of MMIO 32 to 48.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_in_line_status1      ,	0x000000D8
 .equ Adr_NX56_mmio_ctrl_mmio_in_line_status1,	0x1018C2D8
 .equ Adr_NX56_mmio_in_line_status1          ,	0x1018C2D8

 .equ MSK_NX56_mmio_in_line_status1_line,	0x0001ffff
 .equ SRT_NX56_mmio_in_line_status1_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_is_pio_status0
@ => MMIO mode line register of MMIO 0 to 31.
@    Note: PIO Mode can be enabled or disabled in mmio_cfg registers.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_is_pio_status0      ,	0x000000DC
 .equ Adr_NX56_mmio_ctrl_mmio_is_pio_status0,	0x1018C2DC
 .equ Adr_NX56_mmio_is_pio_status0          ,	0x1018C2DC

 .equ MSK_NX56_mmio_is_pio_status0_line,	0xffffffff
 .equ SRT_NX56_mmio_is_pio_status0_line,	0

@ ---------------------------------------------------------------------
@ Register mmio_is_pio_status1
@ => MMIO mode line register of MMIO 32 to 48.
@    Note: PIO Mode can be enabled or disabled in mmio_cfg registers.
@    Note
@       mmio40 has no PIO function. When related bit 8 inside this register is set, mmio40 will be active on HIF_D8.
@       mmio41 has no PIO function. When related bit 9 inside this register is set, mmio41 will be active on HIF_D9.
@       mmio42 has no PIO function. When related bit 10 inside this register is set, mmio42 will be active on HIF_D10.
@       mmio43 has no PIO function. When related bit 11 inside this register is set, mmio43 will be active on HIF_D11.
@       mmio44 has no PIO function. When related bit 12 inside this register is set, mmio44 will be active on HIF_D12.
@       mmio45 has no PIO function. When related bit 13 inside this register is set, mmio45 will be active on HIF_D13.
@       mmio46 has no PIO function. When related bit 14 inside this register is set, mmio46 will be active on HIF_D14.
@       mmio47 has no PIO function. When related bit 15 inside this register is set, mmio47 will be active on HIF_D15.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_mmio_is_pio_status1      ,	0x000000E0
 .equ Adr_NX56_mmio_ctrl_mmio_is_pio_status1,	0x1018C2E0
 .equ Adr_NX56_mmio_is_pio_status1          ,	0x1018C2E0

 .equ MSK_NX56_mmio_is_pio_status1_line,	0x0001ffff
 .equ SRT_NX56_mmio_is_pio_status1_line,	0


@ =====================================================================
@
@ Area of handshake_ctrl
@
@ =====================================================================

 .equ Addr_NX56_handshake_ctrl, 0x1018C300

@ ---------------------------------------------------------------------
@ Register handshake_base_addr
@ => Handshake Cell address base configuration register.
@    Handshake Cells are located in INTRAMHS and can be mapped to any 256 byte border.
@    Related master of an access to Handshake Cells is detected by the access to one of three INTRAMHS Mirrors:
@    Access via INTRAMHS dpm_mirror is interpreted by Handshake Cells as DPM access. This is regardless whether
@    the access was really initiated by DPM master or not. E.g. if xPIC uses dpm_mirror of INTRAMHS for Handshake Cell
@    access, this will be interpreted as DPM access and not as xPIC access.
@    INTRAMHS can be accessed by 4 different mirrors which are sub address areas of area HANDSHAKE. Furthermore
@    HANDSHAKE address area is mirrored multiple inside whole netX address area. Each HANDSHAKE address area
@    provides all 4 INTRAMHS mirrors.
@    There is one INTRAMHS mirror for each IRQ capable system master (DPM, xPIC, ARM) and one to access whole
@    INTRAMHS area without any influence to HANDSHAKE_CTRL unit. However, each system master is able to address
@    each INTRAMHS mirror. IRQs are always generated in dependency of mirror addressed by a master on access. IRQ
@    generation does not depend on the master running an access.
@    Handshake Cell Setup example:
@      1. Configure Handshake Cell area offset (e.g. offset 0x200, set base256 to 0x2).
@      2. Configure used Handshake Cell width (8bit or 16 bit) in 'handshake_hscX_ctrl' registers.
@      3. Configure used Handshake Cells master association (e.g. ARM<->DPM) in 'handshake_hscX_ctrl' registers.
@    Example: typical ARM<-> DPM Handshake interaction:
@      1. ARM writes request to Handshake Cell N (address: intramhs_arm_mirror+base256*256+N*4).
@         -> DPM receives IRQ
@      2. DPM reads Handshake Cell N (address: intramhs_dpm_mirror+base256*256+N*4).
@         -> DPM IRQ clear.
@      3. DPM writes acknowledge to Handshake Cell N (address: intramhs_dpm_mirror+base256*256+N*4).
@         -> ARM receives IRQ
@      4. ARM reads Handshake Cell N (address: intramhs_dpm_mirror+base256*256+N*4).
@         -> ARM IRQ clear.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_base_addr           ,	0x00000000
 .equ Adr_NX56_handshake_ctrl_handshake_base_addr,	0x1018C300
 .equ Adr_NX56_handshake_base_addr               ,	0x1018C300

 .equ MSK_NX56_handshake_base_addr_zero_ro    ,	0x000000ff
 .equ SRT_NX56_handshake_base_addr_zero_ro    ,	0
 .equ MSK_NX56_handshake_base_addr_base256    ,	0x00007f00
 .equ SRT_NX56_handshake_base_addr_base256    ,	8
 .equ MSK_NX56_handshake_base_addr_netx50_comp,	0x40000000
 .equ SRT_NX56_handshake_base_addr_netx50_comp,	30
 .equ MSK_NX56_handshake_base_addr_enable     ,	0x80000000
 .equ SRT_NX56_handshake_base_addr_enable     ,	31

@ ---------------------------------------------------------------------
@ Register handshake_dpm_irq_raw_clear
@ => Handshake Cell Raw Interrupt for DPM register.
@    Read access shows status of unmasked IRQs.
@    Write access with '1' clears the appropriate IRQ.
@    Note:
@       DPM related IRQ status can also be read from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQs can also be cleared from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQ masks can also be read from dpm_hs_irq_mask register (area DPM).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_dpm_irq_raw_clear           ,	0x00000010
 .equ Adr_NX56_handshake_ctrl_handshake_dpm_irq_raw_clear,	0x1018C310
 .equ Adr_NX56_handshake_dpm_irq_raw_clear               ,	0x1018C310

 .equ MSK_NX56_handshake_dpm_irq_raw_clear_vector,	0x000000ff
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_vector,	0
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc0  ,	0x00000100
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc0  ,	8
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc1  ,	0x00000200
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc1  ,	9
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc2  ,	0x00000400
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc2  ,	10
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc3  ,	0x00000800
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc3  ,	11
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc4  ,	0x00001000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc4  ,	12
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc5  ,	0x00002000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc5  ,	13
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc6  ,	0x00004000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc6  ,	14
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc7  ,	0x00008000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc7  ,	15
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc8  ,	0x00010000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc8  ,	16
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc9  ,	0x00020000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc9  ,	17
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc10 ,	0x00040000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc10 ,	18
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc11 ,	0x00080000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc11 ,	19
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc12 ,	0x00100000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc12 ,	20
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc13 ,	0x00200000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc13 ,	21
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc14 ,	0x00400000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc14 ,	22
 .equ MSK_NX56_handshake_dpm_irq_raw_clear_hsc15 ,	0x00800000
 .equ SRT_NX56_handshake_dpm_irq_raw_clear_hsc15 ,	23

@ ---------------------------------------------------------------------
@ Register handshake_dpm_irq_masked
@ => Handshake Cell Masked Interrupt for DPM register.
@    Shows status of masked IRQs (as connected to DPM/host).
@    Note:
@       DPM related IRQ status can also be read from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQs can also be cleared from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQ masks can also be read from dpm_hs_irq_mask register (area DPM).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_dpm_irq_masked           ,	0x00000014
 .equ Adr_NX56_handshake_ctrl_handshake_dpm_irq_masked,	0x1018C314
 .equ Adr_NX56_handshake_dpm_irq_masked               ,	0x1018C314

 .equ MSK_NX56_handshake_dpm_irq_masked_vector,	0x000000ff
 .equ SRT_NX56_handshake_dpm_irq_masked_vector,	0
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc0  ,	0x00000100
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc0  ,	8
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc1  ,	0x00000200
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc1  ,	9
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc2  ,	0x00000400
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc2  ,	10
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc3  ,	0x00000800
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc3  ,	11
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc4  ,	0x00001000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc4  ,	12
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc5  ,	0x00002000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc5  ,	13
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc6  ,	0x00004000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc6  ,	14
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc7  ,	0x00008000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc7  ,	15
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc8  ,	0x00010000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc8  ,	16
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc9  ,	0x00020000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc9  ,	17
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc10 ,	0x00040000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc10 ,	18
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc11 ,	0x00080000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc11 ,	19
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc12 ,	0x00100000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc12 ,	20
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc13 ,	0x00200000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc13 ,	21
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc14 ,	0x00400000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc14 ,	22
 .equ MSK_NX56_handshake_dpm_irq_masked_hsc15 ,	0x00800000
 .equ SRT_NX56_handshake_dpm_irq_masked_hsc15 ,	23

@ ---------------------------------------------------------------------
@ Register handshake_dpm_irq_msk_set
@ => Handshake Cell Interrupt Mask Enable for DPM register.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Note:
@       DPM related IRQ status can also be read from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQs can also be cleared from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQ masks can also be read from dpm_hs_irq_mask register (area DPM).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_dpm_irq_msk_set           ,	0x00000018
 .equ Adr_NX56_handshake_ctrl_handshake_dpm_irq_msk_set,	0x1018C318
 .equ Adr_NX56_handshake_dpm_irq_msk_set               ,	0x1018C318

 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc0 ,	0x00000100
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc0 ,	8
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc1 ,	0x00000200
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc1 ,	9
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc2 ,	0x00000400
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc2 ,	10
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc3 ,	0x00000800
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc3 ,	11
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc4 ,	0x00001000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc4 ,	12
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc5 ,	0x00002000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc5 ,	13
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc6 ,	0x00004000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc6 ,	14
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc7 ,	0x00008000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc7 ,	15
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc8 ,	0x00010000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc8 ,	16
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc9 ,	0x00020000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc9 ,	17
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc10,	0x00040000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc10,	18
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc11,	0x00080000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc11,	19
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc12,	0x00100000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc12,	20
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc13,	0x00200000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc13,	21
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc14,	0x00400000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc14,	22
 .equ MSK_NX56_handshake_dpm_irq_msk_set_hsc15,	0x00800000
 .equ SRT_NX56_handshake_dpm_irq_msk_set_hsc15,	23

@ ---------------------------------------------------------------------
@ Register handshake_dpm_irq_msk_reset
@ => Handshake Cell Interrupt Mask Disable for DPM register.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Note:
@       DPM related IRQ status can also be read from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQs can also be cleared from dpm_hs_irq_raw register (area DPM).
@       DPM related IRQ masks can also be read from dpm_hs_irq_mask register (area DPM).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_dpm_irq_msk_reset           ,	0x0000001C
 .equ Adr_NX56_handshake_ctrl_handshake_dpm_irq_msk_reset,	0x1018C31C
 .equ Adr_NX56_handshake_dpm_irq_msk_reset               ,	0x1018C31C

 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc0 ,	0x00000100
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc0 ,	8
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc1 ,	0x00000200
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc1 ,	9
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc2 ,	0x00000400
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc2 ,	10
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc3 ,	0x00000800
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc3 ,	11
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc4 ,	0x00001000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc4 ,	12
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc5 ,	0x00002000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc5 ,	13
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc6 ,	0x00004000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc6 ,	14
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc7 ,	0x00008000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc7 ,	15
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc8 ,	0x00010000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc8 ,	16
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc9 ,	0x00020000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc9 ,	17
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc10,	0x00040000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc10,	18
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc11,	0x00080000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc11,	19
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc12,	0x00100000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc12,	20
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc13,	0x00200000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc13,	21
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc14,	0x00400000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc14,	22
 .equ MSK_NX56_handshake_dpm_irq_msk_reset_hsc15,	0x00800000
 .equ SRT_NX56_handshake_dpm_irq_msk_reset_hsc15,	23

@ ---------------------------------------------------------------------
@ Register handshake_arm_irq_raw_clear
@ => Handshake Cell Raw Interrupt for ARM register.
@    Read access shows status of unmasked IRQs.
@    Write access with '1' clears the appropriate IRQ.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_arm_irq_raw_clear           ,	0x00000020
 .equ Adr_NX56_handshake_ctrl_handshake_arm_irq_raw_clear,	0x1018C320
 .equ Adr_NX56_handshake_arm_irq_raw_clear               ,	0x1018C320

 .equ MSK_NX56_handshake_arm_irq_raw_clear_vector,	0x000000ff
 .equ SRT_NX56_handshake_arm_irq_raw_clear_vector,	0
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc0  ,	0x00000100
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc0  ,	8
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc1  ,	0x00000200
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc1  ,	9
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc2  ,	0x00000400
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc2  ,	10
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc3  ,	0x00000800
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc3  ,	11
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc4  ,	0x00001000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc4  ,	12
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc5  ,	0x00002000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc5  ,	13
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc6  ,	0x00004000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc6  ,	14
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc7  ,	0x00008000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc7  ,	15
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc8  ,	0x00010000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc8  ,	16
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc9  ,	0x00020000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc9  ,	17
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc10 ,	0x00040000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc10 ,	18
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc11 ,	0x00080000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc11 ,	19
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc12 ,	0x00100000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc12 ,	20
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc13 ,	0x00200000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc13 ,	21
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc14 ,	0x00400000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc14 ,	22
 .equ MSK_NX56_handshake_arm_irq_raw_clear_hsc15 ,	0x00800000
 .equ SRT_NX56_handshake_arm_irq_raw_clear_hsc15 ,	23

@ ---------------------------------------------------------------------
@ Register handshake_arm_irq_masked
@ => Handshake Cell Masked Interrupt for ARM register.
@    Shows status of masked IRQs (as connected to ARM).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_arm_irq_masked           ,	0x00000024
 .equ Adr_NX56_handshake_ctrl_handshake_arm_irq_masked,	0x1018C324
 .equ Adr_NX56_handshake_arm_irq_masked               ,	0x1018C324

 .equ MSK_NX56_handshake_arm_irq_masked_vector,	0x000000ff
 .equ SRT_NX56_handshake_arm_irq_masked_vector,	0
 .equ MSK_NX56_handshake_arm_irq_masked_hsc0  ,	0x00000100
 .equ SRT_NX56_handshake_arm_irq_masked_hsc0  ,	8
 .equ MSK_NX56_handshake_arm_irq_masked_hsc1  ,	0x00000200
 .equ SRT_NX56_handshake_arm_irq_masked_hsc1  ,	9
 .equ MSK_NX56_handshake_arm_irq_masked_hsc2  ,	0x00000400
 .equ SRT_NX56_handshake_arm_irq_masked_hsc2  ,	10
 .equ MSK_NX56_handshake_arm_irq_masked_hsc3  ,	0x00000800
 .equ SRT_NX56_handshake_arm_irq_masked_hsc3  ,	11
 .equ MSK_NX56_handshake_arm_irq_masked_hsc4  ,	0x00001000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc4  ,	12
 .equ MSK_NX56_handshake_arm_irq_masked_hsc5  ,	0x00002000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc5  ,	13
 .equ MSK_NX56_handshake_arm_irq_masked_hsc6  ,	0x00004000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc6  ,	14
 .equ MSK_NX56_handshake_arm_irq_masked_hsc7  ,	0x00008000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc7  ,	15
 .equ MSK_NX56_handshake_arm_irq_masked_hsc8  ,	0x00010000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc8  ,	16
 .equ MSK_NX56_handshake_arm_irq_masked_hsc9  ,	0x00020000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc9  ,	17
 .equ MSK_NX56_handshake_arm_irq_masked_hsc10 ,	0x00040000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc10 ,	18
 .equ MSK_NX56_handshake_arm_irq_masked_hsc11 ,	0x00080000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc11 ,	19
 .equ MSK_NX56_handshake_arm_irq_masked_hsc12 ,	0x00100000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc12 ,	20
 .equ MSK_NX56_handshake_arm_irq_masked_hsc13 ,	0x00200000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc13 ,	21
 .equ MSK_NX56_handshake_arm_irq_masked_hsc14 ,	0x00400000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc14 ,	22
 .equ MSK_NX56_handshake_arm_irq_masked_hsc15 ,	0x00800000
 .equ SRT_NX56_handshake_arm_irq_masked_hsc15 ,	23

@ ---------------------------------------------------------------------
@ Register handshake_arm_irq_msk_set
@ => Handshake Cell Interrupt Mask Enable for ARM register.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_arm_irq_msk_set           ,	0x00000028
 .equ Adr_NX56_handshake_ctrl_handshake_arm_irq_msk_set,	0x1018C328
 .equ Adr_NX56_handshake_arm_irq_msk_set               ,	0x1018C328

 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc0 ,	0x00000100
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc0 ,	8
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc1 ,	0x00000200
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc1 ,	9
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc2 ,	0x00000400
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc2 ,	10
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc3 ,	0x00000800
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc3 ,	11
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc4 ,	0x00001000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc4 ,	12
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc5 ,	0x00002000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc5 ,	13
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc6 ,	0x00004000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc6 ,	14
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc7 ,	0x00008000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc7 ,	15
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc8 ,	0x00010000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc8 ,	16
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc9 ,	0x00020000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc9 ,	17
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc10,	0x00040000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc10,	18
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc11,	0x00080000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc11,	19
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc12,	0x00100000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc12,	20
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc13,	0x00200000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc13,	21
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc14,	0x00400000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc14,	22
 .equ MSK_NX56_handshake_arm_irq_msk_set_hsc15,	0x00800000
 .equ SRT_NX56_handshake_arm_irq_msk_set_hsc15,	23

@ ---------------------------------------------------------------------
@ Register handshake_arm_irq_msk_reset
@ => Handshake Cell Interrupt Mask Disable for ARM register.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_arm_irq_msk_reset           ,	0x0000002C
 .equ Adr_NX56_handshake_ctrl_handshake_arm_irq_msk_reset,	0x1018C32C
 .equ Adr_NX56_handshake_arm_irq_msk_reset               ,	0x1018C32C

 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc0 ,	0x00000100
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc0 ,	8
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc1 ,	0x00000200
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc1 ,	9
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc2 ,	0x00000400
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc2 ,	10
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc3 ,	0x00000800
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc3 ,	11
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc4 ,	0x00001000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc4 ,	12
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc5 ,	0x00002000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc5 ,	13
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc6 ,	0x00004000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc6 ,	14
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc7 ,	0x00008000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc7 ,	15
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc8 ,	0x00010000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc8 ,	16
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc9 ,	0x00020000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc9 ,	17
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc10,	0x00040000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc10,	18
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc11,	0x00080000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc11,	19
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc12,	0x00100000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc12,	20
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc13,	0x00200000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc13,	21
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc14,	0x00400000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc14,	22
 .equ MSK_NX56_handshake_arm_irq_msk_reset_hsc15,	0x00800000
 .equ SRT_NX56_handshake_arm_irq_msk_reset_hsc15,	23

@ ---------------------------------------------------------------------
@ Register handshake_xpic_irq_raw_clear
@ => Handshake Cell Raw Interrupt for xPIC register.
@    Read access shows status of unmasked IRQs.
@    Write access with '1' clears the appropriate IRQ.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_xpic_irq_raw_clear           ,	0x00000030
 .equ Adr_NX56_handshake_ctrl_handshake_xpic_irq_raw_clear,	0x1018C330
 .equ Adr_NX56_handshake_xpic_irq_raw_clear               ,	0x1018C330

 .equ MSK_NX56_handshake_xpic_irq_raw_clear_vector,	0x000000ff
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_vector,	0
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc0  ,	0x00000100
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc0  ,	8
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc1  ,	0x00000200
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc1  ,	9
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc2  ,	0x00000400
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc2  ,	10
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc3  ,	0x00000800
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc3  ,	11
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc4  ,	0x00001000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc4  ,	12
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc5  ,	0x00002000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc5  ,	13
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc6  ,	0x00004000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc6  ,	14
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc7  ,	0x00008000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc7  ,	15
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc8  ,	0x00010000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc8  ,	16
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc9  ,	0x00020000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc9  ,	17
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc10 ,	0x00040000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc10 ,	18
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc11 ,	0x00080000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc11 ,	19
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc12 ,	0x00100000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc12 ,	20
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc13 ,	0x00200000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc13 ,	21
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc14 ,	0x00400000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc14 ,	22
 .equ MSK_NX56_handshake_xpic_irq_raw_clear_hsc15 ,	0x00800000
 .equ SRT_NX56_handshake_xpic_irq_raw_clear_hsc15 ,	23

@ ---------------------------------------------------------------------
@ Register handshake_xpic_irq_masked
@ => Handshake Cell Masked Interrupt for xPIC register.
@    Shows status of masked IRQs (as connected to ARM/xPIC).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_xpic_irq_masked           ,	0x00000034
 .equ Adr_NX56_handshake_ctrl_handshake_xpic_irq_masked,	0x1018C334
 .equ Adr_NX56_handshake_xpic_irq_masked               ,	0x1018C334

 .equ MSK_NX56_handshake_xpic_irq_masked_vector,	0x000000ff
 .equ SRT_NX56_handshake_xpic_irq_masked_vector,	0
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc0  ,	0x00000100
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc0  ,	8
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc1  ,	0x00000200
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc1  ,	9
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc2  ,	0x00000400
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc2  ,	10
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc3  ,	0x00000800
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc3  ,	11
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc4  ,	0x00001000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc4  ,	12
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc5  ,	0x00002000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc5  ,	13
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc6  ,	0x00004000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc6  ,	14
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc7  ,	0x00008000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc7  ,	15
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc8  ,	0x00010000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc8  ,	16
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc9  ,	0x00020000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc9  ,	17
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc10 ,	0x00040000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc10 ,	18
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc11 ,	0x00080000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc11 ,	19
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc12 ,	0x00100000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc12 ,	20
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc13 ,	0x00200000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc13 ,	21
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc14 ,	0x00400000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc14 ,	22
 .equ MSK_NX56_handshake_xpic_irq_masked_hsc15 ,	0x00800000
 .equ SRT_NX56_handshake_xpic_irq_masked_hsc15 ,	23

@ ---------------------------------------------------------------------
@ Register handshake_xpic_irq_msk_set
@ => Handshake Cell Interrupt Mask Enable for xPIC register.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_xpic_irq_msk_set           ,	0x00000038
 .equ Adr_NX56_handshake_ctrl_handshake_xpic_irq_msk_set,	0x1018C338
 .equ Adr_NX56_handshake_xpic_irq_msk_set               ,	0x1018C338

 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc0 ,	0x00000100
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc0 ,	8
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc1 ,	0x00000200
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc1 ,	9
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc2 ,	0x00000400
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc2 ,	10
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc3 ,	0x00000800
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc3 ,	11
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc4 ,	0x00001000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc4 ,	12
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc5 ,	0x00002000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc5 ,	13
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc6 ,	0x00004000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc6 ,	14
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc7 ,	0x00008000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc7 ,	15
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc8 ,	0x00010000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc8 ,	16
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc9 ,	0x00020000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc9 ,	17
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc10,	0x00040000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc10,	18
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc11,	0x00080000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc11,	19
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc12,	0x00100000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc12,	20
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc13,	0x00200000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc13,	21
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc14,	0x00400000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc14,	22
 .equ MSK_NX56_handshake_xpic_irq_msk_set_hsc15,	0x00800000
 .equ SRT_NX56_handshake_xpic_irq_msk_set_hsc15,	23

@ ---------------------------------------------------------------------
@ Register handshake_xpic_irq_msk_reset
@ => Handshake Cell Interrupt Mask Disable for xPIC register.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_xpic_irq_msk_reset           ,	0x0000003C
 .equ Adr_NX56_handshake_ctrl_handshake_xpic_irq_msk_reset,	0x1018C33C
 .equ Adr_NX56_handshake_xpic_irq_msk_reset               ,	0x1018C33C

 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc0 ,	0x00000100
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc0 ,	8
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc1 ,	0x00000200
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc1 ,	9
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc2 ,	0x00000400
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc2 ,	10
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc3 ,	0x00000800
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc3 ,	11
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc4 ,	0x00001000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc4 ,	12
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc5 ,	0x00002000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc5 ,	13
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc6 ,	0x00004000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc6 ,	14
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc7 ,	0x00008000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc7 ,	15
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc8 ,	0x00010000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc8 ,	16
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc9 ,	0x00020000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc9 ,	17
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc10,	0x00040000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc10,	18
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc11,	0x00080000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc11,	19
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc12,	0x00100000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc12,	20
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc13,	0x00200000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc13,	21
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc14,	0x00400000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc14,	22
 .equ MSK_NX56_handshake_xpic_irq_msk_reset_hsc15,	0x00800000
 .equ SRT_NX56_handshake_xpic_irq_msk_reset_hsc15,	23

@ ---------------------------------------------------------------------
@ Register handshake_hsc0_ctrl
@ => Handshake Cell 0 Control Register.
@    Handshake data width can be configured individually for each Handshake Cell.
@    In the 'mode' bit field each Handshake Cell can be enabled or disabled and a handshake
@    path (i.e. participating masters) can be configured individually.
@    When a Handshake Cell is enabled there are certain bytes writable only by certain related masters (view 'mode' description).
@    Handshake Cell data mapping and read-only behavior is netx50 compatible. Handshake Cell IRQ generation can
@    be done netx50 or netx10 compatible by programming the 'netx50_comp' bit inside the 'handshake_base_addr' register.
@    Default is netx50 behavior.
@    Handshake Cell IRQ behavior of netx10:
@       A Handshake Cell IRQ will always be generated when data is written
@       to any part (byte, 16bit or 32bit word) of the 32bit area the related Handshake Cell is
@       located (inside INTRAMHS). I.e. an IRQ is also generated when data is written to read-only
@       or data-memory parts of the 32bit Handshake Cell area.
@       A Handshake Cell IRQ will always be cleared when data is read from any part of the 32bit
@       Handshake Cell area.
@    Handshake Cell IRQ behavior of netx50:
@       A Handshake Cell IRQ will only be generated when data is written to the participating
@       part (8bit Handshake Cell: byte, 16bit Handshake Cell: 16bit word) of the 32bit area
@       the related Handshake Cell is located (inside INTRAMHS) which is not read-only. I.e. an IRQ
@       is not generated when data is written to read-only or data-memory parts of the 32bit
@       Handshake Cell area.
@       A Handshake Cell IRQ will only be cleared when data is read from any participating
@       read-only part of the 32bit Handshake Cell area. I.e. also a byte-read from a 16bit
@       Handshake Cell read-only part will clear the related IRQ.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc0_ctrl           ,	0x00000080
 .equ Adr_NX56_handshake_ctrl_handshake_hsc0_ctrl,	0x1018C380
 .equ Adr_NX56_handshake_hsc0_ctrl               ,	0x1018C380

 .equ MSK_NX56_handshake_hsc0_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc0_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc0_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc0_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc1_ctrl
@ => Handshake Cell 1 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc1_ctrl           ,	0x00000084
 .equ Adr_NX56_handshake_ctrl_handshake_hsc1_ctrl,	0x1018C384
 .equ Adr_NX56_handshake_hsc1_ctrl               ,	0x1018C384

 .equ MSK_NX56_handshake_hsc1_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc1_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc1_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc1_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc2_ctrl
@ => Handshake Cell 2 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc2_ctrl           ,	0x00000088
 .equ Adr_NX56_handshake_ctrl_handshake_hsc2_ctrl,	0x1018C388
 .equ Adr_NX56_handshake_hsc2_ctrl               ,	0x1018C388

 .equ MSK_NX56_handshake_hsc2_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc2_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc2_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc2_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc3_ctrl
@ => Handshake Cell 3 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc3_ctrl           ,	0x0000008C
 .equ Adr_NX56_handshake_ctrl_handshake_hsc3_ctrl,	0x1018C38C
 .equ Adr_NX56_handshake_hsc3_ctrl               ,	0x1018C38C

 .equ MSK_NX56_handshake_hsc3_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc3_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc3_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc3_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc4_ctrl
@ => Handshake Cell 4 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc4_ctrl           ,	0x00000090
 .equ Adr_NX56_handshake_ctrl_handshake_hsc4_ctrl,	0x1018C390
 .equ Adr_NX56_handshake_hsc4_ctrl               ,	0x1018C390

 .equ MSK_NX56_handshake_hsc4_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc4_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc4_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc4_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc5_ctrl
@ => Handshake Cell 5 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc5_ctrl           ,	0x00000094
 .equ Adr_NX56_handshake_ctrl_handshake_hsc5_ctrl,	0x1018C394
 .equ Adr_NX56_handshake_hsc5_ctrl               ,	0x1018C394

 .equ MSK_NX56_handshake_hsc5_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc5_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc5_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc5_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc6_ctrl
@ => Handshake Cell 6 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc6_ctrl           ,	0x00000098
 .equ Adr_NX56_handshake_ctrl_handshake_hsc6_ctrl,	0x1018C398
 .equ Adr_NX56_handshake_hsc6_ctrl               ,	0x1018C398

 .equ MSK_NX56_handshake_hsc6_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc6_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc6_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc6_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc7_ctrl
@ => Handshake Cell 7 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc7_ctrl           ,	0x0000009C
 .equ Adr_NX56_handshake_ctrl_handshake_hsc7_ctrl,	0x1018C39C
 .equ Adr_NX56_handshake_hsc7_ctrl               ,	0x1018C39C

 .equ MSK_NX56_handshake_hsc7_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc7_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc7_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc7_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc8_ctrl
@ => Handshake Cell 8 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc8_ctrl           ,	0x000000A0
 .equ Adr_NX56_handshake_ctrl_handshake_hsc8_ctrl,	0x1018C3A0
 .equ Adr_NX56_handshake_hsc8_ctrl               ,	0x1018C3A0

 .equ MSK_NX56_handshake_hsc8_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc8_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc8_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc8_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc9_ctrl
@ => Handshake Cell 9 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc9_ctrl           ,	0x000000A4
 .equ Adr_NX56_handshake_ctrl_handshake_hsc9_ctrl,	0x1018C3A4
 .equ Adr_NX56_handshake_hsc9_ctrl               ,	0x1018C3A4

 .equ MSK_NX56_handshake_hsc9_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc9_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc9_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc9_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc10_ctrl
@ => Handshake Cell 10 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc10_ctrl           ,	0x000000A8
 .equ Adr_NX56_handshake_ctrl_handshake_hsc10_ctrl,	0x1018C3A8
 .equ Adr_NX56_handshake_hsc10_ctrl               ,	0x1018C3A8

 .equ MSK_NX56_handshake_hsc10_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc10_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc10_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc10_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc11_ctrl
@ => Handshake Cell 11 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc11_ctrl           ,	0x000000AC
 .equ Adr_NX56_handshake_ctrl_handshake_hsc11_ctrl,	0x1018C3AC
 .equ Adr_NX56_handshake_hsc11_ctrl               ,	0x1018C3AC

 .equ MSK_NX56_handshake_hsc11_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc11_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc11_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc11_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc12_ctrl
@ => Handshake Cell 12 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc12_ctrl           ,	0x000000B0
 .equ Adr_NX56_handshake_ctrl_handshake_hsc12_ctrl,	0x1018C3B0
 .equ Adr_NX56_handshake_hsc12_ctrl               ,	0x1018C3B0

 .equ MSK_NX56_handshake_hsc12_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc12_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc12_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc12_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc13_ctrl
@ => Handshake Cell 13 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc13_ctrl           ,	0x000000B4
 .equ Adr_NX56_handshake_ctrl_handshake_hsc13_ctrl,	0x1018C3B4
 .equ Adr_NX56_handshake_hsc13_ctrl               ,	0x1018C3B4

 .equ MSK_NX56_handshake_hsc13_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc13_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc13_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc13_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc14_ctrl
@ => Handshake Cell 14 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc14_ctrl           ,	0x000000B8
 .equ Adr_NX56_handshake_ctrl_handshake_hsc14_ctrl,	0x1018C3B8
 .equ Adr_NX56_handshake_hsc14_ctrl               ,	0x1018C3B8

 .equ MSK_NX56_handshake_hsc14_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc14_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc14_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc14_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_hsc15_ctrl
@ => Handshake Cell 15 Control Register.
@    For detailed information view handshake_hsc0_ctrl documentation.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_hsc15_ctrl           ,	0x000000BC
 .equ Adr_NX56_handshake_ctrl_handshake_hsc15_ctrl,	0x1018C3BC
 .equ Adr_NX56_handshake_hsc15_ctrl               ,	0x1018C3BC

 .equ MSK_NX56_handshake_hsc15_ctrl_mode ,	0x00000003
 .equ SRT_NX56_handshake_hsc15_ctrl_mode ,	0
 .equ MSK_NX56_handshake_hsc15_ctrl_width,	0x00000010
 .equ SRT_NX56_handshake_hsc15_ctrl_width,	4

@ ---------------------------------------------------------------------
@ Register handshake_buf_man0_ctrl
@ => Handshake Triple Buffer Manager 0 Control register.
@    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 HCF_PD_OUT_CMD/NCF_PD_OUT_ACK-bits
@    for Host controlled DPM output data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man0_ctrl           ,	0x000000C0
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man0_ctrl,	0x1018C3C0
 .equ Adr_NX56_handshake_buf_man0_ctrl               ,	0x1018C3C0

 .equ MSK_NX56_handshake_buf_man0_ctrl_hsc2_auto_PD_OUT,	0x00000001
 .equ SRT_NX56_handshake_buf_man0_ctrl_hsc2_auto_PD_OUT,	0
 .equ MSK_NX56_handshake_buf_man0_ctrl_reset           ,	0x00000002
 .equ SRT_NX56_handshake_buf_man0_ctrl_reset           ,	1
 .equ MSK_NX56_handshake_buf_man0_ctrl_buf_dam_cfg     ,	0x0000000c
 .equ SRT_NX56_handshake_buf_man0_ctrl_buf_dam_cfg     ,	2

@ ---------------------------------------------------------------------
@ Register handshake_buf_man0_status_ctrl_netx
@ => Handshake Triple Buffer Manager 0 netX Status and Control Register.
@    On read this register provides current status of netX side of Handshake Triple Buffer Manager 0. Buffer
@    requests can be done by writing this register.
@    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6)
@    for Host controlled DPM output data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man0_status_ctrl_netx           ,	0x000000C4
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man0_status_ctrl_netx,	0x1018C3C4
 .equ Adr_NX56_handshake_buf_man0_status_ctrl_netx               ,	0x1018C3C4

 .equ MSK_NX56_handshake_buf_man0_status_ctrl_netx_buf_ro,	0x00000003
 .equ SRT_NX56_handshake_buf_man0_status_ctrl_netx_buf_ro,	0
 .equ MSK_NX56_handshake_buf_man0_status_ctrl_netx_cmd   ,	0x00000030
 .equ SRT_NX56_handshake_buf_man0_status_ctrl_netx_cmd   ,	4

@ ---------------------------------------------------------------------
@ Register handshake_buf_man0_status_ctrl_host
@ => Handshake Triple Buffer Manager 0 Host Status register.
@    On read this register provides current status of host side of Handshake Triple Buffer Manager 0. Buffer
@    requests can be done by writing this register.
@    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6)
@    for Host controlled DPM output data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man0_status_ctrl_host           ,	0x000000C8
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man0_status_ctrl_host,	0x1018C3C8
 .equ Adr_NX56_handshake_buf_man0_status_ctrl_host               ,	0x1018C3C8

 .equ MSK_NX56_handshake_buf_man0_status_ctrl_host_buf_ro,	0x00000003
 .equ SRT_NX56_handshake_buf_man0_status_ctrl_host_buf_ro,	0
 .equ MSK_NX56_handshake_buf_man0_status_ctrl_host_cmd   ,	0x00000030
 .equ SRT_NX56_handshake_buf_man0_status_ctrl_host_cmd   ,	4

@ ---------------------------------------------------------------------
@ Register handshake_buf_man0_win_map
@ => DPM Window Address Map Alternative Configuration Register for Handshake Triple Buffer Manager 0.
@    Handshake Triple Buffer Manager 0 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6)
@    for Host controlled DPM output data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@      If DPM auto buffer window change is enabled, buffer 0 related DPM window mapping is window mapping programmed
@      for related window in DPM address are.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man0_win_map           ,	0x000000CC
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man0_win_map,	0x1018C3CC
 .equ Adr_NX56_handshake_buf_man0_win_map               ,	0x1018C3CC

 .equ MSK_NX56_handshake_buf_man0_win_map_win_map_buf1,	0x00001fff
 .equ SRT_NX56_handshake_buf_man0_win_map_win_map_buf1,	0
 .equ MSK_NX56_handshake_buf_man0_win_map_win_map_buf2,	0x1fff0000
 .equ SRT_NX56_handshake_buf_man0_win_map_win_map_buf2,	16

@ ---------------------------------------------------------------------
@ Register handshake_buf_man1_ctrl
@ => Handshake Triple Buffer Manager 1 Control register.
@    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 HCF_PD_IN_CMD/NCF_PD_IN_ACK-bits
@    for Host controlled DPM input data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man1_ctrl           ,	0x000000D0
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man1_ctrl,	0x1018C3D0
 .equ Adr_NX56_handshake_buf_man1_ctrl               ,	0x1018C3D0

 .equ MSK_NX56_handshake_buf_man1_ctrl_hsc2_auto_PD_IN,	0x00000001
 .equ SRT_NX56_handshake_buf_man1_ctrl_hsc2_auto_PD_IN,	0
 .equ MSK_NX56_handshake_buf_man1_ctrl_reset          ,	0x00000002
 .equ SRT_NX56_handshake_buf_man1_ctrl_reset          ,	1
 .equ MSK_NX56_handshake_buf_man1_ctrl_buf_dam_cfg    ,	0x0000000c
 .equ SRT_NX56_handshake_buf_man1_ctrl_buf_dam_cfg    ,	2

@ ---------------------------------------------------------------------
@ Register handshake_buf_man1_status_ctrl_netx
@ => Handshake Triple Buffer Manager 1 netX Status and Control Register.
@    On read this register provides current status of netX side of Handshake Triple Buffer Manager 1. Buffer
@    requests can be done by writing this register.
@    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6)
@    for Host controlled DPM input data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man1_status_ctrl_netx           ,	0x000000D4
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man1_status_ctrl_netx,	0x1018C3D4
 .equ Adr_NX56_handshake_buf_man1_status_ctrl_netx               ,	0x1018C3D4

 .equ MSK_NX56_handshake_buf_man1_status_ctrl_netx_buf_ro,	0x00000003
 .equ SRT_NX56_handshake_buf_man1_status_ctrl_netx_buf_ro,	0
 .equ MSK_NX56_handshake_buf_man1_status_ctrl_netx_cmd   ,	0x00000030
 .equ SRT_NX56_handshake_buf_man1_status_ctrl_netx_cmd   ,	4

@ ---------------------------------------------------------------------
@ Register handshake_buf_man1_status_ctrl_host
@ => Handshake Triple Buffer Manager 1 Host Status register.
@    On read this register provides current status of host side of Handshake Triple Buffer Manager 1. Buffer
@    requests can be done by writing this register.
@    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 Bits 6 and 22 (16+6)
@    for host controlled DPM input data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man1_status_ctrl_host           ,	0x000000D8
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man1_status_ctrl_host,	0x1018C3D8
 .equ Adr_NX56_handshake_buf_man1_status_ctrl_host               ,	0x1018C3D8

 .equ MSK_NX56_handshake_buf_man1_status_ctrl_host_buf_ro,	0x00000003
 .equ SRT_NX56_handshake_buf_man1_status_ctrl_host_buf_ro,	0
 .equ MSK_NX56_handshake_buf_man1_status_ctrl_host_cmd   ,	0x00000030
 .equ SRT_NX56_handshake_buf_man1_status_ctrl_host_cmd   ,	4

@ ---------------------------------------------------------------------
@ Register handshake_buf_man1_win_map
@ => DPM Window Address Map Alternative Configuration Register for Handshake Triple Buffer Manager 1.
@    Handshake Triple Buffer Manager 1 can be associated to Handshake Cell 2 Bits 7 and 23 (16+7)
@    for Host controlled DPM input data handling and DPM auto buffer window change.
@    Note:
@      DPM auto buffer window change configuration is controlled inside DPM address area at window map registers.
@      If DPM auto buffer window change is enabled, buffer 1 related DPM window mapping is window mapping programmed
@      for related window in DPM address are.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_handshake_buf_man1_win_map           ,	0x000000DC
 .equ Adr_NX56_handshake_ctrl_handshake_buf_man1_win_map,	0x1018C3DC
 .equ Adr_NX56_handshake_buf_man1_win_map               ,	0x1018C3DC

 .equ MSK_NX56_handshake_buf_man1_win_map_win_map_buf1,	0x00001fff
 .equ SRT_NX56_handshake_buf_man1_win_map_win_map_buf1,	0
 .equ MSK_NX56_handshake_buf_man1_win_map_win_map_buf2,	0x1fff0000
 .equ SRT_NX56_handshake_buf_man1_win_map_win_map_buf2,	16


@ =====================================================================
@
@ Area of xpic_regs
@
@ =====================================================================

 .equ Addr_NX56_xpic_regs, 0x1018C400

@ ---------------------------------------------------------------------
@ Register xpic_r0
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r0      ,	0x00000000
 .equ Adr_NX56_xpic_regs_xpic_r0,	0x1018C400
 .equ Adr_NX56_xpic_r0          ,	0x1018C400

 .equ MSK_NX56_xpic_r0_r0,	0xffffffff
 .equ SRT_NX56_xpic_r0_r0,	0

@ ---------------------------------------------------------------------
@ Register xpic_r1
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r1      ,	0x00000004
 .equ Adr_NX56_xpic_regs_xpic_r1,	0x1018C404
 .equ Adr_NX56_xpic_r1          ,	0x1018C404

 .equ MSK_NX56_xpic_r1_r1,	0xffffffff
 .equ SRT_NX56_xpic_r1_r1,	0

@ ---------------------------------------------------------------------
@ Register xpic_r2
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r2      ,	0x00000008
 .equ Adr_NX56_xpic_regs_xpic_r2,	0x1018C408
 .equ Adr_NX56_xpic_r2          ,	0x1018C408

 .equ MSK_NX56_xpic_r2_r2,	0xffffffff
 .equ SRT_NX56_xpic_r2_r2,	0

@ ---------------------------------------------------------------------
@ Register xpic_r3
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r3      ,	0x0000000C
 .equ Adr_NX56_xpic_regs_xpic_r3,	0x1018C40C
 .equ Adr_NX56_xpic_r3          ,	0x1018C40C

 .equ MSK_NX56_xpic_r3_r3,	0xffffffff
 .equ SRT_NX56_xpic_r3_r3,	0

@ ---------------------------------------------------------------------
@ Register xpic_r4
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r4      ,	0x00000010
 .equ Adr_NX56_xpic_regs_xpic_r4,	0x1018C410
 .equ Adr_NX56_xpic_r4          ,	0x1018C410

 .equ MSK_NX56_xpic_r4_r4,	0xffffffff
 .equ SRT_NX56_xpic_r4_r4,	0

@ ---------------------------------------------------------------------
@ Register xpic_r5
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r5      ,	0x00000014
 .equ Adr_NX56_xpic_regs_xpic_r5,	0x1018C414
 .equ Adr_NX56_xpic_r5          ,	0x1018C414

 .equ MSK_NX56_xpic_r5_r5,	0xffffffff
 .equ SRT_NX56_xpic_r5_r5,	0

@ ---------------------------------------------------------------------
@ Register xpic_r6
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r6      ,	0x00000018
 .equ Adr_NX56_xpic_regs_xpic_r6,	0x1018C418
 .equ Adr_NX56_xpic_r6          ,	0x1018C418

 .equ MSK_NX56_xpic_r6_r6,	0xffffffff
 .equ SRT_NX56_xpic_r6_r6,	0

@ ---------------------------------------------------------------------
@ Register xpic_r7
@ => xPIC work register for indirect addressing
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_r7      ,	0x0000001C
 .equ Adr_NX56_xpic_regs_xpic_r7,	0x1018C41C
 .equ Adr_NX56_xpic_r7          ,	0x1018C41C

 .equ MSK_NX56_xpic_r7_r7,	0xffffffff
 .equ SRT_NX56_xpic_r7_r7,	0

@ ---------------------------------------------------------------------
@ Register xpic_usr0
@ => xPIC user Register additional work register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_usr0      ,	0x00000020
 .equ Adr_NX56_xpic_regs_xpic_usr0,	0x1018C420
 .equ Adr_NX56_xpic_usr0          ,	0x1018C420

 .equ MSK_NX56_xpic_usr0_usr0,	0xffffffff
 .equ SRT_NX56_xpic_usr0_usr0,	0

@ ---------------------------------------------------------------------
@ Register xpic_usr1
@ => xPIC user Register additional work register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_usr1      ,	0x00000024
 .equ Adr_NX56_xpic_regs_xpic_usr1,	0x1018C424
 .equ Adr_NX56_xpic_usr1          ,	0x1018C424

 .equ MSK_NX56_xpic_usr1_usr1,	0xffffffff
 .equ SRT_NX56_xpic_usr1_usr1,	0

@ ---------------------------------------------------------------------
@ Register xpic_usr2
@ => xPIC user Register additional work register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_usr2      ,	0x00000028
 .equ Adr_NX56_xpic_regs_xpic_usr2,	0x1018C428
 .equ Adr_NX56_xpic_usr2          ,	0x1018C428

 .equ MSK_NX56_xpic_usr2_usr2,	0xffffffff
 .equ SRT_NX56_xpic_usr2_usr2,	0

@ ---------------------------------------------------------------------
@ Register xpic_usr3
@ => xPIC user Register additional work register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_usr3      ,	0x0000002C
 .equ Adr_NX56_xpic_regs_xpic_usr3,	0x1018C42C
 .equ Adr_NX56_xpic_usr3          ,	0x1018C42C

 .equ MSK_NX56_xpic_usr3_usr3,	0xffffffff
 .equ SRT_NX56_xpic_usr3_usr3,	0

@ ---------------------------------------------------------------------
@ Register xpic_usr4
@ => xPIC user Register additional work register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_usr4      ,	0x00000030
 .equ Adr_NX56_xpic_regs_xpic_usr4,	0x1018C430
 .equ Adr_NX56_xpic_usr4          ,	0x1018C430

 .equ MSK_NX56_xpic_usr4_usr4,	0xffffffff
 .equ SRT_NX56_xpic_usr4_usr4,	0

@ ---------------------------------------------------------------------
@ Register xpic_pc
@ => xPIC Program Counter
@    Shared in xPIC 64_BIT_MUL_TARGET mode with usr32 (w mode)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_pc      ,	0x00000034
 .equ Adr_NX56_xpic_regs_xpic_pc,	0x1018C434
 .equ Adr_NX56_xpic_pc          ,	0x1018C434

 .equ MSK_NX56_xpic_pc_pc,	0x000007ff
 .equ SRT_NX56_xpic_pc_pc,	0

@ ---------------------------------------------------------------------
@ Register xpic_stat
@ => Processor Status Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_stat      ,	0x00000038
 .equ Adr_NX56_xpic_regs_xpic_stat,	0x1018C438
 .equ Adr_NX56_xpic_stat          ,	0x1018C438

 .equ MSK_NX56_xpic_stat_stat,	0xffffffff
 .equ SRT_NX56_xpic_stat_stat,	0

@ ---------------------------------------------------------------------
@ Register xpic_zero
@ => Zero Register
@    Shared in xPIC 64_BIT_MUL_TARGET mode with usr10 (w mode)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_zero      ,	0x0000003C
 .equ Adr_NX56_xpic_regs_xpic_zero,	0x1018C43C
 .equ Adr_NX56_xpic_zero          ,	0x1018C43C

 .equ MSK_NX56_xpic_zero_zero,	0xffffffff
 .equ SRT_NX56_xpic_zero_zero,	0


@ =====================================================================
@
@ Area of xpic_debug
@
@ =====================================================================

 .equ Addr_NX56_xpic_debug, 0x1018C480

@ ---------------------------------------------------------------------
@ Register xpic_hold_pc
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_hold_pc       ,	0x00000000
 .equ Adr_NX56_xpic_debug_xpic_hold_pc,	0x1018C480
 .equ Adr_NX56_xpic_hold_pc           ,	0x1018C480

 .equ MSK_NX56_xpic_hold_pc_hold             ,	0x00000001
 .equ SRT_NX56_xpic_hold_pc_hold             ,	0
 .equ MSK_NX56_xpic_hold_pc_single_step      ,	0x00000002
 .equ SRT_NX56_xpic_hold_pc_single_step      ,	1
 .equ MSK_NX56_xpic_hold_pc_monitor_mode     ,	0x00000004
 .equ SRT_NX56_xpic_hold_pc_monitor_mode     ,	2
 .equ MSK_NX56_xpic_hold_pc_disable_int      ,	0x00000008
 .equ SRT_NX56_xpic_hold_pc_disable_int      ,	3
 .equ MSK_NX56_xpic_hold_pc_misalignment_hold,	0x00000010
 .equ SRT_NX56_xpic_hold_pc_misalignment_hold,	4
 .equ MSK_NX56_xpic_hold_pc_bank_select      ,	0x00000020
 .equ SRT_NX56_xpic_hold_pc_bank_select      ,	5
 .equ MSK_NX56_xpic_hold_pc_bank_control     ,	0x00000040
 .equ SRT_NX56_xpic_hold_pc_bank_control     ,	6
 .equ MSK_NX56_xpic_hold_pc_reset_xpic       ,	0x00000080
 .equ SRT_NX56_xpic_hold_pc_reset_xpic       ,	7

@ ---------------------------------------------------------------------
@ Register xpic_break0_addr
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break0_addr       ,	0x00000004
 .equ Adr_NX56_xpic_debug_xpic_break0_addr,	0x1018C484
 .equ Adr_NX56_xpic_break0_addr           ,	0x1018C484

 .equ MSK_NX56_xpic_break0_addr_val,	0xffffffff
 .equ SRT_NX56_xpic_break0_addr_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break0_addr_mask
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break0_addr_mask       ,	0x00000008
 .equ Adr_NX56_xpic_debug_xpic_break0_addr_mask,	0x1018C488
 .equ Adr_NX56_xpic_break0_addr_mask           ,	0x1018C488

 .equ MSK_NX56_xpic_break0_addr_mask_val,	0xffffffff
 .equ SRT_NX56_xpic_break0_addr_mask_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break0_data
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break0_data       ,	0x0000000C
 .equ Adr_NX56_xpic_debug_xpic_break0_data,	0x1018C48C
 .equ Adr_NX56_xpic_break0_data           ,	0x1018C48C

 .equ MSK_NX56_xpic_break0_data_val,	0xffffffff
 .equ SRT_NX56_xpic_break0_data_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break0_data_mask
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break0_data_mask       ,	0x00000010
 .equ Adr_NX56_xpic_debug_xpic_break0_data_mask,	0x1018C490
 .equ Adr_NX56_xpic_break0_data_mask           ,	0x1018C490

 .equ MSK_NX56_xpic_break0_data_mask_val,	0xffffffff
 .equ SRT_NX56_xpic_break0_data_mask_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break0_contr
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break0_contr       ,	0x00000014
 .equ Adr_NX56_xpic_debug_xpic_break0_contr,	0x1018C494
 .equ Adr_NX56_xpic_break0_contr           ,	0x1018C494

 .equ MSK_NX56_xpic_break0_contr_write      ,	0x00000001
 .equ SRT_NX56_xpic_break0_contr_write      ,	0
 .equ MSK_NX56_xpic_break0_contr_mas        ,	0x00000006
 .equ SRT_NX56_xpic_break0_contr_mas        ,	1
 .equ MSK_NX56_xpic_break0_contr_data_access,	0x00000008
 .equ SRT_NX56_xpic_break0_contr_data_access,	3
 .equ MSK_NX56_xpic_break0_contr_fiq_mode   ,	0x00000010
 .equ SRT_NX56_xpic_break0_contr_fiq_mode   ,	4
 .equ MSK_NX56_xpic_break0_contr_irq_mode   ,	0x00000020
 .equ SRT_NX56_xpic_break0_contr_irq_mode   ,	5
 .equ MSK_NX56_xpic_break0_contr_chain      ,	0x00000040
 .equ SRT_NX56_xpic_break0_contr_chain      ,	6
 .equ MSK_NX56_xpic_break0_contr_range      ,	0x00000080
 .equ SRT_NX56_xpic_break0_contr_range      ,	7
 .equ MSK_NX56_xpic_break0_contr_enable     ,	0x00000100
 .equ SRT_NX56_xpic_break0_contr_enable     ,	8

@ ---------------------------------------------------------------------
@ Register xpic_break0_contr_mask
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break0_contr_mask       ,	0x00000018
 .equ Adr_NX56_xpic_debug_xpic_break0_contr_mask,	0x1018C498
 .equ Adr_NX56_xpic_break0_contr_mask           ,	0x1018C498

 .equ MSK_NX56_xpic_break0_contr_mask_val,	0x000000ff
 .equ SRT_NX56_xpic_break0_contr_mask_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break1_addr
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break1_addr       ,	0x0000001C
 .equ Adr_NX56_xpic_debug_xpic_break1_addr,	0x1018C49C
 .equ Adr_NX56_xpic_break1_addr           ,	0x1018C49C

 .equ MSK_NX56_xpic_break1_addr_val,	0xffffffff
 .equ SRT_NX56_xpic_break1_addr_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break1_addr_mask
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break1_addr_mask       ,	0x00000020
 .equ Adr_NX56_xpic_debug_xpic_break1_addr_mask,	0x1018C4A0
 .equ Adr_NX56_xpic_break1_addr_mask           ,	0x1018C4A0

 .equ MSK_NX56_xpic_break1_addr_mask_val,	0xffffffff
 .equ SRT_NX56_xpic_break1_addr_mask_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break1_data
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break1_data       ,	0x00000024
 .equ Adr_NX56_xpic_debug_xpic_break1_data,	0x1018C4A4
 .equ Adr_NX56_xpic_break1_data           ,	0x1018C4A4

 .equ MSK_NX56_xpic_break1_data_val,	0xffffffff
 .equ SRT_NX56_xpic_break1_data_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break1_data_mask
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break1_data_mask       ,	0x00000028
 .equ Adr_NX56_xpic_debug_xpic_break1_data_mask,	0x1018C4A8
 .equ Adr_NX56_xpic_break1_data_mask           ,	0x1018C4A8

 .equ MSK_NX56_xpic_break1_data_mask_val,	0xffffffff
 .equ SRT_NX56_xpic_break1_data_mask_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break1_contr
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break1_contr       ,	0x0000002C
 .equ Adr_NX56_xpic_debug_xpic_break1_contr,	0x1018C4AC
 .equ Adr_NX56_xpic_break1_contr           ,	0x1018C4AC

 .equ MSK_NX56_xpic_break1_contr_write      ,	0x00000001
 .equ SRT_NX56_xpic_break1_contr_write      ,	0
 .equ MSK_NX56_xpic_break1_contr_mas        ,	0x00000006
 .equ SRT_NX56_xpic_break1_contr_mas        ,	1
 .equ MSK_NX56_xpic_break1_contr_data_access,	0x00000008
 .equ SRT_NX56_xpic_break1_contr_data_access,	3
 .equ MSK_NX56_xpic_break1_contr_fiq_mode   ,	0x00000010
 .equ SRT_NX56_xpic_break1_contr_fiq_mode   ,	4
 .equ MSK_NX56_xpic_break1_contr_irq_mode   ,	0x00000020
 .equ SRT_NX56_xpic_break1_contr_irq_mode   ,	5
 .equ MSK_NX56_xpic_break1_contr_chain      ,	0x00000040
 .equ SRT_NX56_xpic_break1_contr_chain      ,	6
 .equ MSK_NX56_xpic_break1_contr_range      ,	0x00000080
 .equ SRT_NX56_xpic_break1_contr_range      ,	7
 .equ MSK_NX56_xpic_break1_contr_enable     ,	0x00000100
 .equ SRT_NX56_xpic_break1_contr_enable     ,	8

@ ---------------------------------------------------------------------
@ Register xpic_break1_contr_mask
@ => 
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break1_contr_mask       ,	0x00000030
 .equ Adr_NX56_xpic_debug_xpic_break1_contr_mask,	0x1018C4B0
 .equ Adr_NX56_xpic_break1_contr_mask           ,	0x1018C4B0

 .equ MSK_NX56_xpic_break1_contr_mask_val,	0x000000ff
 .equ SRT_NX56_xpic_break1_contr_mask_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break_last_pc
@ => 
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_last_pc       ,	0x00000034
 .equ Adr_NX56_xpic_debug_xpic_break_last_pc,	0x1018C4B4
 .equ Adr_NX56_xpic_break_last_pc           ,	0x1018C4B4

 .equ MSK_NX56_xpic_break_last_pc_val,	0xffffffff
 .equ SRT_NX56_xpic_break_last_pc_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break_status
@ => Read access shows the reason why xPIC is in HOLD / BREAK
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_status       ,	0x00000038
 .equ Adr_NX56_xpic_debug_xpic_break_status,	0x1018C4B8
 .equ Adr_NX56_xpic_break_status           ,	0x1018C4B8

 .equ MSK_NX56_xpic_break_status_xpic_in_hold     ,	0x00000001
 .equ SRT_NX56_xpic_break_status_xpic_in_hold     ,	0
 .equ MSK_NX56_xpic_break_status_hold             ,	0x00000002
 .equ SRT_NX56_xpic_break_status_hold             ,	1
 .equ MSK_NX56_xpic_break_status_break0           ,	0x00000004
 .equ SRT_NX56_xpic_break_status_break0           ,	2
 .equ MSK_NX56_xpic_break_status_break1           ,	0x00000008
 .equ SRT_NX56_xpic_break_status_break1           ,	3
 .equ MSK_NX56_xpic_break_status_soft_break       ,	0x00000010
 .equ SRT_NX56_xpic_break_status_soft_break       ,	4
 .equ MSK_NX56_xpic_break_status_single_step      ,	0x00000020
 .equ SRT_NX56_xpic_break_status_single_step      ,	5
 .equ MSK_NX56_xpic_break_status_data_misalignment,	0x00000040
 .equ SRT_NX56_xpic_break_status_data_misalignment,	6
 .equ MSK_NX56_xpic_break_status_break0_read_data ,	0x00000080
 .equ SRT_NX56_xpic_break_status_break0_read_data ,	7
 .equ MSK_NX56_xpic_break_status_break1_read_data ,	0x00000100
 .equ SRT_NX56_xpic_break_status_break1_read_data ,	8
 .equ MSK_NX56_xpic_break_status_xpic_reset_status,	0x00000200
 .equ SRT_NX56_xpic_break_status_xpic_reset_status,	9

@ ---------------------------------------------------------------------
@ Register xpic_break_irq_raw
@ => xPIC_DEBUG Raw IRQ register:
@    Read access shows status of unmasked IRQs
@    Write access with '1' resets the appropriate IRQ and clear the HOLD reason
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_irq_raw       ,	0x0000003C
 .equ Adr_NX56_xpic_debug_xpic_break_irq_raw,	0x1018C4BC
 .equ Adr_NX56_xpic_break_irq_raw           ,	0x1018C4BC

 .equ MSK_NX56_xpic_break_irq_raw_break0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_break_irq_raw_break0_irq      ,	0
 .equ MSK_NX56_xpic_break_irq_raw_break1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_break_irq_raw_break1_irq      ,	1
 .equ MSK_NX56_xpic_break_irq_raw_soft_break_irq  ,	0x00000004
 .equ SRT_NX56_xpic_break_irq_raw_soft_break_irq  ,	2
 .equ MSK_NX56_xpic_break_irq_raw_single_step_irq ,	0x00000008
 .equ SRT_NX56_xpic_break_irq_raw_single_step_irq ,	3
 .equ MSK_NX56_xpic_break_irq_raw_misalignment_irq,	0x00000010
 .equ SRT_NX56_xpic_break_irq_raw_misalignment_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_break_irq_masked
@ => xPIC_DEBUG Masked IRQ register: for other CPU (ARM)
@    Shows status of masked IRQs (as connected to ARM)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_irq_masked       ,	0x00000040
 .equ Adr_NX56_xpic_debug_xpic_break_irq_masked,	0x1018C4C0
 .equ Adr_NX56_xpic_break_irq_masked           ,	0x1018C4C0

 .equ MSK_NX56_xpic_break_irq_masked_break0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_break_irq_masked_break0_irq      ,	0
 .equ MSK_NX56_xpic_break_irq_masked_break1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_break_irq_masked_break1_irq      ,	1
 .equ MSK_NX56_xpic_break_irq_masked_soft_break_irq  ,	0x00000004
 .equ SRT_NX56_xpic_break_irq_masked_soft_break_irq  ,	2
 .equ MSK_NX56_xpic_break_irq_masked_single_step_irq ,	0x00000008
 .equ SRT_NX56_xpic_break_irq_masked_single_step_irq ,	3
 .equ MSK_NX56_xpic_break_irq_masked_misalignment_irq,	0x00000010
 .equ SRT_NX56_xpic_break_irq_masked_misalignment_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_break_irq_msk_set
@ => xPIC_DEBUG interrupt mask enable: for other CPU (ARM)
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_irq_msk_set       ,	0x00000044
 .equ Adr_NX56_xpic_debug_xpic_break_irq_msk_set,	0x1018C4C4
 .equ Adr_NX56_xpic_break_irq_msk_set           ,	0x1018C4C4

 .equ MSK_NX56_xpic_break_irq_msk_set_break0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_break_irq_msk_set_break0_irq      ,	0
 .equ MSK_NX56_xpic_break_irq_msk_set_break1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_break_irq_msk_set_break1_irq      ,	1
 .equ MSK_NX56_xpic_break_irq_msk_set_soft_break_irq  ,	0x00000004
 .equ SRT_NX56_xpic_break_irq_msk_set_soft_break_irq  ,	2
 .equ MSK_NX56_xpic_break_irq_msk_set_single_step_irq ,	0x00000008
 .equ SRT_NX56_xpic_break_irq_msk_set_single_step_irq ,	3
 .equ MSK_NX56_xpic_break_irq_msk_set_misalignment_irq,	0x00000010
 .equ SRT_NX56_xpic_break_irq_msk_set_misalignment_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_break_irq_msk_reset
@ => xPIC_DEBUG interrupt mask disable: for other CPU (ARM)
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_irq_msk_reset       ,	0x00000048
 .equ Adr_NX56_xpic_debug_xpic_break_irq_msk_reset,	0x1018C4C8
 .equ Adr_NX56_xpic_break_irq_msk_reset           ,	0x1018C4C8

 .equ MSK_NX56_xpic_break_irq_msk_reset_break0_irq      ,	0x00000001
 .equ SRT_NX56_xpic_break_irq_msk_reset_break0_irq      ,	0
 .equ MSK_NX56_xpic_break_irq_msk_reset_break1_irq      ,	0x00000002
 .equ SRT_NX56_xpic_break_irq_msk_reset_break1_irq      ,	1
 .equ MSK_NX56_xpic_break_irq_msk_reset_soft_break_irq  ,	0x00000004
 .equ SRT_NX56_xpic_break_irq_msk_reset_soft_break_irq  ,	2
 .equ MSK_NX56_xpic_break_irq_msk_reset_single_step_irq ,	0x00000008
 .equ SRT_NX56_xpic_break_irq_msk_reset_single_step_irq ,	3
 .equ MSK_NX56_xpic_break_irq_msk_reset_misalignment_irq,	0x00000010
 .equ SRT_NX56_xpic_break_irq_msk_reset_misalignment_irq,	4

@ ---------------------------------------------------------------------
@ Register xpic_break_own_irq_masked
@ => xPIC_DEBUG own Masked IRQ register: for xPIC
@    Shows status of masked IRQs (as connected to xPIC)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_own_irq_masked       ,	0x0000004C
 .equ Adr_NX56_xpic_debug_xpic_break_own_irq_masked,	0x1018C4CC
 .equ Adr_NX56_xpic_break_own_irq_masked           ,	0x1018C4CC

 .equ MSK_NX56_xpic_break_own_irq_masked_misalignment_irq,	0x00000001
 .equ SRT_NX56_xpic_break_own_irq_masked_misalignment_irq,	0

@ ---------------------------------------------------------------------
@ Register xpic_break_own_irq_msk_set
@ => xPIC_DEBUG own interrupt mask enable: for xPIC
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_own_irq_msk_set       ,	0x00000050
 .equ Adr_NX56_xpic_debug_xpic_break_own_irq_msk_set,	0x1018C4D0
 .equ Adr_NX56_xpic_break_own_irq_msk_set           ,	0x1018C4D0

 .equ MSK_NX56_xpic_break_own_irq_msk_set_misalignment_irq,	0x00000001
 .equ SRT_NX56_xpic_break_own_irq_msk_set_misalignment_irq,	0

@ ---------------------------------------------------------------------
@ Register xpic_break_own_irq_msk_reset
@ => xPIC_DEBUG own interrupt mask disable: for XPIC
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_own_irq_msk_reset       ,	0x00000054
 .equ Adr_NX56_xpic_debug_xpic_break_own_irq_msk_reset,	0x1018C4D4
 .equ Adr_NX56_xpic_break_own_irq_msk_reset           ,	0x1018C4D4

 .equ MSK_NX56_xpic_break_own_irq_msk_reset_misalignment_irq,	0x00000001
 .equ SRT_NX56_xpic_break_own_irq_msk_reset_misalignment_irq,	0

@ ---------------------------------------------------------------------
@ Register xpic_break_return_fiq_pc
@ => xPIC_DEBUG information FIQ return PC value
@    valid if xPIC is in FIQ
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_return_fiq_pc       ,	0x00000058
 .equ Adr_NX56_xpic_debug_xpic_break_return_fiq_pc,	0x1018C4D8
 .equ Adr_NX56_xpic_break_return_fiq_pc           ,	0x1018C4D8

 .equ MSK_NX56_xpic_break_return_fiq_pc_val,	0xffffffff
 .equ SRT_NX56_xpic_break_return_fiq_pc_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_break_return_irq_pc
@ => xPIC_DEBUG information last IRQ return PC value
@    valid if xPIC is in IRQ
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_break_return_irq_pc       ,	0x0000005C
 .equ Adr_NX56_xpic_debug_xpic_break_return_irq_pc,	0x1018C4DC
 .equ Adr_NX56_xpic_break_return_irq_pc           ,	0x1018C4DC

 .equ MSK_NX56_xpic_break_return_irq_pc_val,	0xffffffff
 .equ SRT_NX56_xpic_break_return_irq_pc_val,	0

@ ---------------------------------------------------------------------
@ Register xpic_irq_status
@ => Read access shows the xpic irq status and the xpic irq enable bits
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xpic_irq_status       ,	0x00000060
 .equ Adr_NX56_xpic_debug_xpic_irq_status,	0x1018C4E0
 .equ Adr_NX56_xpic_irq_status           ,	0x1018C4E0

 .equ MSK_NX56_xpic_irq_status_irq_status,	0x00000001
 .equ SRT_NX56_xpic_irq_status_irq_status,	0
 .equ MSK_NX56_xpic_irq_status_fiq_status,	0x00000002
 .equ SRT_NX56_xpic_irq_status_fiq_status,	1
 .equ MSK_NX56_xpic_irq_status_irq_enable,	0x00000004
 .equ SRT_NX56_xpic_irq_status_irq_enable,	2
 .equ MSK_NX56_xpic_irq_status_fiq_enable,	0x00000008
 .equ SRT_NX56_xpic_irq_status_fiq_enable,	3


@ =====================================================================
@
@ Area of int_phy_ctrl0, int_phy_ctrl1
@
@ =====================================================================

 .equ Addr_NX56_int_phy_ctrl0, 0x1018C500
 .equ Addr_NX56_int_phy_ctrl1, 0x1018C510

@ ---------------------------------------------------------------------
@ Register int_phy_ctrl_miimu
@ => MDIO FSM interface controlling for netX internal PHY.
@    Note:
@       Function is similar to old MIIMU unit register 'miimu_reg'.
@    Note:
@       MDC period changed from 800/400ns to 400/220ns since netx56.
@    Note:
@       Loopback for purpose is provided by miimu_sw register and also performed
@       in non-software-mode when enabled.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_int_phy_ctrl_miimu          ,	0x00000000
 .equ Adr_NX56_int_phy_ctrl0_int_phy_ctrl_miimu,	0x1018C500
 .equ Adr_NX56_int_phy_ctrl1_int_phy_ctrl_miimu,	0x1018C510

 .equ MSK_NX56_int_phy_ctrl_miimu_snrdy     ,	0x00000001
 .equ SRT_NX56_int_phy_ctrl_miimu_snrdy     ,	0
 .equ MSK_NX56_int_phy_ctrl_miimu_preamble  ,	0x00000002
 .equ SRT_NX56_int_phy_ctrl_miimu_preamble  ,	1
 .equ MSK_NX56_int_phy_ctrl_miimu_opmode    ,	0x00000004
 .equ SRT_NX56_int_phy_ctrl_miimu_opmode    ,	2
 .equ MSK_NX56_int_phy_ctrl_miimu_mdc_period,	0x00000008
 .equ SRT_NX56_int_phy_ctrl_miimu_mdc_period,	3
 .equ MSK_NX56_int_phy_ctrl_miimu_rta       ,	0x00000020
 .equ SRT_NX56_int_phy_ctrl_miimu_rta       ,	5
 .equ MSK_NX56_int_phy_ctrl_miimu_regaddr   ,	0x000007c0
 .equ SRT_NX56_int_phy_ctrl_miimu_regaddr   ,	6
 .equ MSK_NX56_int_phy_ctrl_miimu_phyaddr   ,	0x0000f800
 .equ SRT_NX56_int_phy_ctrl_miimu_phyaddr   ,	11
 .equ MSK_NX56_int_phy_ctrl_miimu_data      ,	0xffff0000
 .equ SRT_NX56_int_phy_ctrl_miimu_data      ,	16

@ ---------------------------------------------------------------------
@ Register int_phy_ctrl_miimu_sw
@ => MDIO software interface controlling for netX internal PHY.
@    Note:
@       Function is similar to old MIIMU unit register 'miimu_sw', however data output
@       enable was removed as it is not necessary for MDIO interface to internal PHY (due
@       to non-bidirectional data signal).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_int_phy_ctrl_miimu_sw          ,	0x00000004
 .equ Adr_NX56_int_phy_ctrl0_int_phy_ctrl_miimu_sw,	0x1018C504
 .equ Adr_NX56_int_phy_ctrl1_int_phy_ctrl_miimu_sw,	0x1018C514

 .equ MSK_NX56_int_phy_ctrl_miimu_sw_enable  ,	0x00000001
 .equ SRT_NX56_int_phy_ctrl_miimu_sw_enable  ,	0
 .equ MSK_NX56_int_phy_ctrl_miimu_sw_mdc     ,	0x00000010
 .equ SRT_NX56_int_phy_ctrl_miimu_sw_mdc     ,	4
 .equ MSK_NX56_int_phy_ctrl_miimu_sw_mdo     ,	0x00000020
 .equ SRT_NX56_int_phy_ctrl_miimu_sw_mdo     ,	5
 .equ MSK_NX56_int_phy_ctrl_miimu_sw_mdi_ro  ,	0x00000080
 .equ SRT_NX56_int_phy_ctrl_miimu_sw_mdi_ro  ,	7
 .equ MSK_NX56_int_phy_ctrl_miimu_sw_loopback,	0x00000100
 .equ SRT_NX56_int_phy_ctrl_miimu_sw_loopback,	8

@ ---------------------------------------------------------------------
@ Register int_phy_ctrl_led
@ => PHY0 LED config and status register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_int_phy_ctrl_led          ,	0x00000008
 .equ Adr_NX56_int_phy_ctrl0_int_phy_ctrl_led,	0x1018C508
 .equ Adr_NX56_int_phy_ctrl1_int_phy_ctrl_led,	0x1018C518

 .equ MSK_NX56_int_phy_ctrl_led_rx_active_ro,	0x00000001
 .equ SRT_NX56_int_phy_ctrl_led_rx_active_ro,	0
 .equ MSK_NX56_int_phy_ctrl_led_tx_active_ro,	0x00000002
 .equ SRT_NX56_int_phy_ctrl_led_tx_active_ro,	1
 .equ MSK_NX56_int_phy_ctrl_led_duplex_ro   ,	0x00000004
 .equ SRT_NX56_int_phy_ctrl_led_duplex_ro   ,	2
 .equ MSK_NX56_int_phy_ctrl_led_link_ro     ,	0x00000008
 .equ SRT_NX56_int_phy_ctrl_led_link_ro     ,	3
 .equ MSK_NX56_int_phy_ctrl_led_speed10_ro  ,	0x00000010
 .equ SRT_NX56_int_phy_ctrl_led_speed10_ro  ,	4
 .equ MSK_NX56_int_phy_ctrl_led_speed100_ro ,	0x00000020
 .equ SRT_NX56_int_phy_ctrl_led_speed100_ro ,	5
 .equ MSK_NX56_int_phy_ctrl_led_led0        ,	0x00000040
 .equ SRT_NX56_int_phy_ctrl_led_led0        ,	6
 .equ MSK_NX56_int_phy_ctrl_led_led1        ,	0x00000080
 .equ SRT_NX56_int_phy_ctrl_led_led1        ,	7
 .equ MSK_NX56_int_phy_ctrl_led_mode        ,	0x00000300
 .equ SRT_NX56_int_phy_ctrl_led_mode        ,	8
 .equ MSK_NX56_int_phy_ctrl_led_interval    ,	0x0000f000
 .equ SRT_NX56_int_phy_ctrl_led_interval    ,	12

@ ---------------------------------------------------------------------
@ Register int_phy_ctrl_enhanced_link_detection
@ => Enhanced link detection config register:
@    Enhanced link detection is necessary with old PHYs, that do not support proper link down detection.
@    At these PHYs a broken link can be detected according to mii_rxerr signal.
@    New Renesas PHYs (Nephrite) should already support proper link detection.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_int_phy_ctrl_enhanced_link_detection          ,	0x0000000C
 .equ Adr_NX56_int_phy_ctrl0_int_phy_ctrl_enhanced_link_detection,	0x1018C50C
 .equ Adr_NX56_int_phy_ctrl1_int_phy_ctrl_enhanced_link_detection,	0x1018C51C

 .equ MSK_NX56_int_phy_ctrl_enhanced_link_detection_add            ,	0x0000001f
 .equ SRT_NX56_int_phy_ctrl_enhanced_link_detection_add            ,	0
 .equ MSK_NX56_int_phy_ctrl_enhanced_link_detection_sub            ,	0x00000060
 .equ SRT_NX56_int_phy_ctrl_enhanced_link_detection_sub            ,	5
 .equ MSK_NX56_int_phy_ctrl_enhanced_link_detection_threshold      ,	0x0007ff80
 .equ SRT_NX56_int_phy_ctrl_enhanced_link_detection_threshold      ,	7
 .equ MSK_NX56_int_phy_ctrl_enhanced_link_detection_counter_ro     ,	0x7ff80000
 .equ SRT_NX56_int_phy_ctrl_enhanced_link_detection_counter_ro     ,	19
 .equ MSK_NX56_int_phy_ctrl_enhanced_link_detection_eld_bad_link_ro,	0x80000000
 .equ SRT_NX56_int_phy_ctrl_enhanced_link_detection_eld_bad_link_ro,	31


@ =====================================================================
@
@ Area of miimu
@
@ =====================================================================

 .equ Addr_NX56_miimu, 0x1018C520

@ ---------------------------------------------------------------------
@ Register miimu
@ => MDIO FSM interface controlling for netX external PHY.
@    Note:
@       Loopback for purpose is provided by miimu_sw register and also performed
@       in non-software-mode when enabled.
@    Note:
@       Prior phy_nres-bit was removed. PHY reset must be done by register ASIC_CTRL.phy_control.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_miimu  ,	0x00000000
 .equ Adr_NX56_miimu_miimu,	0x1018C520
 .equ Adr_NX56_miimu      ,	0x1018C520

 .equ MSK_NX56_miimu_snrdy     ,	0x00000001
 .equ SRT_NX56_miimu_snrdy     ,	0
 .equ MSK_NX56_miimu_preamble  ,	0x00000002
 .equ SRT_NX56_miimu_preamble  ,	1
 .equ MSK_NX56_miimu_opmode    ,	0x00000004
 .equ SRT_NX56_miimu_opmode    ,	2
 .equ MSK_NX56_miimu_mdc_period,	0x00000008
 .equ SRT_NX56_miimu_mdc_period,	3
 .equ MSK_NX56_miimu_rta       ,	0x00000020
 .equ SRT_NX56_miimu_rta       ,	5
 .equ MSK_NX56_miimu_regaddr   ,	0x000007c0
 .equ SRT_NX56_miimu_regaddr   ,	6
 .equ MSK_NX56_miimu_phyaddr   ,	0x0000f800
 .equ SRT_NX56_miimu_phyaddr   ,	11
 .equ MSK_NX56_miimu_data      ,	0xffff0000
 .equ SRT_NX56_miimu_data      ,	16

@ ---------------------------------------------------------------------
@ Register miimu_sw
@ => MDIO software interface controlling for netX internal PHY.
@    Note:
@       Function is similar to old MIIMU unit register 'miimu_sw', however data output
@       enable was removed as it is not necessary for MDIO interface to internal PHY (due
@       to non-bidirectional data signal).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_miimu_sw  ,	0x00000004
 .equ Adr_NX56_miimu_miimu_sw,	0x1018C524
 .equ Adr_NX56_miimu_sw      ,	0x1018C524

 .equ MSK_NX56_miimu_sw_enable  ,	0x00000001
 .equ SRT_NX56_miimu_sw_enable  ,	0
 .equ MSK_NX56_miimu_sw_mdc     ,	0x00000010
 .equ SRT_NX56_miimu_sw_mdc     ,	4
 .equ MSK_NX56_miimu_sw_mdo     ,	0x00000020
 .equ SRT_NX56_miimu_sw_mdo     ,	5
 .equ MSK_NX56_miimu_sw_mdoe    ,	0x00000040
 .equ SRT_NX56_miimu_sw_mdoe    ,	6
 .equ MSK_NX56_miimu_sw_mdi_ro  ,	0x00000080
 .equ SRT_NX56_miimu_sw_mdi_ro  ,	7
 .equ MSK_NX56_miimu_sw_loopback,	0x00000100
 .equ SRT_NX56_miimu_sw_loopback,	8


@ =====================================================================
@
@ Area of pio
@
@ =====================================================================

 .equ Addr_NX56_pio, 0x1018C530

@ ---------------------------------------------------------------------
@ Register pio_in
@ => PIO input line status register.
@    Each PIO input status can also be read from dedicated PIOx input state register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pio_in,	0x00000000
 .equ Adr_NX56_pio_pio_in,	0x1018C530
 .equ Adr_NX56_pio_in    ,	0x1018C530

 .equ MSK_NX56_pio_in_val,	0x000000ff
 .equ SRT_NX56_pio_in_val,	0

@ ---------------------------------------------------------------------
@ Register pio_out
@ => PIO output drive level line register.
@    Each PIOs output drive level can also be programmed by dedicated PIOx output drive level register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pio_out,	0x00000004
 .equ Adr_NX56_pio_pio_out,	0x1018C534
 .equ Adr_NX56_pio_out    ,	0x1018C534

 .equ MSK_NX56_pio_out_val,	0x000000ff
 .equ SRT_NX56_pio_out_val,	0

@ ---------------------------------------------------------------------
@ Register pio_oe
@ => PIO output enable line register.
@    Each PIOs output enable can also be programmed by dedicated PIOx output enable register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_pio_oe,	0x00000008
 .equ Adr_NX56_pio_pio_oe,	0x1018C538
 .equ Adr_NX56_pio_oe    ,	0x1018C538

 .equ MSK_NX56_pio_oe_val,	0x000000ff
 .equ SRT_NX56_pio_oe_val,	0


@ =====================================================================
@
@ Area of hif_io_ctrl
@
@ =====================================================================

 .equ Addr_NX56_hif_io_ctrl, 0x1018C540

@ ---------------------------------------------------------------------
@ Register hif_io_cfg
@ => IO Config Register:
@    Selects of HIF pin multiplexing.
@    See Excel pinning sheet for details.
@    This configuration must be set up according to external netX connection before any access to external logic.
@    This register is protected by the netX access key mechanism; changing this register is only possible by the following sequence:
@    1.: read out access key from ACCESS_KEY register (ASIC_CTRL address area)
@    2.: write back access key to ACCESS_KEY register (ASIC_CTRL address area)
@    3.: write desired value to this register (ASIC_CTRL address area)
@    Attention: Be very careful programming this register. False settings may cause permanent damage on netX or devices connected
@               to HIF-IOs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_io_cfg        ,	0x00000000
 .equ Adr_NX56_hif_io_ctrl_hif_io_cfg,	0x1018C540
 .equ Adr_NX56_hif_io_cfg            ,	0x1018C540

 .equ MSK_NX56_hif_io_cfg_sel_hif_dpm           ,	0x00000001
 .equ SRT_NX56_hif_io_cfg_sel_hif_dpm           ,	0
 .equ MSK_NX56_hif_io_cfg_sel_dpm_serial        ,	0x00000002
 .equ SRT_NX56_hif_io_cfg_sel_dpm_serial        ,	1
 .equ MSK_NX56_hif_io_cfg_sel_dpm_serial_sph    ,	0x00000004
 .equ SRT_NX56_hif_io_cfg_sel_dpm_serial_sph    ,	2
 .equ MSK_NX56_hif_io_cfg_sel_dpm_serial_spo    ,	0x00000008
 .equ SRT_NX56_hif_io_cfg_sel_dpm_serial_spo    ,	3
 .equ MSK_NX56_hif_io_cfg_hif_mi_cfg            ,	0x00000030
 .equ SRT_NX56_hif_io_cfg_hif_mi_cfg            ,	4
 .equ MSK_NX56_hif_io_cfg_en_hif_sdram_mi       ,	0x00000040
 .equ SRT_NX56_hif_io_cfg_en_hif_sdram_mi       ,	6
 .equ MSK_NX56_hif_io_cfg_sel_hif_a_width       ,	0x00000f00
 .equ SRT_NX56_hif_io_cfg_sel_hif_a_width       ,	8
 .equ MSK_NX56_hif_io_cfg_en_hif_rdy_pio_mi     ,	0x01000000
 .equ SRT_NX56_hif_io_cfg_en_hif_rdy_pio_mi     ,	24
 .equ MSK_NX56_hif_io_cfg_en_hif_wdg_sys_hif_d19,	0x02000000
 .equ SRT_NX56_hif_io_cfg_en_hif_wdg_sys_hif_d19,	25
 .equ MSK_NX56_hif_io_cfg_netx50_io_comp_ro     ,	0x80000000
 .equ SRT_NX56_hif_io_cfg_netx50_io_comp_ro     ,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_cfg
@ => HIF PIO Mode configuration register.
@    Note: MMIO40..47 are shared with HIF IOs. For details view description of 'io_config2' register inside ASIC_CTRL address area.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_cfg        ,	0x00000004
 .equ Adr_NX56_hif_io_ctrl_hif_pio_cfg,	0x1018C544
 .equ Adr_NX56_hif_pio_cfg            ,	0x1018C544

 .equ MSK_NX56_hif_pio_cfg_in_ctrl            ,	0x00000003
 .equ SRT_NX56_hif_pio_cfg_in_ctrl            ,	0
 .equ MSK_NX56_hif_pio_cfg_sel_en_in          ,	0x00000004
 .equ SRT_NX56_hif_pio_cfg_sel_en_in          ,	2
 .equ MSK_NX56_hif_pio_cfg_filter_en_in       ,	0x00000008
 .equ SRT_NX56_hif_pio_cfg_filter_en_in       ,	3
 .equ MSK_NX56_hif_pio_cfg_irq_pio35_cfg      ,	0x00030000
 .equ SRT_NX56_hif_pio_cfg_irq_pio35_cfg      ,	16
 .equ MSK_NX56_hif_pio_cfg_irq_pio36_cfg      ,	0x000c0000
 .equ SRT_NX56_hif_pio_cfg_irq_pio36_cfg      ,	18
 .equ MSK_NX56_hif_pio_cfg_irq_pio40_cfg      ,	0x00300000
 .equ SRT_NX56_hif_pio_cfg_irq_pio40_cfg      ,	20
 .equ MSK_NX56_hif_pio_cfg_irq_pio47_cfg      ,	0x00c00000
 .equ SRT_NX56_hif_pio_cfg_irq_pio47_cfg      ,	22
 .equ MSK_NX56_hif_pio_cfg_irq_pio72_cfg      ,	0x03000000
 .equ SRT_NX56_hif_pio_cfg_irq_pio72_cfg      ,	24
 .equ MSK_NX56_hif_pio_cfg_filter_irqs        ,	0x08000000
 .equ SRT_NX56_hif_pio_cfg_filter_irqs        ,	27
 .equ MSK_NX56_hif_pio_cfg_netX50_pio_reg_comp,	0x80000000
 .equ SRT_NX56_hif_pio_cfg_netX50_pio_reg_comp,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_out0
@ => HIF PIO Output State Configuration Register 0.
@    All unused HIF signals can be used as PIOs. IOs will be driven to the programmed state if appropriate enable bit
@    is set in hif_pio_oe0 register.
@    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible.
@    -----------------------
@    This register can be programmed in netX50 compatibility mode depending on current setting of hif_pio_cfg.netX50_pio_reg_comp
@    bit. When netX50 compatibility mode is enabled (this is default), this register behaves like netX50 DPM_ARM_IO_DATA0
@    register and controlles HIF PIO63 to PIO32.
@    The function is then:
@       Input or Output Data of each I/O Pin
@       Read:
@       0 : Physical Input Level is 0
@       1 : Physical Input Level is 1
@       Write:
@       0 : Sets the output pin level to 0 when configured as output
@       1 : Sets the output pin level to 1 when configured as output
@    -----------------------
@    Note:
@       This register can be read or written by 8, 16 or 32 bit access for netx50-compatibility.
@    The following bit-description is for disabled netX50 PIO programming compatibility.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_out0        ,	0x00000008
 .equ Adr_NX56_hif_io_ctrl_hif_pio_out0,	0x1018C548
 .equ Adr_NX56_hif_pio_out0            ,	0x1018C548

 .equ MSK_NX56_hif_pio_out0_hif_d0 ,	0x00000001
 .equ SRT_NX56_hif_pio_out0_hif_d0 ,	0
 .equ MSK_NX56_hif_pio_out0_hif_d1 ,	0x00000002
 .equ SRT_NX56_hif_pio_out0_hif_d1 ,	1
 .equ MSK_NX56_hif_pio_out0_hif_d2 ,	0x00000004
 .equ SRT_NX56_hif_pio_out0_hif_d2 ,	2
 .equ MSK_NX56_hif_pio_out0_hif_d3 ,	0x00000008
 .equ SRT_NX56_hif_pio_out0_hif_d3 ,	3
 .equ MSK_NX56_hif_pio_out0_hif_d4 ,	0x00000010
 .equ SRT_NX56_hif_pio_out0_hif_d4 ,	4
 .equ MSK_NX56_hif_pio_out0_hif_d5 ,	0x00000020
 .equ SRT_NX56_hif_pio_out0_hif_d5 ,	5
 .equ MSK_NX56_hif_pio_out0_hif_d6 ,	0x00000040
 .equ SRT_NX56_hif_pio_out0_hif_d6 ,	6
 .equ MSK_NX56_hif_pio_out0_hif_d7 ,	0x00000080
 .equ SRT_NX56_hif_pio_out0_hif_d7 ,	7
 .equ MSK_NX56_hif_pio_out0_hif_d8 ,	0x00000100
 .equ SRT_NX56_hif_pio_out0_hif_d8 ,	8
 .equ MSK_NX56_hif_pio_out0_hif_d9 ,	0x00000200
 .equ SRT_NX56_hif_pio_out0_hif_d9 ,	9
 .equ MSK_NX56_hif_pio_out0_hif_d10,	0x00000400
 .equ SRT_NX56_hif_pio_out0_hif_d10,	10
 .equ MSK_NX56_hif_pio_out0_hif_d11,	0x00000800
 .equ SRT_NX56_hif_pio_out0_hif_d11,	11
 .equ MSK_NX56_hif_pio_out0_hif_d12,	0x00001000
 .equ SRT_NX56_hif_pio_out0_hif_d12,	12
 .equ MSK_NX56_hif_pio_out0_hif_d13,	0x00002000
 .equ SRT_NX56_hif_pio_out0_hif_d13,	13
 .equ MSK_NX56_hif_pio_out0_hif_d14,	0x00004000
 .equ SRT_NX56_hif_pio_out0_hif_d14,	14
 .equ MSK_NX56_hif_pio_out0_hif_d15,	0x00008000
 .equ SRT_NX56_hif_pio_out0_hif_d15,	15
 .equ MSK_NX56_hif_pio_out0_hif_d16,	0x00010000
 .equ SRT_NX56_hif_pio_out0_hif_d16,	16
 .equ MSK_NX56_hif_pio_out0_hif_d17,	0x00020000
 .equ SRT_NX56_hif_pio_out0_hif_d17,	17
 .equ MSK_NX56_hif_pio_out0_hif_d18,	0x00040000
 .equ SRT_NX56_hif_pio_out0_hif_d18,	18
 .equ MSK_NX56_hif_pio_out0_hif_d19,	0x00080000
 .equ SRT_NX56_hif_pio_out0_hif_d19,	19
 .equ MSK_NX56_hif_pio_out0_hif_d20,	0x00100000
 .equ SRT_NX56_hif_pio_out0_hif_d20,	20
 .equ MSK_NX56_hif_pio_out0_hif_d21,	0x00200000
 .equ SRT_NX56_hif_pio_out0_hif_d21,	21
 .equ MSK_NX56_hif_pio_out0_hif_d22,	0x00400000
 .equ SRT_NX56_hif_pio_out0_hif_d22,	22
 .equ MSK_NX56_hif_pio_out0_hif_d23,	0x00800000
 .equ SRT_NX56_hif_pio_out0_hif_d23,	23
 .equ MSK_NX56_hif_pio_out0_hif_d24,	0x01000000
 .equ SRT_NX56_hif_pio_out0_hif_d24,	24
 .equ MSK_NX56_hif_pio_out0_hif_d25,	0x02000000
 .equ SRT_NX56_hif_pio_out0_hif_d25,	25
 .equ MSK_NX56_hif_pio_out0_hif_d26,	0x04000000
 .equ SRT_NX56_hif_pio_out0_hif_d26,	26
 .equ MSK_NX56_hif_pio_out0_hif_d27,	0x08000000
 .equ SRT_NX56_hif_pio_out0_hif_d27,	27
 .equ MSK_NX56_hif_pio_out0_hif_d28,	0x10000000
 .equ SRT_NX56_hif_pio_out0_hif_d28,	28
 .equ MSK_NX56_hif_pio_out0_hif_d29,	0x20000000
 .equ SRT_NX56_hif_pio_out0_hif_d29,	29
 .equ MSK_NX56_hif_pio_out0_hif_d30,	0x40000000
 .equ SRT_NX56_hif_pio_out0_hif_d30,	30
 .equ MSK_NX56_hif_pio_out0_hif_d31,	0x80000000
 .equ SRT_NX56_hif_pio_out0_hif_d31,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_out1
@ => HIF PIO Output State Configuration Register 1.
@    All unused HIF signals can be used as PIOs. IOs will be driven to the programmed state if appropriate enable bit
@    is set in hif_pio_oe1 register.
@    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible.
@    -----------------------
@    This register can be programmed in netX50 compatibility mode depending on current setting of hif_pio_cfg.netX50_pio_reg_comp
@    bit. When netX50 compatibility mode is enabled (this is default), this register behaves like netX50 DPM_ARM_IO_DATA1
@    register and controlles HIF PIO85 to PIO64 (only register bits 21 to 0 are valid then).
@    The function is then:
@       Input or Output Data of each I/O Pin
@       Read:
@       0 : Physical Input Level is 0
@       1 : Physical Input Level is 1
@       Write:
@       0 : Sets the output pin level to 0 when configured as output
@       1 : Sets the output pin level to 1 when configured as output
@    -----------------------
@    Note:
@       This register can be read or written by 8, 16 or 32 bit access for netx50-compatibility.
@    The following bit-description is for disabled netX50 PIO programming compatibility.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_out1        ,	0x0000000C
 .equ Adr_NX56_hif_io_ctrl_hif_pio_out1,	0x1018C54C
 .equ Adr_NX56_hif_pio_out1            ,	0x1018C54C

 .equ MSK_NX56_hif_pio_out1_hif_a0        ,	0x00000001
 .equ SRT_NX56_hif_pio_out1_hif_a0        ,	0
 .equ MSK_NX56_hif_pio_out1_hif_a1        ,	0x00000002
 .equ SRT_NX56_hif_pio_out1_hif_a1        ,	1
 .equ MSK_NX56_hif_pio_out1_hif_a2        ,	0x00000004
 .equ SRT_NX56_hif_pio_out1_hif_a2        ,	2
 .equ MSK_NX56_hif_pio_out1_hif_a3        ,	0x00000008
 .equ SRT_NX56_hif_pio_out1_hif_a3        ,	3
 .equ MSK_NX56_hif_pio_out1_hif_a4        ,	0x00000010
 .equ SRT_NX56_hif_pio_out1_hif_a4        ,	4
 .equ MSK_NX56_hif_pio_out1_hif_a5        ,	0x00000020
 .equ SRT_NX56_hif_pio_out1_hif_a5        ,	5
 .equ MSK_NX56_hif_pio_out1_hif_a6        ,	0x00000040
 .equ SRT_NX56_hif_pio_out1_hif_a6        ,	6
 .equ MSK_NX56_hif_pio_out1_hif_a7        ,	0x00000080
 .equ SRT_NX56_hif_pio_out1_hif_a7        ,	7
 .equ MSK_NX56_hif_pio_out1_hif_a8        ,	0x00000100
 .equ SRT_NX56_hif_pio_out1_hif_a8        ,	8
 .equ MSK_NX56_hif_pio_out1_hif_a9        ,	0x00000200
 .equ SRT_NX56_hif_pio_out1_hif_a9        ,	9
 .equ MSK_NX56_hif_pio_out1_hif_a10       ,	0x00000400
 .equ SRT_NX56_hif_pio_out1_hif_a10       ,	10
 .equ MSK_NX56_hif_pio_out1_hif_a11       ,	0x00000800
 .equ SRT_NX56_hif_pio_out1_hif_a11       ,	11
 .equ MSK_NX56_hif_pio_out1_hif_a12       ,	0x00001000
 .equ SRT_NX56_hif_pio_out1_hif_a12       ,	12
 .equ MSK_NX56_hif_pio_out1_hif_a13       ,	0x00002000
 .equ SRT_NX56_hif_pio_out1_hif_a13       ,	13
 .equ MSK_NX56_hif_pio_out1_hif_a14       ,	0x00004000
 .equ SRT_NX56_hif_pio_out1_hif_a14       ,	14
 .equ MSK_NX56_hif_pio_out1_hif_a15       ,	0x00008000
 .equ SRT_NX56_hif_pio_out1_hif_a15       ,	15
 .equ MSK_NX56_hif_pio_out1_hif_ahi0      ,	0x00010000
 .equ SRT_NX56_hif_pio_out1_hif_ahi0      ,	16
 .equ MSK_NX56_hif_pio_out1_hif_ahi1      ,	0x00020000
 .equ SRT_NX56_hif_pio_out1_hif_ahi1      ,	17
 .equ MSK_NX56_hif_pio_out1_nx50_pio85to82,	0x003c0000
 .equ SRT_NX56_hif_pio_out1_nx50_pio85to82,	18
 .equ MSK_NX56_hif_pio_out1_hif_bhe3      ,	0x01000000
 .equ SRT_NX56_hif_pio_out1_hif_bhe3      ,	24
 .equ MSK_NX56_hif_pio_out1_hif_bhe1      ,	0x02000000
 .equ SRT_NX56_hif_pio_out1_hif_bhe1      ,	25
 .equ MSK_NX56_hif_pio_out1_hif_rdn       ,	0x04000000
 .equ SRT_NX56_hif_pio_out1_hif_rdn       ,	26
 .equ MSK_NX56_hif_pio_out1_hif_wrn       ,	0x08000000
 .equ SRT_NX56_hif_pio_out1_hif_wrn       ,	27
 .equ MSK_NX56_hif_pio_out1_hif_csn       ,	0x10000000
 .equ SRT_NX56_hif_pio_out1_hif_csn       ,	28
 .equ MSK_NX56_hif_pio_out1_hif_rdy       ,	0x20000000
 .equ SRT_NX56_hif_pio_out1_hif_rdy       ,	29
 .equ MSK_NX56_hif_pio_out1_hif_dirq      ,	0x40000000
 .equ SRT_NX56_hif_pio_out1_hif_dirq      ,	30
 .equ MSK_NX56_hif_pio_out1_hif_sdclk     ,	0x80000000
 .equ SRT_NX56_hif_pio_out1_hif_sdclk     ,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_oe0
@ => HIF PIO Output Enable Configuration Register 0.
@    All unused HIF signals can be used as PIOs. IOs will be driven to the output state
@    programmed in in hif_pio_out0 register.
@    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible.
@    -----------------------
@    This register can be programmed in netX50 compatibility mode depending on current setting of hif_pio_cfg.netX50_pio_reg_comp
@    bit. When netX50 compatibility mode is enabled (this is default), this register behaves like netX50 DPM_ARM_IO_DRV_EN0
@    register and controlles HIF PIO63 to PIO32.
@    The function is then:
@       Driver output enable of each I/O Pin
@       0 : Output driver disabled
@       1 : Output driver enabled
@    -----------------------
@    Note:
@       This register can be read or written by 8, 16 or 32 bit access for netx50-compatibility.
@    The following bit-description is for disabled netX50 PIO programming compatibility.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_oe0        ,	0x00000010
 .equ Adr_NX56_hif_io_ctrl_hif_pio_oe0,	0x1018C550
 .equ Adr_NX56_hif_pio_oe0            ,	0x1018C550

 .equ MSK_NX56_hif_pio_oe0_hif_d0 ,	0x00000001
 .equ SRT_NX56_hif_pio_oe0_hif_d0 ,	0
 .equ MSK_NX56_hif_pio_oe0_hif_d1 ,	0x00000002
 .equ SRT_NX56_hif_pio_oe0_hif_d1 ,	1
 .equ MSK_NX56_hif_pio_oe0_hif_d2 ,	0x00000004
 .equ SRT_NX56_hif_pio_oe0_hif_d2 ,	2
 .equ MSK_NX56_hif_pio_oe0_hif_d3 ,	0x00000008
 .equ SRT_NX56_hif_pio_oe0_hif_d3 ,	3
 .equ MSK_NX56_hif_pio_oe0_hif_d4 ,	0x00000010
 .equ SRT_NX56_hif_pio_oe0_hif_d4 ,	4
 .equ MSK_NX56_hif_pio_oe0_hif_d5 ,	0x00000020
 .equ SRT_NX56_hif_pio_oe0_hif_d5 ,	5
 .equ MSK_NX56_hif_pio_oe0_hif_d6 ,	0x00000040
 .equ SRT_NX56_hif_pio_oe0_hif_d6 ,	6
 .equ MSK_NX56_hif_pio_oe0_hif_d7 ,	0x00000080
 .equ SRT_NX56_hif_pio_oe0_hif_d7 ,	7
 .equ MSK_NX56_hif_pio_oe0_hif_d8 ,	0x00000100
 .equ SRT_NX56_hif_pio_oe0_hif_d8 ,	8
 .equ MSK_NX56_hif_pio_oe0_hif_d9 ,	0x00000200
 .equ SRT_NX56_hif_pio_oe0_hif_d9 ,	9
 .equ MSK_NX56_hif_pio_oe0_hif_d10,	0x00000400
 .equ SRT_NX56_hif_pio_oe0_hif_d10,	10
 .equ MSK_NX56_hif_pio_oe0_hif_d11,	0x00000800
 .equ SRT_NX56_hif_pio_oe0_hif_d11,	11
 .equ MSK_NX56_hif_pio_oe0_hif_d12,	0x00001000
 .equ SRT_NX56_hif_pio_oe0_hif_d12,	12
 .equ MSK_NX56_hif_pio_oe0_hif_d13,	0x00002000
 .equ SRT_NX56_hif_pio_oe0_hif_d13,	13
 .equ MSK_NX56_hif_pio_oe0_hif_d14,	0x00004000
 .equ SRT_NX56_hif_pio_oe0_hif_d14,	14
 .equ MSK_NX56_hif_pio_oe0_hif_d15,	0x00008000
 .equ SRT_NX56_hif_pio_oe0_hif_d15,	15
 .equ MSK_NX56_hif_pio_oe0_hif_d16,	0x00010000
 .equ SRT_NX56_hif_pio_oe0_hif_d16,	16
 .equ MSK_NX56_hif_pio_oe0_hif_d17,	0x00020000
 .equ SRT_NX56_hif_pio_oe0_hif_d17,	17
 .equ MSK_NX56_hif_pio_oe0_hif_d18,	0x00040000
 .equ SRT_NX56_hif_pio_oe0_hif_d18,	18
 .equ MSK_NX56_hif_pio_oe0_hif_d19,	0x00080000
 .equ SRT_NX56_hif_pio_oe0_hif_d19,	19
 .equ MSK_NX56_hif_pio_oe0_hif_d20,	0x00100000
 .equ SRT_NX56_hif_pio_oe0_hif_d20,	20
 .equ MSK_NX56_hif_pio_oe0_hif_d21,	0x00200000
 .equ SRT_NX56_hif_pio_oe0_hif_d21,	21
 .equ MSK_NX56_hif_pio_oe0_hif_d22,	0x00400000
 .equ SRT_NX56_hif_pio_oe0_hif_d22,	22
 .equ MSK_NX56_hif_pio_oe0_hif_d23,	0x00800000
 .equ SRT_NX56_hif_pio_oe0_hif_d23,	23
 .equ MSK_NX56_hif_pio_oe0_hif_d24,	0x01000000
 .equ SRT_NX56_hif_pio_oe0_hif_d24,	24
 .equ MSK_NX56_hif_pio_oe0_hif_d25,	0x02000000
 .equ SRT_NX56_hif_pio_oe0_hif_d25,	25
 .equ MSK_NX56_hif_pio_oe0_hif_d26,	0x04000000
 .equ SRT_NX56_hif_pio_oe0_hif_d26,	26
 .equ MSK_NX56_hif_pio_oe0_hif_d27,	0x08000000
 .equ SRT_NX56_hif_pio_oe0_hif_d27,	27
 .equ MSK_NX56_hif_pio_oe0_hif_d28,	0x10000000
 .equ SRT_NX56_hif_pio_oe0_hif_d28,	28
 .equ MSK_NX56_hif_pio_oe0_hif_d29,	0x20000000
 .equ SRT_NX56_hif_pio_oe0_hif_d29,	29
 .equ MSK_NX56_hif_pio_oe0_hif_d30,	0x40000000
 .equ SRT_NX56_hif_pio_oe0_hif_d30,	30
 .equ MSK_NX56_hif_pio_oe0_hif_d31,	0x80000000
 .equ SRT_NX56_hif_pio_oe0_hif_d31,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_oe1
@ => HIF PIO Output Enable Configuration Register 1.
@    All unused HIF signals can be used as PIOs. IOs will be driven to the output state
@    programmed in in hif_pio_out1 register.
@    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible.
@    -----------------------
@    This register can be programmed in netX50 compatibility mode depending on current setting of hif_pio_cfg.netX50_pio_reg_comp
@    bit. When netX50 compatibility mode is enabled (this is default), this register behaves like netX50 DPM_ARM_IO_DRV_EN1
@    register and controlles HIF PIO85 to PIO64 (only register bits 21 to 0 are valid then).
@    The function is then:
@       Driver output enable of each I/O Pin
@       0 : Output driver disabled
@       1 : Output driver enabled
@    -----------------------
@    Note:
@       This register can be read or written by 8, 16 or 32 bit access for netx50-compatibility.
@    The following bit-description is for disabled netX50 PIO programming compatibility.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_oe1        ,	0x00000014
 .equ Adr_NX56_hif_io_ctrl_hif_pio_oe1,	0x1018C554
 .equ Adr_NX56_hif_pio_oe1            ,	0x1018C554

 .equ MSK_NX56_hif_pio_oe1_hif_a0        ,	0x00000001
 .equ SRT_NX56_hif_pio_oe1_hif_a0        ,	0
 .equ MSK_NX56_hif_pio_oe1_hif_a1        ,	0x00000002
 .equ SRT_NX56_hif_pio_oe1_hif_a1        ,	1
 .equ MSK_NX56_hif_pio_oe1_hif_a2        ,	0x00000004
 .equ SRT_NX56_hif_pio_oe1_hif_a2        ,	2
 .equ MSK_NX56_hif_pio_oe1_hif_a3        ,	0x00000008
 .equ SRT_NX56_hif_pio_oe1_hif_a3        ,	3
 .equ MSK_NX56_hif_pio_oe1_hif_a4        ,	0x00000010
 .equ SRT_NX56_hif_pio_oe1_hif_a4        ,	4
 .equ MSK_NX56_hif_pio_oe1_hif_a5        ,	0x00000020
 .equ SRT_NX56_hif_pio_oe1_hif_a5        ,	5
 .equ MSK_NX56_hif_pio_oe1_hif_a6        ,	0x00000040
 .equ SRT_NX56_hif_pio_oe1_hif_a6        ,	6
 .equ MSK_NX56_hif_pio_oe1_hif_a7        ,	0x00000080
 .equ SRT_NX56_hif_pio_oe1_hif_a7        ,	7
 .equ MSK_NX56_hif_pio_oe1_hif_a8        ,	0x00000100
 .equ SRT_NX56_hif_pio_oe1_hif_a8        ,	8
 .equ MSK_NX56_hif_pio_oe1_hif_a9        ,	0x00000200
 .equ SRT_NX56_hif_pio_oe1_hif_a9        ,	9
 .equ MSK_NX56_hif_pio_oe1_hif_a10       ,	0x00000400
 .equ SRT_NX56_hif_pio_oe1_hif_a10       ,	10
 .equ MSK_NX56_hif_pio_oe1_hif_a11       ,	0x00000800
 .equ SRT_NX56_hif_pio_oe1_hif_a11       ,	11
 .equ MSK_NX56_hif_pio_oe1_hif_a12       ,	0x00001000
 .equ SRT_NX56_hif_pio_oe1_hif_a12       ,	12
 .equ MSK_NX56_hif_pio_oe1_hif_a13       ,	0x00002000
 .equ SRT_NX56_hif_pio_oe1_hif_a13       ,	13
 .equ MSK_NX56_hif_pio_oe1_hif_a14       ,	0x00004000
 .equ SRT_NX56_hif_pio_oe1_hif_a14       ,	14
 .equ MSK_NX56_hif_pio_oe1_hif_a15       ,	0x00008000
 .equ SRT_NX56_hif_pio_oe1_hif_a15       ,	15
 .equ MSK_NX56_hif_pio_oe1_hif_ahi0      ,	0x00010000
 .equ SRT_NX56_hif_pio_oe1_hif_ahi0      ,	16
 .equ MSK_NX56_hif_pio_oe1_hif_ahi1      ,	0x00020000
 .equ SRT_NX56_hif_pio_oe1_hif_ahi1      ,	17
 .equ MSK_NX56_hif_pio_oe1_nx50_pio85to82,	0x003c0000
 .equ SRT_NX56_hif_pio_oe1_nx50_pio85to82,	18
 .equ MSK_NX56_hif_pio_oe1_hif_bhe3      ,	0x01000000
 .equ SRT_NX56_hif_pio_oe1_hif_bhe3      ,	24
 .equ MSK_NX56_hif_pio_oe1_hif_bhe1      ,	0x02000000
 .equ SRT_NX56_hif_pio_oe1_hif_bhe1      ,	25
 .equ MSK_NX56_hif_pio_oe1_hif_rdn       ,	0x04000000
 .equ SRT_NX56_hif_pio_oe1_hif_rdn       ,	26
 .equ MSK_NX56_hif_pio_oe1_hif_wrn       ,	0x08000000
 .equ SRT_NX56_hif_pio_oe1_hif_wrn       ,	27
 .equ MSK_NX56_hif_pio_oe1_hif_csn       ,	0x10000000
 .equ SRT_NX56_hif_pio_oe1_hif_csn       ,	28
 .equ MSK_NX56_hif_pio_oe1_hif_rdy       ,	0x20000000
 .equ SRT_NX56_hif_pio_oe1_hif_rdy       ,	29
 .equ MSK_NX56_hif_pio_oe1_hif_dirq      ,	0x40000000
 .equ SRT_NX56_hif_pio_oe1_hif_dirq      ,	30
 .equ MSK_NX56_hif_pio_oe1_hif_sdclk     ,	0x80000000
 .equ SRT_NX56_hif_pio_oe1_hif_sdclk     ,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_in0
@ => HIF PIO Input State Register 0.
@    IO input states can be read here regardless whether IO is used in current HIF/EXT_BUS Memory Interface configuration.
@    HIF IO sampling behaviour can be programmed by 'in_ctrl' bits of 'hif_pio_cfg' register.
@    Note:
@       netx50-PIO-compatibility mode does not cover this register. Input status will always be given as listed below.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_in0        ,	0x00000018
 .equ Adr_NX56_hif_io_ctrl_hif_pio_in0,	0x1018C558
 .equ Adr_NX56_hif_pio_in0            ,	0x1018C558

 .equ MSK_NX56_hif_pio_in0_hif_d0 ,	0x00000001
 .equ SRT_NX56_hif_pio_in0_hif_d0 ,	0
 .equ MSK_NX56_hif_pio_in0_hif_d1 ,	0x00000002
 .equ SRT_NX56_hif_pio_in0_hif_d1 ,	1
 .equ MSK_NX56_hif_pio_in0_hif_d2 ,	0x00000004
 .equ SRT_NX56_hif_pio_in0_hif_d2 ,	2
 .equ MSK_NX56_hif_pio_in0_hif_d3 ,	0x00000008
 .equ SRT_NX56_hif_pio_in0_hif_d3 ,	3
 .equ MSK_NX56_hif_pio_in0_hif_d4 ,	0x00000010
 .equ SRT_NX56_hif_pio_in0_hif_d4 ,	4
 .equ MSK_NX56_hif_pio_in0_hif_d5 ,	0x00000020
 .equ SRT_NX56_hif_pio_in0_hif_d5 ,	5
 .equ MSK_NX56_hif_pio_in0_hif_d6 ,	0x00000040
 .equ SRT_NX56_hif_pio_in0_hif_d6 ,	6
 .equ MSK_NX56_hif_pio_in0_hif_d7 ,	0x00000080
 .equ SRT_NX56_hif_pio_in0_hif_d7 ,	7
 .equ MSK_NX56_hif_pio_in0_hif_d8 ,	0x00000100
 .equ SRT_NX56_hif_pio_in0_hif_d8 ,	8
 .equ MSK_NX56_hif_pio_in0_hif_d9 ,	0x00000200
 .equ SRT_NX56_hif_pio_in0_hif_d9 ,	9
 .equ MSK_NX56_hif_pio_in0_hif_d10,	0x00000400
 .equ SRT_NX56_hif_pio_in0_hif_d10,	10
 .equ MSK_NX56_hif_pio_in0_hif_d11,	0x00000800
 .equ SRT_NX56_hif_pio_in0_hif_d11,	11
 .equ MSK_NX56_hif_pio_in0_hif_d12,	0x00001000
 .equ SRT_NX56_hif_pio_in0_hif_d12,	12
 .equ MSK_NX56_hif_pio_in0_hif_d13,	0x00002000
 .equ SRT_NX56_hif_pio_in0_hif_d13,	13
 .equ MSK_NX56_hif_pio_in0_hif_d14,	0x00004000
 .equ SRT_NX56_hif_pio_in0_hif_d14,	14
 .equ MSK_NX56_hif_pio_in0_hif_d15,	0x00008000
 .equ SRT_NX56_hif_pio_in0_hif_d15,	15
 .equ MSK_NX56_hif_pio_in0_hif_d16,	0x00010000
 .equ SRT_NX56_hif_pio_in0_hif_d16,	16
 .equ MSK_NX56_hif_pio_in0_hif_d17,	0x00020000
 .equ SRT_NX56_hif_pio_in0_hif_d17,	17
 .equ MSK_NX56_hif_pio_in0_hif_d18,	0x00040000
 .equ SRT_NX56_hif_pio_in0_hif_d18,	18
 .equ MSK_NX56_hif_pio_in0_hif_d19,	0x00080000
 .equ SRT_NX56_hif_pio_in0_hif_d19,	19
 .equ MSK_NX56_hif_pio_in0_hif_d20,	0x00100000
 .equ SRT_NX56_hif_pio_in0_hif_d20,	20
 .equ MSK_NX56_hif_pio_in0_hif_d21,	0x00200000
 .equ SRT_NX56_hif_pio_in0_hif_d21,	21
 .equ MSK_NX56_hif_pio_in0_hif_d22,	0x00400000
 .equ SRT_NX56_hif_pio_in0_hif_d22,	22
 .equ MSK_NX56_hif_pio_in0_hif_d23,	0x00800000
 .equ SRT_NX56_hif_pio_in0_hif_d23,	23
 .equ MSK_NX56_hif_pio_in0_hif_d24,	0x01000000
 .equ SRT_NX56_hif_pio_in0_hif_d24,	24
 .equ MSK_NX56_hif_pio_in0_hif_d25,	0x02000000
 .equ SRT_NX56_hif_pio_in0_hif_d25,	25
 .equ MSK_NX56_hif_pio_in0_hif_d26,	0x04000000
 .equ SRT_NX56_hif_pio_in0_hif_d26,	26
 .equ MSK_NX56_hif_pio_in0_hif_d27,	0x08000000
 .equ SRT_NX56_hif_pio_in0_hif_d27,	27
 .equ MSK_NX56_hif_pio_in0_hif_d28,	0x10000000
 .equ SRT_NX56_hif_pio_in0_hif_d28,	28
 .equ MSK_NX56_hif_pio_in0_hif_d29,	0x20000000
 .equ SRT_NX56_hif_pio_in0_hif_d29,	29
 .equ MSK_NX56_hif_pio_in0_hif_d30,	0x40000000
 .equ SRT_NX56_hif_pio_in0_hif_d30,	30
 .equ MSK_NX56_hif_pio_in0_hif_d31,	0x80000000
 .equ SRT_NX56_hif_pio_in0_hif_d31,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_in1
@ => HIF PIO Input State Register 1.
@    IO input states can be read here regardless whether IO is used in current HIF/EXT_BUS Memory Interface configuration.
@    Note:
@       netx50-PIO-compatibility mode does not cover this register. Input status will always be given as listed below.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_in1        ,	0x0000001C
 .equ Adr_NX56_hif_io_ctrl_hif_pio_in1,	0x1018C55C
 .equ Adr_NX56_hif_pio_in1            ,	0x1018C55C

 .equ MSK_NX56_hif_pio_in1_hif_a0   ,	0x00000001
 .equ SRT_NX56_hif_pio_in1_hif_a0   ,	0
 .equ MSK_NX56_hif_pio_in1_hif_a1   ,	0x00000002
 .equ SRT_NX56_hif_pio_in1_hif_a1   ,	1
 .equ MSK_NX56_hif_pio_in1_hif_a2   ,	0x00000004
 .equ SRT_NX56_hif_pio_in1_hif_a2   ,	2
 .equ MSK_NX56_hif_pio_in1_hif_a3   ,	0x00000008
 .equ SRT_NX56_hif_pio_in1_hif_a3   ,	3
 .equ MSK_NX56_hif_pio_in1_hif_a4   ,	0x00000010
 .equ SRT_NX56_hif_pio_in1_hif_a4   ,	4
 .equ MSK_NX56_hif_pio_in1_hif_a5   ,	0x00000020
 .equ SRT_NX56_hif_pio_in1_hif_a5   ,	5
 .equ MSK_NX56_hif_pio_in1_hif_a6   ,	0x00000040
 .equ SRT_NX56_hif_pio_in1_hif_a6   ,	6
 .equ MSK_NX56_hif_pio_in1_hif_a7   ,	0x00000080
 .equ SRT_NX56_hif_pio_in1_hif_a7   ,	7
 .equ MSK_NX56_hif_pio_in1_hif_a8   ,	0x00000100
 .equ SRT_NX56_hif_pio_in1_hif_a8   ,	8
 .equ MSK_NX56_hif_pio_in1_hif_a9   ,	0x00000200
 .equ SRT_NX56_hif_pio_in1_hif_a9   ,	9
 .equ MSK_NX56_hif_pio_in1_hif_a10  ,	0x00000400
 .equ SRT_NX56_hif_pio_in1_hif_a10  ,	10
 .equ MSK_NX56_hif_pio_in1_hif_a11  ,	0x00000800
 .equ SRT_NX56_hif_pio_in1_hif_a11  ,	11
 .equ MSK_NX56_hif_pio_in1_hif_a12  ,	0x00001000
 .equ SRT_NX56_hif_pio_in1_hif_a12  ,	12
 .equ MSK_NX56_hif_pio_in1_hif_a13  ,	0x00002000
 .equ SRT_NX56_hif_pio_in1_hif_a13  ,	13
 .equ MSK_NX56_hif_pio_in1_hif_a14  ,	0x00004000
 .equ SRT_NX56_hif_pio_in1_hif_a14  ,	14
 .equ MSK_NX56_hif_pio_in1_hif_a15  ,	0x00008000
 .equ SRT_NX56_hif_pio_in1_hif_a15  ,	15
 .equ MSK_NX56_hif_pio_in1_hif_ahi0 ,	0x00010000
 .equ SRT_NX56_hif_pio_in1_hif_ahi0 ,	16
 .equ MSK_NX56_hif_pio_in1_hif_ahi1 ,	0x00020000
 .equ SRT_NX56_hif_pio_in1_hif_ahi1 ,	17
 .equ MSK_NX56_hif_pio_in1_hif_bhe3 ,	0x01000000
 .equ SRT_NX56_hif_pio_in1_hif_bhe3 ,	24
 .equ MSK_NX56_hif_pio_in1_hif_bhe1 ,	0x02000000
 .equ SRT_NX56_hif_pio_in1_hif_bhe1 ,	25
 .equ MSK_NX56_hif_pio_in1_hif_rdn  ,	0x04000000
 .equ SRT_NX56_hif_pio_in1_hif_rdn  ,	26
 .equ MSK_NX56_hif_pio_in1_hif_wrn  ,	0x08000000
 .equ SRT_NX56_hif_pio_in1_hif_wrn  ,	27
 .equ MSK_NX56_hif_pio_in1_hif_csn  ,	0x10000000
 .equ SRT_NX56_hif_pio_in1_hif_csn  ,	28
 .equ MSK_NX56_hif_pio_in1_hif_rdy  ,	0x20000000
 .equ SRT_NX56_hif_pio_in1_hif_rdy  ,	29
 .equ MSK_NX56_hif_pio_in1_hif_dirq ,	0x40000000
 .equ SRT_NX56_hif_pio_in1_hif_dirq ,	30
 .equ MSK_NX56_hif_pio_in1_hif_sdclk,	0x80000000
 .equ SRT_NX56_hif_pio_in1_hif_sdclk,	31

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_raw
@ => HIF PIO Raw (before masking) IRQ Status Register.
@    If bit is set, the according interrupt is asserted.
@    Interrupt status can be cleared by writing ones to this register.
@    Each IRQ source can be assigned either to xPIC or to ARM (or to both) by the following registers.
@    IRQ clearing has lower priority than IRQ set when done simultanously.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_raw        ,	0x00000024
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_raw,	0x1018C564
 .equ Adr_NX56_hif_pio_irq_raw            ,	0x1018C564

 .equ MSK_NX56_hif_pio_irq_raw_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_raw_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_raw_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_raw_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_raw_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_raw_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_raw_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_raw_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_raw_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_raw_irq_pio72,	4

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_arm_mask_set
@ => HIF PIO Interrupt Mask Register for netX internal ARM.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    If bit is set, the according interrupt will activate the IRQ for netX internal ARM.
@    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register.
@    To release IRQ for netX internal ARM without clearing interrupt in module, reset according mask bit to 0.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_arm_mask_set        ,	0x00000028
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_arm_mask_set,	0x1018C568
 .equ Adr_NX56_hif_pio_irq_arm_mask_set            ,	0x1018C568

 .equ MSK_NX56_hif_pio_irq_arm_mask_set_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_arm_mask_set_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_arm_mask_set_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_arm_mask_set_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_arm_mask_set_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_arm_mask_set_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_arm_mask_set_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_arm_mask_set_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_arm_mask_set_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_arm_mask_set_irq_pio72,	4

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_arm_mask_reset
@ => HIF PIO Interrupt Mask Reset Register for netX internal ARM.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    If bit is set, the according interrupt will activate the IRQ for netX internal ARM if asserted.
@    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register.
@    To release IRQ for netX internal ARM without clearing interrupt in module, reset according mask bit to 0.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_arm_mask_reset        ,	0x0000002C
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_arm_mask_reset,	0x1018C56C
 .equ Adr_NX56_hif_pio_irq_arm_mask_reset            ,	0x1018C56C

 .equ MSK_NX56_hif_pio_irq_arm_mask_reset_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_arm_mask_reset_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_arm_mask_reset_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_arm_mask_reset_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_arm_mask_reset_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_arm_mask_reset_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_arm_mask_reset_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_arm_mask_reset_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_arm_mask_reset_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_arm_mask_reset_irq_pio72,	4

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_arm_masked
@ => HIF PIO Masked Interrupt Status Register for netX internal ARM.
@    If bit is set, if the according mask bit is set in hif_pio_irq_arm_mask-register and the according interrupt is asserted.
@    IRQ for netX internal ARM signal is asserted if at least one bit is set here.
@    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register.
@    To release IRQ for netX internal ARM signal without clearing interrupt in module, reset according mask bit to 0.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_arm_masked        ,	0x00000030
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_arm_masked,	0x1018C570
 .equ Adr_NX56_hif_pio_irq_arm_masked            ,	0x1018C570

 .equ MSK_NX56_hif_pio_irq_arm_masked_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_arm_masked_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_arm_masked_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_arm_masked_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_arm_masked_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_arm_masked_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_arm_masked_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_arm_masked_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_arm_masked_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_arm_masked_irq_pio72,	4

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_xpic_mask_set
@ => HIF PIO Interrupt Mask Register for netX internal xPIC.
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    If bit is set, the according interrupt will activate the IRQ for netX internal xPIC.
@    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register.
@    To release IRQ for netX internal xPIC without clearing interrupt in module, reset according mask bit to 0.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_xpic_mask_set        ,	0x00000034
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_xpic_mask_set,	0x1018C574
 .equ Adr_NX56_hif_pio_irq_xpic_mask_set            ,	0x1018C574

 .equ MSK_NX56_hif_pio_irq_xpic_mask_set_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_xpic_mask_set_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_xpic_mask_set_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_xpic_mask_set_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_xpic_mask_set_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_xpic_mask_set_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_xpic_mask_set_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_xpic_mask_set_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_xpic_mask_set_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_xpic_mask_set_irq_pio72,	4

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_xpic_mask_reset
@ => HIF PIO Interrupt Mask Reset Register for netX internal xPIC.
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source).
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    If bit is set, the according interrupt will activate the IRQ for netX internal xPIC if asserted.
@    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register.
@    To release IRQ for netX internal xPIC without clearing interrupt in module, reset according mask bit to 0.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_xpic_mask_reset        ,	0x00000038
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_xpic_mask_reset,	0x1018C578
 .equ Adr_NX56_hif_pio_irq_xpic_mask_reset            ,	0x1018C578

 .equ MSK_NX56_hif_pio_irq_xpic_mask_reset_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_xpic_mask_reset_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_xpic_mask_reset_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_xpic_mask_reset_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_xpic_mask_reset_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_xpic_mask_reset_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_xpic_mask_reset_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_xpic_mask_reset_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_xpic_mask_reset_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_xpic_mask_reset_irq_pio72,	4

@ ---------------------------------------------------------------------
@ Register hif_pio_irq_xpic_masked
@ => HIF PIO Masked Interrupt Status Register for netX internal xPIC.
@    If bit is set, if the according mask bit is set in hif_pio_irq_xpic_mask-register and the according interrupt is asserted.
@    IRQ for netX internal xPIC signal is asserted if at least one bit is set here.
@    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register.
@    To release IRQ for netX internal xPIC signal without clearing interrupt in module, reset according mask bit to 0.
@    Note: Spikes up tp 10ns will be suppressed by HIF PIO IRQ sample stages.
@    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register.
@    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_hif_pio_irq_xpic_masked        ,	0x0000003C
 .equ Adr_NX56_hif_io_ctrl_hif_pio_irq_xpic_masked,	0x1018C57C
 .equ Adr_NX56_hif_pio_irq_xpic_masked            ,	0x1018C57C

 .equ MSK_NX56_hif_pio_irq_xpic_masked_irq_pio35,	0x00000001
 .equ SRT_NX56_hif_pio_irq_xpic_masked_irq_pio35,	0
 .equ MSK_NX56_hif_pio_irq_xpic_masked_irq_pio36,	0x00000002
 .equ SRT_NX56_hif_pio_irq_xpic_masked_irq_pio36,	1
 .equ MSK_NX56_hif_pio_irq_xpic_masked_irq_pio40,	0x00000004
 .equ SRT_NX56_hif_pio_irq_xpic_masked_irq_pio40,	2
 .equ MSK_NX56_hif_pio_irq_xpic_masked_irq_pio47,	0x00000008
 .equ SRT_NX56_hif_pio_irq_xpic_masked_irq_pio47,	3
 .equ MSK_NX56_hif_pio_irq_xpic_masked_irq_pio72,	0x00000010
 .equ SRT_NX56_hif_pio_irq_xpic_masked_irq_pio72,	4


@ =====================================================================
@
@ Area of crc
@
@ =====================================================================

 .equ Addr_NX56_crc, 0x1018C580

@ ---------------------------------------------------------------------
@ Register crc_crc
@ => CRC Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_crc_crc,	0x00000000
 .equ Adr_NX56_crc_crc_crc,	0x1018C580
 .equ Adr_NX56_crc_crc    ,	0x1018C580

 .equ MSK_NX56_crc_crc_crc_val,	0xffffffff
 .equ SRT_NX56_crc_crc_crc_val,	0

@ ---------------------------------------------------------------------
@ Register crc_data_in
@ => CRC data in Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_crc_data_in,	0x00000004
 .equ Adr_NX56_crc_crc_data_in,	0x1018C584
 .equ Adr_NX56_crc_data_in    ,	0x1018C584

 .equ MSK_NX56_crc_data_in_crc_data_in,	0x000000ff
 .equ SRT_NX56_crc_data_in_crc_data_in,	0

@ ---------------------------------------------------------------------
@ Register crc_polynomial
@ => CRC Polynomial Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_crc_polynomial,	0x00000008
 .equ Adr_NX56_crc_crc_polynomial,	0x1018C588
 .equ Adr_NX56_crc_polynomial    ,	0x1018C588

 .equ MSK_NX56_crc_polynomial_crc_polynomial,	0xffffffff
 .equ SRT_NX56_crc_polynomial_crc_polynomial,	0

@ ---------------------------------------------------------------------
@ Register crc_config
@ => CRC config Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_crc_config,	0x0000000C
 .equ Adr_NX56_crc_crc_config,	0x1018C58C
 .equ Adr_NX56_crc_config    ,	0x1018C58C

 .equ MSK_NX56_crc_config_crc_len        ,	0x0000003f
 .equ SRT_NX56_crc_config_crc_len        ,	0
 .equ MSK_NX56_crc_config_crc_shift_right,	0x00000040
 .equ SRT_NX56_crc_config_crc_shift_right,	6
 .equ MSK_NX56_crc_config_crc_direct_div ,	0x00000080
 .equ SRT_NX56_crc_config_crc_direct_div ,	7
 .equ MSK_NX56_crc_config_crc_nof_bits   ,	0x00000300
 .equ SRT_NX56_crc_config_crc_nof_bits   ,	8
 .equ MSK_NX56_crc_config_crc_in_msb_low ,	0x00000400
 .equ SRT_NX56_crc_config_crc_in_msb_low ,	10


@ =====================================================================
@
@ Area of systime, systime_uc
@
@ =====================================================================

 .equ Addr_NX56_systime, 0x1018C590
 .equ Addr_NX56_systime_uc, 0x1018C5A0

@ ---------------------------------------------------------------------
@ Register systime_s
@ => Upper SYSTIME register:
@    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read.
@    This register should be dedicated to accesses via DPM.
@    ARM software should access systime via arm_timer_systime_s.
@    xPIC software should access systime via xpic_timer_systime_s.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_systime_s       ,	0x00000000
 .equ Adr_NX56_systime_systime_s   ,	0x1018C590
 .equ Adr_NX56_systime_uc_systime_s,	0x1018C5A0

 .equ MSK_NX56_systime_s_systime_s,	0xffffffff
 .equ SRT_NX56_systime_s_systime_s,	0

@ ---------------------------------------------------------------------
@ Register systime_ns
@ => Lower SYSTIME register:
@    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read.
@    If no systime_s is read before (or at 2nd read access of systime_ns), the actual value of systime_ns is read.
@    This register should be dedicated to accesses via DPM.
@    ARM software should access systime via arm_timer_systime_ns.
@    xPIC software should access systime via xpic_timer_systime_ns.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_systime_ns       ,	0x00000004
 .equ Adr_NX56_systime_systime_ns   ,	0x1018C594
 .equ Adr_NX56_systime_uc_systime_ns,	0x1018C5A4

 .equ MSK_NX56_systime_ns_systime_ns,	0xffffffff
 .equ SRT_NX56_systime_ns_systime_ns,	0

@ ---------------------------------------------------------------------
@ Register systime_border
@ => SYSTIME border register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_systime_border       ,	0x00000008
 .equ Adr_NX56_systime_systime_border   ,	0x1018C598
 .equ Adr_NX56_systime_uc_systime_border,	0x1018C5A8

 .equ MSK_NX56_systime_border_systime_border,	0xffffffff
 .equ SRT_NX56_systime_border_systime_border,	0

@ ---------------------------------------------------------------------
@ Register systime_count_value
@ => SYSTIME count register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_systime_count_value       ,	0x0000000C
 .equ Adr_NX56_systime_systime_count_value   ,	0x1018C59C
 .equ Adr_NX56_systime_uc_systime_count_value,	0x1018C5AC

 .equ MSK_NX56_systime_count_value_systime_count_value,	0xffffffff
 .equ SRT_NX56_systime_count_value_systime_count_value,	0


@ =====================================================================
@
@ Area of watchdog
@
@ =====================================================================

 .equ Addr_NX56_watchdog, 0x1018C5B0

@ ---------------------------------------------------------------------
@ Register netx_sys_wdg_ctrl
@ => netX System Watchdog Trigger Register.
@    The watchdog access code is generated by a pseudo random generator.
@    Note:
@       WDGACT signal on netX IO HIF_D19 must be configured additionally inside 'hif_io_cfg' register (area HIF_IO_CTRL).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_sys_wdg_ctrl     ,	0x00000000
 .equ Adr_NX56_watchdog_netx_sys_wdg_ctrl,	0x1018C5B0
 .equ Adr_NX56_netx_sys_wdg_ctrl         ,	0x1018C5B0

 .equ MSK_NX56_netx_sys_wdg_ctrl_wdg_access_code      ,	0x000fffff
 .equ SRT_NX56_netx_sys_wdg_ctrl_wdg_access_code      ,	0
 .equ MSK_NX56_netx_sys_wdg_ctrl_irq_req_watchdog     ,	0x01000000
 .equ SRT_NX56_netx_sys_wdg_ctrl_irq_req_watchdog     ,	24
 .equ MSK_NX56_netx_sys_wdg_ctrl_wdg_counter_trigger_w,	0x10000000
 .equ SRT_NX56_netx_sys_wdg_ctrl_wdg_counter_trigger_w,	28
 .equ MSK_NX56_netx_sys_wdg_ctrl_write_enable         ,	0x80000000
 .equ SRT_NX56_netx_sys_wdg_ctrl_write_enable         ,	31

@ ---------------------------------------------------------------------
@ Register netx_sys_wdg
@ => netX System Watchdog Register
@    The counter value is decremented each 10000 system clock cycles.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_sys_wdg     ,	0x00000004
 .equ Adr_NX56_watchdog_netx_sys_wdg,	0x1018C5B4
 .equ Adr_NX56_netx_sys_wdg         ,	0x1018C5B4

 .equ MSK_NX56_netx_sys_wdg_wdg_counter,	0x0001ffff
 .equ SRT_NX56_netx_sys_wdg_wdg_counter,	0

@ ---------------------------------------------------------------------
@ Register netx_sys_wdg_irq_timeout
@ => netX System Wachtdog Interrupt Timout Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_sys_wdg_irq_timeout     ,	0x00000008
 .equ Adr_NX56_watchdog_netx_sys_wdg_irq_timeout,	0x1018C5B8
 .equ Adr_NX56_netx_sys_wdg_irq_timeout         ,	0x1018C5B8

 .equ MSK_NX56_netx_sys_wdg_irq_timeout_wdg_irq_timeout,	0x0000ffff
 .equ SRT_NX56_netx_sys_wdg_irq_timeout_wdg_irq_timeout,	0

@ ---------------------------------------------------------------------
@ Register netx_sys_wdg_res_timeout
@ => netX System Watchdog Reset Timeout Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_netx_sys_wdg_res_timeout     ,	0x0000000C
 .equ Adr_NX56_watchdog_netx_sys_wdg_res_timeout,	0x1018C5BC
 .equ Adr_NX56_netx_sys_wdg_res_timeout         ,	0x1018C5BC

 .equ MSK_NX56_netx_sys_wdg_res_timeout_wdg_res_timeout,	0x0000ffff
 .equ SRT_NX56_netx_sys_wdg_res_timeout_wdg_res_timeout,	0


@ =====================================================================
@
@ Area of sqi
@
@ =====================================================================

 .equ Addr_NX56_sqi, 0x1018C5C0

@ ---------------------------------------------------------------------
@ Register sqi_cr0
@ => SQI control register 0
@    This register is compatible to netX50 and netX10 SPI module. However, there are some additional settings possible. SQI module
@    is provides only master functionality, hence slave settings are omitted. Compatible mode for netx100 is not supported by SQI module.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_cr0,	0x00000000
 .equ Adr_NX56_sqi_sqi_cr0,	0x1018C5C0
 .equ Adr_NX56_sqi_cr0    ,	0x1018C5C0

 .equ MSK_NX56_sqi_cr0_datasize  ,	0x0000000f
 .equ SRT_NX56_sqi_cr0_datasize  ,	0
 .equ MSK_NX56_sqi_cr0_sck_pol   ,	0x00000040
 .equ SRT_NX56_sqi_cr0_sck_pol   ,	6
 .equ MSK_NX56_sqi_cr0_sck_phase ,	0x00000080
 .equ SRT_NX56_sqi_cr0_sck_phase ,	7
 .equ MSK_NX56_sqi_cr0_sck_muladd,	0x000fff00
 .equ SRT_NX56_sqi_cr0_sck_muladd,	8
 .equ MSK_NX56_sqi_cr0_sio_cfg   ,	0x00c00000
 .equ SRT_NX56_sqi_cr0_sio_cfg   ,	22
 .equ MSK_NX56_sqi_cr0_filter_in ,	0x08000000
 .equ SRT_NX56_sqi_cr0_filter_in ,	27

@ ---------------------------------------------------------------------
@ Register sqi_cr1
@ => SQI control register 1
@    This register is compatible to netX50 and netX10 SPI module. However, there are some additional settings possible. SQI module
@    is provides only master functionality, hence slave settings are omitted.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_cr1,	0x00000004
 .equ Adr_NX56_sqi_sqi_cr1,	0x1018C5C4
 .equ Adr_NX56_sqi_cr1    ,	0x1018C5C4

 .equ MSK_NX56_sqi_cr1_sqi_en        ,	0x00000002
 .equ SRT_NX56_sqi_cr1_sqi_en        ,	1
 .equ MSK_NX56_sqi_cr1_fss           ,	0x00000700
 .equ SRT_NX56_sqi_cr1_fss           ,	8
 .equ MSK_NX56_sqi_cr1_fss_static    ,	0x00000800
 .equ SRT_NX56_sqi_cr1_fss_static    ,	11
 .equ MSK_NX56_sqi_cr1_spi_trans_ctrl,	0x00001000
 .equ SRT_NX56_sqi_cr1_spi_trans_ctrl,	12
 .equ MSK_NX56_sqi_cr1_tx_fifo_wm    ,	0x000f0000
 .equ SRT_NX56_sqi_cr1_tx_fifo_wm    ,	16
 .equ MSK_NX56_sqi_cr1_tx_fifo_clr   ,	0x00100000
 .equ SRT_NX56_sqi_cr1_tx_fifo_clr   ,	20
 .equ MSK_NX56_sqi_cr1_rx_fifo_wm    ,	0x0f000000
 .equ SRT_NX56_sqi_cr1_rx_fifo_wm    ,	24
 .equ MSK_NX56_sqi_cr1_rx_fifo_clr   ,	0x10000000
 .equ SRT_NX56_sqi_cr1_rx_fifo_clr   ,	28

@ ---------------------------------------------------------------------
@ Register sqi_dr
@ => SQI data register (DR)
@    read access: received data byte is delivered from receive FIFO
@    write access: send data byte is written to send FIFO
@    Both, receive and transmit FIFO have a depth of 16.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_dr,	0x00000008
 .equ Adr_NX56_sqi_sqi_dr,	0x1018C5C8
 .equ Adr_NX56_sqi_dr    ,	0x1018C5C8

 .equ MSK_NX56_sqi_dr_data,	0xffffffff
 .equ SRT_NX56_sqi_dr_data,	0

@ ---------------------------------------------------------------------
@ Register sqi_sr
@ => Read only SQI status register
@    SQI master mode: MISO-input-data will be stored in the receive FIFO, transmit FIFO generates MOSI-output-data
@    Shows the current status of the SQI interface.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_sr,	0x0000000C
 .equ Adr_NX56_sqi_sqi_sr,	0x1018C5CC
 .equ Adr_NX56_sqi_sr    ,	0x1018C5CC

 .equ MSK_NX56_sqi_sr_tx_fifo_empty      ,	0x00000001
 .equ SRT_NX56_sqi_sr_tx_fifo_empty      ,	0
 .equ MSK_NX56_sqi_sr_tx_fifo_not_full   ,	0x00000002
 .equ SRT_NX56_sqi_sr_tx_fifo_not_full   ,	1
 .equ MSK_NX56_sqi_sr_rx_fifo_not_empty  ,	0x00000004
 .equ SRT_NX56_sqi_sr_rx_fifo_not_empty  ,	2
 .equ MSK_NX56_sqi_sr_rx_fifo_full       ,	0x00000008
 .equ SRT_NX56_sqi_sr_rx_fifo_full       ,	3
 .equ MSK_NX56_sqi_sr_busy               ,	0x00000010
 .equ SRT_NX56_sqi_sr_busy               ,	4
 .equ MSK_NX56_sqi_sr_sqirom_timeout_err ,	0x00002000
 .equ SRT_NX56_sqi_sr_sqirom_timeout_err ,	13
 .equ MSK_NX56_sqi_sr_sqirom_write_err   ,	0x00004000
 .equ SRT_NX56_sqi_sr_sqirom_write_err   ,	14
 .equ MSK_NX56_sqi_sr_sqirom_disabled_err,	0x00008000
 .equ SRT_NX56_sqi_sr_sqirom_disabled_err,	15
 .equ MSK_NX56_sqi_sr_tx_fifo_level      ,	0x001f0000
 .equ SRT_NX56_sqi_sr_tx_fifo_level      ,	16
 .equ MSK_NX56_sqi_sr_tx_fifo_err_ovfl   ,	0x00400000
 .equ SRT_NX56_sqi_sr_tx_fifo_err_ovfl   ,	22
 .equ MSK_NX56_sqi_sr_tx_fifo_err_undr   ,	0x00800000
 .equ SRT_NX56_sqi_sr_tx_fifo_err_undr   ,	23
 .equ MSK_NX56_sqi_sr_rx_fifo_level      ,	0x1f000000
 .equ SRT_NX56_sqi_sr_rx_fifo_level      ,	24
 .equ MSK_NX56_sqi_sr_rx_fifo_err_ovfl   ,	0x40000000
 .equ SRT_NX56_sqi_sr_rx_fifo_err_ovfl   ,	30
 .equ MSK_NX56_sqi_sr_rx_fifo_err_undr   ,	0x80000000
 .equ SRT_NX56_sqi_sr_rx_fifo_err_undr   ,	31

@ ---------------------------------------------------------------------
@ Register sqi_tcr
@ => SQI transfer control (Module address offset 0x10 is reserved in netX10/50 SPI module. No compatibility problems by using this address for new register).
@    This register must not be changed while a transfer is running ('busy' bit in register 'sqi_sr' is '1') to avoid corrupted transfers causing hardware damage.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_tcr,	0x00000010
 .equ Adr_NX56_sqi_sqi_tcr,	0x1018C5D0
 .equ Adr_NX56_sqi_tcr    ,	0x1018C5D0

 .equ MSK_NX56_sqi_tcr_transfer_size ,	0x0007ffff
 .equ SRT_NX56_sqi_tcr_transfer_size ,	0
 .equ MSK_NX56_sqi_tcr_tx_out        ,	0x00200000
 .equ SRT_NX56_sqi_tcr_tx_out        ,	21
 .equ MSK_NX56_sqi_tcr_tx_oe         ,	0x00400000
 .equ SRT_NX56_sqi_tcr_tx_oe         ,	22
 .equ MSK_NX56_sqi_tcr_start_transfer,	0x00800000
 .equ SRT_NX56_sqi_tcr_start_transfer,	23
 .equ MSK_NX56_sqi_tcr_mode          ,	0x03000000
 .equ SRT_NX56_sqi_tcr_mode          ,	24
 .equ MSK_NX56_sqi_tcr_duplex        ,	0x0c000000
 .equ SRT_NX56_sqi_tcr_duplex        ,	26
 .equ MSK_NX56_sqi_tcr_ms_bit_first  ,	0x10000000
 .equ SRT_NX56_sqi_tcr_ms_bit_first  ,	28
 .equ MSK_NX56_sqi_tcr_ms_byte_first ,	0x20000000
 .equ SRT_NX56_sqi_tcr_ms_byte_first ,	29

@ ---------------------------------------------------------------------
@ Register sqi_irq_mask
@ => SQI interrupt mask set or clear register.
@    IRQ mask is an AND-mask: only IRQ with mask bit set can generate module IRQ.
@    For detailed IRQ behavior and function view 'sqi_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_irq_mask,	0x00000014
 .equ Adr_NX56_sqi_sqi_irq_mask,	0x1018C5D4
 .equ Adr_NX56_sqi_irq_mask    ,	0x1018C5D4

 .equ MSK_NX56_sqi_irq_mask_RORIM       ,	0x00000001
 .equ SRT_NX56_sqi_irq_mask_RORIM       ,	0
 .equ MSK_NX56_sqi_irq_mask_RTIM        ,	0x00000002
 .equ SRT_NX56_sqi_irq_mask_RTIM        ,	1
 .equ MSK_NX56_sqi_irq_mask_RXIM        ,	0x00000004
 .equ SRT_NX56_sqi_irq_mask_RXIM        ,	2
 .equ MSK_NX56_sqi_irq_mask_TXIM        ,	0x00000008
 .equ SRT_NX56_sqi_irq_mask_TXIM        ,	3
 .equ MSK_NX56_sqi_irq_mask_rxneim      ,	0x00000010
 .equ SRT_NX56_sqi_irq_mask_rxneim      ,	4
 .equ MSK_NX56_sqi_irq_mask_rxfim       ,	0x00000020
 .equ SRT_NX56_sqi_irq_mask_rxfim       ,	5
 .equ MSK_NX56_sqi_irq_mask_txeim       ,	0x00000040
 .equ SRT_NX56_sqi_irq_mask_txeim       ,	6
 .equ MSK_NX56_sqi_irq_mask_trans_end   ,	0x00000080
 .equ SRT_NX56_sqi_irq_mask_trans_end   ,	7
 .equ MSK_NX56_sqi_irq_mask_sqirom_error,	0x00000100
 .equ SRT_NX56_sqi_irq_mask_sqirom_error,	8

@ ---------------------------------------------------------------------
@ Register sqi_irq_raw
@ => SQI interrupt state before masking register (raw interrupt).
@    Writing a "1" to a bit clears this interrupt.
@    Note:
@        Both, receive and transmit FIFO have a depth of 16.
@    Note:
@       IRQ flags can also be cleared by using 'sqi_icr' for SPI module compatibility.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_irq_raw,	0x00000018
 .equ Adr_NX56_sqi_sqi_irq_raw,	0x1018C5D8
 .equ Adr_NX56_sqi_irq_raw    ,	0x1018C5D8

 .equ MSK_NX56_sqi_irq_raw_RORRIS      ,	0x00000001
 .equ SRT_NX56_sqi_irq_raw_RORRIS      ,	0
 .equ MSK_NX56_sqi_irq_raw_RTRIS       ,	0x00000002
 .equ SRT_NX56_sqi_irq_raw_RTRIS       ,	1
 .equ MSK_NX56_sqi_irq_raw_RXRIS       ,	0x00000004
 .equ SRT_NX56_sqi_irq_raw_RXRIS       ,	2
 .equ MSK_NX56_sqi_irq_raw_TXRIS       ,	0x00000008
 .equ SRT_NX56_sqi_irq_raw_TXRIS       ,	3
 .equ MSK_NX56_sqi_irq_raw_rxneris     ,	0x00000010
 .equ SRT_NX56_sqi_irq_raw_rxneris     ,	4
 .equ MSK_NX56_sqi_irq_raw_rxfris      ,	0x00000020
 .equ SRT_NX56_sqi_irq_raw_rxfris      ,	5
 .equ MSK_NX56_sqi_irq_raw_txeris      ,	0x00000040
 .equ SRT_NX56_sqi_irq_raw_txeris      ,	6
 .equ MSK_NX56_sqi_irq_raw_trans_end   ,	0x00000080
 .equ SRT_NX56_sqi_irq_raw_trans_end   ,	7
 .equ MSK_NX56_sqi_irq_raw_sqirom_error,	0x00000100
 .equ SRT_NX56_sqi_irq_raw_sqirom_error,	8

@ ---------------------------------------------------------------------
@ Register sqi_irq_masked
@ => SQI masked interrupt status register
@    For detailed IRQ behavior and function view 'sqi_irq_raw' register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_irq_masked,	0x0000001C
 .equ Adr_NX56_sqi_sqi_irq_masked,	0x1018C5DC
 .equ Adr_NX56_sqi_irq_masked    ,	0x1018C5DC

 .equ MSK_NX56_sqi_irq_masked_RORMIS      ,	0x00000001
 .equ SRT_NX56_sqi_irq_masked_RORMIS      ,	0
 .equ MSK_NX56_sqi_irq_masked_RTMIS       ,	0x00000002
 .equ SRT_NX56_sqi_irq_masked_RTMIS       ,	1
 .equ MSK_NX56_sqi_irq_masked_RXMIS       ,	0x00000004
 .equ SRT_NX56_sqi_irq_masked_RXMIS       ,	2
 .equ MSK_NX56_sqi_irq_masked_TXMIS       ,	0x00000008
 .equ SRT_NX56_sqi_irq_masked_TXMIS       ,	3
 .equ MSK_NX56_sqi_irq_masked_rxnemis     ,	0x00000010
 .equ SRT_NX56_sqi_irq_masked_rxnemis     ,	4
 .equ MSK_NX56_sqi_irq_masked_rxfmis      ,	0x00000020
 .equ SRT_NX56_sqi_irq_masked_rxfmis      ,	5
 .equ MSK_NX56_sqi_irq_masked_txemis      ,	0x00000040
 .equ SRT_NX56_sqi_irq_masked_txemis      ,	6
 .equ MSK_NX56_sqi_irq_masked_trans_end   ,	0x00000080
 .equ SRT_NX56_sqi_irq_masked_trans_end   ,	7
 .equ MSK_NX56_sqi_irq_masked_sqirom_error,	0x00000100
 .equ SRT_NX56_sqi_irq_masked_sqirom_error,	8

@ ---------------------------------------------------------------------
@ Register sqi_irq_clear
@ => SQI interrupt clear register (for compatibility to netX10/50 SPI module).
@    This register is always '0' on read.
@    Note:
@       IRQ flags can also be cleared by writing 'sqi_irq_raw' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_irq_clear,	0x00000020
 .equ Adr_NX56_sqi_sqi_irq_clear,	0x1018C5E0
 .equ Adr_NX56_sqi_irq_clear    ,	0x1018C5E0

 .equ MSK_NX56_sqi_irq_clear_RORIC       ,	0x00000001
 .equ SRT_NX56_sqi_irq_clear_RORIC       ,	0
 .equ MSK_NX56_sqi_irq_clear_RTIC        ,	0x00000002
 .equ SRT_NX56_sqi_irq_clear_RTIC        ,	1
 .equ MSK_NX56_sqi_irq_clear_RXIC        ,	0x00000004
 .equ SRT_NX56_sqi_irq_clear_RXIC        ,	2
 .equ MSK_NX56_sqi_irq_clear_TXIC        ,	0x00000008
 .equ SRT_NX56_sqi_irq_clear_TXIC        ,	3
 .equ MSK_NX56_sqi_irq_clear_rxneic      ,	0x00000010
 .equ SRT_NX56_sqi_irq_clear_rxneic      ,	4
 .equ MSK_NX56_sqi_irq_clear_rxfic       ,	0x00000020
 .equ SRT_NX56_sqi_irq_clear_rxfic       ,	5
 .equ MSK_NX56_sqi_irq_clear_txeic       ,	0x00000040
 .equ SRT_NX56_sqi_irq_clear_txeic       ,	6
 .equ MSK_NX56_sqi_irq_clear_trans_end   ,	0x00000080
 .equ SRT_NX56_sqi_irq_clear_trans_end   ,	7
 .equ MSK_NX56_sqi_irq_clear_sqirom_error,	0x00000100
 .equ SRT_NX56_sqi_irq_clear_sqirom_error,	8

@ ---------------------------------------------------------------------
@ Register sqi_irq_cpu_sel
@ => SQI interrupt CPU select register
@    Select CPU (xPIC or ARM), which gets Interrupts from this SQI instance.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_irq_cpu_sel,	0x00000024
 .equ Adr_NX56_sqi_sqi_irq_cpu_sel,	0x1018C5E4
 .equ Adr_NX56_sqi_irq_cpu_sel    ,	0x1018C5E4

 .equ MSK_NX56_sqi_irq_cpu_sel_arm ,	0x00000001
 .equ SRT_NX56_sqi_irq_cpu_sel_arm ,	0
 .equ MSK_NX56_sqi_irq_cpu_sel_xpic,	0x00000002
 .equ SRT_NX56_sqi_irq_cpu_sel_xpic,	1

@ ---------------------------------------------------------------------
@ Register sqi_dmacr
@ => SQI DMA control register
@    Only single transfer requests will be generated by this module.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_dmacr,	0x00000028
 .equ Adr_NX56_sqi_sqi_dmacr,	0x1018C5E8
 .equ Adr_NX56_sqi_dmacr    ,	0x1018C5E8

 .equ MSK_NX56_sqi_dmacr_rx_dma_en,	0x00000001
 .equ SRT_NX56_sqi_dmacr_rx_dma_en,	0
 .equ MSK_NX56_sqi_dmacr_tx_dma_en,	0x00000002
 .equ SRT_NX56_sqi_dmacr_tx_dma_en,	1

@ ---------------------------------------------------------------------
@ Register sqi_pio_out
@ => SQI PIO output level control register
@    IO PIO mode is controlable by 'sqi_cr0' register bits 'sio_cfg'.
@    PIO input signal states are never filtered ('sqi_cr0' bit 'filter_in')
@    Note:
@       SQI module must be enabled by register 'sqi_cr0' bit 'sqi_en' for SQI IOs driving in PIO mode.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_pio_out,	0x00000030
 .equ Adr_NX56_sqi_sqi_pio_out,	0x1018C5F0
 .equ Adr_NX56_sqi_pio_out    ,	0x1018C5F0

 .equ MSK_NX56_sqi_pio_out_sclk,	0x00000001
 .equ SRT_NX56_sqi_pio_out_sclk,	0
 .equ MSK_NX56_sqi_pio_out_csn ,	0x0000000e
 .equ SRT_NX56_sqi_pio_out_csn ,	1
 .equ MSK_NX56_sqi_pio_out_mosi,	0x00000010
 .equ SRT_NX56_sqi_pio_out_mosi,	4
 .equ MSK_NX56_sqi_pio_out_miso,	0x00000020
 .equ SRT_NX56_sqi_pio_out_miso,	5
 .equ MSK_NX56_sqi_pio_out_sio2,	0x00000040
 .equ SRT_NX56_sqi_pio_out_sio2,	6
 .equ MSK_NX56_sqi_pio_out_sio3,	0x00000080
 .equ SRT_NX56_sqi_pio_out_sio3,	7

@ ---------------------------------------------------------------------
@ Register sqi_pio_oe
@ => SQI PIO output enable control register
@    IO PIO mode is controlable by 'sqi_cr0' register bits 'sio_cfg'.
@    Note:
@       SQI module must be enabled by register 'sqi_cr0' bit 'sqi_en' for SQI IOs driving in PIO mode.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_pio_oe,	0x00000034
 .equ Adr_NX56_sqi_sqi_pio_oe,	0x1018C5F4
 .equ Adr_NX56_sqi_pio_oe    ,	0x1018C5F4

 .equ MSK_NX56_sqi_pio_oe_sclk,	0x00000001
 .equ SRT_NX56_sqi_pio_oe_sclk,	0
 .equ MSK_NX56_sqi_pio_oe_csn ,	0x0000000e
 .equ SRT_NX56_sqi_pio_oe_csn ,	1
 .equ MSK_NX56_sqi_pio_oe_mosi,	0x00000010
 .equ SRT_NX56_sqi_pio_oe_mosi,	4
 .equ MSK_NX56_sqi_pio_oe_miso,	0x00000020
 .equ SRT_NX56_sqi_pio_oe_miso,	5
 .equ MSK_NX56_sqi_pio_oe_sio2,	0x00000040
 .equ SRT_NX56_sqi_pio_oe_sio2,	6
 .equ MSK_NX56_sqi_pio_oe_sio3,	0x00000080
 .equ SRT_NX56_sqi_pio_oe_sio3,	7

@ ---------------------------------------------------------------------
@ Register sqi_pio_in
@ => SQI PIO input status register
@    IO PIO mode is controllable by 'sqi_cr0' register bits 'sio_cfg'.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_pio_in,	0x00000038
 .equ Adr_NX56_sqi_sqi_pio_in,	0x1018C5F8
 .equ Adr_NX56_sqi_pio_in    ,	0x1018C5F8

 .equ MSK_NX56_sqi_pio_in_sclk,	0x00000001
 .equ SRT_NX56_sqi_pio_in_sclk,	0
 .equ MSK_NX56_sqi_pio_in_csn ,	0x0000000e
 .equ SRT_NX56_sqi_pio_in_csn ,	1
 .equ MSK_NX56_sqi_pio_in_mosi,	0x00000010
 .equ SRT_NX56_sqi_pio_in_mosi,	4
 .equ MSK_NX56_sqi_pio_in_miso,	0x00000020
 .equ SRT_NX56_sqi_pio_in_miso,	5
 .equ MSK_NX56_sqi_pio_in_sio2,	0x00000040
 .equ SRT_NX56_sqi_pio_in_sio2,	6
 .equ MSK_NX56_sqi_pio_in_sio3,	0x00000080
 .equ SRT_NX56_sqi_pio_in_sio3,	7

@ ---------------------------------------------------------------------
@ Register sqi_sqirom_cfg
@ => SQIROM mode configuration
@    Configuration register for the SQIROM mode.
@    This mode supports the 'eXecute in Place' (XiP) feature of SQI flash chips. The position of the command byte and the address nibbles as well as
@    the the number of address nibbles and dummy cycles can be configured with this register. It is also possible to change the clock divider
@    to support a wide range of frequencies for the serial clock output.
@    Note: Before enabling this mode, the SQI flash chip needs to be in 4 bit command mode, otherwise the module is not able to fetch data
@          from the flash.
@    Note: When enabled, the SQI module is completely blocked, e.g. other SQI or SPI transactions are not possible.
@    Note: The chip select signal of the flash must be connected to sqi_cs0.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sqi_sqirom_cfg,	0x0000003C
 .equ Adr_NX56_sqi_sqi_sqirom_cfg,	0x1018C5FC
 .equ Adr_NX56_sqi_sqirom_cfg    ,	0x1018C5FC

 .equ MSK_NX56_sqi_sqirom_cfg_enable         ,	0x00000001
 .equ SRT_NX56_sqi_sqirom_cfg_enable         ,	0
 .equ MSK_NX56_sqi_sqirom_cfg_addr_before_cmd,	0x00000002
 .equ SRT_NX56_sqi_sqirom_cfg_addr_before_cmd,	1
 .equ MSK_NX56_sqi_sqirom_cfg_addr_nibbles   ,	0x0000000c
 .equ SRT_NX56_sqi_sqirom_cfg_addr_nibbles   ,	2
 .equ MSK_NX56_sqi_sqirom_cfg_addr_bits      ,	0x00000070
 .equ SRT_NX56_sqi_sqirom_cfg_addr_bits      ,	4
 .equ MSK_NX56_sqi_sqirom_cfg_cmd_byte       ,	0x0000ff00
 .equ SRT_NX56_sqi_sqirom_cfg_cmd_byte       ,	8
 .equ MSK_NX56_sqi_sqirom_cfg_dummy_cycles   ,	0x00070000
 .equ SRT_NX56_sqi_sqirom_cfg_dummy_cycles   ,	16
 .equ MSK_NX56_sqi_sqirom_cfg_t_csh          ,	0x00300000
 .equ SRT_NX56_sqi_sqirom_cfg_t_csh          ,	20
 .equ MSK_NX56_sqi_sqirom_cfg_clk_div_val    ,	0xff000000
 .equ SRT_NX56_sqi_sqirom_cfg_clk_div_val    ,	24


@ =====================================================================
@
@ Area of uart0, uart1, uart2
@
@ =====================================================================

 .equ Addr_NX56_uart0, 0x1018C600
 .equ Addr_NX56_uart1, 0x1018C640
 .equ Addr_NX56_uart2, 0x1018C680

@ ---------------------------------------------------------------------
@ Register uartdr
@ => data read or written from the interface
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartdr  ,	0x00000000
 .equ Adr_NX56_uart0_uartdr,	0x1018C600
 .equ Adr_NX56_uart1_uartdr,	0x1018C640
 .equ Adr_NX56_uart2_uartdr,	0x1018C680

 .equ MSK_NX56_uartdr_DATA,	0x000000ff
 .equ SRT_NX56_uartdr_DATA,	0
 .equ MSK_NX56_uartdr_FE  ,	0x00000100
 .equ SRT_NX56_uartdr_FE  ,	8
 .equ MSK_NX56_uartdr_PE  ,	0x00000200
 .equ SRT_NX56_uartdr_PE  ,	9
 .equ MSK_NX56_uartdr_BE  ,	0x00000400
 .equ SRT_NX56_uartdr_BE  ,	10

@ ---------------------------------------------------------------------
@ Register uartrsr
@ => receive status register (read) / Error Clear Register (write)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartrsr  ,	0x00000004
 .equ Adr_NX56_uart0_uartrsr,	0x1018C604
 .equ Adr_NX56_uart1_uartrsr,	0x1018C644
 .equ Adr_NX56_uart2_uartrsr,	0x1018C684

 .equ MSK_NX56_uartrsr_FE,	0x00000001
 .equ SRT_NX56_uartrsr_FE,	0
 .equ MSK_NX56_uartrsr_PE,	0x00000002
 .equ SRT_NX56_uartrsr_PE,	1
 .equ MSK_NX56_uartrsr_BE,	0x00000004
 .equ SRT_NX56_uartrsr_BE,	2
 .equ MSK_NX56_uartrsr_OE,	0x00000008
 .equ SRT_NX56_uartrsr_OE,	3

@ ---------------------------------------------------------------------
@ Register uartlcr_h
@ => Line control Register, high byte
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartlcr_h  ,	0x00000008
 .equ Adr_NX56_uart0_uartlcr_h,	0x1018C608
 .equ Adr_NX56_uart1_uartlcr_h,	0x1018C648
 .equ Adr_NX56_uart2_uartlcr_h,	0x1018C688

 .equ MSK_NX56_uartlcr_h_BRK ,	0x00000001
 .equ SRT_NX56_uartlcr_h_BRK ,	0
 .equ MSK_NX56_uartlcr_h_PEN ,	0x00000002
 .equ SRT_NX56_uartlcr_h_PEN ,	1
 .equ MSK_NX56_uartlcr_h_EPS ,	0x00000004
 .equ SRT_NX56_uartlcr_h_EPS ,	2
 .equ MSK_NX56_uartlcr_h_STP2,	0x00000008
 .equ SRT_NX56_uartlcr_h_STP2,	3
 .equ MSK_NX56_uartlcr_h_FEN ,	0x00000010
 .equ SRT_NX56_uartlcr_h_FEN ,	4
 .equ MSK_NX56_uartlcr_h_WLEN,	0x00000060
 .equ SRT_NX56_uartlcr_h_WLEN,	5

@ ---------------------------------------------------------------------
@ Register uartlcr_m
@ => Line control Register, middle byte
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartlcr_m  ,	0x0000000C
 .equ Adr_NX56_uart0_uartlcr_m,	0x1018C60C
 .equ Adr_NX56_uart1_uartlcr_m,	0x1018C64C
 .equ Adr_NX56_uart2_uartlcr_m,	0x1018C68C

 .equ MSK_NX56_uartlcr_m_BAUDDIVMS,	0x000000ff
 .equ SRT_NX56_uartlcr_m_BAUDDIVMS,	0

@ ---------------------------------------------------------------------
@ Register uartlcr_l
@ => Line control Register, low byte
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartlcr_l  ,	0x00000010
 .equ Adr_NX56_uart0_uartlcr_l,	0x1018C610
 .equ Adr_NX56_uart1_uartlcr_l,	0x1018C650
 .equ Adr_NX56_uart2_uartlcr_l,	0x1018C690

 .equ MSK_NX56_uartlcr_l_BAUDDIVLS,	0x000000ff
 .equ SRT_NX56_uartlcr_l_BAUDDIVLS,	0

@ ---------------------------------------------------------------------
@ Register uartcr
@ => uart control Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartcr  ,	0x00000014
 .equ Adr_NX56_uart0_uartcr,	0x1018C614
 .equ Adr_NX56_uart1_uartcr,	0x1018C654
 .equ Adr_NX56_uart2_uartcr,	0x1018C694

 .equ MSK_NX56_uartcr_uartEN    ,	0x00000001
 .equ SRT_NX56_uartcr_uartEN    ,	0
 .equ MSK_NX56_uartcr_SIREN     ,	0x00000002
 .equ SRT_NX56_uartcr_SIREN     ,	1
 .equ MSK_NX56_uartcr_SIRLP     ,	0x00000004
 .equ SRT_NX56_uartcr_SIRLP     ,	2
 .equ MSK_NX56_uartcr_MSIE      ,	0x00000008
 .equ SRT_NX56_uartcr_MSIE      ,	3
 .equ MSK_NX56_uartcr_RIE       ,	0x00000010
 .equ SRT_NX56_uartcr_RIE       ,	4
 .equ MSK_NX56_uartcr_TIE       ,	0x00000020
 .equ SRT_NX56_uartcr_TIE       ,	5
 .equ MSK_NX56_uartcr_RTIE      ,	0x00000040
 .equ SRT_NX56_uartcr_RTIE      ,	6
 .equ MSK_NX56_uartcr_LBE       ,	0x00000080
 .equ SRT_NX56_uartcr_LBE       ,	7
 .equ MSK_NX56_uartcr_TX_RX_LOOP,	0x00000100
 .equ SRT_NX56_uartcr_TX_RX_LOOP,	8

@ ---------------------------------------------------------------------
@ Register uartfr
@ => uart Flag Register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartfr  ,	0x00000018
 .equ Adr_NX56_uart0_uartfr,	0x1018C618
 .equ Adr_NX56_uart1_uartfr,	0x1018C658
 .equ Adr_NX56_uart2_uartfr,	0x1018C698

 .equ MSK_NX56_uartfr_CTS ,	0x00000001
 .equ SRT_NX56_uartfr_CTS ,	0
 .equ MSK_NX56_uartfr_DSR ,	0x00000002
 .equ SRT_NX56_uartfr_DSR ,	1
 .equ MSK_NX56_uartfr_DCD ,	0x00000004
 .equ SRT_NX56_uartfr_DCD ,	2
 .equ MSK_NX56_uartfr_BUSY,	0x00000008
 .equ SRT_NX56_uartfr_BUSY,	3
 .equ MSK_NX56_uartfr_RXFE,	0x00000010
 .equ SRT_NX56_uartfr_RXFE,	4
 .equ MSK_NX56_uartfr_TXFF,	0x00000020
 .equ SRT_NX56_uartfr_TXFF,	5
 .equ MSK_NX56_uartfr_RXFF,	0x00000040
 .equ SRT_NX56_uartfr_RXFF,	6
 .equ MSK_NX56_uartfr_TXFE,	0x00000080
 .equ SRT_NX56_uartfr_TXFE,	7

@ ---------------------------------------------------------------------
@ Register uartiir
@ => Interrupt Identification (read) / interrupt clear (write)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartiir  ,	0x0000001C
 .equ Adr_NX56_uart0_uartiir,	0x1018C61C
 .equ Adr_NX56_uart1_uartiir,	0x1018C65C
 .equ Adr_NX56_uart2_uartiir,	0x1018C69C

 .equ MSK_NX56_uartiir_MIS ,	0x00000001
 .equ SRT_NX56_uartiir_MIS ,	0
 .equ MSK_NX56_uartiir_RIS ,	0x00000002
 .equ SRT_NX56_uartiir_RIS ,	1
 .equ MSK_NX56_uartiir_TIS ,	0x00000004
 .equ SRT_NX56_uartiir_TIS ,	2
 .equ MSK_NX56_uartiir_RTIS,	0x00000008
 .equ SRT_NX56_uartiir_RTIS,	3

@ ---------------------------------------------------------------------
@ Register uartilpr
@ => IrDA Low Power Counter Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartilpr  ,	0x00000020
 .equ Adr_NX56_uart0_uartilpr,	0x1018C620
 .equ Adr_NX56_uart1_uartilpr,	0x1018C660
 .equ Adr_NX56_uart2_uartilpr,	0x1018C6A0

 .equ MSK_NX56_uartilpr_ILPDVSR,	0x000000ff
 .equ SRT_NX56_uartilpr_ILPDVSR,	0

@ ---------------------------------------------------------------------
@ Register uartrts
@ => RTS Control Register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartrts  ,	0x00000024
 .equ Adr_NX56_uart0_uartrts,	0x1018C624
 .equ Adr_NX56_uart1_uartrts,	0x1018C664
 .equ Adr_NX56_uart2_uartrts,	0x1018C6A4

 .equ MSK_NX56_uartrts_AUTO   ,	0x00000001
 .equ SRT_NX56_uartrts_AUTO   ,	0
 .equ MSK_NX56_uartrts_RTS    ,	0x00000002
 .equ SRT_NX56_uartrts_RTS    ,	1
 .equ MSK_NX56_uartrts_COUNT  ,	0x00000004
 .equ SRT_NX56_uartrts_COUNT  ,	2
 .equ MSK_NX56_uartrts_MOD2   ,	0x00000008
 .equ SRT_NX56_uartrts_MOD2   ,	3
 .equ MSK_NX56_uartrts_RTS_pol,	0x00000010
 .equ SRT_NX56_uartrts_RTS_pol,	4
 .equ MSK_NX56_uartrts_CTS_ctr,	0x00000020
 .equ SRT_NX56_uartrts_CTS_ctr,	5
 .equ MSK_NX56_uartrts_CTS_pol,	0x00000040
 .equ SRT_NX56_uartrts_CTS_pol,	6
 .equ MSK_NX56_uartrts_STICK  ,	0x00000080
 .equ SRT_NX56_uartrts_STICK  ,	7

@ ---------------------------------------------------------------------
@ Register uartforerun
@ => RTS forerun cycles
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartforerun  ,	0x00000028
 .equ Adr_NX56_uart0_uartforerun,	0x1018C628
 .equ Adr_NX56_uart1_uartforerun,	0x1018C668
 .equ Adr_NX56_uart2_uartforerun,	0x1018C6A8

 .equ MSK_NX56_uartforerun_FORERUN,	0x000000ff
 .equ SRT_NX56_uartforerun_FORERUN,	0

@ ---------------------------------------------------------------------
@ Register uarttrail
@ => RTS trail cycles
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uarttrail  ,	0x0000002C
 .equ Adr_NX56_uart0_uarttrail,	0x1018C62C
 .equ Adr_NX56_uart1_uarttrail,	0x1018C66C
 .equ Adr_NX56_uart2_uarttrail,	0x1018C6AC

 .equ MSK_NX56_uarttrail_TRAIL,	0x000000ff
 .equ SRT_NX56_uarttrail_TRAIL,	0

@ ---------------------------------------------------------------------
@ Register uartdrvout
@ => Drive Output
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartdrvout  ,	0x00000030
 .equ Adr_NX56_uart0_uartdrvout,	0x1018C630
 .equ Adr_NX56_uart1_uartdrvout,	0x1018C670
 .equ Adr_NX56_uart2_uartdrvout,	0x1018C6B0

 .equ MSK_NX56_uartdrvout_DRVTX ,	0x00000001
 .equ SRT_NX56_uartdrvout_DRVTX ,	0
 .equ MSK_NX56_uartdrvout_DRVRTS,	0x00000002
 .equ SRT_NX56_uartdrvout_DRVRTS,	1

@ ---------------------------------------------------------------------
@ Register uartcr_2
@ => Control Register 2
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartcr_2  ,	0x00000034
 .equ Adr_NX56_uart0_uartcr_2,	0x1018C634
 .equ Adr_NX56_uart1_uartcr_2,	0x1018C674
 .equ Adr_NX56_uart2_uartcr_2,	0x1018C6B4

 .equ MSK_NX56_uartcr_2_Baud_Rate_Mode,	0x00000001
 .equ SRT_NX56_uartcr_2_Baud_Rate_Mode,	0

@ ---------------------------------------------------------------------
@ Register uartrxiflsel
@ => RX FIFO trigger level and RX-DMA enable
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uartrxiflsel  ,	0x00000038
 .equ Adr_NX56_uart0_uartrxiflsel,	0x1018C638
 .equ Adr_NX56_uart1_uartrxiflsel,	0x1018C678
 .equ Adr_NX56_uart2_uartrxiflsel,	0x1018C6B8

 .equ MSK_NX56_uartrxiflsel_RXIFLSEL,	0x0000001f
 .equ SRT_NX56_uartrxiflsel_RXIFLSEL,	0
 .equ MSK_NX56_uartrxiflsel_RXDMA   ,	0x00000020
 .equ SRT_NX56_uartrxiflsel_RXDMA   ,	5

@ ---------------------------------------------------------------------
@ Register uarttxiflsel
@ => TX FIFO trigger level and TX-DMA enable
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_uarttxiflsel  ,	0x0000003C
 .equ Adr_NX56_uart0_uarttxiflsel,	0x1018C63C
 .equ Adr_NX56_uart1_uarttxiflsel,	0x1018C67C
 .equ Adr_NX56_uart2_uarttxiflsel,	0x1018C6BC

 .equ MSK_NX56_uarttxiflsel_TXIFLSEL,	0x0000001f
 .equ SRT_NX56_uarttxiflsel_TXIFLSEL,	0
 .equ MSK_NX56_uarttxiflsel_TXDMA   ,	0x00000020
 .equ SRT_NX56_uarttxiflsel_TXDMA   ,	5


@ =====================================================================
@
@ Area of i2c0, i2c1
@
@ =====================================================================

 .equ Addr_NX56_i2c0, 0x1018C6C0
 .equ Addr_NX56_i2c1, 0x1018C700

@ ---------------------------------------------------------------------
@ Register i2c_mcr
@ => I2C master control register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_mcr ,	0x00000000
 .equ Adr_NX56_i2c0_i2c_mcr,	0x1018C6C0
 .equ Adr_NX56_i2c1_i2c_mcr,	0x1018C700

 .equ MSK_NX56_i2c_mcr_en_i2c  ,	0x00000001
 .equ SRT_NX56_i2c_mcr_en_i2c  ,	0
 .equ MSK_NX56_i2c_mcr_mode    ,	0x0000000e
 .equ SRT_NX56_i2c_mcr_mode    ,	1
 .equ MSK_NX56_i2c_mcr_sadr    ,	0x000007f0
 .equ SRT_NX56_i2c_mcr_sadr    ,	4
 .equ MSK_NX56_i2c_mcr_pio_mode,	0x00010000
 .equ SRT_NX56_i2c_mcr_pio_mode,	16
 .equ MSK_NX56_i2c_mcr_rst_i2c ,	0x00020000
 .equ SRT_NX56_i2c_mcr_rst_i2c ,	17

@ ---------------------------------------------------------------------
@ Register i2c_scr
@ => I2C slave control register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_scr ,	0x00000004
 .equ Adr_NX56_i2c0_i2c_scr,	0x1018C6C4
 .equ Adr_NX56_i2c1_i2c_scr,	0x1018C704

 .equ MSK_NX56_i2c_scr_sid               ,	0x000003ff
 .equ SRT_NX56_i2c_scr_sid               ,	0
 .equ MSK_NX56_i2c_scr_sid10             ,	0x00000400
 .equ SRT_NX56_i2c_scr_sid10             ,	10
 .equ MSK_NX56_i2c_scr_ac_srx            ,	0x00010000
 .equ SRT_NX56_i2c_scr_ac_srx            ,	16
 .equ MSK_NX56_i2c_scr_ac_start          ,	0x00020000
 .equ SRT_NX56_i2c_scr_ac_start          ,	17
 .equ MSK_NX56_i2c_scr_ac_gcall          ,	0x00040000
 .equ SRT_NX56_i2c_scr_ac_gcall          ,	18
 .equ MSK_NX56_i2c_scr_autoreset_ac_start,	0x00100000
 .equ SRT_NX56_i2c_scr_autoreset_ac_start,	20

@ ---------------------------------------------------------------------
@ Register i2c_cmd
@ => I2C master command register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_cmd ,	0x00000008
 .equ Adr_NX56_i2c0_i2c_cmd,	0x1018C6C8
 .equ Adr_NX56_i2c1_i2c_cmd,	0x1018C708

 .equ MSK_NX56_i2c_cmd_nwr      ,	0x00000001
 .equ SRT_NX56_i2c_cmd_nwr      ,	0
 .equ MSK_NX56_i2c_cmd_cmd      ,	0x0000000e
 .equ SRT_NX56_i2c_cmd_cmd      ,	1
 .equ MSK_NX56_i2c_cmd_tsize    ,	0x0003ff00
 .equ SRT_NX56_i2c_cmd_tsize    ,	8
 .equ MSK_NX56_i2c_cmd_acpollmax,	0x0ff00000
 .equ SRT_NX56_i2c_cmd_acpollmax,	20

@ ---------------------------------------------------------------------
@ Register i2c_mdr
@ => I2C master data register (master FIFO)
@    There is only one FIFO for both, receive and transmit master data with a depth of 16 bytes. For master write access, data send by the master
@    is delivered from the FIFO, for master read access data received by the master is stored in the FIFO.
@    In case of imminent data transfer failure (read transfer and FIFO is full or write transfer and FIFO is empty), the cmd_err IRQ will be set after the last
@    byte that could be transmitted. No FIFO-underrun or overflow will occur. i2c_cmd.tsize+1 will show amount of not transmitted data.
@    In case of master write transfer direction, either the FIFO can be filled and the transfer may be completed (CTC, CT) or the transfer can be broken (rSTART, STOP).
@    In case of master read transfer direction, the command will terminate when the FIFO is full. The last read byte will be acknowledged and
@    stored in the FIFO. After reading out data from the FIFO the transfer must be completed (CTC, CT) to flag read data end (no acknowledge at last byte). STOP or rSTART
@    will fail if next read data MSB is 0 (as the next bit already driven by the slave is 0).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_mdr ,	0x0000000C
 .equ Adr_NX56_i2c0_i2c_mdr,	0x1018C6CC
 .equ Adr_NX56_i2c1_i2c_mdr,	0x1018C70C

 .equ MSK_NX56_i2c_mdr_mdata,	0x000000ff
 .equ SRT_NX56_i2c_mdr_mdata,	0

@ ---------------------------------------------------------------------
@ Register i2c_sdr
@ => I2C slave data register (slave FIFO)
@    There is only one FIFO for both, receive and transmit slave data with a depth of 16 bytes. For master read access, data send by the slave
@    is delivered from the FIFO, for master write access data received by the slave is stored in the FIFO.
@    A transfer is initiated after detection of I2C-start-sequence to the device address (i2c_scr.sid, sreq IRQ) which is acknowledged by this device (i2c_scr.ac_start). For read
@    transfers send data is read from the FIFO immediately after acknowledge was detected on the I2C-bus. SDA will be driven with next data MSB immediately after acknowledge SCL high phase.
@    In case of master read transfer and slave FIFO underrun, corrupted data will be send to the master and the fifo_err IRQ will be set.
@    In case of master write transfer and slave FIFO is full, no acknowledge will be generated for the last received byte. No FIFO overflow will occur but
@    the last transferred byte (not acknowledged) will be lost and has to be send again by the master.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_sdr ,	0x00000010
 .equ Adr_NX56_i2c0_i2c_sdr,	0x1018C6D0
 .equ Adr_NX56_i2c1_i2c_sdr,	0x1018C710

 .equ MSK_NX56_i2c_sdr_sdata,	0x000000ff
 .equ SRT_NX56_i2c_sdr_sdata,	0

@ ---------------------------------------------------------------------
@ Register i2c_mfifo_cr
@ => I2C master FIFO control register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_mfifo_cr ,	0x00000014
 .equ Adr_NX56_i2c0_i2c_mfifo_cr,	0x1018C6D4
 .equ Adr_NX56_i2c1_i2c_mfifo_cr,	0x1018C714

 .equ MSK_NX56_i2c_mfifo_cr_mfifo_wm ,	0x0000000f
 .equ SRT_NX56_i2c_mfifo_cr_mfifo_wm ,	0
 .equ MSK_NX56_i2c_mfifo_cr_mfifo_clr,	0x00000100
 .equ SRT_NX56_i2c_mfifo_cr_mfifo_clr,	8

@ ---------------------------------------------------------------------
@ Register i2c_sfifo_cr
@ => I2C slave FIFO control register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_sfifo_cr ,	0x00000018
 .equ Adr_NX56_i2c0_i2c_sfifo_cr,	0x1018C6D8
 .equ Adr_NX56_i2c1_i2c_sfifo_cr,	0x1018C718

 .equ MSK_NX56_i2c_sfifo_cr_sfifo_wm ,	0x0000000f
 .equ SRT_NX56_i2c_sfifo_cr_sfifo_wm ,	0
 .equ MSK_NX56_i2c_sfifo_cr_sfifo_clr,	0x00000100
 .equ SRT_NX56_i2c_sfifo_cr_sfifo_clr,	8

@ ---------------------------------------------------------------------
@ Register i2c_sr
@ => read only I2C status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_sr ,	0x0000001C
 .equ Adr_NX56_i2c0_i2c_sr,	0x1018C6DC
 .equ Adr_NX56_i2c1_i2c_sr,	0x1018C71C

 .equ MSK_NX56_i2c_sr_mfifo_level   ,	0x0000001f
 .equ SRT_NX56_i2c_sr_mfifo_level   ,	0
 .equ MSK_NX56_i2c_sr_mfifo_empty   ,	0x00000040
 .equ SRT_NX56_i2c_sr_mfifo_empty   ,	6
 .equ MSK_NX56_i2c_sr_mfifo_full    ,	0x00000080
 .equ SRT_NX56_i2c_sr_mfifo_full    ,	7
 .equ MSK_NX56_i2c_sr_mfifo_err_ovfl,	0x00000100
 .equ SRT_NX56_i2c_sr_mfifo_err_ovfl,	8
 .equ MSK_NX56_i2c_sr_mfifo_err_undr,	0x00000200
 .equ SRT_NX56_i2c_sr_mfifo_err_undr,	9
 .equ MSK_NX56_i2c_sr_sfifo_level   ,	0x00007c00
 .equ SRT_NX56_i2c_sr_sfifo_level   ,	10
 .equ MSK_NX56_i2c_sr_sfifo_empty   ,	0x00010000
 .equ SRT_NX56_i2c_sr_sfifo_empty   ,	16
 .equ MSK_NX56_i2c_sr_sfifo_full    ,	0x00020000
 .equ SRT_NX56_i2c_sr_sfifo_full    ,	17
 .equ MSK_NX56_i2c_sr_sfifo_err_ovfl,	0x00040000
 .equ SRT_NX56_i2c_sr_sfifo_err_ovfl,	18
 .equ MSK_NX56_i2c_sr_sfifo_err_undr,	0x00080000
 .equ SRT_NX56_i2c_sr_sfifo_err_undr,	19
 .equ MSK_NX56_i2c_sr_bus_master    ,	0x00100000
 .equ SRT_NX56_i2c_sr_bus_master    ,	20
 .equ MSK_NX56_i2c_sr_nwr           ,	0x00200000
 .equ SRT_NX56_i2c_sr_nwr           ,	21
 .equ MSK_NX56_i2c_sr_started       ,	0x00400000
 .equ SRT_NX56_i2c_sr_started       ,	22
 .equ MSK_NX56_i2c_sr_slave_access  ,	0x00800000
 .equ SRT_NX56_i2c_sr_slave_access  ,	23
 .equ MSK_NX56_i2c_sr_last_ac       ,	0x01000000
 .equ SRT_NX56_i2c_sr_last_ac       ,	24
 .equ MSK_NX56_i2c_sr_nwr_aced      ,	0x02000000
 .equ SRT_NX56_i2c_sr_nwr_aced      ,	25
 .equ MSK_NX56_i2c_sr_gcall_aced    ,	0x04000000
 .equ SRT_NX56_i2c_sr_gcall_aced    ,	26
 .equ MSK_NX56_i2c_sr_sid10_aced    ,	0x08000000
 .equ SRT_NX56_i2c_sr_sid10_aced    ,	27
 .equ MSK_NX56_i2c_sr_scl_state     ,	0x40000000
 .equ SRT_NX56_i2c_sr_scl_state     ,	30
 .equ MSK_NX56_i2c_sr_sda_state     ,	0x80000000
 .equ SRT_NX56_i2c_sr_sda_state     ,	31

@ ---------------------------------------------------------------------
@ Register i2c_irqmsk
@ => I2C interrupt mask set or clear register
@    These bits have AND-mask character (only if mask bit is set, the appropriate IRQ generates the module IRQ). Enabling (writing '1' and
@    prior mask was "0") will clear according raw IRQ-state if it was set before.
@    For detailed IRQ-description view i2c_irqraw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_irqmsk ,	0x00000020
 .equ Adr_NX56_i2c0_i2c_irqmsk,	0x1018C6E0
 .equ Adr_NX56_i2c1_i2c_irqmsk,	0x1018C720

 .equ MSK_NX56_i2c_irqmsk_cmd_ok   ,	0x00000001
 .equ SRT_NX56_i2c_irqmsk_cmd_ok   ,	0
 .equ MSK_NX56_i2c_irqmsk_cmd_err  ,	0x00000002
 .equ SRT_NX56_i2c_irqmsk_cmd_err  ,	1
 .equ MSK_NX56_i2c_irqmsk_fifo_err ,	0x00000004
 .equ SRT_NX56_i2c_irqmsk_fifo_err ,	2
 .equ MSK_NX56_i2c_irqmsk_bus_busy ,	0x00000008
 .equ SRT_NX56_i2c_irqmsk_bus_busy ,	3
 .equ MSK_NX56_i2c_irqmsk_mfifo_req,	0x00000010
 .equ SRT_NX56_i2c_irqmsk_mfifo_req,	4
 .equ MSK_NX56_i2c_irqmsk_sfifo_req,	0x00000020
 .equ SRT_NX56_i2c_irqmsk_sfifo_req,	5
 .equ MSK_NX56_i2c_irqmsk_sreq     ,	0x00000040
 .equ SRT_NX56_i2c_irqmsk_sreq     ,	6

@ ---------------------------------------------------------------------
@ Register i2c_irqsr
@ => I2C interrupt state register (raw interrupt before masking)
@    Writing '1' will clear according IRQ.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_irqsr ,	0x00000024
 .equ Adr_NX56_i2c0_i2c_irqsr,	0x1018C6E4
 .equ Adr_NX56_i2c1_i2c_irqsr,	0x1018C724

 .equ MSK_NX56_i2c_irqsr_cmd_ok   ,	0x00000001
 .equ SRT_NX56_i2c_irqsr_cmd_ok   ,	0
 .equ MSK_NX56_i2c_irqsr_cmd_err  ,	0x00000002
 .equ SRT_NX56_i2c_irqsr_cmd_err  ,	1
 .equ MSK_NX56_i2c_irqsr_fifo_err ,	0x00000004
 .equ SRT_NX56_i2c_irqsr_fifo_err ,	2
 .equ MSK_NX56_i2c_irqsr_bus_busy ,	0x00000008
 .equ SRT_NX56_i2c_irqsr_bus_busy ,	3
 .equ MSK_NX56_i2c_irqsr_mfifo_req,	0x00000010
 .equ SRT_NX56_i2c_irqsr_mfifo_req,	4
 .equ MSK_NX56_i2c_irqsr_sfifo_req,	0x00000020
 .equ SRT_NX56_i2c_irqsr_sfifo_req,	5
 .equ MSK_NX56_i2c_irqsr_sreq     ,	0x00000040
 .equ SRT_NX56_i2c_irqsr_sreq     ,	6

@ ---------------------------------------------------------------------
@ Register i2c_irqmsked
@ => read only I2C masked interrupt state register
@    If one of these bits is set, the I2C IRQ will be asserted to the Interrupt-Controller.
@    For detailed IRQ-description view i2c_irqraw.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_irqmsked ,	0x00000028
 .equ Adr_NX56_i2c0_i2c_irqmsked,	0x1018C6E8
 .equ Adr_NX56_i2c1_i2c_irqmsked,	0x1018C728

 .equ MSK_NX56_i2c_irqmsked_cmd_ok   ,	0x00000001
 .equ SRT_NX56_i2c_irqmsked_cmd_ok   ,	0
 .equ MSK_NX56_i2c_irqmsked_cmd_err  ,	0x00000002
 .equ SRT_NX56_i2c_irqmsked_cmd_err  ,	1
 .equ MSK_NX56_i2c_irqmsked_fifo_err ,	0x00000004
 .equ SRT_NX56_i2c_irqmsked_fifo_err ,	2
 .equ MSK_NX56_i2c_irqmsked_bus_busy ,	0x00000008
 .equ SRT_NX56_i2c_irqmsked_bus_busy ,	3
 .equ MSK_NX56_i2c_irqmsked_mfifo_req,	0x00000010
 .equ SRT_NX56_i2c_irqmsked_mfifo_req,	4
 .equ MSK_NX56_i2c_irqmsked_sfifo_req,	0x00000020
 .equ SRT_NX56_i2c_irqmsked_sfifo_req,	5
 .equ MSK_NX56_i2c_irqmsked_sreq     ,	0x00000040
 .equ SRT_NX56_i2c_irqmsked_sreq     ,	6

@ ---------------------------------------------------------------------
@ Register i2c_dmacr
@ => I2C DMA control register
@    DMA transfer size to/from I2C-module: byte.
@    DMA burst length to/from I2C-module: 4.
@    DMA burst requests are generated if the according FIFO contains more than 4 bytes (receive case), or if
@    there are more than 4 bytes writable to the according FIFO (transmit case).
@    DMA single transfer requests are generated if the according FIFO contains more than 1 byte (receive case), or if
@    there is more than 1 byte writable to the according FIFO (transmit case).
@    No further DMA requests will be generated if all transmit data was written to the master FIFO and flowcontrolling
@    is done by this module (for master data only). Once all data is written
@    to the master FIFO last burst/single request is generated for the DMA controller.
@    If the DMA-Controller flags transfer end by setting DMACTC (terminal count) the appropriate bit will be cleared.
@    If one of the bits of this register is set to 0 by software and a dma-transfer was requested before, one last
@    transfer will be done by the DMA-Controller to reset DMA-request signals.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_dmacr ,	0x0000002C
 .equ Adr_NX56_i2c0_i2c_dmacr,	0x1018C6EC
 .equ Adr_NX56_i2c1_i2c_dmacr,	0x1018C72C

 .equ MSK_NX56_i2c_dmacr_mdmas_en,	0x00000001
 .equ SRT_NX56_i2c_dmacr_mdmas_en,	0
 .equ MSK_NX56_i2c_dmacr_mdmab_en,	0x00000002
 .equ SRT_NX56_i2c_dmacr_mdmab_en,	1
 .equ MSK_NX56_i2c_dmacr_sdmas_en,	0x00000004
 .equ SRT_NX56_i2c_dmacr_sdmas_en,	2
 .equ MSK_NX56_i2c_dmacr_sdmab_en,	0x00000008
 .equ SRT_NX56_i2c_dmacr_sdmab_en,	3

@ ---------------------------------------------------------------------
@ Register i2c_pio
@ => direct i2c IO access controlling.
@    The i2c signals SCL and SDA can be directly controlled by this register if in i2c_mcr-register pio_mode is enabled.
@    In pio-mode the I2C-controller statemachine is disabled, so no FIFO-action is done no IRQs occure and no DMA-controlling is possible.
@    Warning: i2c-signals SCL and SDA are never driven active high by i2c specification. High-level should be done by pad pullup and setting
@    the appropriate output enable to 0 (scl_oe, sda_oe) instead of active high level driving to avoid external driving conflicts.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_i2c_pio ,	0x00000030
 .equ Adr_NX56_i2c0_i2c_pio,	0x1018C6F0
 .equ Adr_NX56_i2c1_i2c_pio,	0x1018C730

 .equ MSK_NX56_i2c_pio_scl_out  ,	0x00000001
 .equ SRT_NX56_i2c_pio_scl_out  ,	0
 .equ MSK_NX56_i2c_pio_scl_oe   ,	0x00000002
 .equ SRT_NX56_i2c_pio_scl_oe   ,	1
 .equ MSK_NX56_i2c_pio_scl_in_ro,	0x00000004
 .equ SRT_NX56_i2c_pio_scl_in_ro,	2
 .equ MSK_NX56_i2c_pio_sda_out  ,	0x00000010
 .equ SRT_NX56_i2c_pio_sda_out  ,	4
 .equ MSK_NX56_i2c_pio_sda_oe   ,	0x00000020
 .equ SRT_NX56_i2c_pio_sda_oe   ,	5
 .equ MSK_NX56_i2c_pio_sda_in_ro,	0x00000040
 .equ SRT_NX56_i2c_pio_sda_in_ro,	6


@ =====================================================================
@
@ Area of parity
@
@ =====================================================================

 .equ Addr_NX56_parity, 0x1018C740

@ ---------------------------------------------------------------------
@ Register parity_enable
@ => Enable Bits for different Intram areas
@    When bit is set the parity error detection is enabled. I.e. in case of parity failure the parity-interrupt
@    will be asserted to ARM and the access address and master will be logged inside the 'parity_error_access' register.
@    The IRQ generation does not depend on accessing (parity error generating) master. E.g. ARM will
@    receive IRQ when parity failure is result of an xPIC access.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_enable   ,	0x00000000
 .equ Adr_NX56_parity_parity_enable,	0x1018C740
 .equ Adr_NX56_parity_enable       ,	0x1018C740

 .equ MSK_NX56_parity_enable_intram0,	0x00000001
 .equ SRT_NX56_parity_enable_intram0,	0
 .equ MSK_NX56_parity_enable_intram1,	0x00000002
 .equ SRT_NX56_parity_enable_intram1,	1
 .equ MSK_NX56_parity_enable_intram2,	0x00000004
 .equ SRT_NX56_parity_enable_intram2,	2
 .equ MSK_NX56_parity_enable_intram3,	0x00000008
 .equ SRT_NX56_parity_enable_intram3,	3
 .equ MSK_NX56_parity_enable_intram4,	0x00000010
 .equ SRT_NX56_parity_enable_intram4,	4
 .equ MSK_NX56_parity_enable_intram5,	0x00000020
 .equ SRT_NX56_parity_enable_intram5,	5
 .equ MSK_NX56_parity_enable_intram6,	0x00000040
 .equ SRT_NX56_parity_enable_intram6,	6
 .equ MSK_NX56_parity_enable_intram7,	0x00000080
 .equ SRT_NX56_parity_enable_intram7,	7
 .equ MSK_NX56_parity_enable_intram8,	0x00000100
 .equ SRT_NX56_parity_enable_intram8,	8
 .equ MSK_NX56_parity_enable_intram9,	0x00000200
 .equ SRT_NX56_parity_enable_intram9,	9

@ ---------------------------------------------------------------------
@ Register parity_abort_enable
@ => Enable Bits for different INTRAM areas.
@    When bit is set, HRESP/Abort will be asserted for accessing master. Related parity_enable-bit must
@    be also active for this (abort will be generated when bit is set here AND inside 'parity_enable' register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_abort_enable   ,	0x00000004
 .equ Adr_NX56_parity_parity_abort_enable,	0x1018C744
 .equ Adr_NX56_parity_abort_enable       ,	0x1018C744

 .equ MSK_NX56_parity_abort_enable_intram0,	0x00000001
 .equ SRT_NX56_parity_abort_enable_intram0,	0
 .equ MSK_NX56_parity_abort_enable_intram1,	0x00000002
 .equ SRT_NX56_parity_abort_enable_intram1,	1
 .equ MSK_NX56_parity_abort_enable_intram2,	0x00000004
 .equ SRT_NX56_parity_abort_enable_intram2,	2
 .equ MSK_NX56_parity_abort_enable_intram3,	0x00000008
 .equ SRT_NX56_parity_abort_enable_intram3,	3
 .equ MSK_NX56_parity_abort_enable_intram4,	0x00000010
 .equ SRT_NX56_parity_abort_enable_intram4,	4
 .equ MSK_NX56_parity_abort_enable_intram5,	0x00000020
 .equ SRT_NX56_parity_abort_enable_intram5,	5
 .equ MSK_NX56_parity_abort_enable_intram6,	0x00000040
 .equ SRT_NX56_parity_abort_enable_intram6,	6
 .equ MSK_NX56_parity_abort_enable_intram7,	0x00000080
 .equ SRT_NX56_parity_abort_enable_intram7,	7
 .equ MSK_NX56_parity_abort_enable_intram8,	0x00000100
 .equ SRT_NX56_parity_abort_enable_intram8,	8
 .equ MSK_NX56_parity_abort_enable_intram9,	0x00000200
 .equ SRT_NX56_parity_abort_enable_intram9,	9

@ ---------------------------------------------------------------------
@ Register parity_error_mem_status
@ => Parity status register:
@    Parity error status for each INTRAM is logged inside this register. Logging is always done,
@    even when related bit is not set inside 'parity_enable' register.
@    Status can be cleared by writing '1s'.
@    Note:
@      Reading uninitialized data from INTRAM will produce parity errors as parity matches data only
@      when the related data was written before (there is no automatic RAM initialisazion after
@      netX reset)
@    
@    Note:
@      Parity of netX INTRAM covers 32bit data only. Writing 8 or 16bit words will result a parity
@      update over the whole 32bit (4 byte address boundary) word, this data was written to
@      considering the resulting data.
@      Example: Address 0x100 contains 0xabe01234, i.e. current parity is '1' (13 bits are set)
@               Byte-write access to 0x101, write data is 0x57
@               Resulting 32bit word at 0x100 is 0xabe05734 (16 bits are set)
@               i.e. parity bit will be updated to '0'.
@      Bit errors outside the new written data will not be covered by parity check then. However
@      they will be very rare. To avoid them completely write only 32bit words.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_error_mem_status   ,	0x00000008
 .equ Adr_NX56_parity_parity_error_mem_status,	0x1018C748
 .equ Adr_NX56_parity_error_mem_status       ,	0x1018C748

 .equ MSK_NX56_parity_error_mem_status_intram0,	0x00000001
 .equ SRT_NX56_parity_error_mem_status_intram0,	0
 .equ MSK_NX56_parity_error_mem_status_intram1,	0x00000002
 .equ SRT_NX56_parity_error_mem_status_intram1,	1
 .equ MSK_NX56_parity_error_mem_status_intram2,	0x00000004
 .equ SRT_NX56_parity_error_mem_status_intram2,	2
 .equ MSK_NX56_parity_error_mem_status_intram3,	0x00000008
 .equ SRT_NX56_parity_error_mem_status_intram3,	3
 .equ MSK_NX56_parity_error_mem_status_intram4,	0x00000010
 .equ SRT_NX56_parity_error_mem_status_intram4,	4
 .equ MSK_NX56_parity_error_mem_status_intram5,	0x00000020
 .equ SRT_NX56_parity_error_mem_status_intram5,	5
 .equ MSK_NX56_parity_error_mem_status_intram6,	0x00000040
 .equ SRT_NX56_parity_error_mem_status_intram6,	6
 .equ MSK_NX56_parity_error_mem_status_intram7,	0x00000080
 .equ SRT_NX56_parity_error_mem_status_intram7,	7
 .equ MSK_NX56_parity_error_mem_status_intram8,	0x00000100
 .equ SRT_NX56_parity_error_mem_status_intram8,	8
 .equ MSK_NX56_parity_error_mem_status_intram9,	0x00000200
 .equ SRT_NX56_parity_error_mem_status_intram9,	9

@ ---------------------------------------------------------------------
@ Register parity_error_acc_status
@ => Parity error address register:
@    If a parity error occured, this register shows the address inside the ram, where the error occured.
@    This register is only updated when current parity error status is clear, i.e. when
@    'parity.parity_irq_raw' bit is not active. Only access to INTRAMs where parity-check is
@    enabled ('parity_enable' register) will effect this register.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_error_acc_status   ,	0x0000000C
 .equ Adr_NX56_parity_parity_error_acc_status,	0x1018C74C
 .equ Adr_NX56_parity_error_acc_status       ,	0x1018C74C

 .equ MSK_NX56_parity_error_acc_status_addr  ,	0x00ffffff
 .equ SRT_NX56_parity_error_acc_status_addr  ,	0
 .equ MSK_NX56_parity_error_acc_status_master,	0xf0000000
 .equ SRT_NX56_parity_error_acc_status_master,	28

@ ---------------------------------------------------------------------
@ Register parity_irq_raw
@ => Raw IRQ:
@    Read access shows status of unmasked IRQs.
@    IRQs are set automatically and reset by writing to this register:
@    Write access with '1' resets the appropriate IRQ.
@    Write access with '0' does not influence this bit.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_irq_raw   ,	0x00000010
 .equ Adr_NX56_parity_parity_irq_raw,	0x1018C750
 .equ Adr_NX56_parity_irq_raw       ,	0x1018C750

 .equ MSK_NX56_parity_irq_raw_parity,	0x00000001
 .equ SRT_NX56_parity_irq_raw_parity,	0

@ ---------------------------------------------------------------------
@ Register parity_irq_masked
@ => Masked IRQ:
@    Shows status of masked IRQs (as connected to ARM/xPIC).
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_irq_masked   ,	0x00000014
 .equ Adr_NX56_parity_parity_irq_masked,	0x1018C754
 .equ Adr_NX56_parity_irq_masked       ,	0x1018C754

 .equ MSK_NX56_parity_irq_masked_parity,	0x00000001
 .equ SRT_NX56_parity_irq_masked_parity,	0

@ ---------------------------------------------------------------------
@ Register parity_irq_msk_set
@ => IRQ enable mask:
@    The IRQ mask enables interrupt requests for corresponding interrupt sources.
@    As its bits might be changed by different software tasks,
@    the IRQ mask register is not writable directly, but by set and reset masks:
@    Write access with '1' sets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_parity_irq_raw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_irq_msk_set   ,	0x00000018
 .equ Adr_NX56_parity_parity_irq_msk_set,	0x1018C758
 .equ Adr_NX56_parity_irq_msk_set       ,	0x1018C758

 .equ MSK_NX56_parity_irq_msk_set_parity,	0x00000001
 .equ SRT_NX56_parity_irq_msk_set_parity,	0

@ ---------------------------------------------------------------------
@ Register parity_irq_msk_reset
@ => IRQ disable mask:
@    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources:
@    Write access with '1' resets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_parity_irq_msk_reset   ,	0x0000001C
 .equ Adr_NX56_parity_parity_irq_msk_reset,	0x1018C75C
 .equ Adr_NX56_parity_irq_msk_reset       ,	0x1018C75C

 .equ MSK_NX56_parity_irq_msk_reset_parity,	0x00000001
 .equ SRT_NX56_parity_irq_msk_reset_parity,	0


@ =====================================================================
@
@ Area of usb_dev
@
@ =====================================================================

 .equ Addr_NX56_usb_dev, 0x1018C800

@ =====================================================================
@
@ Area of usb_dev_ctrl
@
@ =====================================================================

 .equ Addr_NX56_usb_dev_ctrl, 0x1018C800

@ ---------------------------------------------------------------------
@ Register usb_dev_cfg
@ => USB device configuration register.
@    This register configures the USB device functions. It allows to entirely disable the USB core and the USB to JTAG bridge.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_cfg         ,	0x00000000
 .equ Adr_NX56_usb_dev_ctrl_usb_dev_cfg,	0x1018C800
 .equ Adr_NX56_usb_dev_cfg             ,	0x1018C800

 .equ MSK_NX56_usb_dev_cfg_usb_core_enable   ,	0x00000001
 .equ SRT_NX56_usb_dev_cfg_usb_core_enable   ,	0
 .equ MSK_NX56_usb_dev_cfg_usb_to_jtag_enable,	0x00000002
 .equ SRT_NX56_usb_dev_cfg_usb_to_jtag_enable,	1
 .equ MSK_NX56_usb_dev_cfg_usb_dev_reset     ,	0x00000004
 .equ SRT_NX56_usb_dev_cfg_usb_dev_reset     ,	2
 .equ MSK_NX56_usb_dev_cfg_disconn_timeout   ,	0x00000030
 .equ SRT_NX56_usb_dev_cfg_disconn_timeout   ,	4

@ ---------------------------------------------------------------------
@ Register usb_dev_status
@ => USB device status register.
@    This register represents various status information of the USB core and its FIFOs.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_status         ,	0x00000004
 .equ Adr_NX56_usb_dev_ctrl_usb_dev_status,	0x1018C804
 .equ Adr_NX56_usb_dev_status             ,	0x1018C804

 .equ MSK_NX56_usb_dev_status_usb_busy        ,	0x00000001
 .equ SRT_NX56_usb_dev_status_usb_busy        ,	0
 .equ MSK_NX56_usb_dev_status_usb_addressed   ,	0x00000002
 .equ SRT_NX56_usb_dev_status_usb_addressed   ,	1
 .equ MSK_NX56_usb_dev_status_usb_configured  ,	0x00000004
 .equ SRT_NX56_usb_dev_status_usb_configured  ,	2
 .equ MSK_NX56_usb_dev_status_usb_bus_reset   ,	0x00000008
 .equ SRT_NX56_usb_dev_status_usb_bus_reset   ,	3
 .equ MSK_NX56_usb_dev_status_usb_connected   ,	0x00000010
 .equ SRT_NX56_usb_dev_status_usb_connected   ,	4
 .equ MSK_NX56_usb_dev_status_usb_disconnected,	0x00000020
 .equ SRT_NX56_usb_dev_status_usb_disconnected,	5

@ ---------------------------------------------------------------------
@ Register usb_dev_vendor_features
@ => USB vendor feature status register.
@    This register represents the last valid vendor features that the USB Host has set.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_vendor_features         ,	0x00000008
 .equ Adr_NX56_usb_dev_ctrl_usb_dev_vendor_features,	0x1018C808
 .equ Adr_NX56_usb_dev_vendor_features             ,	0x1018C808

 .equ MSK_NX56_usb_dev_vendor_features_vendor_features,	0x0000ffff
 .equ SRT_NX56_usb_dev_vendor_features_vendor_features,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_irq_mask
@ => USB device interrupt mask register.
@    The value of this register is used for AND-masking the raw interrupt register. When a bit is set, \
@    the corresponding interrupt is routed to the interrupt controller. \
@    For a detailed IRQ description see usb_dev_irq_raw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_irq_mask         ,	0x0000000C
 .equ Adr_NX56_usb_dev_ctrl_usb_dev_irq_mask,	0x1018C80C
 .equ Adr_NX56_usb_dev_irq_mask             ,	0x1018C80C

 .equ MSK_NX56_usb_dev_irq_mask_uart_rx_fifo_full           ,	0x00000001
 .equ SRT_NX56_usb_dev_irq_mask_uart_rx_fifo_full           ,	0
 .equ MSK_NX56_usb_dev_irq_mask_uart_rx_fifo_empty          ,	0x00000002
 .equ SRT_NX56_usb_dev_irq_mask_uart_rx_fifo_empty          ,	1
 .equ MSK_NX56_usb_dev_irq_mask_uart_tx_fifo_full           ,	0x00000004
 .equ SRT_NX56_usb_dev_irq_mask_uart_tx_fifo_full           ,	2
 .equ MSK_NX56_usb_dev_irq_mask_uart_tx_fifo_empty          ,	0x00000008
 .equ SRT_NX56_usb_dev_irq_mask_uart_tx_fifo_empty          ,	3
 .equ MSK_NX56_usb_dev_irq_mask_fifo_overflow_underrun_err  ,	0x00000010
 .equ SRT_NX56_usb_dev_irq_mask_fifo_overflow_underrun_err  ,	4
 .equ MSK_NX56_usb_dev_irq_mask_crc16_error                 ,	0x00000020
 .equ SRT_NX56_usb_dev_irq_mask_crc16_error                 ,	5
 .equ MSK_NX56_usb_dev_irq_mask_dropped_frame               ,	0x00000040
 .equ SRT_NX56_usb_dev_irq_mask_dropped_frame               ,	6
 .equ MSK_NX56_usb_dev_irq_mask_reset_detected              ,	0x00000100
 .equ SRT_NX56_usb_dev_irq_mask_reset_detected              ,	8
 .equ MSK_NX56_usb_dev_irq_mask_jtag_srst_requested         ,	0x00000200
 .equ SRT_NX56_usb_dev_irq_mask_jtag_srst_requested         ,	9
 .equ MSK_NX56_usb_dev_irq_mask_jtag_tx_packet_sent         ,	0x00000400
 .equ SRT_NX56_usb_dev_irq_mask_jtag_tx_packet_sent         ,	10
 .equ MSK_NX56_usb_dev_irq_mask_jtag_rx_packet_received     ,	0x00000800
 .equ SRT_NX56_usb_dev_irq_mask_jtag_rx_packet_received     ,	11
 .equ MSK_NX56_usb_dev_irq_mask_uart_tx_packet_sent         ,	0x00001000
 .equ SRT_NX56_usb_dev_irq_mask_uart_tx_packet_sent         ,	12
 .equ MSK_NX56_usb_dev_irq_mask_uart_rx_packet_received     ,	0x00002000
 .equ SRT_NX56_usb_dev_irq_mask_uart_rx_packet_received     ,	13
 .equ MSK_NX56_usb_dev_irq_mask_jtag_tx_transaction_sent    ,	0x00010000
 .equ SRT_NX56_usb_dev_irq_mask_jtag_tx_transaction_sent    ,	16
 .equ MSK_NX56_usb_dev_irq_mask_jtag_rx_transaction_received,	0x00020000
 .equ SRT_NX56_usb_dev_irq_mask_jtag_rx_transaction_received,	17
 .equ MSK_NX56_usb_dev_irq_mask_uart_tx_transaction_sent    ,	0x00040000
 .equ SRT_NX56_usb_dev_irq_mask_uart_tx_transaction_sent    ,	18
 .equ MSK_NX56_usb_dev_irq_mask_uart_rx_transaction_received,	0x00080000
 .equ SRT_NX56_usb_dev_irq_mask_uart_rx_transaction_received,	19
 .equ MSK_NX56_usb_dev_irq_mask_uart_rx_zlp_received        ,	0x00400000
 .equ SRT_NX56_usb_dev_irq_mask_uart_rx_zlp_received        ,	22
 .equ MSK_NX56_usb_dev_irq_mask_device_connected            ,	0x00800000
 .equ SRT_NX56_usb_dev_irq_mask_device_connected            ,	23
 .equ MSK_NX56_usb_dev_irq_mask_device_disconnected         ,	0x01000000
 .equ SRT_NX56_usb_dev_irq_mask_device_disconnected         ,	24

@ ---------------------------------------------------------------------
@ Register usb_dev_irq_raw
@ => USB device raw interrupt status register
@    This register holds the raw interrupt status before masking has been applied. \
@    Writing '1' will clear the corresponding interrupt.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_irq_raw         ,	0x00000010
 .equ Adr_NX56_usb_dev_ctrl_usb_dev_irq_raw,	0x1018C810
 .equ Adr_NX56_usb_dev_irq_raw             ,	0x1018C810

 .equ MSK_NX56_usb_dev_irq_raw_uart_rx_fifo_full           ,	0x00000001
 .equ SRT_NX56_usb_dev_irq_raw_uart_rx_fifo_full           ,	0
 .equ MSK_NX56_usb_dev_irq_raw_uart_rx_fifo_empty          ,	0x00000002
 .equ SRT_NX56_usb_dev_irq_raw_uart_rx_fifo_empty          ,	1
 .equ MSK_NX56_usb_dev_irq_raw_uart_tx_fifo_full           ,	0x00000004
 .equ SRT_NX56_usb_dev_irq_raw_uart_tx_fifo_full           ,	2
 .equ MSK_NX56_usb_dev_irq_raw_uart_tx_fifo_empty          ,	0x00000008
 .equ SRT_NX56_usb_dev_irq_raw_uart_tx_fifo_empty          ,	3
 .equ MSK_NX56_usb_dev_irq_raw_fifo_overflow_underrun_err  ,	0x00000010
 .equ SRT_NX56_usb_dev_irq_raw_fifo_overflow_underrun_err  ,	4
 .equ MSK_NX56_usb_dev_irq_raw_crc16_error                 ,	0x00000020
 .equ SRT_NX56_usb_dev_irq_raw_crc16_error                 ,	5
 .equ MSK_NX56_usb_dev_irq_raw_dropped_frame               ,	0x00000040
 .equ SRT_NX56_usb_dev_irq_raw_dropped_frame               ,	6
 .equ MSK_NX56_usb_dev_irq_raw_reset_detected              ,	0x00000100
 .equ SRT_NX56_usb_dev_irq_raw_reset_detected              ,	8
 .equ MSK_NX56_usb_dev_irq_raw_jtag_srst_requested         ,	0x00000200
 .equ SRT_NX56_usb_dev_irq_raw_jtag_srst_requested         ,	9
 .equ MSK_NX56_usb_dev_irq_raw_jtag_tx_packet_sent         ,	0x00000400
 .equ SRT_NX56_usb_dev_irq_raw_jtag_tx_packet_sent         ,	10
 .equ MSK_NX56_usb_dev_irq_raw_jtag_rx_packet_received     ,	0x00000800
 .equ SRT_NX56_usb_dev_irq_raw_jtag_rx_packet_received     ,	11
 .equ MSK_NX56_usb_dev_irq_raw_uart_tx_packet_sent         ,	0x00001000
 .equ SRT_NX56_usb_dev_irq_raw_uart_tx_packet_sent         ,	12
 .equ MSK_NX56_usb_dev_irq_raw_uart_rx_packet_received     ,	0x00002000
 .equ SRT_NX56_usb_dev_irq_raw_uart_rx_packet_received     ,	13
 .equ MSK_NX56_usb_dev_irq_raw_jtag_tx_transaction_sent    ,	0x00010000
 .equ SRT_NX56_usb_dev_irq_raw_jtag_tx_transaction_sent    ,	16
 .equ MSK_NX56_usb_dev_irq_raw_jtag_rx_transaction_received,	0x00020000
 .equ SRT_NX56_usb_dev_irq_raw_jtag_rx_transaction_received,	17
 .equ MSK_NX56_usb_dev_irq_raw_uart_tx_transaction_sent    ,	0x00040000
 .equ SRT_NX56_usb_dev_irq_raw_uart_tx_transaction_sent    ,	18
 .equ MSK_NX56_usb_dev_irq_raw_uart_rx_transaction_received,	0x00080000
 .equ SRT_NX56_usb_dev_irq_raw_uart_rx_transaction_received,	19
 .equ MSK_NX56_usb_dev_irq_raw_uart_rx_zlp_received        ,	0x00400000
 .equ SRT_NX56_usb_dev_irq_raw_uart_rx_zlp_received        ,	22
 .equ MSK_NX56_usb_dev_irq_raw_device_connected            ,	0x00800000
 .equ SRT_NX56_usb_dev_irq_raw_device_connected            ,	23
 .equ MSK_NX56_usb_dev_irq_raw_device_disconnected         ,	0x01000000
 .equ SRT_NX56_usb_dev_irq_raw_device_disconnected         ,	24

@ ---------------------------------------------------------------------
@ Register usb_dev_irq_masked
@ => USB device masked interrupt status register.
@    If one of these bits is set, the USB device interrupt will be asserted to the interrupt controller. \
@    For a detailed IRQ description view usb_dev_irq_raw.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_irq_masked         ,	0x00000014
 .equ Adr_NX56_usb_dev_ctrl_usb_dev_irq_masked,	0x1018C814
 .equ Adr_NX56_usb_dev_irq_masked             ,	0x1018C814

 .equ MSK_NX56_usb_dev_irq_masked_uart_rx_fifo_full           ,	0x00000001
 .equ SRT_NX56_usb_dev_irq_masked_uart_rx_fifo_full           ,	0
 .equ MSK_NX56_usb_dev_irq_masked_uart_rx_fifo_empty          ,	0x00000002
 .equ SRT_NX56_usb_dev_irq_masked_uart_rx_fifo_empty          ,	1
 .equ MSK_NX56_usb_dev_irq_masked_uart_tx_fifo_full           ,	0x00000004
 .equ SRT_NX56_usb_dev_irq_masked_uart_tx_fifo_full           ,	2
 .equ MSK_NX56_usb_dev_irq_masked_uart_tx_fifo_empty          ,	0x00000008
 .equ SRT_NX56_usb_dev_irq_masked_uart_tx_fifo_empty          ,	3
 .equ MSK_NX56_usb_dev_irq_masked_fifo_overflow_underrun_err  ,	0x00000010
 .equ SRT_NX56_usb_dev_irq_masked_fifo_overflow_underrun_err  ,	4
 .equ MSK_NX56_usb_dev_irq_masked_crc16_error                 ,	0x00000020
 .equ SRT_NX56_usb_dev_irq_masked_crc16_error                 ,	5
 .equ MSK_NX56_usb_dev_irq_masked_dropped_frame               ,	0x00000040
 .equ SRT_NX56_usb_dev_irq_masked_dropped_frame               ,	6
 .equ MSK_NX56_usb_dev_irq_masked_reset_detected              ,	0x00000100
 .equ SRT_NX56_usb_dev_irq_masked_reset_detected              ,	8
 .equ MSK_NX56_usb_dev_irq_masked_jtag_srst_requested         ,	0x00000200
 .equ SRT_NX56_usb_dev_irq_masked_jtag_srst_requested         ,	9
 .equ MSK_NX56_usb_dev_irq_masked_jtag_tx_packet_sent         ,	0x00000400
 .equ SRT_NX56_usb_dev_irq_masked_jtag_tx_packet_sent         ,	10
 .equ MSK_NX56_usb_dev_irq_masked_jtag_rx_packet_received     ,	0x00000800
 .equ SRT_NX56_usb_dev_irq_masked_jtag_rx_packet_received     ,	11
 .equ MSK_NX56_usb_dev_irq_masked_uart_tx_packet_sent         ,	0x00001000
 .equ SRT_NX56_usb_dev_irq_masked_uart_tx_packet_sent         ,	12
 .equ MSK_NX56_usb_dev_irq_masked_uart_rx_packet_received     ,	0x00002000
 .equ SRT_NX56_usb_dev_irq_masked_uart_rx_packet_received     ,	13
 .equ MSK_NX56_usb_dev_irq_masked_jtag_tx_transaction_sent    ,	0x00010000
 .equ SRT_NX56_usb_dev_irq_masked_jtag_tx_transaction_sent    ,	16
 .equ MSK_NX56_usb_dev_irq_masked_jtag_rx_transaction_received,	0x00020000
 .equ SRT_NX56_usb_dev_irq_masked_jtag_rx_transaction_received,	17
 .equ MSK_NX56_usb_dev_irq_masked_uart_tx_transaction_sent    ,	0x00040000
 .equ SRT_NX56_usb_dev_irq_masked_uart_tx_transaction_sent    ,	18
 .equ MSK_NX56_usb_dev_irq_masked_uart_rx_transaction_received,	0x00080000
 .equ SRT_NX56_usb_dev_irq_masked_uart_rx_transaction_received,	19
 .equ MSK_NX56_usb_dev_irq_masked_uart_rx_zlp_received        ,	0x00400000
 .equ SRT_NX56_usb_dev_irq_masked_uart_rx_zlp_received        ,	22
 .equ MSK_NX56_usb_dev_irq_masked_device_connected            ,	0x00800000
 .equ SRT_NX56_usb_dev_irq_masked_device_connected            ,	23
 .equ MSK_NX56_usb_dev_irq_masked_device_disconnected         ,	0x01000000
 .equ SRT_NX56_usb_dev_irq_masked_device_disconnected         ,	24


@ =====================================================================
@
@ Area of usb_dev_enum_ram
@
@ =====================================================================

 .equ Addr_NX56_usb_dev_enum_ram, 0x1018C840

@ ---------------------------------------------------------------------
@ Register usb_dev_enum_ram_descriptors_base
@ => USB device descriptor start
@    Device descriptor configuration start address in the enumeration RAM.
@    The layout of the RAM area is as following:
@    {         |
@    Byte(s)    Function
@    =============================================
@               Device descriptor
@     0, 1      Vendor ID (low, high)
@     2, 3      Product ID (low, high)
@     4, 5      Device release number (low, high)
@               Configuration descriptor
@     6         Configuration characteristics
@     7         Maximum power consumption          }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_enum_ram_descriptors_base             ,	0x00000000
 .equ Adr_NX56_usb_dev_enum_ram_usb_dev_enum_ram_descriptors_base,	0x1018C840
 .equ Adr_NX56_usb_dev_enum_ram_descriptors_base                 ,	0x1018C840

@ ---------------------------------------------------------------------
@ Register usb_dev_enum_ram_descriptors_end
@ => USB device descriptor end
@    Device descriptor configuration end address
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_enum_ram_descriptors_end             ,	0x00000004
 .equ Adr_NX56_usb_dev_enum_ram_usb_dev_enum_ram_descriptors_end,	0x1018C844
 .equ Adr_NX56_usb_dev_enum_ram_descriptors_end                 ,	0x1018C844

@ ---------------------------------------------------------------------
@ Register usb_dev_enum_ram_string_descriptors_base
@ => USB string descriptor start
@    String descriptor start address in the enumeration RAM.
@    The layout of the RAM area is as following:
@    {         |
@    Byte(s)    Function
@    ============================================
@    0          Vendor string descriptor length
@    1          Vendor string descriptor type
@    2 - 17     Vendor string
@    18         Product string descriptor length
@    19         Product string descriptor type
@    20 - 35    Product string
@    36         S/N string descriptor length
@    37         S/N string descriptor type
@    38 - 53    S/N string                          }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_enum_ram_string_descriptors_base             ,	0x00000008
 .equ Adr_NX56_usb_dev_enum_ram_usb_dev_enum_ram_string_descriptors_base,	0x1018C848
 .equ Adr_NX56_usb_dev_enum_ram_string_descriptors_base                 ,	0x1018C848

@ ---------------------------------------------------------------------
@ Register usb_dev_enum_ram_string_descriptors_end
@ => USB string descriptor end
@    String descriptor end address
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_enum_ram_string_descriptors_end             ,	0x0000003C
 .equ Adr_NX56_usb_dev_enum_ram_usb_dev_enum_ram_string_descriptors_end,	0x1018C87C
 .equ Adr_NX56_usb_dev_enum_ram_string_descriptors_end                 ,	0x1018C87C


@ =====================================================================
@
@ Area of usb_dev_fifo_ctrl
@
@ =====================================================================

 .equ Addr_NX56_usb_dev_fifo_ctrl, 0x1018C880

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_conf
@ => USB device FIFO configuration register.
@    This register configures the FIFOs of the USB core. The user can select one of three modes for each FIFO. It is also possible to enable \
@    the DMA control signals for the UART RX and TX FIFOs.
@    Receive direction (USB naming: OUT transfer) is meant from USB host TO netX. Transmit direction (USB naming: IN transfer) is meant \
@    FROM netX to USB host.
@    In stream mode, receive direction all successfully received data from the USB host is directly stored in the FIFO and can be read out \
@    by the system CPU. Packets from the USB host are accepted as long as there is space left in the FIFO. Received Zero-Length-Packtes \
@    will be ignored and not signalized. In addition to FIFO stati IRQs a packet received IRQ will also be generated on newly received packets.
@    In stream mode, transmit direction all data put into the FIFO by the system CPU will be transferred at will. This means, there is no \
@    way to control packet borders. Data is being transferred on request by the USB host. Zero-Length-Packets will never be sent to the USB \
@    host. When no data to be sent is available, the core will send a NAK handshake to the USB host. When configured to stream mode with ZLPs, \
@    a ZLP packet will be sent when the last transferred packet has been 64 bytes long and the FIFO has no data to be transferred when the Host
@    requests an IN transaction. In addition to FIFO stati IRQs a packet sent IRQ will also be generated on sent packets.
@    In packet mode, receive direction a new packet sent by the USB host is only accepted when the rx_len register has been read after the \
@    packet reception. Received Zero-Length-Packtes will be ignored and not signalized. In addition to FIFO stati IRQs a packet received IRQ \
@    will also be generated on newly received packets.
@    In transaction mode, receive direction the FIFO operates on transactions. A transaction is finished whenever the first packet with a size \
@    less than 64 bytes or a Zero-Length-Packet arrives. Packet received IRQs will be generated on all packet receptions. The transaction \
@    received IRQ will be generated when the transaction is finished. To accept the next transaction, the rx_len register must be read.
@    Packet and transaction modes in transmit direction are identical. To achieve single packet transmissions a transaction size of 64 bytes \
@    must be programmed. The behaviour when the programmed transaction is finished and the USB host request an IN transfer depends on the \
@    configuration of the 'transaction_no_zlp' bit. When set, no Zero-Length-Packets will be generated, otherwise a ZLP will be sent if \
@    needed (i.e. the last transferred packet had a packet size of 64 bytes). After sending the ZLP, NAKs will be generated for IN requests. \
@    Should the FIFO get empty during a programmed transaction or not a full 64 byte packet is available in the FIFO, a NAK handshake will be \
@    generated for IN requests. This ensures that a transaction will not be considered finished by the USB host before the programmed size \
@    has been transferred. In addition to FIFO stati IRQs a packet sent and transaction sent IRQ will also be generated on sent packets / \
@    completed transactions.
@    
@    The default configuration of the UART channel is stream mode with ZLPs in both directions.
@    The JTAG channel may only be reconfigured when not used for JTAG communication (i.e. USB host configured JTAG bypass mode). For \
@    normal system operation they need to be configured in stream mode.
@    
@    Note: To use the DMA controller, the dma_en bits must be enabled here. Otherwise no DMAC handshake signals will be generated.
@    For correct operation with the DMAC the following sequence must be maintained:
@    Stream mode: just read or write the data to the FIFO. Flow controller must be the DMAC.
@    Packet mode, receive: Program read of data, afterwards the rx_len register must be read by the DMAC (will also be signalized to \
@    the DMAC by the FIFO). Flow controller is the USB core (peripheral controlled).
@    Packet mode, transmit: The tx_len register with the control information must be programmed by the DMAC first (will also be signalized to \
@    the DMAC). After that feed the data. Flow controller is the USB core (peripheral controlled).
@    Transaction mode, receive: same as packet mode, receive.
@    Transaction mode, transmit: same as packet mode, transmit.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_conf              ,	0x00000000
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_conf,	0x1018C880
 .equ Adr_NX56_usb_dev_fifo_ctrl_conf                  ,	0x1018C880

 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_mode_interrupt               ,	0x00000003
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_mode_interrupt               ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_mode_uart_rx                 ,	0x0000000c
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_mode_uart_rx                 ,	2
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_mode_uart_tx                 ,	0x00000030
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_mode_uart_tx                 ,	4
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_mode_jtag_rx                 ,	0x000000c0
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_mode_jtag_rx                 ,	6
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_mode_jtag_tx                 ,	0x00000300
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_mode_jtag_tx                 ,	8
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_dma_en_uart_rx               ,	0x00000400
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_dma_en_uart_rx               ,	10
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_dma_en_uart_tx               ,	0x00000800
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_dma_en_uart_tx               ,	11
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_dma_uart_tx_stream_burst_only,	0x00001000
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_dma_uart_tx_stream_burst_only,	12
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_reset                        ,	0x000fe000
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_reset                        ,	13
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_max_transaction_len          ,	0x07f00000
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_max_transaction_len          ,	20
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_uart_rx_nak_all              ,	0x08000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_uart_rx_nak_all              ,	27
 .equ MSK_NX56_usb_dev_fifo_ctrl_conf_jtag_rx_nak_all              ,	0x10000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_conf_jtag_rx_nak_all              ,	28

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_error
@ => USB device FIFOs error status register.
@    This register holds the overflow and underrun flags of all FIFOs. To reset a flag the corresponding FIFO must be reset.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_error              ,	0x00000004
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_error,	0x1018C884
 .equ Adr_NX56_usb_dev_fifo_ctrl_error                  ,	0x1018C884

 .equ MSK_NX56_usb_dev_fifo_ctrl_error_overflow,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_error_overflow,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_error_underrun,	0x007f0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_error_underrun,	16

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_control_ep_rx_len
@ => USB device Endpoint 0 - Control OUT, FIFO 0 length register.
@    This register holds the fill levels and other status information of FIFO 0.
@    Use this register for debug purposes only.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_control_ep_rx_len              ,	0x00000008
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_control_ep_rx_len,	0x1018C888
 .equ Adr_NX56_usb_dev_fifo_ctrl_control_ep_rx_len                  ,	0x1018C888

 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_len_packet_len     ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_len_packet_len     ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_len_transaction_len,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_len_transaction_len,	16

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_control_ep_rx_stat
@ => USB device Endpoint 0 - Control OUT, FIFO 0 status register.
@    This register holds the fill levels and other status information of FIFO 0.
@    Use this register for debug purposes only.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat              ,	0x0000000C
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_control_ep_rx_stat,	0x1018C88C
 .equ Adr_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat                  ,	0x1018C88C

 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_fill_level            ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_fill_level            ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_packet_transfer_active,	0x10000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_packet_transfer_active,	28
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_transaction_active    ,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_transaction_active    ,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_empty                 ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_empty                 ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_full                  ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_rx_stat_full                  ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_control_ep_tx_len
@ => USB device Endpoint 0 - Control IN, FIFO 1 length register.
@    This register holds the fill levels and other status information of FIFO 1.
@    Use this register for debug purposes only.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_control_ep_tx_len              ,	0x00000010
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_control_ep_tx_len,	0x1018C890
 .equ Adr_NX56_usb_dev_fifo_ctrl_control_ep_tx_len                  ,	0x1018C890

 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_len_packet_len        ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_len_packet_len        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_len_transaction_len   ,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_len_transaction_len   ,	16
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_len_transaction_no_zlp,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_len_transaction_no_zlp,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_control_ep_tx_stat
@ => USB device Endpoint 0 - Control IN, FIFO 1 status register.
@    This register holds the fill levels and other status information of FIFO 1.
@    Use this register for debug purposes only.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat              ,	0x00000014
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_control_ep_tx_stat,	0x1018C894
 .equ Adr_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat                  ,	0x1018C894

 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_fill_level        ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_fill_level        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_transaction_active,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_transaction_active,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_empty             ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_empty             ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_full              ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_control_ep_tx_stat_full              ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_interrupt_ep_tx_len
@ => USB device Endpoint 1 - Interrupt IN, FIFO 2 length register.
@    This register is used to program or abort a transaction.
@    Note: It is not allowed to re-program a transaction while it is active. Only an abort is allowed.
@    Note: A new transaction may only programmed when the last transaction is finished (i.e. check 'transaction_active' \
@    flag in the tx_stat register).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len              ,	0x00000018
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_interrupt_ep_tx_len,	0x1018C898
 .equ Adr_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len                  ,	0x1018C898

 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len_packet_len        ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len_packet_len        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len_transaction_len   ,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len_transaction_len   ,	16
 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len_transaction_no_zlp,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_len_transaction_no_zlp,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_interrupt_ep_tx_stat
@ => USB device Endpoint 1 - Control IN, FIFO 2 status register.
@    This register holds the fill levels and other status information of FIFO 2.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat              ,	0x0000001C
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_interrupt_ep_tx_stat,	0x1018C89C
 .equ Adr_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat                  ,	0x1018C89C

 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_fill_level        ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_fill_level        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_transaction_active,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_transaction_active,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_empty             ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_empty             ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_full              ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_interrupt_ep_tx_stat_full              ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_uart_ep_rx_len
@ => USB device Endpoint 2 - UART RX (OUT), FIFO 3 length register.
@    This register holds the status information of FIFO 3. It is also used to acknowledge a transaction or packet reception.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len              ,	0x00000020
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_uart_ep_rx_len,	0x1018C8A0
 .equ Adr_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len                  ,	0x1018C8A0

 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_packet_len             ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_packet_len             ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_transaction_len        ,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_transaction_len        ,	16
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_transaction_max_reached,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_transaction_max_reached,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_transaction_continued  ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_len_transaction_continued  ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_uart_ep_rx_stat
@ => USB device Endpoint 2 - UART RX (OUT), FIFO 3 status register.
@    This register holds the fill levels and other status information of FIFO 3.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat              ,	0x00000024
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_uart_ep_rx_stat,	0x1018C8A4
 .equ Adr_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat                  ,	0x1018C8A4

 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_fill_level            ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_fill_level            ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_packet_transfer_active,	0x10000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_packet_transfer_active,	28
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_transaction_active    ,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_transaction_active    ,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_empty                 ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_empty                 ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_full                  ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_rx_stat_full                  ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_uart_ep_tx_len
@ => USB device Endpoint 3 - UART TX (IN), FIFO 4 length register.
@    This register is used to program or abort a transaction.
@    Note: It is not allowed to re-program a transaction while it is active. Only an abort is allowed.
@    Note: A new transaction may only programmed when the last transaction is finished (i.e. check 'transaction_active' \
@    flag in the tx_stat register).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len              ,	0x00000028
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_uart_ep_tx_len,	0x1018C8A8
 .equ Adr_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len                  ,	0x1018C8A8

 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len_packet_len        ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len_packet_len        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len_transaction_len   ,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len_transaction_len   ,	16
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len_transaction_no_zlp,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_len_transaction_no_zlp,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_uart_ep_tx_stat
@ => USB device Endpoint 3 - UART TX (IN), FIFO 4 status register.
@    This register holds the fill levels and other status information of FIFO 4.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat              ,	0x0000002C
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_uart_ep_tx_stat,	0x1018C8AC
 .equ Adr_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat                  ,	0x1018C8AC

 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_fill_level        ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_fill_level        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_transaction_active,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_transaction_active,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_empty             ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_empty             ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_full              ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_uart_ep_tx_stat_full              ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_jtag_ep_rx_len
@ => USB device Endpoint 4 - JTAG RX (OUT), FIFO 5 length register.
@    This register holds the status information of FIFO 5. It is also used to acknowledge a transaction or packet reception.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len              ,	0x00000030
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_jtag_ep_rx_len,	0x1018C8B0
 .equ Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len                  ,	0x1018C8B0

 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_packet_len             ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_packet_len             ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_transaction_len        ,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_transaction_len        ,	16
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_transaction_max_reached,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_transaction_max_reached,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_transaction_continued  ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_len_transaction_continued  ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_jtag_ep_rx_stat
@ => USB device Endpoint 4 - JTAG RX (OUT), FIFO 5 status register.
@    This register holds the fill levels and other status information of FIFO 5.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat              ,	0x00000034
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_jtag_ep_rx_stat,	0x1018C8B4
 .equ Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat                  ,	0x1018C8B4

 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_fill_level            ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_fill_level            ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_packet_transfer_active,	0x10000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_packet_transfer_active,	28
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_transaction_active    ,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_transaction_active    ,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_empty                 ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_empty                 ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_full                  ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_rx_stat_full                  ,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_jtag_ep_tx_len
@ => USB device Endpoint 5 - JTAG TX (IN), FIFO 6 length register.
@    This register is used to program or abort a transaction.
@    Note: It is not allowed to re-program a transaction while it is active. Only an abort is allowed.
@    Note: A new transaction may only programmed when the last transaction is finished (i.e. check 'transaction_active' \
@    flag in the tx_stat register).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len              ,	0x00000038
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_jtag_ep_tx_len,	0x1018C8B8
 .equ Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len                  ,	0x1018C8B8

 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len_packet_len        ,	0x0000007f
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len_packet_len        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len_transaction_len   ,	0x1fff0000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len_transaction_len   ,	16
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len_transaction_no_zlp,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_len_transaction_no_zlp,	31

@ ---------------------------------------------------------------------
@ Register usb_dev_fifo_ctrl_jtag_ep_tx_stat
@ => USB device Endpoint 5 - JTAG TX (IN), FIFO 6 status register.
@    This register holds the fill levels and other status information of FIFO 6.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat              ,	0x0000003C
 .equ Adr_NX56_usb_dev_fifo_ctrl_usb_dev_fifo_ctrl_jtag_ep_tx_stat,	0x1018C8BC
 .equ Adr_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat                  ,	0x1018C8BC

 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_fill_level        ,	0x000001ff
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_fill_level        ,	0
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_transaction_active,	0x20000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_transaction_active,	29
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_empty             ,	0x40000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_empty             ,	30
 .equ MSK_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_full              ,	0x80000000
 .equ SRT_NX56_usb_dev_fifo_ctrl_jtag_ep_tx_stat_full              ,	31


@ =====================================================================
@
@ Area of usb_dev_fifo
@
@ =====================================================================

 .equ Addr_NX56_usb_dev_fifo, 0x1018C8C0

@ ---------------------------------------------------------------------
@ Register usb_dev_control_out_data
@ => USB device FIFO: Control endpoint OUT.
@    This FIFO holds the data of the control endpoint. Direction is OUT, meaning data sent from USB host to device arrives here. \
@    The FIFO is handled by the USB core itself and should not be read or written from the ARM.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_control_out_data         ,	0x00000000
 .equ Adr_NX56_usb_dev_fifo_usb_dev_control_out_data,	0x1018C8C0
 .equ Adr_NX56_usb_dev_control_out_data             ,	0x1018C8C0

 .equ MSK_NX56_usb_dev_control_out_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_control_out_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_control_in_data
@ => USB device FIFO: Control endpoint IN.
@    This FIFO holds the data of the control endpoint. Direction is IN, meaning data that should be sent from USB device to host \
@    must be placed here. The FIFO is handled by the USB core itself and should not be read or written from the ARM.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_control_in_data         ,	0x00000004
 .equ Adr_NX56_usb_dev_fifo_usb_dev_control_in_data,	0x1018C8C4
 .equ Adr_NX56_usb_dev_control_in_data             ,	0x1018C8C4

 .equ MSK_NX56_usb_dev_control_in_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_control_in_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_interrupt_data
@ => USB device FIFO: Endpoint 1 - Interrupt IN
@    This FIFO holds the data of the interrupt endpoint. Direction is IN, meaning data placed here is sent \
@    to the USB host.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_interrupt_data         ,	0x00000008
 .equ Adr_NX56_usb_dev_fifo_usb_dev_interrupt_data,	0x1018C8C8
 .equ Adr_NX56_usb_dev_interrupt_data             ,	0x1018C8C8

 .equ MSK_NX56_usb_dev_interrupt_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_interrupt_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_uart_rx_data
@ => USB device FIFO: Endpoint 2 - UART RX
@    This FIFO holds the data of the bulk endpoint used for UART communication. Direction is OUT, meaning data from the USB host \
@    arrives here. This FIFO may be used by the user application.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_uart_rx_data         ,	0x0000000C
 .equ Adr_NX56_usb_dev_fifo_usb_dev_uart_rx_data,	0x1018C8CC
 .equ Adr_NX56_usb_dev_uart_rx_data             ,	0x1018C8CC

 .equ MSK_NX56_usb_dev_uart_rx_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_uart_rx_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_uart_tx_data
@ => USB device FIFO: Endpoint 3 - UART TX
@    This FIFO holds the data of the bulk endpoint used for UART communication. Direction is IN, meaning data placed here is sent \
@    to the USB host. This FIFO may be used by the user application.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_uart_tx_data         ,	0x00000010
 .equ Adr_NX56_usb_dev_fifo_usb_dev_uart_tx_data,	0x1018C8D0
 .equ Adr_NX56_usb_dev_uart_tx_data             ,	0x1018C8D0

 .equ MSK_NX56_usb_dev_uart_tx_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_uart_tx_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_jtag_rx_data
@ => USB device FIFO: Endpoint 4 - JTAG RX
@    This FIFO holds the data of the bulk endpoint used for JTAG communication. Direction is OUT, meaning data from the USB host \
@    arrives here. The FIFO is handled by the USB JTAG core itself and should not be read or written from the ARM.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_jtag_rx_data         ,	0x00000014
 .equ Adr_NX56_usb_dev_fifo_usb_dev_jtag_rx_data,	0x1018C8D4
 .equ Adr_NX56_usb_dev_jtag_rx_data             ,	0x1018C8D4

 .equ MSK_NX56_usb_dev_jtag_rx_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_jtag_rx_data_fifo_data,	0

@ ---------------------------------------------------------------------
@ Register usb_dev_jtag_tx_data
@ => USB device FIFO: Endpoint 5 - JTAG TX
@    This FIFO holds the data of the bulk endpoint used for JTAG communication. Direction is IN, meaning data placed here is sent \
@    to the USB host. The FIFO is handled by the USB JTAG core itself and should not be read or written from the ARM.
@    Note: Reading and writing to this register while the USB module sees an reset condition on the bus results in \
@    unexpected data, because the FIFOs are held in reset state.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_usb_dev_jtag_tx_data         ,	0x00000018
 .equ Adr_NX56_usb_dev_fifo_usb_dev_jtag_tx_data,	0x1018C8D8
 .equ Adr_NX56_usb_dev_jtag_tx_data             ,	0x1018C8D8

 .equ MSK_NX56_usb_dev_jtag_tx_data_fifo_data,	0x000000ff
 .equ SRT_NX56_usb_dev_jtag_tx_data_fifo_data,	0


@ =====================================================================
@
@ Area of canctrl
@
@ =====================================================================

 .equ Addr_NX56_canctrl, 0x1018C900

@ ---------------------------------------------------------------------
@ Register canctrl_mode
@ => CAN mode register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_mode    ,	0x00000000
 .equ Adr_NX56_canctrl_canctrl_mode,	0x1018C900
 .equ Adr_NX56_canctrl_mode        ,	0x1018C900

 .equ MSK_NX56_canctrl_mode_reset_mode     ,	0x00000001
 .equ SRT_NX56_canctrl_mode_reset_mode     ,	0
 .equ MSK_NX56_canctrl_mode_listen_mode    ,	0x00000002
 .equ SRT_NX56_canctrl_mode_listen_mode    ,	1
 .equ MSK_NX56_canctrl_mode_selftest       ,	0x00000004
 .equ SRT_NX56_canctrl_mode_selftest       ,	2
 .equ MSK_NX56_canctrl_mode_acceptance_mode,	0x00000008
 .equ SRT_NX56_canctrl_mode_acceptance_mode,	3

@ ---------------------------------------------------------------------
@ Register canctrl_command
@ => CAN command register
@ => Mode: W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_command    ,	0x00000004
 .equ Adr_NX56_canctrl_canctrl_command,	0x1018C904
 .equ Adr_NX56_canctrl_command        ,	0x1018C904

 .equ MSK_NX56_canctrl_command_tx_request     ,	0x00000001
 .equ SRT_NX56_canctrl_command_tx_request     ,	0
 .equ MSK_NX56_canctrl_command_abort_tx       ,	0x00000002
 .equ SRT_NX56_canctrl_command_abort_tx       ,	1
 .equ MSK_NX56_canctrl_command_release_rx_buf ,	0x00000004
 .equ SRT_NX56_canctrl_command_release_rx_buf ,	2
 .equ MSK_NX56_canctrl_command_clr_overrun    ,	0x00000008
 .equ SRT_NX56_canctrl_command_clr_overrun    ,	3
 .equ MSK_NX56_canctrl_command_self_rx_request,	0x00000010
 .equ SRT_NX56_canctrl_command_self_rx_request,	4

@ ---------------------------------------------------------------------
@ Register canctrl_status
@ => CAN status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_status    ,	0x00000008
 .equ Adr_NX56_canctrl_canctrl_status,	0x1018C908
 .equ Adr_NX56_canctrl_status        ,	0x1018C908

 .equ MSK_NX56_canctrl_status_rx_buf_status,	0x00000001
 .equ SRT_NX56_canctrl_status_rx_buf_status,	0
 .equ MSK_NX56_canctrl_status_overrun      ,	0x00000002
 .equ SRT_NX56_canctrl_status_overrun      ,	1
 .equ MSK_NX56_canctrl_status_tx_buf_status,	0x00000004
 .equ SRT_NX56_canctrl_status_tx_buf_status,	2
 .equ MSK_NX56_canctrl_status_tx_complete  ,	0x00000008
 .equ SRT_NX56_canctrl_status_tx_complete  ,	3
 .equ MSK_NX56_canctrl_status_rx_status    ,	0x00000010
 .equ SRT_NX56_canctrl_status_rx_status    ,	4
 .equ MSK_NX56_canctrl_status_tx_status    ,	0x00000020
 .equ SRT_NX56_canctrl_status_tx_status    ,	5
 .equ MSK_NX56_canctrl_status_error_status ,	0x00000040
 .equ SRT_NX56_canctrl_status_error_status ,	6
 .equ MSK_NX56_canctrl_status_bus_status   ,	0x00000080
 .equ SRT_NX56_canctrl_status_bus_status   ,	7

@ ---------------------------------------------------------------------
@ Register canctrl_irq
@ => CAN interrupt register
@    reading the register will clear all bits except rx_irq
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_irq    ,	0x0000000C
 .equ Adr_NX56_canctrl_canctrl_irq,	0x1018C90C
 .equ Adr_NX56_canctrl_irq        ,	0x1018C90C

 .equ MSK_NX56_canctrl_irq_rx_irq         ,	0x00000001
 .equ SRT_NX56_canctrl_irq_rx_irq         ,	0
 .equ MSK_NX56_canctrl_irq_tx_irq         ,	0x00000002
 .equ SRT_NX56_canctrl_irq_tx_irq         ,	1
 .equ MSK_NX56_canctrl_irq_warning_irq    ,	0x00000004
 .equ SRT_NX56_canctrl_irq_warning_irq    ,	2
 .equ MSK_NX56_canctrl_irq_overrun_irq    ,	0x00000008
 .equ SRT_NX56_canctrl_irq_overrun_irq    ,	3
 .equ MSK_NX56_canctrl_irq_err_passive_irq,	0x00000020
 .equ SRT_NX56_canctrl_irq_err_passive_irq,	5
 .equ MSK_NX56_canctrl_irq_arb_lost_irq   ,	0x00000040
 .equ SRT_NX56_canctrl_irq_arb_lost_irq   ,	6
 .equ MSK_NX56_canctrl_irq_bus_error_irq  ,	0x00000080
 .equ SRT_NX56_canctrl_irq_bus_error_irq  ,	7

@ ---------------------------------------------------------------------
@ Register canctrl_irq_en
@ => CAN interrupt enable register
@    in not extended mode: acceptance_code_0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_irq_en    ,	0x00000010
 .equ Adr_NX56_canctrl_canctrl_irq_en,	0x1018C910
 .equ Adr_NX56_canctrl_irq_en        ,	0x1018C910

 .equ MSK_NX56_canctrl_irq_en_rx_irq_en         ,	0x00000001
 .equ SRT_NX56_canctrl_irq_en_rx_irq_en         ,	0
 .equ MSK_NX56_canctrl_irq_en_tx_irq_en         ,	0x00000002
 .equ SRT_NX56_canctrl_irq_en_tx_irq_en         ,	1
 .equ MSK_NX56_canctrl_irq_en_warning_irq_en    ,	0x00000004
 .equ SRT_NX56_canctrl_irq_en_warning_irq_en    ,	2
 .equ MSK_NX56_canctrl_irq_en_overrun_irq_en    ,	0x00000008
 .equ SRT_NX56_canctrl_irq_en_overrun_irq_en    ,	3
 .equ MSK_NX56_canctrl_irq_en_err_passive_irq_en,	0x00000020
 .equ SRT_NX56_canctrl_irq_en_err_passive_irq_en,	5
 .equ MSK_NX56_canctrl_irq_en_arb_lost_irq_en   ,	0x00000040
 .equ SRT_NX56_canctrl_irq_en_arb_lost_irq_en   ,	6
 .equ MSK_NX56_canctrl_irq_en_bus_error_irq_en  ,	0x00000080
 .equ SRT_NX56_canctrl_irq_en_bus_error_irq_en  ,	7

@ ---------------------------------------------------------------------
@ Register canctrl_not_extended_acceptance_mask0
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_not_extended_acceptance_mask0    ,	0x00000014
 .equ Adr_NX56_canctrl_canctrl_not_extended_acceptance_mask0,	0x1018C914
 .equ Adr_NX56_canctrl_not_extended_acceptance_mask0        ,	0x1018C914

@ ---------------------------------------------------------------------
@ Register canctrl_bus_timing0
@ => CAN bus timing register 0, only writeable in reset mode
@    in not extended mode: acceptance_mask_0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_bus_timing0    ,	0x00000018
 .equ Adr_NX56_canctrl_canctrl_bus_timing0,	0x1018C918
 .equ Adr_NX56_canctrl_bus_timing0        ,	0x1018C918

 .equ MSK_NX56_canctrl_bus_timing0_prescaler      ,	0x000001ff
 .equ SRT_NX56_canctrl_bus_timing0_prescaler      ,	0
 .equ MSK_NX56_canctrl_bus_timing0_sync_jump_width,	0x00000600
 .equ SRT_NX56_canctrl_bus_timing0_sync_jump_width,	9

@ ---------------------------------------------------------------------
@ Register canctrl_bus_timing1
@ => CAN bus timing register 1, only writeable in reset mode
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_bus_timing1    ,	0x0000001C
 .equ Adr_NX56_canctrl_canctrl_bus_timing1,	0x1018C91C
 .equ Adr_NX56_canctrl_bus_timing1        ,	0x1018C91C

 .equ MSK_NX56_canctrl_bus_timing1_tseg1       ,	0x0000003f
 .equ SRT_NX56_canctrl_bus_timing1_tseg1       ,	0
 .equ MSK_NX56_canctrl_bus_timing1_oversampling,	0x00000080
 .equ SRT_NX56_canctrl_bus_timing1_oversampling,	7
 .equ MSK_NX56_canctrl_bus_timing1_tseg2       ,	0x00001f00
 .equ SRT_NX56_canctrl_bus_timing1_tseg2       ,	8

@ ---------------------------------------------------------------------
@ Register canctrl_not_extended_data0
@ => 
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_not_extended_data0    ,	0x00000028
 .equ Adr_NX56_canctrl_canctrl_not_extended_data0,	0x1018C928
 .equ Adr_NX56_canctrl_not_extended_data0        ,	0x1018C928

@ ---------------------------------------------------------------------
@ Register canctrl_arb_lost_capture
@ => CAN arbitration lost capture register
@    This register contains information about the bit position of losing arbitration.
@    reading the register will clear all bits
@    in not extended mode: data1
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_arb_lost_capture    ,	0x0000002C
 .equ Adr_NX56_canctrl_canctrl_arb_lost_capture,	0x1018C92C
 .equ Adr_NX56_canctrl_arb_lost_capture        ,	0x1018C92C

 .equ MSK_NX56_canctrl_arb_lost_capture_position,	0x0000001f
 .equ SRT_NX56_canctrl_arb_lost_capture_position,	0

@ ---------------------------------------------------------------------
@ Register canctrl_err_code_capture
@ => CAN error code capture register
@    This register contains information about the type and location of errors on the bus.
@    reading the register will clear all bits
@    in not extended mode: data2
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_err_code_capture    ,	0x00000030
 .equ Adr_NX56_canctrl_canctrl_err_code_capture,	0x1018C930
 .equ Adr_NX56_canctrl_err_code_capture        ,	0x1018C930

 .equ MSK_NX56_canctrl_err_code_capture_segment  ,	0x0000001f
 .equ SRT_NX56_canctrl_err_code_capture_segment  ,	0
 .equ MSK_NX56_canctrl_err_code_capture_direction,	0x00000020
 .equ SRT_NX56_canctrl_err_code_capture_direction,	5
 .equ MSK_NX56_canctrl_err_code_capture_err_code ,	0x000000c0
 .equ SRT_NX56_canctrl_err_code_capture_err_code ,	6

@ ---------------------------------------------------------------------
@ Register canctrl_err_warning_limit
@ => CAN error warning limit register, only writeable in reset mode
@    in not extended mode: data3
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_err_warning_limit    ,	0x00000034
 .equ Adr_NX56_canctrl_canctrl_err_warning_limit,	0x1018C934
 .equ Adr_NX56_canctrl_err_warning_limit        ,	0x1018C934

 .equ MSK_NX56_canctrl_err_warning_limit_limit,	0x000000ff
 .equ SRT_NX56_canctrl_err_warning_limit_limit,	0

@ ---------------------------------------------------------------------
@ Register canctrl_rx_error_cnt
@ => CAN RX error counter register, only writeable in reset mode
@    The RX error counter register reflects the current value of the receive error counter.
@    If a bus-off event occurs, the RX error counter is initialized to logic 0. The time bus-off is valid, writing to this register has
@    no effect.
@    Note, that a CPU-forced content change of the RX error counter is only possible, if the reset mode was entered
@    previously. An error status change (see status register), an error warning or an error passive interrupt forced
@    by the new register content will not occur, until the reset mode is cancelled again.
@    in not extended mode: data4
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_rx_error_cnt    ,	0x00000038
 .equ Adr_NX56_canctrl_canctrl_rx_error_cnt,	0x1018C938
 .equ Adr_NX56_canctrl_rx_error_cnt        ,	0x1018C938

 .equ MSK_NX56_canctrl_rx_error_cnt_rx_err,	0x000000ff
 .equ SRT_NX56_canctrl_rx_error_cnt_rx_err,	0

@ ---------------------------------------------------------------------
@ Register canctrl_tx_error_cnt
@ => CAN TX error counter register, only writeable in reset mode
@    The TX error counter register reflects the current value of the transmit error counter.
@    If a bus-off event occurs, the TX error counter is initialized to 127 to count the minimum
@    protocol-defined time (128 occurrences of the bus-free signal). Reading
@    the TX error counter during this time gives information about the status of the bus-off recovery.
@    If bus-off is active, a write access to TXERR in the range from 0 to 254 clears the bus-off flag and the controller will wait
@    for one occurrence of 11 consecutive recessive bits (bus-free) after the reset mode has been cleared.
@    Writing 255 to TXERR allows to initiate a CPU-driven bus-off event. It should be noted that a CPU-forced content change
@    of the TX error counter is only possible, if the reset mode was entered previously. An error or bus status change (see
@    status register), an error warning or an error passive interrupt forced by the new register content will not occur
@    until the reset mode is cancelled again. After leaving the reset mode, the new TX counter content is interpreted and the
@    bus-off event is performed in the same way, as if it was forced by a bus error event. That means, that the reset mode is
@    entered again, the TX error counter is initialized to 127, the RX counter is cleared and all concerned status and interrupt
@    register bits are set.
@    Clearing of reset mode now will perform the protocol-defined bus-off recovery sequence (waiting for 128 occurrences of
@    the bus-free signal).
@    If the reset mode is entered again before the end of bus-off recovery (TXERR > 0), bus-off keeps active and TXERR is
@    frozen.
@    in not extended mode: data5
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_tx_error_cnt    ,	0x0000003C
 .equ Adr_NX56_canctrl_canctrl_tx_error_cnt,	0x1018C93C
 .equ Adr_NX56_canctrl_tx_error_cnt        ,	0x1018C93C

 .equ MSK_NX56_canctrl_tx_error_cnt_tx_err,	0x000000ff
 .equ SRT_NX56_canctrl_tx_error_cnt_tx_err,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data0
@ => CAN data register 0
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance code 0
@     Operating mode:   R:  Standard frame: Read RX frame information
@                           Extended frame: Read RX frame information
@                       W:  Standard frame: Write TX frame information
@                           Extended frame: Write TX frame information }
@    in not extended mode: data6
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data0    ,	0x00000040
 .equ Adr_NX56_canctrl_canctrl_data0,	0x1018C940
 .equ Adr_NX56_canctrl_data0        ,	0x1018C940

 .equ MSK_NX56_canctrl_data0_data,	0x000000ff
 .equ SRT_NX56_canctrl_data0_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data1
@ => CAN data register 1
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance code 1
@     Operating mode:   R:  Standard frame: Read RX identifier 1
@                           Extended frame: Read RX identifier 1
@                       W:  Standard frame: Write TX identifier 1
@                           Extended frame: Write TX identifier 1 }
@    in not extended mode: data7
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data1    ,	0x00000044
 .equ Adr_NX56_canctrl_canctrl_data1,	0x1018C944
 .equ Adr_NX56_canctrl_data1        ,	0x1018C944

 .equ MSK_NX56_canctrl_data1_data,	0x000000ff
 .equ SRT_NX56_canctrl_data1_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data2
@ => CAN data register 2
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance code 2
@     Operating mode:   R:  Standard frame: Read RX identifier 2
@                           Extended frame: Read RX identifier 2
@                       W:  Standard frame: Write TX identifier 2
@                           Extended frame: Write TX identifier 2 }
@    in not extended mode: data8
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data2    ,	0x00000048
 .equ Adr_NX56_canctrl_canctrl_data2,	0x1018C948
 .equ Adr_NX56_canctrl_data2        ,	0x1018C948

 .equ MSK_NX56_canctrl_data2_data,	0x000000ff
 .equ SRT_NX56_canctrl_data2_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data3
@ => CAN data register 3
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance code 3
@     Operating mode:   R:  Standard frame: Read RX data 1
@                           Extended frame: Read RX identifier 3
@                       W:  Standard frame: Write TX data 1
@                           Extended frame: Write TX identifier 3 }
@    in not extended mode: data9
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data3    ,	0x0000004C
 .equ Adr_NX56_canctrl_canctrl_data3,	0x1018C94C
 .equ Adr_NX56_canctrl_data3        ,	0x1018C94C

 .equ MSK_NX56_canctrl_data3_data,	0x000000ff
 .equ SRT_NX56_canctrl_data3_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data4
@ => CAN data register 4
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance mask 0
@     Operating mode:   R:  Standard frame: Read RX data 2
@                           Extended frame: Read RX identifier 4
@                       W:  Standard frame: Write TX data 2
@                           Extended frame: Write TX identifier 4 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data4    ,	0x00000050
 .equ Adr_NX56_canctrl_canctrl_data4,	0x1018C950
 .equ Adr_NX56_canctrl_data4        ,	0x1018C950

 .equ MSK_NX56_canctrl_data4_data,	0x000000ff
 .equ SRT_NX56_canctrl_data4_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data5
@ => CAN data register 5
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance mask 1
@     Operating mode:   R:  Standard frame: Read RX data 3
@                           Extended frame: Read RX data 1
@                       W:  Standard frame: Write TX data 3
@                           Extended frame: Write TX data 1 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data5    ,	0x00000054
 .equ Adr_NX56_canctrl_canctrl_data5,	0x1018C954
 .equ Adr_NX56_canctrl_data5        ,	0x1018C954

 .equ MSK_NX56_canctrl_data5_data,	0x000000ff
 .equ SRT_NX56_canctrl_data5_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data6
@ => CAN data register 6
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance mask 2
@     Operating mode:   R:  Standard frame: Read RX data 4
@                           Extended frame: Read RX data 2
@                       W:  Standard frame: Write TX data 4
@                           Extended frame: Write TX data 2 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data6    ,	0x00000058
 .equ Adr_NX56_canctrl_canctrl_data6,	0x1018C958
 .equ Adr_NX56_canctrl_data6        ,	0x1018C958

 .equ MSK_NX56_canctrl_data6_data,	0x000000ff
 .equ SRT_NX56_canctrl_data6_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data7
@ => CAN data register 7
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: Read or write acceptance mask 3
@     Operating mode:   R:  Standard frame: Read RX data 5
@                           Extended frame: Read RX data 3
@                       W:  Standard frame: Write TX data 5
@                           Extended frame: Write TX data 3 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data7    ,	0x0000005C
 .equ Adr_NX56_canctrl_canctrl_data7,	0x1018C95C
 .equ Adr_NX56_canctrl_data7        ,	0x1018C95C

 .equ MSK_NX56_canctrl_data7_data,	0x000000ff
 .equ SRT_NX56_canctrl_data7_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data8
@ => CAN data register 8
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: reserved
@     Operating mode:   R:  Standard frame: Read RX data 6
@                           Extended frame: Read RX data 4
@                       W:  Standard frame: Write TX data 6
@                           Extended frame: Write TX data 4 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data8    ,	0x00000060
 .equ Adr_NX56_canctrl_canctrl_data8,	0x1018C960
 .equ Adr_NX56_canctrl_data8        ,	0x1018C960

 .equ MSK_NX56_canctrl_data8_data,	0x000000ff
 .equ SRT_NX56_canctrl_data8_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data9
@ => CAN data register 9
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: reserved
@     Operating mode:   R:  Standard frame: Read RX data 7
@                           Extended frame: Read RX data 5
@                       W:  Standard frame: Write TX data 7
@                           Extended frame: Write TX data 5 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data9    ,	0x00000064
 .equ Adr_NX56_canctrl_canctrl_data9,	0x1018C964
 .equ Adr_NX56_canctrl_data9        ,	0x1018C964

 .equ MSK_NX56_canctrl_data9_data,	0x000000ff
 .equ SRT_NX56_canctrl_data9_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data10
@ => CAN data register 10
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: reserved
@     Operating mode:   R:  Standard frame: Read RX data 8
@                           Extended frame: Read RX data 6
@                       W:  Standard frame: Write TX data 8
@                           Extended frame: Write TX data 6 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data10    ,	0x00000068
 .equ Adr_NX56_canctrl_canctrl_data10,	0x1018C968
 .equ Adr_NX56_canctrl_data10        ,	0x1018C968

 .equ MSK_NX56_canctrl_data10_data,	0x000000ff
 .equ SRT_NX56_canctrl_data10_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data11
@ => CAN data register 11
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: reserved
@     Operating mode:   R:  Standard frame: reserved
@                           Extended frame: Read RX data 7
@                       W:  Standard frame: reserved
@                           Extended frame: Write TX data 7 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data11    ,	0x0000006C
 .equ Adr_NX56_canctrl_canctrl_data11,	0x1018C96C
 .equ Adr_NX56_canctrl_data11        ,	0x1018C96C

 .equ MSK_NX56_canctrl_data11_data,	0x000000ff
 .equ SRT_NX56_canctrl_data11_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_data12
@ => CAN data register 12
@    This register has multiple functions depending on reset mode and read or write access.
@    {               |     |
@     Reset mode:      R/W: reserved
@     Operating mode:   R:  Standard frame: reserved
@                           Extended frame: Read RX data 8
@                       W:  Standard frame: reserved
@                           Extended frame: Write TX data 8 }
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_data12    ,	0x00000070
 .equ Adr_NX56_canctrl_canctrl_data12,	0x1018C970
 .equ Adr_NX56_canctrl_data12        ,	0x1018C970

 .equ MSK_NX56_canctrl_data12_data,	0x000000ff
 .equ SRT_NX56_canctrl_data12_data,	0

@ ---------------------------------------------------------------------
@ Register canctrl_rx_message_cnt
@ => CAN RX message counter register
@    Reflects the number of messages available within the RXFIFO. The value is
@    incremented with each receive event and decremented by the release receive
@    buffer command. After any reset event, this register is cleared.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_rx_message_cnt    ,	0x00000074
 .equ Adr_NX56_canctrl_canctrl_rx_message_cnt,	0x1018C974
 .equ Adr_NX56_canctrl_rx_message_cnt        ,	0x1018C974

 .equ MSK_NX56_canctrl_rx_message_cnt_rx_msg_cnt,	0x0000007f
 .equ SRT_NX56_canctrl_rx_message_cnt_rx_msg_cnt,	0

@ ---------------------------------------------------------------------
@ Register canctrl_mode_control
@ => CAN mode control register, only writeable in reset mode
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_mode_control    ,	0x0000007C
 .equ Adr_NX56_canctrl_canctrl_mode_control,	0x1018C97C
 .equ Adr_NX56_canctrl_mode_control        ,	0x1018C97C

 .equ MSK_NX56_canctrl_mode_control_mode,	0x00000080
 .equ SRT_NX56_canctrl_mode_control_mode,	7

@ ---------------------------------------------------------------------
@ Register canctrl_arm_xpic_irq_enable
@ => CAN IRQ Enable register for ARM and XPIC
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_canctrl_arm_xpic_irq_enable    ,	0x00000080
 .equ Adr_NX56_canctrl_canctrl_arm_xpic_irq_enable,	0x1018C980
 .equ Adr_NX56_canctrl_arm_xpic_irq_enable        ,	0x1018C980

 .equ MSK_NX56_canctrl_arm_xpic_irq_enable_arm_irq_enable ,	0x00000001
 .equ SRT_NX56_canctrl_arm_xpic_irq_enable_arm_irq_enable ,	0
 .equ MSK_NX56_canctrl_arm_xpic_irq_enable_xpic_irq_enable,	0x00000002
 .equ SRT_NX56_canctrl_arm_xpic_irq_enable_xpic_irq_enable,	1


@ =====================================================================
@
@ Area of dmac
@
@ =====================================================================

 .equ Addr_NX56_dmac, 0x1018D000

@ =====================================================================
@
@ Area of dmac_ch0, dmac_ch1, dmac_ch2
@
@ =====================================================================

 .equ Addr_NX56_dmac_ch0, 0x1018D100
 .equ Addr_NX56_dmac_ch1, 0x1018D120
 .equ Addr_NX56_dmac_ch2, 0x1018D140

@ ---------------------------------------------------------------------
@ Register dmac_chsrc_ad
@ => channel source address registers
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_chsrc_ad     ,	0x00000000
 .equ Adr_NX56_dmac_ch0_dmac_chsrc_ad,	0x1018D100
 .equ Adr_NX56_dmac_ch1_dmac_chsrc_ad,	0x1018D120
 .equ Adr_NX56_dmac_ch2_dmac_chsrc_ad,	0x1018D140

 .equ MSK_NX56_dmac_chsrc_ad_DMACCHSRCADDR,	0xffffffff
 .equ SRT_NX56_dmac_chsrc_ad_DMACCHSRCADDR,	0

@ ---------------------------------------------------------------------
@ Register dmac_chdest_ad
@ => channel destination address registers
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_chdest_ad     ,	0x00000004
 .equ Adr_NX56_dmac_ch0_dmac_chdest_ad,	0x1018D104
 .equ Adr_NX56_dmac_ch1_dmac_chdest_ad,	0x1018D124
 .equ Adr_NX56_dmac_ch2_dmac_chdest_ad,	0x1018D144

 .equ MSK_NX56_dmac_chdest_ad_DMACCHDESTADDR,	0xffffffff
 .equ SRT_NX56_dmac_chdest_ad_DMACCHDESTADDR,	0

@ ---------------------------------------------------------------------
@ Register dmac_chlink
@ => channel linked list item register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_chlink     ,	0x00000008
 .equ Adr_NX56_dmac_ch0_dmac_chlink,	0x1018D108
 .equ Adr_NX56_dmac_ch1_dmac_chlink,	0x1018D128
 .equ Adr_NX56_dmac_ch2_dmac_chlink,	0x1018D148

 .equ MSK_NX56_dmac_chlink_LLIADDR,	0xfffffffc
 .equ SRT_NX56_dmac_chlink_LLIADDR,	2

@ ---------------------------------------------------------------------
@ Register dmac_chctrl
@ => channel control registers
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_chctrl     ,	0x0000000C
 .equ Adr_NX56_dmac_ch0_dmac_chctrl,	0x1018D10C
 .equ Adr_NX56_dmac_ch1_dmac_chctrl,	0x1018D12C
 .equ Adr_NX56_dmac_ch2_dmac_chctrl,	0x1018D14C

 .equ MSK_NX56_dmac_chctrl_TransferSize,	0x00000fff
 .equ SRT_NX56_dmac_chctrl_TransferSize,	0
 .equ MSK_NX56_dmac_chctrl_SBSize      ,	0x00007000
 .equ SRT_NX56_dmac_chctrl_SBSize      ,	12
 .equ MSK_NX56_dmac_chctrl_DBSize      ,	0x00038000
 .equ SRT_NX56_dmac_chctrl_DBSize      ,	15
 .equ MSK_NX56_dmac_chctrl_SWidth      ,	0x001c0000
 .equ SRT_NX56_dmac_chctrl_SWidth      ,	18
 .equ MSK_NX56_dmac_chctrl_DWidth      ,	0x00e00000
 .equ SRT_NX56_dmac_chctrl_DWidth      ,	21
 .equ MSK_NX56_dmac_chctrl_ARM_EQ      ,	0x01000000
 .equ SRT_NX56_dmac_chctrl_ARM_EQ      ,	24
 .equ MSK_NX56_dmac_chctrl_SI          ,	0x04000000
 .equ SRT_NX56_dmac_chctrl_SI          ,	26
 .equ MSK_NX56_dmac_chctrl_DI          ,	0x08000000
 .equ SRT_NX56_dmac_chctrl_DI          ,	27
 .equ MSK_NX56_dmac_chctrl_Prot        ,	0x70000000
 .equ SRT_NX56_dmac_chctrl_Prot        ,	28
 .equ MSK_NX56_dmac_chctrl_I           ,	0x80000000
 .equ SRT_NX56_dmac_chctrl_I           ,	31

@ ---------------------------------------------------------------------
@ Register dmac_chcfg
@ => channel configuration registers
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_chcfg     ,	0x00000010
 .equ Adr_NX56_dmac_ch0_dmac_chcfg,	0x1018D110
 .equ Adr_NX56_dmac_ch1_dmac_chcfg,	0x1018D130
 .equ Adr_NX56_dmac_ch2_dmac_chcfg,	0x1018D150

 .equ MSK_NX56_dmac_chcfg_E             ,	0x00000001
 .equ SRT_NX56_dmac_chcfg_E             ,	0
 .equ MSK_NX56_dmac_chcfg_SrcPeripheral ,	0x0000001e
 .equ SRT_NX56_dmac_chcfg_SrcPeripheral ,	1
 .equ MSK_NX56_dmac_chcfg_DestPeripheral,	0x000003c0
 .equ SRT_NX56_dmac_chcfg_DestPeripheral,	6
 .equ MSK_NX56_dmac_chcfg_FlowCntrl     ,	0x00003800
 .equ SRT_NX56_dmac_chcfg_FlowCntrl     ,	11
 .equ MSK_NX56_dmac_chcfg_IE            ,	0x00004000
 .equ SRT_NX56_dmac_chcfg_IE            ,	14
 .equ MSK_NX56_dmac_chcfg_ITC           ,	0x00008000
 .equ SRT_NX56_dmac_chcfg_ITC           ,	15
 .equ MSK_NX56_dmac_chcfg_L             ,	0x00010000
 .equ SRT_NX56_dmac_chcfg_L             ,	16
 .equ MSK_NX56_dmac_chcfg_A             ,	0x00020000
 .equ SRT_NX56_dmac_chcfg_A             ,	17
 .equ MSK_NX56_dmac_chcfg_H             ,	0x00040000
 .equ SRT_NX56_dmac_chcfg_H             ,	18


@ =====================================================================
@
@ Area of dmac_reg
@
@ =====================================================================

 .equ Addr_NX56_dmac_reg, 0x1018D800

@ ---------------------------------------------------------------------
@ Register dmac_int_status
@ => interrupt status register
@    reset value 0x0
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_int_status     ,	0x00000000
 .equ Adr_NX56_dmac_reg_dmac_int_status,	0x1018D800
 .equ Adr_NX56_dmac_int_status         ,	0x1018D800

 .equ MSK_NX56_dmac_int_status_DMACINT_ch0,	0x00000001
 .equ SRT_NX56_dmac_int_status_DMACINT_ch0,	0
 .equ MSK_NX56_dmac_int_status_DMACINT_ch1,	0x00000002
 .equ SRT_NX56_dmac_int_status_DMACINT_ch1,	1
 .equ MSK_NX56_dmac_int_status_DMACINT_ch2,	0x00000004
 .equ SRT_NX56_dmac_int_status_DMACINT_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_inttc_status
@ => interrupt terminal count status register
@    reset value 0x0
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_inttc_status     ,	0x00000004
 .equ Adr_NX56_dmac_reg_dmac_inttc_status,	0x1018D804
 .equ Adr_NX56_dmac_inttc_status         ,	0x1018D804

 .equ MSK_NX56_dmac_inttc_status_DMACINTTC_ch0,	0x00000001
 .equ SRT_NX56_dmac_inttc_status_DMACINTTC_ch0,	0
 .equ MSK_NX56_dmac_inttc_status_DMACINTTC_ch1,	0x00000002
 .equ SRT_NX56_dmac_inttc_status_DMACINTTC_ch1,	1
 .equ MSK_NX56_dmac_inttc_status_DMACINTTC_ch2,	0x00000004
 .equ SRT_NX56_dmac_inttc_status_DMACINTTC_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_inttc_clear
@ => interrupt terminal count clear register
@    reset value 0x0
@ => Mode: W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_inttc_clear     ,	0x00000008
 .equ Adr_NX56_dmac_reg_dmac_inttc_clear,	0x1018D808
 .equ Adr_NX56_dmac_inttc_clear         ,	0x1018D808

 .equ MSK_NX56_dmac_inttc_clear_DMACINTTCCLR_ch0,	0x00000001
 .equ SRT_NX56_dmac_inttc_clear_DMACINTTCCLR_ch0,	0
 .equ MSK_NX56_dmac_inttc_clear_DMACINTTCCLR_ch1,	0x00000002
 .equ SRT_NX56_dmac_inttc_clear_DMACINTTCCLR_ch1,	1
 .equ MSK_NX56_dmac_inttc_clear_DMACINTTCCLR_ch2,	0x00000004
 .equ SRT_NX56_dmac_inttc_clear_DMACINTTCCLR_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_interr_status
@ => interrupt error status register
@    reset value 0x0
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_interr_status     ,	0x0000000C
 .equ Adr_NX56_dmac_reg_dmac_interr_status,	0x1018D80C
 .equ Adr_NX56_dmac_interr_status         ,	0x1018D80C

 .equ MSK_NX56_dmac_interr_status_DMACINTERR_ch0,	0x00000001
 .equ SRT_NX56_dmac_interr_status_DMACINTERR_ch0,	0
 .equ MSK_NX56_dmac_interr_status_DMACINTERR_ch1,	0x00000002
 .equ SRT_NX56_dmac_interr_status_DMACINTERR_ch1,	1
 .equ MSK_NX56_dmac_interr_status_DMACINTERR_ch2,	0x00000004
 .equ SRT_NX56_dmac_interr_status_DMACINTERR_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_interr_clear
@ => interrupt error clear register
@    reset value 0x0
@ => Mode: W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_interr_clear     ,	0x00000010
 .equ Adr_NX56_dmac_reg_dmac_interr_clear,	0x1018D810
 .equ Adr_NX56_dmac_interr_clear         ,	0x1018D810

 .equ MSK_NX56_dmac_interr_clear_DMACINTERRCLR_ch0,	0x00000001
 .equ SRT_NX56_dmac_interr_clear_DMACINTERRCLR_ch0,	0
 .equ MSK_NX56_dmac_interr_clear_DMACINTERRCLR_ch1,	0x00000002
 .equ SRT_NX56_dmac_interr_clear_DMACINTERRCLR_ch1,	1
 .equ MSK_NX56_dmac_interr_clear_DMACINTERRCLR_ch2,	0x00000004
 .equ SRT_NX56_dmac_interr_clear_DMACINTERRCLR_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_rawinttc_status
@ => raw interrupt terminal count status register
@    reset value 0x0
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_rawinttc_status     ,	0x00000014
 .equ Adr_NX56_dmac_reg_dmac_rawinttc_status,	0x1018D814
 .equ Adr_NX56_dmac_rawinttc_status         ,	0x1018D814

 .equ MSK_NX56_dmac_rawinttc_status_DMACRAWINTTC_ch0,	0x00000001
 .equ SRT_NX56_dmac_rawinttc_status_DMACRAWINTTC_ch0,	0
 .equ MSK_NX56_dmac_rawinttc_status_DMACRAWINTTC_ch1,	0x00000002
 .equ SRT_NX56_dmac_rawinttc_status_DMACRAWINTTC_ch1,	1
 .equ MSK_NX56_dmac_rawinttc_status_DMACRAWINTTC_ch2,	0x00000004
 .equ SRT_NX56_dmac_rawinttc_status_DMACRAWINTTC_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_rawinterr_status
@ => raw interrupt error status register
@    reset value 0x0
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_rawinterr_status     ,	0x00000018
 .equ Adr_NX56_dmac_reg_dmac_rawinterr_status,	0x1018D818
 .equ Adr_NX56_dmac_rawinterr_status         ,	0x1018D818

 .equ MSK_NX56_dmac_rawinterr_status_DMACRAWINTERR_ch0,	0x00000001
 .equ SRT_NX56_dmac_rawinterr_status_DMACRAWINTERR_ch0,	0
 .equ MSK_NX56_dmac_rawinterr_status_DMACRAWINTERR_ch1,	0x00000002
 .equ SRT_NX56_dmac_rawinterr_status_DMACRAWINTERR_ch1,	1
 .equ MSK_NX56_dmac_rawinterr_status_DMACRAWINTERR_ch2,	0x00000004
 .equ SRT_NX56_dmac_rawinterr_status_DMACRAWINTERR_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_enabled_channel
@ => channel enable register
@    reset value 0x0
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_enabled_channel     ,	0x0000001C
 .equ Adr_NX56_dmac_reg_dmac_enabled_channel,	0x1018D81C
 .equ Adr_NX56_dmac_enabled_channel         ,	0x1018D81C

 .equ MSK_NX56_dmac_enabled_channel_DMACENABLEDCHNS_ch0,	0x00000001
 .equ SRT_NX56_dmac_enabled_channel_DMACENABLEDCHNS_ch0,	0
 .equ MSK_NX56_dmac_enabled_channel_DMACENABLEDCHNS_ch1,	0x00000002
 .equ SRT_NX56_dmac_enabled_channel_DMACENABLEDCHNS_ch1,	1
 .equ MSK_NX56_dmac_enabled_channel_DMACENABLEDCHNS_ch2,	0x00000004
 .equ SRT_NX56_dmac_enabled_channel_DMACENABLEDCHNS_ch2,	2

@ ---------------------------------------------------------------------
@ Register dmac_softb_req
@ => software burst request register
@    reset value 0x0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_softb_req     ,	0x00000020
 .equ Adr_NX56_dmac_reg_dmac_softb_req,	0x1018D820
 .equ Adr_NX56_dmac_softb_req         ,	0x1018D820

 .equ MSK_NX56_dmac_softb_req_DMACSoftBReq,	0x0000ffff
 .equ SRT_NX56_dmac_softb_req_DMACSoftBReq,	0

@ ---------------------------------------------------------------------
@ Register dmac_softs_req
@ => software single request register
@    reset value 0x0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_softs_req     ,	0x00000024
 .equ Adr_NX56_dmac_reg_dmac_softs_req,	0x1018D824
 .equ Adr_NX56_dmac_softs_req         ,	0x1018D824

 .equ MSK_NX56_dmac_softs_req_DMACSoftSReq,	0x0000ffff
 .equ SRT_NX56_dmac_softs_req_DMACSoftSReq,	0

@ ---------------------------------------------------------------------
@ Register dmac_softlb_req
@ => software last burst request register
@    reset value 0x0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_softlb_req     ,	0x00000028
 .equ Adr_NX56_dmac_reg_dmac_softlb_req,	0x1018D828
 .equ Adr_NX56_dmac_softlb_req         ,	0x1018D828

 .equ MSK_NX56_dmac_softlb_req_DMACSoftLBReq,	0x0000ffff
 .equ SRT_NX56_dmac_softlb_req_DMACSoftLBReq,	0

@ ---------------------------------------------------------------------
@ Register dmac_softls_req
@ => software last single request register
@    reset value 0x0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_softls_req     ,	0x0000002C
 .equ Adr_NX56_dmac_reg_dmac_softls_req,	0x1018D82C
 .equ Adr_NX56_dmac_softls_req         ,	0x1018D82C

 .equ MSK_NX56_dmac_softls_req_DMACSoftLSReq,	0x0000ffff
 .equ SRT_NX56_dmac_softls_req_DMACSoftLSReq,	0

@ ---------------------------------------------------------------------
@ Register dmac_config
@ => configuration register
@    reset value 0x0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_config     ,	0x00000030
 .equ Adr_NX56_dmac_reg_dmac_config,	0x1018D830
 .equ Adr_NX56_dmac_config         ,	0x1018D830

 .equ MSK_NX56_dmac_config_DMACENABLE,	0x00000001
 .equ SRT_NX56_dmac_config_DMACENABLE,	0

@ ---------------------------------------------------------------------
@ Register dmac_sync
@ => sync register
@    DMA synchronization logic for DMA request signals enabled or disabled
@    A 1'b0 bit indicates that the synchronization logic for
@    the DMACBREQ[15:0], DMACSREQ[15:0], DMACLBREQ[15:0], and DMACLSREQ[15:0] request signals is enabled.
@    A HIGH bit indicates that the synchronization logic is disabled.
@    reset value 0x0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_dmac_sync     ,	0x00000034
 .equ Adr_NX56_dmac_reg_dmac_sync,	0x1018D834
 .equ Adr_NX56_dmac_sync         ,	0x1018D834

 .equ MSK_NX56_dmac_sync_DIS_SYNC_SQI_RX  ,	0x00000001
 .equ SRT_NX56_dmac_sync_DIS_SYNC_SQI_RX  ,	0
 .equ MSK_NX56_dmac_sync_DIS_SYNC_SQI_TX  ,	0x00000002
 .equ SRT_NX56_dmac_sync_DIS_SYNC_SQI_TX  ,	1
 .equ MSK_NX56_dmac_sync_DIS_SYNC_SPI1_RX ,	0x00000004
 .equ SRT_NX56_dmac_sync_DIS_SYNC_SPI1_RX ,	2
 .equ MSK_NX56_dmac_sync_DIS_SYNC_SPI1_TX ,	0x00000008
 .equ SRT_NX56_dmac_sync_DIS_SYNC_SPI1_TX ,	3
 .equ MSK_NX56_dmac_sync_DIS_SYNC_UART0_RX,	0x00000010
 .equ SRT_NX56_dmac_sync_DIS_SYNC_UART0_RX,	4
 .equ MSK_NX56_dmac_sync_DIS_SYNC_UART0_TX,	0x00000020
 .equ SRT_NX56_dmac_sync_DIS_SYNC_UART0_TX,	5
 .equ MSK_NX56_dmac_sync_DIS_SYNC_UART1_RX,	0x00000040
 .equ SRT_NX56_dmac_sync_DIS_SYNC_UART1_RX,	6
 .equ MSK_NX56_dmac_sync_DIS_SYNC_UART1_TX,	0x00000080
 .equ SRT_NX56_dmac_sync_DIS_SYNC_UART1_TX,	7
 .equ MSK_NX56_dmac_sync_DIS_SYNC_UART2_RX,	0x00000100
 .equ SRT_NX56_dmac_sync_DIS_SYNC_UART2_RX,	8
 .equ MSK_NX56_dmac_sync_DIS_SYNC_UART2_TX,	0x00000200
 .equ SRT_NX56_dmac_sync_DIS_SYNC_UART2_TX,	9
 .equ MSK_NX56_dmac_sync_DIS_SYNC_ETH_RX  ,	0x00000400
 .equ SRT_NX56_dmac_sync_DIS_SYNC_ETH_RX  ,	10
 .equ MSK_NX56_dmac_sync_DIS_SYNC_ETH_TX  ,	0x00000800
 .equ SRT_NX56_dmac_sync_DIS_SYNC_ETH_TX  ,	11
 .equ MSK_NX56_dmac_sync_DIS_SYNC_I2C0_RX ,	0x00001000
 .equ SRT_NX56_dmac_sync_DIS_SYNC_I2C0_RX ,	12
 .equ MSK_NX56_dmac_sync_DIS_SYNC_I2C0_TX ,	0x00002000
 .equ SRT_NX56_dmac_sync_DIS_SYNC_I2C0_TX ,	13
 .equ MSK_NX56_dmac_sync_DIS_SYNC_USB_RX  ,	0x00004000
 .equ SRT_NX56_dmac_sync_DIS_SYNC_USB_RX  ,	14
 .equ MSK_NX56_dmac_sync_DIS_SYNC_USB_TX  ,	0x00008000
 .equ SRT_NX56_dmac_sync_DIS_SYNC_USB_TX  ,	15


@ =====================================================================
@
@ Area of extmemctrl
@
@ =====================================================================

 .equ Addr_NX56_extmemctrl, 0x101C0100

@ =====================================================================
@
@ Area of ext_asyncmem_ctrl, hif_asyncmem_ctrl
@
@ =====================================================================

 .equ Addr_NX56_ext_asyncmem_ctrl, 0x101C0100
 .equ Addr_NX56_hif_asyncmem_ctrl, 0x101C0200

@ ---------------------------------------------------------------------
@ Register extsram0_ctrl
@ => Control Register for external bus interface and wait-states for ExtMem0 chip-select area.
@    External ExtMem0 chip-select area is mapped to netX internal address area 0xC0000000 to 0xC7FFFFFF.
@    External addresses always be byte addresses.
@    For 16 bit memory devices, A0 is used as byte low enable. Byte high enable is provided on additional signal.
@    For 32 bit interfaces, A0 and A1 are used as byte enables. Additionally there are 2 further byte enable signals provided.
@    For additional byte-enables/DQM signals view netX pinout documentation.
@    For all wait state configuration 1 cycle is 1 netx system clock cycle, i.e. 10ns for netX running on 100MHz at normal operation.
@    Note: Pause and data width configuration is compatible to netx500/100 and netx50.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extsram0_ctrl              ,	0x00000000
 .equ Adr_NX56_ext_asyncmem_ctrl_extsram0_ctrl,	0x101C0100
 .equ Adr_NX56_hif_asyncmem_ctrl_extsram0_ctrl,	0x101C0200

 .equ MSK_NX56_extsram0_ctrl_ws              ,	0x0000003f
 .equ SRT_NX56_extsram0_ctrl_ws              ,	0
 .equ MSK_NX56_extsram0_ctrl_p_pre           ,	0x00000300
 .equ SRT_NX56_extsram0_ctrl_p_pre           ,	8
 .equ MSK_NX56_extsram0_ctrl_p_post          ,	0x00030000
 .equ SRT_NX56_extsram0_ctrl_p_post          ,	16
 .equ MSK_NX56_extsram0_ctrl_dwidth          ,	0x03000000
 .equ SRT_NX56_extsram0_ctrl_dwidth          ,	24
 .equ MSK_NX56_extsram0_ctrl_no_p_pre_seq_rd ,	0x10000000
 .equ SRT_NX56_extsram0_ctrl_no_p_pre_seq_rd ,	28
 .equ MSK_NX56_extsram0_ctrl_no_p_post_seq_rd,	0x20000000
 .equ SRT_NX56_extsram0_ctrl_no_p_post_seq_rd,	29
 .equ MSK_NX56_extsram0_ctrl_static_cs       ,	0x40000000
 .equ SRT_NX56_extsram0_ctrl_static_cs       ,	30
 .equ MSK_NX56_extsram0_ctrl_ready_en        ,	0x80000000
 .equ SRT_NX56_extsram0_ctrl_ready_en        ,	31

@ ---------------------------------------------------------------------
@ Register extsram1_ctrl
@ => Control Register for external bus interface and wait-states for ExtMem1 chip-select area.
@    External ExtMem1 chip-select area is mapped to netX internal address area 0xC8000000 to 0xCFFFFFFF.
@    For detailed register description view extsram0_ctrl register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extsram1_ctrl              ,	0x00000004
 .equ Adr_NX56_ext_asyncmem_ctrl_extsram1_ctrl,	0x101C0104
 .equ Adr_NX56_hif_asyncmem_ctrl_extsram1_ctrl,	0x101C0204

 .equ MSK_NX56_extsram1_ctrl_ws              ,	0x0000003f
 .equ SRT_NX56_extsram1_ctrl_ws              ,	0
 .equ MSK_NX56_extsram1_ctrl_p_pre           ,	0x00000300
 .equ SRT_NX56_extsram1_ctrl_p_pre           ,	8
 .equ MSK_NX56_extsram1_ctrl_p_post          ,	0x00030000
 .equ SRT_NX56_extsram1_ctrl_p_post          ,	16
 .equ MSK_NX56_extsram1_ctrl_dwidth          ,	0x03000000
 .equ SRT_NX56_extsram1_ctrl_dwidth          ,	24
 .equ MSK_NX56_extsram1_ctrl_no_p_pre_seq_rd ,	0x10000000
 .equ SRT_NX56_extsram1_ctrl_no_p_pre_seq_rd ,	28
 .equ MSK_NX56_extsram1_ctrl_no_p_post_seq_rd,	0x20000000
 .equ SRT_NX56_extsram1_ctrl_no_p_post_seq_rd,	29
 .equ MSK_NX56_extsram1_ctrl_static_cs       ,	0x40000000
 .equ SRT_NX56_extsram1_ctrl_static_cs       ,	30
 .equ MSK_NX56_extsram1_ctrl_ready_en        ,	0x80000000
 .equ SRT_NX56_extsram1_ctrl_ready_en        ,	31

@ ---------------------------------------------------------------------
@ Register extsram2_ctrl
@ => Control Register for external bus interface and wait-states for ExtMem1 chip-select area.
@    External ExtMem2 chip-select area is mapped to netX internal address area 0xD0000000 to 0xD7FFFFFF.
@    For detailed register description view extsram0_ctrl register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extsram2_ctrl              ,	0x00000008
 .equ Adr_NX56_ext_asyncmem_ctrl_extsram2_ctrl,	0x101C0108
 .equ Adr_NX56_hif_asyncmem_ctrl_extsram2_ctrl,	0x101C0208

 .equ MSK_NX56_extsram2_ctrl_ws              ,	0x0000003f
 .equ SRT_NX56_extsram2_ctrl_ws              ,	0
 .equ MSK_NX56_extsram2_ctrl_p_pre           ,	0x00000300
 .equ SRT_NX56_extsram2_ctrl_p_pre           ,	8
 .equ MSK_NX56_extsram2_ctrl_p_post          ,	0x00030000
 .equ SRT_NX56_extsram2_ctrl_p_post          ,	16
 .equ MSK_NX56_extsram2_ctrl_dwidth          ,	0x03000000
 .equ SRT_NX56_extsram2_ctrl_dwidth          ,	24
 .equ MSK_NX56_extsram2_ctrl_no_p_pre_seq_rd ,	0x10000000
 .equ SRT_NX56_extsram2_ctrl_no_p_pre_seq_rd ,	28
 .equ MSK_NX56_extsram2_ctrl_no_p_post_seq_rd,	0x20000000
 .equ SRT_NX56_extsram2_ctrl_no_p_post_seq_rd,	29
 .equ MSK_NX56_extsram2_ctrl_static_cs       ,	0x40000000
 .equ SRT_NX56_extsram2_ctrl_static_cs       ,	30
 .equ MSK_NX56_extsram2_ctrl_ready_en        ,	0x80000000
 .equ SRT_NX56_extsram2_ctrl_ready_en        ,	31

@ ---------------------------------------------------------------------
@ Register extsram3_ctrl
@ => Control Register for external bus interface and wait-states for ExtMem1 chip-select area.
@    External ExtMem3 chip-select area is mapped to netX internal address area 0xD8000000 to 0xDFFFFFFF.
@    For detailed register description view extsram0_ctrl register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extsram3_ctrl              ,	0x0000000C
 .equ Adr_NX56_ext_asyncmem_ctrl_extsram3_ctrl,	0x101C010C
 .equ Adr_NX56_hif_asyncmem_ctrl_extsram3_ctrl,	0x101C020C

 .equ MSK_NX56_extsram3_ctrl_ws              ,	0x0000003f
 .equ SRT_NX56_extsram3_ctrl_ws              ,	0
 .equ MSK_NX56_extsram3_ctrl_p_pre           ,	0x00000300
 .equ SRT_NX56_extsram3_ctrl_p_pre           ,	8
 .equ MSK_NX56_extsram3_ctrl_p_post          ,	0x00030000
 .equ SRT_NX56_extsram3_ctrl_p_post          ,	16
 .equ MSK_NX56_extsram3_ctrl_dwidth          ,	0x03000000
 .equ SRT_NX56_extsram3_ctrl_dwidth          ,	24
 .equ MSK_NX56_extsram3_ctrl_no_p_pre_seq_rd ,	0x10000000
 .equ SRT_NX56_extsram3_ctrl_no_p_pre_seq_rd ,	28
 .equ MSK_NX56_extsram3_ctrl_no_p_post_seq_rd,	0x20000000
 .equ SRT_NX56_extsram3_ctrl_no_p_post_seq_rd,	29
 .equ MSK_NX56_extsram3_ctrl_static_cs       ,	0x40000000
 .equ SRT_NX56_extsram3_ctrl_static_cs       ,	30
 .equ MSK_NX56_extsram3_ctrl_ready_en        ,	0x80000000
 .equ SRT_NX56_extsram3_ctrl_ready_en        ,	31

@ ---------------------------------------------------------------------
@ Register ext_cs0_apm_ctrl
@ => Asynchronous Page Mode (APM) Control Register for ExtMem0 chip-select area.
@    Only ExtMem0 chip-select area supports fast Asynchronous-Page-Mode (APM) Access.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ext_cs0_apm_ctrl              ,	0x00000010
 .equ Adr_NX56_ext_asyncmem_ctrl_ext_cs0_apm_ctrl,	0x101C0110
 .equ Adr_NX56_hif_asyncmem_ctrl_ext_cs0_apm_ctrl,	0x101C0210

 .equ MSK_NX56_ext_cs0_apm_ctrl_ws_apm ,	0x0000000f
 .equ SRT_NX56_ext_cs0_apm_ctrl_ws_apm ,	0
 .equ MSK_NX56_ext_cs0_apm_ctrl_apm_cfg,	0x00000700
 .equ SRT_NX56_ext_cs0_apm_ctrl_apm_cfg,	8

@ ---------------------------------------------------------------------
@ Register ext_rdy_cfg
@ => External Memory Ready Control Register.
@    Note: Timeout is generated if ready usage is enabled by the extsramX_ctrl registers and is not asserted to active state within 10us.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ext_rdy_cfg              ,	0x00000020
 .equ Adr_NX56_ext_asyncmem_ctrl_ext_rdy_cfg,	0x101C0120
 .equ Adr_NX56_hif_asyncmem_ctrl_ext_rdy_cfg,	0x101C0220

 .equ MSK_NX56_ext_rdy_cfg_rdy_act_level,	0x00000001
 .equ SRT_NX56_ext_rdy_cfg_rdy_act_level,	0
 .equ MSK_NX56_ext_rdy_cfg_rdy_filter   ,	0x00000030
 .equ SRT_NX56_ext_rdy_cfg_rdy_filter   ,	4
 .equ MSK_NX56_ext_rdy_cfg_rdy_to_irq_en,	0x00000100
 .equ SRT_NX56_ext_rdy_cfg_rdy_to_irq_en,	8
 .equ MSK_NX56_ext_rdy_cfg_rdy_to_dis   ,	0x00000800
 .equ SRT_NX56_ext_rdy_cfg_rdy_to_dis   ,	11

@ ---------------------------------------------------------------------
@ Register ext_rdy_status
@ => External Memory Ready Status Register.
@    Note: Timeout is generated if ready usage is enabled by the extsramX_ctrl registers and is not asserted to active state within 10us.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_ext_rdy_status              ,	0x00000024
 .equ Adr_NX56_ext_asyncmem_ctrl_ext_rdy_status,	0x101C0124
 .equ Adr_NX56_hif_asyncmem_ctrl_ext_rdy_status,	0x101C0224

 .equ MSK_NX56_ext_rdy_status_rdy_to_err_adr,	0x07ffffff
 .equ SRT_NX56_ext_rdy_status_rdy_to_err_adr,	0
 .equ MSK_NX56_ext_rdy_status_rdy_to_err_cs ,	0x30000000
 .equ SRT_NX56_ext_rdy_status_rdy_to_err_cs ,	28
 .equ MSK_NX56_ext_rdy_status_rdy_to_err    ,	0x80000000
 .equ SRT_NX56_ext_rdy_status_rdy_to_err    ,	31


@ =====================================================================
@
@ Area of ext_sdram_ctrl, hif_sdram_ctrl
@
@ =====================================================================

 .equ Addr_NX56_ext_sdram_ctrl, 0x101C0140
 .equ Addr_NX56_hif_sdram_ctrl, 0x101C0240

@ ---------------------------------------------------------------------
@ Register sdram_general_ctrl
@ => Control Register for external SDRAM access.
@    For initializing procedure netX SDRAM Controller view description of 'ctrl_en' bit inside this register.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sdram_general_ctrl           ,	0x00000000
 .equ Adr_NX56_ext_sdram_ctrl_sdram_general_ctrl,	0x101C0140
 .equ Adr_NX56_hif_sdram_ctrl_sdram_general_ctrl,	0x101C0240

 .equ MSK_NX56_sdram_general_ctrl_banks         ,	0x00000003
 .equ SRT_NX56_sdram_general_ctrl_banks         ,	0
 .equ MSK_NX56_sdram_general_ctrl_rows          ,	0x00000030
 .equ SRT_NX56_sdram_general_ctrl_rows          ,	4
 .equ MSK_NX56_sdram_general_ctrl_columns       ,	0x00000700
 .equ SRT_NX56_sdram_general_ctrl_columns       ,	8
 .equ MSK_NX56_sdram_general_ctrl_dbus32        ,	0x00010000
 .equ SRT_NX56_sdram_general_ctrl_dbus32        ,	16
 .equ MSK_NX56_sdram_general_ctrl_sdram_pwdn    ,	0x00020000
 .equ SRT_NX56_sdram_general_ctrl_sdram_pwdn    ,	17
 .equ MSK_NX56_sdram_general_ctrl_extclk_en     ,	0x00040000
 .equ SRT_NX56_sdram_general_ctrl_extclk_en     ,	18
 .equ MSK_NX56_sdram_general_ctrl_ctrl_en       ,	0x00080000
 .equ SRT_NX56_sdram_general_ctrl_ctrl_en       ,	19
 .equ MSK_NX56_sdram_general_ctrl_refresh_mode  ,	0x03000000
 .equ SRT_NX56_sdram_general_ctrl_refresh_mode  ,	24
 .equ MSK_NX56_sdram_general_ctrl_sdram_ready   ,	0x40000000
 .equ SRT_NX56_sdram_general_ctrl_sdram_ready   ,	30
 .equ MSK_NX56_sdram_general_ctrl_refresh_status,	0x80000000
 .equ SRT_NX56_sdram_general_ctrl_refresh_status,	31

@ ---------------------------------------------------------------------
@ Register sdram_timing_ctrl
@ => Control Register for external SDRAM access.
@    Changes can only be done, if the SDRAM-Controller is disabled (sdram_general_ctrl.ctrl_en == 0)
@    to avoid configuration problems.
@    Please view description of 'ctrl_en' bit inside sdram_general_ctrl register for initializing-procedure of netX SDRAM Controller.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sdram_timing_ctrl           ,	0x00000004
 .equ Adr_NX56_ext_sdram_ctrl_sdram_timing_ctrl,	0x101C0144
 .equ Adr_NX56_hif_sdram_ctrl_sdram_timing_ctrl,	0x101C0244

 .equ MSK_NX56_sdram_timing_ctrl_t_RCD            ,	0x00000003
 .equ SRT_NX56_sdram_timing_ctrl_t_RCD            ,	0
 .equ MSK_NX56_sdram_timing_ctrl_t_WR             ,	0x00000030
 .equ SRT_NX56_sdram_timing_ctrl_t_WR             ,	4
 .equ MSK_NX56_sdram_timing_ctrl_t_RP             ,	0x000000c0
 .equ SRT_NX56_sdram_timing_ctrl_t_RP             ,	6
 .equ MSK_NX56_sdram_timing_ctrl_t_RAS            ,	0x00000700
 .equ SRT_NX56_sdram_timing_ctrl_t_RAS            ,	8
 .equ MSK_NX56_sdram_timing_ctrl_t_RFC            ,	0x0000f000
 .equ SRT_NX56_sdram_timing_ctrl_t_RFC            ,	12
 .equ MSK_NX56_sdram_timing_ctrl_t_REFI           ,	0x00030000
 .equ SRT_NX56_sdram_timing_ctrl_t_REFI           ,	16
 .equ MSK_NX56_sdram_timing_ctrl_mem_sdclk_phase  ,	0x00700000
 .equ SRT_NX56_sdram_timing_ctrl_mem_sdclk_phase  ,	20
 .equ MSK_NX56_sdram_timing_ctrl_mem_sdclk_ssneg  ,	0x00800000
 .equ SRT_NX56_sdram_timing_ctrl_mem_sdclk_ssneg  ,	23
 .equ MSK_NX56_sdram_timing_ctrl_data_sample_phase,	0x07000000
 .equ SRT_NX56_sdram_timing_ctrl_data_sample_phase,	24
 .equ MSK_NX56_sdram_timing_ctrl_bypass_neg_delay ,	0x10000000
 .equ SRT_NX56_sdram_timing_ctrl_bypass_neg_delay ,	28

@ ---------------------------------------------------------------------
@ Register sdram_mr
@ => Mode Register for SDRAM device.
@    Changes can only be done, if the SDRAM-Controller is disabled (sdram_general_ctrl.ctrl_en == 0)
@    to avoid configuration problems.
@    The SDRAM Mode Registers of the used SDRAM device will be set after enabling the SDRAM Controller in the 200us
@    SDRAM memory initialisation procedure. It is part of the SDRAM device and programmed by the LOAD MODE REGISTER command.
@    For details of SDRAM Mode Register view datasheet of used SDRAM device.
@    Please view description of 'ctrl_en' bit inside sdram_general_ctrl register for initializing-procedure of netX SDRAM Controller.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sdram_mr           ,	0x00000008
 .equ Adr_NX56_ext_sdram_ctrl_sdram_mr,	0x101C0148
 .equ Adr_NX56_hif_sdram_ctrl_sdram_mr,	0x101C0248

 .equ MSK_NX56_sdram_mr_MR,	0x00003fff
 .equ SRT_NX56_sdram_mr_MR,	0


@ =====================================================================
@
@ Area of extmem_priority_ctrl
@
@ =====================================================================

 .equ Addr_NX56_extmem_priority_ctrl, 0x101C0180

@ ---------------------------------------------------------------------
@ Register extmem_prio_timslot_ctrl
@ =>  Memory interface master timeslot priority control register.
@     This register may be partially locked by the exmem_priority_lock-register in asic_ctrl-address area.
@     Note:
@     Any master can access in one timeslot ((ts_accessrate_mX*ts_length_mX)/64) + 1 times (i.e. at
@     maximum (ts_accessrate_mX)/64 bandwidth on external memory bus, ts_accessrate_mX is programmed
@     by extmem_prio_accesstime_ctrl-register).
@     Priority control will watch data accesses on external memory data bus (SDRAM and non SDRAM),
@     including pauses on non SDRAM-accesses, not including control commands to SDRAM.
@     Any master requesting more accesses will be forced to wait for the remaining timeslot.
@    --------------------------------------------------------
@     Programmable timeslots are:
@        ts_length =  0 :             64 systen clock cycles (i.e  0.64us at 100MHz)
@        ts_length =  1 :            128 systen clock cycles (i.e  1.28us at 100MHz)
@        ts_length =  2 :            256 systen clock cycles (i.e  2.56us at 100MHz)
@        ts_length =  3 :            512 systen clock cycles (i.e  5.12us at 100MHz)
@        ts_length =  4 :           1024 systen clock cycles (i.e 10.24us at 100MHz)
@        ts_length =  5 :           2048 systen clock cycles (i.e 20.48us at 100MHz)
@        ts_length =  6 :           4096 systen clock cycles (i.e 40.96us at 100MHz)
@        ts_length =  7 :           8192 systen clock cycles (i.e 81.92us at 100MHz)
@    --------------------------------------------------------
@     master channel m0: Host Bus Interface  (highest priority)
@     master channel m1: XC
@     master channel m2: LCD-Controller
@     master channel m3: ARM instruction channel
@     master channel m4: ARM data channel  (lowest priority)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extmem_prio_timslot_ctrl                 ,	0x00000000
 .equ Adr_NX56_extmem_priority_ctrl_extmem_prio_timslot_ctrl,	0x101C0180
 .equ Adr_NX56_extmem_prio_timslot_ctrl                     ,	0x101C0180

 .equ MSK_NX56_extmem_prio_timslot_ctrl_ts_length_HIF_mi ,	0x00000007
 .equ SRT_NX56_extmem_prio_timslot_ctrl_ts_length_HIF_mi ,	0
 .equ MSK_NX56_extmem_prio_timslot_ctrl_ts_length_XC_mi  ,	0x00000070
 .equ SRT_NX56_extmem_prio_timslot_ctrl_ts_length_XC_mi  ,	4
 .equ MSK_NX56_extmem_prio_timslot_ctrl_ts_length_LCD_mi ,	0x00000700
 .equ SRT_NX56_extmem_prio_timslot_ctrl_ts_length_LCD_mi ,	8
 .equ MSK_NX56_extmem_prio_timslot_ctrl_ts_length_ARMI_mi,	0x00007000
 .equ SRT_NX56_extmem_prio_timslot_ctrl_ts_length_ARMI_mi,	12
 .equ MSK_NX56_extmem_prio_timslot_ctrl_ts_length_ARMD_mi,	0x00070000
 .equ SRT_NX56_extmem_prio_timslot_ctrl_ts_length_ARMD_mi,	16

@ ---------------------------------------------------------------------
@ Register extmem_prio_accesstime_ctrl
@ =>  Control Register for master channel accesses per timeslot on external meory interface.
@     This register may be partially locked by the exmem_priority_lock-register in asic_ctrl-address area.
@     For detailed priority controlling read note at extmem_prio_timslot_ctrl-register description.
@    --------------------------------------------------------
@     master channel m0: Host Bus Interface  (highest priority)
@     master channel m1: XC
@     master channel m2: LCD-Controller
@     master channel m3: ARM instruction channel
@     master channel m4: ARM data channel  (lowest priority)
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extmem_prio_accesstime_ctrl                 ,	0x00000004
 .equ Adr_NX56_extmem_priority_ctrl_extmem_prio_accesstime_ctrl,	0x101C0184
 .equ Adr_NX56_extmem_prio_accesstime_ctrl                     ,	0x101C0184

 .equ MSK_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_HIF_mi ,	0x0000003f
 .equ SRT_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_HIF_mi ,	0
 .equ MSK_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_XC_mi  ,	0x00000fc0
 .equ SRT_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_XC_mi  ,	6
 .equ MSK_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_LCD_mi ,	0x0003f000
 .equ SRT_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_LCD_mi ,	12
 .equ MSK_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_ARMI_mi,	0x00fc0000
 .equ SRT_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_ARMI_mi,	18
 .equ MSK_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_ARMD_mi,	0x3f000000
 .equ SRT_NX56_extmem_prio_accesstime_ctrl_ts_accessrate_ARMD_mi,	24


@ =====================================================================
@
@ Area of extmem_pio_ctrl
@
@ =====================================================================

 .equ Addr_NX56_extmem_pio_ctrl, 0x101C01C0

@ ---------------------------------------------------------------------
@ Register extmem_pio_ctrl_mem_d_pio_oe_set_clear
@ => PIO mode output-enable set and clear register for MEM_D_31..16 IOs.
@    Output enables can be set or cleared by writing ones to the appropriate bit-field. PIO
@    function can be shared easily by different tasks or CPUs that way.
@    Reading this register will return the current PIO driving state in both bit fields.
@    ------------------------------------------------------------------------
@    Attention:
@       Hardware could be damaged when any CS-area of MEM-interface is in 32bit mode and PIO mode is enabled!
@       ------------------------------------------------------------------------
@       Before using MEM_D31..16 as PIOs, this must be enabled inside ASIC_CTRL.io_config first. Be careful
@       doing this: PIO settings will have higher priority on MEM-Interface when PIO mode is enabled inside
@       'io_config' and SDRAM or any Extmem CS-area is in 32bit mode (i.e. using MEM_D32..16 at the same
@       time for memory access).
@       Only upper 16 data MEM_D_31..16 lines can be used as PIOs. Hence it is allowed to configure SDRAM and
@       Extmem of MEM-Interface  in a way where MEM_D31 to 16 are not used: i.e. SDRAM can be disabled or in 16 bit
@       mode (ext_sdram_ctrl.sdram_general_ctrl) and Extmem CS areas can be disabled, in 8bit or in 16bit
@       mode (ext_asyncmem_ctrl.extsram0_ctrl to extsram3_ctrl). However all 32bit modes are forbidden.
@       HIF-memory interface is not effected by all this.
@    ------------------------------------------------------------------------
@    Note:
@       If 'set' and 'clear' is programmed to '1' for the same IO in a single access, clear will win.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extmem_pio_ctrl_mem_d_pio_oe_set_clear            ,	0x00000000
 .equ Adr_NX56_extmem_pio_ctrl_extmem_pio_ctrl_mem_d_pio_oe_set_clear,	0x101C01C0
 .equ Adr_NX56_extmem_pio_ctrl_mem_d_pio_oe_set_clear                ,	0x101C01C0

 .equ MSK_NX56_extmem_pio_ctrl_mem_d_pio_oe_set_clear_set  ,	0x0000ffff
 .equ SRT_NX56_extmem_pio_ctrl_mem_d_pio_oe_set_clear_set  ,	0
 .equ MSK_NX56_extmem_pio_ctrl_mem_d_pio_oe_set_clear_clear,	0xffff0000
 .equ SRT_NX56_extmem_pio_ctrl_mem_d_pio_oe_set_clear_clear,	16

@ ---------------------------------------------------------------------
@ Register extmem_pio_ctrl_mem_d_pio_out_set_clear
@ => PIO mode output-level set and clear register for MEM_D_31..16 IOs.
@    View attention-note of 'extmem_pio_ctrl_mem_d_pio_oe_set_clear' register.
@    Output levels can be set or cleared by writing ones to the appropriate bit-field. PIO
@    function can be shared easily by different tasks or CPUs that way.
@    Reading this register will return the current PIO output level in both bit fields.
@    MEM_D IOs will be driven to programmed output-level, when PIO mode is selected form MEM_D31..16 by
@    extmem_pio_ctrl_mem_pio_cfg register and output-enable is set for related IO (extmem_pio_ctrl_mem_d_pio_oe_set_clear).
@    Note:
@       If 'set' and 'clear' is programmed to '1' for the same IO in a single access, clear will win.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extmem_pio_ctrl_mem_d_pio_out_set_clear            ,	0x00000004
 .equ Adr_NX56_extmem_pio_ctrl_extmem_pio_ctrl_mem_d_pio_out_set_clear,	0x101C01C4
 .equ Adr_NX56_extmem_pio_ctrl_mem_d_pio_out_set_clear                ,	0x101C01C4

 .equ MSK_NX56_extmem_pio_ctrl_mem_d_pio_out_set_clear_set  ,	0x0000ffff
 .equ SRT_NX56_extmem_pio_ctrl_mem_d_pio_out_set_clear_set  ,	0
 .equ MSK_NX56_extmem_pio_ctrl_mem_d_pio_out_set_clear_clear,	0xffff0000
 .equ SRT_NX56_extmem_pio_ctrl_mem_d_pio_out_set_clear_clear,	16

@ ---------------------------------------------------------------------
@ Register extmem_pio_ctrl_mem_d_pio_in
@ => PIO input status register for MEM_D IOs.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_extmem_pio_ctrl_mem_d_pio_in            ,	0x00000008
 .equ Adr_NX56_extmem_pio_ctrl_extmem_pio_ctrl_mem_d_pio_in,	0x101C01C8
 .equ Adr_NX56_extmem_pio_ctrl_mem_d_pio_in                ,	0x101C01C8

 .equ MSK_NX56_extmem_pio_ctrl_mem_d_pio_in_in,	0xffff0000
 .equ SRT_NX56_extmem_pio_ctrl_mem_d_pio_in_in,	16


@ =====================================================================
@
@ Area of hifmemctrl
@
@ =====================================================================

 .equ Addr_NX56_hifmemctrl, 0x101C0200

@ =====================================================================
@
@ Area of abort
@
@ =====================================================================

 .equ Addr_NX56_abort, 0x101C0300

@ =====================================================================
@
@ Area of arm_timer
@
@ =====================================================================

 .equ Addr_NX56_arm_timer, 0x101C0380

@ ---------------------------------------------------------------------
@ Register arm_timer_config_timer0
@ => ARM TIMER Config register0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_config_timer0      ,	0x00000000
 .equ Adr_NX56_arm_timer_arm_timer_config_timer0,	0x101C0380
 .equ Adr_NX56_arm_timer_config_timer0          ,	0x101C0380

 .equ MSK_NX56_arm_timer_config_timer0_mode,	0x00000003
 .equ SRT_NX56_arm_timer_config_timer0_mode,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_config_timer1
@ => ARM TIMER Config register1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_config_timer1      ,	0x00000004
 .equ Adr_NX56_arm_timer_arm_timer_config_timer1,	0x101C0384
 .equ Adr_NX56_arm_timer_config_timer1          ,	0x101C0384

 .equ MSK_NX56_arm_timer_config_timer1_mode,	0x00000003
 .equ SRT_NX56_arm_timer_config_timer1_mode,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_preload_timer0
@ => ARM TIMER Timer 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_preload_timer0      ,	0x00000008
 .equ Adr_NX56_arm_timer_arm_timer_preload_timer0,	0x101C0388
 .equ Adr_NX56_arm_timer_preload_timer0          ,	0x101C0388

 .equ MSK_NX56_arm_timer_preload_timer0_val,	0xffffffff
 .equ SRT_NX56_arm_timer_preload_timer0_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_preload_timer1
@ => ARM TIMER Timer 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_preload_timer1      ,	0x0000000C
 .equ Adr_NX56_arm_timer_arm_timer_preload_timer1,	0x101C038C
 .equ Adr_NX56_arm_timer_preload_timer1          ,	0x101C038C

 .equ MSK_NX56_arm_timer_preload_timer1_val,	0xffffffff
 .equ SRT_NX56_arm_timer_preload_timer1_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_timer0
@ => ARM TIMER Timer 0
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_timer0      ,	0x00000010
 .equ Adr_NX56_arm_timer_arm_timer_timer0,	0x101C0390
 .equ Adr_NX56_arm_timer_timer0          ,	0x101C0390

 .equ MSK_NX56_arm_timer_timer0_val,	0xffffffff
 .equ SRT_NX56_arm_timer_timer0_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_timer1
@ => ARM TIMER Timer 1
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_timer1      ,	0x00000014
 .equ Adr_NX56_arm_timer_arm_timer_timer1,	0x101C0394
 .equ Adr_NX56_arm_timer_timer1          ,	0x101C0394

 .equ MSK_NX56_arm_timer_timer1_val,	0xffffffff
 .equ SRT_NX56_arm_timer_timer1_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_s
@ => ARM_TIMER upper SYSTIME register
@    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read.
@    This register should be dedicated to accesses via ARM.
@    xPIC software should access systime via xpic_timer_systime_s.
@    Host software should access systime via DPM at systime_s.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_s      ,	0x00000018
 .equ Adr_NX56_arm_timer_arm_timer_systime_s,	0x101C0398
 .equ Adr_NX56_arm_timer_systime_s          ,	0x101C0398

 .equ MSK_NX56_arm_timer_systime_s_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_s_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_ns
@ => ARM_TIMER lower SYSTIME register
@    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read.
@    If no systime_s is read before (e.g. at 2nd read access of systime_ns), the actual value of systime_ns is read.
@    This register should be dedicated to accesses via ARM.
@    xPIC software should access systime via xpic_timer_systime_ns.
@    Host software should access systime via DPM at systime_ns.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_ns      ,	0x0000001C
 .equ Adr_NX56_arm_timer_arm_timer_systime_ns,	0x101C039C
 .equ Adr_NX56_arm_timer_systime_ns          ,	0x101C039C

 .equ MSK_NX56_arm_timer_systime_ns_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_ns_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_ns_compare
@ => SYSTIME nano sec compare value
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_ns_compare      ,	0x00000020
 .equ Adr_NX56_arm_timer_arm_timer_systime_ns_compare,	0x101C03A0
 .equ Adr_NX56_arm_timer_systime_ns_compare          ,	0x101C03A0

 .equ MSK_NX56_arm_timer_systime_ns_compare_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_ns_compare_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_s_compare
@ => SYSTIME sec compare value
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_s_compare      ,	0x00000024
 .equ Adr_NX56_arm_timer_arm_timer_systime_s_compare,	0x101C03A4
 .equ Adr_NX56_arm_timer_systime_s_compare          ,	0x101C03A4

 .equ MSK_NX56_arm_timer_systime_s_compare_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_s_compare_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_uc_s
@ => ARM_TIMER upper SYSTIME_UC register
@    To allow consistent values of systime_uc_s and systime_uc_ns, lower bits of systime_uc is latched to systime_uc_ns, when systime_uc_s is read.
@    This register should be dedicated to accesses via ARM.
@    xPIC software should access systime_uc via xpic_timer_systime_uc_s.
@    Host software should access systime_uc via DPM at systime_uc_s.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_uc_s      ,	0x00000028
 .equ Adr_NX56_arm_timer_arm_timer_systime_uc_s,	0x101C03A8
 .equ Adr_NX56_arm_timer_systime_uc_s          ,	0x101C03A8

 .equ MSK_NX56_arm_timer_systime_uc_s_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_uc_s_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_uc_ns
@ => ARM_TIMER lower SYSTIME_UC register
@    To allow consistent values of systime_uc_s and systime_uc_ns, lower bits of systime_uc is latched to systime_uc_ns, when systime_uc_s is read.
@    If no systime_uc_s is read before (e.g. at 2nd read access of systime_uc_ns), the actual value of systime_uc_ns is read.
@    This register should be dedicated to accesses via ARM.
@    xPIC software should access systime_uc via xpic_timer_systime_uc_ns.
@    Host software should access systime_uc via DPM at systime_uc_ns.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_uc_ns      ,	0x0000002C
 .equ Adr_NX56_arm_timer_arm_timer_systime_uc_ns,	0x101C03AC
 .equ Adr_NX56_arm_timer_systime_uc_ns          ,	0x101C03AC

 .equ MSK_NX56_arm_timer_systime_uc_ns_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_uc_ns_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_uc_ns_compare
@ => SYSTIME_UC nano sec compare value
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_uc_ns_compare      ,	0x00000030
 .equ Adr_NX56_arm_timer_arm_timer_systime_uc_ns_compare,	0x101C03B0
 .equ Adr_NX56_arm_timer_systime_uc_ns_compare          ,	0x101C03B0

 .equ MSK_NX56_arm_timer_systime_uc_ns_compare_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_uc_ns_compare_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_systime_uc_s_compare
@ => SYSTIME_UC sec compare value
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_systime_uc_s_compare      ,	0x00000034
 .equ Adr_NX56_arm_timer_arm_timer_systime_uc_s_compare,	0x101C03B4
 .equ Adr_NX56_arm_timer_systime_uc_s_compare          ,	0x101C03B4

 .equ MSK_NX56_arm_timer_systime_uc_s_compare_val,	0xffffffff
 .equ SRT_NX56_arm_timer_systime_uc_s_compare_val,	0

@ ---------------------------------------------------------------------
@ Register arm_timer_irq_raw
@ => ARM_TIMER Raw IRQ register
@    Read access shows status of unmasked IRQs
@    Write access with '1' resets the appropriate IRQ
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_irq_raw      ,	0x00000038
 .equ Adr_NX56_arm_timer_arm_timer_irq_raw,	0x101C03B8
 .equ Adr_NX56_arm_timer_irq_raw          ,	0x101C03B8

 .equ MSK_NX56_arm_timer_irq_raw_timer0_irq       ,	0x00000001
 .equ SRT_NX56_arm_timer_irq_raw_timer0_irq       ,	0
 .equ MSK_NX56_arm_timer_irq_raw_timer1_irq       ,	0x00000002
 .equ SRT_NX56_arm_timer_irq_raw_timer1_irq       ,	1
 .equ MSK_NX56_arm_timer_irq_raw_systime_ns_irq   ,	0x00000004
 .equ SRT_NX56_arm_timer_irq_raw_systime_ns_irq   ,	2
 .equ MSK_NX56_arm_timer_irq_raw_systime_s_irq    ,	0x00000008
 .equ SRT_NX56_arm_timer_irq_raw_systime_s_irq    ,	3
 .equ MSK_NX56_arm_timer_irq_raw_systime_uc_ns_irq,	0x00000010
 .equ SRT_NX56_arm_timer_irq_raw_systime_uc_ns_irq,	4
 .equ MSK_NX56_arm_timer_irq_raw_systime_uc_s_irq ,	0x00000020
 .equ SRT_NX56_arm_timer_irq_raw_systime_uc_s_irq ,	5

@ ---------------------------------------------------------------------
@ Register arm_timer_irq_masked
@ => ARM_TIMER Masked IRQ register
@    Shows status of masked IRQs (as connected to ARM/xPIC)
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_irq_masked      ,	0x0000003C
 .equ Adr_NX56_arm_timer_arm_timer_irq_masked,	0x101C03BC
 .equ Adr_NX56_arm_timer_irq_masked          ,	0x101C03BC

 .equ MSK_NX56_arm_timer_irq_masked_timer0_irq       ,	0x00000001
 .equ SRT_NX56_arm_timer_irq_masked_timer0_irq       ,	0
 .equ MSK_NX56_arm_timer_irq_masked_timer1_irq       ,	0x00000002
 .equ SRT_NX56_arm_timer_irq_masked_timer1_irq       ,	1
 .equ MSK_NX56_arm_timer_irq_masked_systime_ns_irq   ,	0x00000004
 .equ SRT_NX56_arm_timer_irq_masked_systime_ns_irq   ,	2
 .equ MSK_NX56_arm_timer_irq_masked_systime_s_irq    ,	0x00000008
 .equ SRT_NX56_arm_timer_irq_masked_systime_s_irq    ,	3
 .equ MSK_NX56_arm_timer_irq_masked_systime_uc_ns_irq,	0x00000010
 .equ SRT_NX56_arm_timer_irq_masked_systime_uc_ns_irq,	4
 .equ MSK_NX56_arm_timer_irq_masked_systime_uc_s_irq ,	0x00000020
 .equ SRT_NX56_arm_timer_irq_masked_systime_uc_s_irq ,	5

@ ---------------------------------------------------------------------
@ Register arm_timer_irq_msk_set
@ => ARM_TIMER interrupt mask enable:
@    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_irq_msk_set      ,	0x00000040
 .equ Adr_NX56_arm_timer_arm_timer_irq_msk_set,	0x101C03C0
 .equ Adr_NX56_arm_timer_irq_msk_set          ,	0x101C03C0

 .equ MSK_NX56_arm_timer_irq_msk_set_timer0_irq       ,	0x00000001
 .equ SRT_NX56_arm_timer_irq_msk_set_timer0_irq       ,	0
 .equ MSK_NX56_arm_timer_irq_msk_set_timer1_irq       ,	0x00000002
 .equ SRT_NX56_arm_timer_irq_msk_set_timer1_irq       ,	1
 .equ MSK_NX56_arm_timer_irq_msk_set_systime_ns_irq   ,	0x00000004
 .equ SRT_NX56_arm_timer_irq_msk_set_systime_ns_irq   ,	2
 .equ MSK_NX56_arm_timer_irq_msk_set_systime_s_irq    ,	0x00000008
 .equ SRT_NX56_arm_timer_irq_msk_set_systime_s_irq    ,	3
 .equ MSK_NX56_arm_timer_irq_msk_set_systime_uc_ns_irq,	0x00000010
 .equ SRT_NX56_arm_timer_irq_msk_set_systime_uc_ns_irq,	4
 .equ MSK_NX56_arm_timer_irq_msk_set_systime_uc_s_irq ,	0x00000020
 .equ SRT_NX56_arm_timer_irq_msk_set_systime_uc_s_irq ,	5

@ ---------------------------------------------------------------------
@ Register arm_timer_irq_msk_reset
@ => ARM_TIMER interrupt mask disable:
@    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source)
@    Write access with '0' does not influence this bit
@    Read access shows actual interrupt mask
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_arm_timer_irq_msk_reset      ,	0x00000044
 .equ Adr_NX56_arm_timer_arm_timer_irq_msk_reset,	0x101C03C4
 .equ Adr_NX56_arm_timer_irq_msk_reset          ,	0x101C03C4

 .equ MSK_NX56_arm_timer_irq_msk_reset_timer0_irq       ,	0x00000001
 .equ SRT_NX56_arm_timer_irq_msk_reset_timer0_irq       ,	0
 .equ MSK_NX56_arm_timer_irq_msk_reset_timer1_irq       ,	0x00000002
 .equ SRT_NX56_arm_timer_irq_msk_reset_timer1_irq       ,	1
 .equ MSK_NX56_arm_timer_irq_msk_reset_systime_ns_irq   ,	0x00000004
 .equ SRT_NX56_arm_timer_irq_msk_reset_systime_ns_irq   ,	2
 .equ MSK_NX56_arm_timer_irq_msk_reset_systime_s_irq    ,	0x00000008
 .equ SRT_NX56_arm_timer_irq_msk_reset_systime_s_irq    ,	3
 .equ MSK_NX56_arm_timer_irq_msk_reset_systime_uc_ns_irq,	0x00000010
 .equ SRT_NX56_arm_timer_irq_msk_reset_systime_uc_ns_irq,	4
 .equ MSK_NX56_arm_timer_irq_msk_reset_systime_uc_s_irq ,	0x00000020
 .equ SRT_NX56_arm_timer_irq_msk_reset_systime_uc_s_irq ,	5


@ =====================================================================
@
@ Area of vic
@
@ =====================================================================

 .equ Addr_NX56_vic, 0x101FF000

@ ---------------------------------------------------------------------
@ Register vic_irq_status
@ => VIC IRQ status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_irq_status,	0x00000000
 .equ Adr_NX56_vic_vic_irq_status,	0x101FF000
 .equ Adr_NX56_vic_irq_status    ,	0x101FF000

 .equ MSK_NX56_vic_irq_status_sw0       ,	0x00000001
 .equ SRT_NX56_vic_irq_status_sw0       ,	0
 .equ MSK_NX56_vic_irq_status_timer0    ,	0x00000002
 .equ SRT_NX56_vic_irq_status_timer0    ,	1
 .equ MSK_NX56_vic_irq_status_timer1    ,	0x00000004
 .equ SRT_NX56_vic_irq_status_timer1    ,	2
 .equ MSK_NX56_vic_irq_status_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_irq_status_gpio_timer,	3
 .equ MSK_NX56_vic_irq_status_systime_ns,	0x00000010
 .equ SRT_NX56_vic_irq_status_systime_ns,	4
 .equ MSK_NX56_vic_irq_status_systime_s ,	0x00000020
 .equ SRT_NX56_vic_irq_status_systime_s ,	5
 .equ MSK_NX56_vic_irq_status_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_irq_status_gpio31    ,	6
 .equ MSK_NX56_vic_irq_status_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_irq_status_watchdog  ,	7
 .equ MSK_NX56_vic_irq_status_uart0     ,	0x00000100
 .equ SRT_NX56_vic_irq_status_uart0     ,	8
 .equ MSK_NX56_vic_irq_status_uart1     ,	0x00000200
 .equ SRT_NX56_vic_irq_status_uart1     ,	9
 .equ MSK_NX56_vic_irq_status_uart2     ,	0x00000400
 .equ SRT_NX56_vic_irq_status_uart2     ,	10
 .equ MSK_NX56_vic_irq_status_usb       ,	0x00000800
 .equ SRT_NX56_vic_irq_status_usb       ,	11
 .equ MSK_NX56_vic_irq_status_spi       ,	0x00001000
 .equ SRT_NX56_vic_irq_status_spi       ,	12
 .equ MSK_NX56_vic_irq_status_i2c       ,	0x00002000
 .equ SRT_NX56_vic_irq_status_i2c       ,	13
 .equ MSK_NX56_vic_irq_status_reserved14,	0x00004000
 .equ SRT_NX56_vic_irq_status_reserved14,	14
 .equ MSK_NX56_vic_irq_status_hif       ,	0x00008000
 .equ SRT_NX56_vic_irq_status_hif       ,	15
 .equ MSK_NX56_vic_irq_status_gpio      ,	0x00010000
 .equ SRT_NX56_vic_irq_status_gpio      ,	16
 .equ MSK_NX56_vic_irq_status_com0      ,	0x00020000
 .equ SRT_NX56_vic_irq_status_com0      ,	17
 .equ MSK_NX56_vic_irq_status_com1      ,	0x00040000
 .equ SRT_NX56_vic_irq_status_com1      ,	18
 .equ MSK_NX56_vic_irq_status_com2      ,	0x00080000
 .equ SRT_NX56_vic_irq_status_com2      ,	19
 .equ MSK_NX56_vic_irq_status_com3      ,	0x00100000
 .equ SRT_NX56_vic_irq_status_com3      ,	20
 .equ MSK_NX56_vic_irq_status_msync0    ,	0x00200000
 .equ SRT_NX56_vic_irq_status_msync0    ,	21
 .equ MSK_NX56_vic_irq_status_msync1    ,	0x00400000
 .equ SRT_NX56_vic_irq_status_msync1    ,	22
 .equ MSK_NX56_vic_irq_status_msync2    ,	0x00800000
 .equ SRT_NX56_vic_irq_status_msync2    ,	23
 .equ MSK_NX56_vic_irq_status_msync3    ,	0x01000000
 .equ SRT_NX56_vic_irq_status_msync3    ,	24
 .equ MSK_NX56_vic_irq_status_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_irq_status_int_phy   ,	25
 .equ MSK_NX56_vic_irq_status_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_irq_status_sysstate  ,	26
 .equ MSK_NX56_vic_irq_status_dmac      ,	0x08000000
 .equ SRT_NX56_vic_irq_status_dmac      ,	27
 .equ MSK_NX56_vic_irq_status_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_irq_status_trigger_lt,	28
 .equ MSK_NX56_vic_irq_status_can       ,	0x20000000
 .equ SRT_NX56_vic_irq_status_can       ,	29
 .equ MSK_NX56_vic_irq_status_osac      ,	0x40000000
 .equ SRT_NX56_vic_irq_status_osac      ,	30
 .equ MSK_NX56_vic_irq_status_reserved31,	0x80000000
 .equ SRT_NX56_vic_irq_status_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_fiq_status
@ => VIC FIQ status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_fiq_status,	0x00000004
 .equ Adr_NX56_vic_vic_fiq_status,	0x101FF004
 .equ Adr_NX56_vic_fiq_status    ,	0x101FF004

 .equ MSK_NX56_vic_fiq_status_sw0       ,	0x00000001
 .equ SRT_NX56_vic_fiq_status_sw0       ,	0
 .equ MSK_NX56_vic_fiq_status_timer0    ,	0x00000002
 .equ SRT_NX56_vic_fiq_status_timer0    ,	1
 .equ MSK_NX56_vic_fiq_status_timer1    ,	0x00000004
 .equ SRT_NX56_vic_fiq_status_timer1    ,	2
 .equ MSK_NX56_vic_fiq_status_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_fiq_status_gpio_timer,	3
 .equ MSK_NX56_vic_fiq_status_systime_ns,	0x00000010
 .equ SRT_NX56_vic_fiq_status_systime_ns,	4
 .equ MSK_NX56_vic_fiq_status_systime_s ,	0x00000020
 .equ SRT_NX56_vic_fiq_status_systime_s ,	5
 .equ MSK_NX56_vic_fiq_status_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_fiq_status_gpio31    ,	6
 .equ MSK_NX56_vic_fiq_status_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_fiq_status_watchdog  ,	7
 .equ MSK_NX56_vic_fiq_status_uart0     ,	0x00000100
 .equ SRT_NX56_vic_fiq_status_uart0     ,	8
 .equ MSK_NX56_vic_fiq_status_uart1     ,	0x00000200
 .equ SRT_NX56_vic_fiq_status_uart1     ,	9
 .equ MSK_NX56_vic_fiq_status_uart2     ,	0x00000400
 .equ SRT_NX56_vic_fiq_status_uart2     ,	10
 .equ MSK_NX56_vic_fiq_status_usb       ,	0x00000800
 .equ SRT_NX56_vic_fiq_status_usb       ,	11
 .equ MSK_NX56_vic_fiq_status_spi       ,	0x00001000
 .equ SRT_NX56_vic_fiq_status_spi       ,	12
 .equ MSK_NX56_vic_fiq_status_i2c       ,	0x00002000
 .equ SRT_NX56_vic_fiq_status_i2c       ,	13
 .equ MSK_NX56_vic_fiq_status_reserved14,	0x00004000
 .equ SRT_NX56_vic_fiq_status_reserved14,	14
 .equ MSK_NX56_vic_fiq_status_hif       ,	0x00008000
 .equ SRT_NX56_vic_fiq_status_hif       ,	15
 .equ MSK_NX56_vic_fiq_status_gpio      ,	0x00010000
 .equ SRT_NX56_vic_fiq_status_gpio      ,	16
 .equ MSK_NX56_vic_fiq_status_com0      ,	0x00020000
 .equ SRT_NX56_vic_fiq_status_com0      ,	17
 .equ MSK_NX56_vic_fiq_status_com1      ,	0x00040000
 .equ SRT_NX56_vic_fiq_status_com1      ,	18
 .equ MSK_NX56_vic_fiq_status_com2      ,	0x00080000
 .equ SRT_NX56_vic_fiq_status_com2      ,	19
 .equ MSK_NX56_vic_fiq_status_com3      ,	0x00100000
 .equ SRT_NX56_vic_fiq_status_com3      ,	20
 .equ MSK_NX56_vic_fiq_status_msync0    ,	0x00200000
 .equ SRT_NX56_vic_fiq_status_msync0    ,	21
 .equ MSK_NX56_vic_fiq_status_msync1    ,	0x00400000
 .equ SRT_NX56_vic_fiq_status_msync1    ,	22
 .equ MSK_NX56_vic_fiq_status_msync2    ,	0x00800000
 .equ SRT_NX56_vic_fiq_status_msync2    ,	23
 .equ MSK_NX56_vic_fiq_status_msync3    ,	0x01000000
 .equ SRT_NX56_vic_fiq_status_msync3    ,	24
 .equ MSK_NX56_vic_fiq_status_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_fiq_status_int_phy   ,	25
 .equ MSK_NX56_vic_fiq_status_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_fiq_status_sysstate  ,	26
 .equ MSK_NX56_vic_fiq_status_dmac      ,	0x08000000
 .equ SRT_NX56_vic_fiq_status_dmac      ,	27
 .equ MSK_NX56_vic_fiq_status_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_fiq_status_trigger_lt,	28
 .equ MSK_NX56_vic_fiq_status_can       ,	0x20000000
 .equ SRT_NX56_vic_fiq_status_can       ,	29
 .equ MSK_NX56_vic_fiq_status_osac      ,	0x40000000
 .equ SRT_NX56_vic_fiq_status_osac      ,	30
 .equ MSK_NX56_vic_fiq_status_reserved31,	0x80000000
 .equ SRT_NX56_vic_fiq_status_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_raw_intr
@ => VIC Raw interrupt status register
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_raw_intr,	0x00000008
 .equ Adr_NX56_vic_vic_raw_intr,	0x101FF008
 .equ Adr_NX56_vic_raw_intr    ,	0x101FF008

 .equ MSK_NX56_vic_raw_intr_sw0       ,	0x00000001
 .equ SRT_NX56_vic_raw_intr_sw0       ,	0
 .equ MSK_NX56_vic_raw_intr_timer0    ,	0x00000002
 .equ SRT_NX56_vic_raw_intr_timer0    ,	1
 .equ MSK_NX56_vic_raw_intr_timer1    ,	0x00000004
 .equ SRT_NX56_vic_raw_intr_timer1    ,	2
 .equ MSK_NX56_vic_raw_intr_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_raw_intr_gpio_timer,	3
 .equ MSK_NX56_vic_raw_intr_systime_ns,	0x00000010
 .equ SRT_NX56_vic_raw_intr_systime_ns,	4
 .equ MSK_NX56_vic_raw_intr_systime_s ,	0x00000020
 .equ SRT_NX56_vic_raw_intr_systime_s ,	5
 .equ MSK_NX56_vic_raw_intr_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_raw_intr_gpio31    ,	6
 .equ MSK_NX56_vic_raw_intr_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_raw_intr_watchdog  ,	7
 .equ MSK_NX56_vic_raw_intr_uart0     ,	0x00000100
 .equ SRT_NX56_vic_raw_intr_uart0     ,	8
 .equ MSK_NX56_vic_raw_intr_uart1     ,	0x00000200
 .equ SRT_NX56_vic_raw_intr_uart1     ,	9
 .equ MSK_NX56_vic_raw_intr_uart2     ,	0x00000400
 .equ SRT_NX56_vic_raw_intr_uart2     ,	10
 .equ MSK_NX56_vic_raw_intr_usb       ,	0x00000800
 .equ SRT_NX56_vic_raw_intr_usb       ,	11
 .equ MSK_NX56_vic_raw_intr_spi       ,	0x00001000
 .equ SRT_NX56_vic_raw_intr_spi       ,	12
 .equ MSK_NX56_vic_raw_intr_i2c       ,	0x00002000
 .equ SRT_NX56_vic_raw_intr_i2c       ,	13
 .equ MSK_NX56_vic_raw_intr_reserved14,	0x00004000
 .equ SRT_NX56_vic_raw_intr_reserved14,	14
 .equ MSK_NX56_vic_raw_intr_hif       ,	0x00008000
 .equ SRT_NX56_vic_raw_intr_hif       ,	15
 .equ MSK_NX56_vic_raw_intr_gpio      ,	0x00010000
 .equ SRT_NX56_vic_raw_intr_gpio      ,	16
 .equ MSK_NX56_vic_raw_intr_com0      ,	0x00020000
 .equ SRT_NX56_vic_raw_intr_com0      ,	17
 .equ MSK_NX56_vic_raw_intr_com1      ,	0x00040000
 .equ SRT_NX56_vic_raw_intr_com1      ,	18
 .equ MSK_NX56_vic_raw_intr_com2      ,	0x00080000
 .equ SRT_NX56_vic_raw_intr_com2      ,	19
 .equ MSK_NX56_vic_raw_intr_com3      ,	0x00100000
 .equ SRT_NX56_vic_raw_intr_com3      ,	20
 .equ MSK_NX56_vic_raw_intr_msync0    ,	0x00200000
 .equ SRT_NX56_vic_raw_intr_msync0    ,	21
 .equ MSK_NX56_vic_raw_intr_msync1    ,	0x00400000
 .equ SRT_NX56_vic_raw_intr_msync1    ,	22
 .equ MSK_NX56_vic_raw_intr_msync2    ,	0x00800000
 .equ SRT_NX56_vic_raw_intr_msync2    ,	23
 .equ MSK_NX56_vic_raw_intr_msync3    ,	0x01000000
 .equ SRT_NX56_vic_raw_intr_msync3    ,	24
 .equ MSK_NX56_vic_raw_intr_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_raw_intr_int_phy   ,	25
 .equ MSK_NX56_vic_raw_intr_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_raw_intr_sysstate  ,	26
 .equ MSK_NX56_vic_raw_intr_dmac      ,	0x08000000
 .equ SRT_NX56_vic_raw_intr_dmac      ,	27
 .equ MSK_NX56_vic_raw_intr_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_raw_intr_trigger_lt,	28
 .equ MSK_NX56_vic_raw_intr_can       ,	0x20000000
 .equ SRT_NX56_vic_raw_intr_can       ,	29
 .equ MSK_NX56_vic_raw_intr_osac      ,	0x40000000
 .equ SRT_NX56_vic_raw_intr_osac      ,	30
 .equ MSK_NX56_vic_raw_intr_reserved31,	0x80000000
 .equ SRT_NX56_vic_raw_intr_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_int_select
@ => VIC Interrupt select register
@    1 = FIQ interrupt
@    0 = IRQ interrupt
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_int_select,	0x0000000C
 .equ Adr_NX56_vic_vic_int_select,	0x101FF00C
 .equ Adr_NX56_vic_int_select    ,	0x101FF00C

 .equ MSK_NX56_vic_int_select_sw0       ,	0x00000001
 .equ SRT_NX56_vic_int_select_sw0       ,	0
 .equ MSK_NX56_vic_int_select_timer0    ,	0x00000002
 .equ SRT_NX56_vic_int_select_timer0    ,	1
 .equ MSK_NX56_vic_int_select_timer1    ,	0x00000004
 .equ SRT_NX56_vic_int_select_timer1    ,	2
 .equ MSK_NX56_vic_int_select_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_int_select_gpio_timer,	3
 .equ MSK_NX56_vic_int_select_systime_ns,	0x00000010
 .equ SRT_NX56_vic_int_select_systime_ns,	4
 .equ MSK_NX56_vic_int_select_systime_s ,	0x00000020
 .equ SRT_NX56_vic_int_select_systime_s ,	5
 .equ MSK_NX56_vic_int_select_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_int_select_gpio31    ,	6
 .equ MSK_NX56_vic_int_select_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_int_select_watchdog  ,	7
 .equ MSK_NX56_vic_int_select_uart0     ,	0x00000100
 .equ SRT_NX56_vic_int_select_uart0     ,	8
 .equ MSK_NX56_vic_int_select_uart1     ,	0x00000200
 .equ SRT_NX56_vic_int_select_uart1     ,	9
 .equ MSK_NX56_vic_int_select_uart2     ,	0x00000400
 .equ SRT_NX56_vic_int_select_uart2     ,	10
 .equ MSK_NX56_vic_int_select_usb       ,	0x00000800
 .equ SRT_NX56_vic_int_select_usb       ,	11
 .equ MSK_NX56_vic_int_select_spi       ,	0x00001000
 .equ SRT_NX56_vic_int_select_spi       ,	12
 .equ MSK_NX56_vic_int_select_i2c       ,	0x00002000
 .equ SRT_NX56_vic_int_select_i2c       ,	13
 .equ MSK_NX56_vic_int_select_reserved14,	0x00004000
 .equ SRT_NX56_vic_int_select_reserved14,	14
 .equ MSK_NX56_vic_int_select_hif       ,	0x00008000
 .equ SRT_NX56_vic_int_select_hif       ,	15
 .equ MSK_NX56_vic_int_select_gpio      ,	0x00010000
 .equ SRT_NX56_vic_int_select_gpio      ,	16
 .equ MSK_NX56_vic_int_select_com0      ,	0x00020000
 .equ SRT_NX56_vic_int_select_com0      ,	17
 .equ MSK_NX56_vic_int_select_com1      ,	0x00040000
 .equ SRT_NX56_vic_int_select_com1      ,	18
 .equ MSK_NX56_vic_int_select_com2      ,	0x00080000
 .equ SRT_NX56_vic_int_select_com2      ,	19
 .equ MSK_NX56_vic_int_select_com3      ,	0x00100000
 .equ SRT_NX56_vic_int_select_com3      ,	20
 .equ MSK_NX56_vic_int_select_msync0    ,	0x00200000
 .equ SRT_NX56_vic_int_select_msync0    ,	21
 .equ MSK_NX56_vic_int_select_msync1    ,	0x00400000
 .equ SRT_NX56_vic_int_select_msync1    ,	22
 .equ MSK_NX56_vic_int_select_msync2    ,	0x00800000
 .equ SRT_NX56_vic_int_select_msync2    ,	23
 .equ MSK_NX56_vic_int_select_msync3    ,	0x01000000
 .equ SRT_NX56_vic_int_select_msync3    ,	24
 .equ MSK_NX56_vic_int_select_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_int_select_int_phy   ,	25
 .equ MSK_NX56_vic_int_select_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_int_select_sysstate  ,	26
 .equ MSK_NX56_vic_int_select_dmac      ,	0x08000000
 .equ SRT_NX56_vic_int_select_dmac      ,	27
 .equ MSK_NX56_vic_int_select_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_int_select_trigger_lt,	28
 .equ MSK_NX56_vic_int_select_can       ,	0x20000000
 .equ SRT_NX56_vic_int_select_can       ,	29
 .equ MSK_NX56_vic_int_select_osac      ,	0x40000000
 .equ SRT_NX56_vic_int_select_osac      ,	30
 .equ MSK_NX56_vic_int_select_reserved31,	0x80000000
 .equ SRT_NX56_vic_int_select_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_int_enable
@ => VIC Interrupt enable register
@    1 = Interrupt enabled
@    0 = Interrupt disabled
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_int_enable,	0x00000010
 .equ Adr_NX56_vic_vic_int_enable,	0x101FF010
 .equ Adr_NX56_vic_int_enable    ,	0x101FF010

 .equ MSK_NX56_vic_int_enable_sw0       ,	0x00000001
 .equ SRT_NX56_vic_int_enable_sw0       ,	0
 .equ MSK_NX56_vic_int_enable_timer0    ,	0x00000002
 .equ SRT_NX56_vic_int_enable_timer0    ,	1
 .equ MSK_NX56_vic_int_enable_timer1    ,	0x00000004
 .equ SRT_NX56_vic_int_enable_timer1    ,	2
 .equ MSK_NX56_vic_int_enable_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_int_enable_gpio_timer,	3
 .equ MSK_NX56_vic_int_enable_systime_ns,	0x00000010
 .equ SRT_NX56_vic_int_enable_systime_ns,	4
 .equ MSK_NX56_vic_int_enable_systime_s ,	0x00000020
 .equ SRT_NX56_vic_int_enable_systime_s ,	5
 .equ MSK_NX56_vic_int_enable_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_int_enable_gpio31    ,	6
 .equ MSK_NX56_vic_int_enable_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_int_enable_watchdog  ,	7
 .equ MSK_NX56_vic_int_enable_uart0     ,	0x00000100
 .equ SRT_NX56_vic_int_enable_uart0     ,	8
 .equ MSK_NX56_vic_int_enable_uart1     ,	0x00000200
 .equ SRT_NX56_vic_int_enable_uart1     ,	9
 .equ MSK_NX56_vic_int_enable_uart2     ,	0x00000400
 .equ SRT_NX56_vic_int_enable_uart2     ,	10
 .equ MSK_NX56_vic_int_enable_usb       ,	0x00000800
 .equ SRT_NX56_vic_int_enable_usb       ,	11
 .equ MSK_NX56_vic_int_enable_spi       ,	0x00001000
 .equ SRT_NX56_vic_int_enable_spi       ,	12
 .equ MSK_NX56_vic_int_enable_i2c       ,	0x00002000
 .equ SRT_NX56_vic_int_enable_i2c       ,	13
 .equ MSK_NX56_vic_int_enable_reserved14,	0x00004000
 .equ SRT_NX56_vic_int_enable_reserved14,	14
 .equ MSK_NX56_vic_int_enable_hif       ,	0x00008000
 .equ SRT_NX56_vic_int_enable_hif       ,	15
 .equ MSK_NX56_vic_int_enable_gpio      ,	0x00010000
 .equ SRT_NX56_vic_int_enable_gpio      ,	16
 .equ MSK_NX56_vic_int_enable_com0      ,	0x00020000
 .equ SRT_NX56_vic_int_enable_com0      ,	17
 .equ MSK_NX56_vic_int_enable_com1      ,	0x00040000
 .equ SRT_NX56_vic_int_enable_com1      ,	18
 .equ MSK_NX56_vic_int_enable_com2      ,	0x00080000
 .equ SRT_NX56_vic_int_enable_com2      ,	19
 .equ MSK_NX56_vic_int_enable_com3      ,	0x00100000
 .equ SRT_NX56_vic_int_enable_com3      ,	20
 .equ MSK_NX56_vic_int_enable_msync0    ,	0x00200000
 .equ SRT_NX56_vic_int_enable_msync0    ,	21
 .equ MSK_NX56_vic_int_enable_msync1    ,	0x00400000
 .equ SRT_NX56_vic_int_enable_msync1    ,	22
 .equ MSK_NX56_vic_int_enable_msync2    ,	0x00800000
 .equ SRT_NX56_vic_int_enable_msync2    ,	23
 .equ MSK_NX56_vic_int_enable_msync3    ,	0x01000000
 .equ SRT_NX56_vic_int_enable_msync3    ,	24
 .equ MSK_NX56_vic_int_enable_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_int_enable_int_phy   ,	25
 .equ MSK_NX56_vic_int_enable_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_int_enable_sysstate  ,	26
 .equ MSK_NX56_vic_int_enable_dmac      ,	0x08000000
 .equ SRT_NX56_vic_int_enable_dmac      ,	27
 .equ MSK_NX56_vic_int_enable_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_int_enable_trigger_lt,	28
 .equ MSK_NX56_vic_int_enable_can       ,	0x20000000
 .equ SRT_NX56_vic_int_enable_can       ,	29
 .equ MSK_NX56_vic_int_enable_osac      ,	0x40000000
 .equ SRT_NX56_vic_int_enable_osac      ,	30
 .equ MSK_NX56_vic_int_enable_reserved31,	0x80000000
 .equ SRT_NX56_vic_int_enable_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_int_enclear
@ => VIC Interrupt enable clear register:
@    clear interrupt enable bits
@ => Mode: W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_int_enclear,	0x00000014
 .equ Adr_NX56_vic_vic_int_enclear,	0x101FF014
 .equ Adr_NX56_vic_int_enclear    ,	0x101FF014

 .equ MSK_NX56_vic_int_enclear_sw0       ,	0x00000001
 .equ SRT_NX56_vic_int_enclear_sw0       ,	0
 .equ MSK_NX56_vic_int_enclear_timer0    ,	0x00000002
 .equ SRT_NX56_vic_int_enclear_timer0    ,	1
 .equ MSK_NX56_vic_int_enclear_timer1    ,	0x00000004
 .equ SRT_NX56_vic_int_enclear_timer1    ,	2
 .equ MSK_NX56_vic_int_enclear_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_int_enclear_gpio_timer,	3
 .equ MSK_NX56_vic_int_enclear_systime_ns,	0x00000010
 .equ SRT_NX56_vic_int_enclear_systime_ns,	4
 .equ MSK_NX56_vic_int_enclear_systime_s ,	0x00000020
 .equ SRT_NX56_vic_int_enclear_systime_s ,	5
 .equ MSK_NX56_vic_int_enclear_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_int_enclear_gpio31    ,	6
 .equ MSK_NX56_vic_int_enclear_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_int_enclear_watchdog  ,	7
 .equ MSK_NX56_vic_int_enclear_uart0     ,	0x00000100
 .equ SRT_NX56_vic_int_enclear_uart0     ,	8
 .equ MSK_NX56_vic_int_enclear_uart1     ,	0x00000200
 .equ SRT_NX56_vic_int_enclear_uart1     ,	9
 .equ MSK_NX56_vic_int_enclear_uart2     ,	0x00000400
 .equ SRT_NX56_vic_int_enclear_uart2     ,	10
 .equ MSK_NX56_vic_int_enclear_usb       ,	0x00000800
 .equ SRT_NX56_vic_int_enclear_usb       ,	11
 .equ MSK_NX56_vic_int_enclear_spi       ,	0x00001000
 .equ SRT_NX56_vic_int_enclear_spi       ,	12
 .equ MSK_NX56_vic_int_enclear_i2c       ,	0x00002000
 .equ SRT_NX56_vic_int_enclear_i2c       ,	13
 .equ MSK_NX56_vic_int_enclear_reserved14,	0x00004000
 .equ SRT_NX56_vic_int_enclear_reserved14,	14
 .equ MSK_NX56_vic_int_enclear_hif       ,	0x00008000
 .equ SRT_NX56_vic_int_enclear_hif       ,	15
 .equ MSK_NX56_vic_int_enclear_gpio      ,	0x00010000
 .equ SRT_NX56_vic_int_enclear_gpio      ,	16
 .equ MSK_NX56_vic_int_enclear_com0      ,	0x00020000
 .equ SRT_NX56_vic_int_enclear_com0      ,	17
 .equ MSK_NX56_vic_int_enclear_com1      ,	0x00040000
 .equ SRT_NX56_vic_int_enclear_com1      ,	18
 .equ MSK_NX56_vic_int_enclear_com2      ,	0x00080000
 .equ SRT_NX56_vic_int_enclear_com2      ,	19
 .equ MSK_NX56_vic_int_enclear_com3      ,	0x00100000
 .equ SRT_NX56_vic_int_enclear_com3      ,	20
 .equ MSK_NX56_vic_int_enclear_msync0    ,	0x00200000
 .equ SRT_NX56_vic_int_enclear_msync0    ,	21
 .equ MSK_NX56_vic_int_enclear_msync1    ,	0x00400000
 .equ SRT_NX56_vic_int_enclear_msync1    ,	22
 .equ MSK_NX56_vic_int_enclear_msync2    ,	0x00800000
 .equ SRT_NX56_vic_int_enclear_msync2    ,	23
 .equ MSK_NX56_vic_int_enclear_msync3    ,	0x01000000
 .equ SRT_NX56_vic_int_enclear_msync3    ,	24
 .equ MSK_NX56_vic_int_enclear_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_int_enclear_int_phy   ,	25
 .equ MSK_NX56_vic_int_enclear_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_int_enclear_sysstate  ,	26
 .equ MSK_NX56_vic_int_enclear_dmac      ,	0x08000000
 .equ SRT_NX56_vic_int_enclear_dmac      ,	27
 .equ MSK_NX56_vic_int_enclear_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_int_enclear_trigger_lt,	28
 .equ MSK_NX56_vic_int_enclear_can       ,	0x20000000
 .equ SRT_NX56_vic_int_enclear_can       ,	29
 .equ MSK_NX56_vic_int_enclear_osac      ,	0x40000000
 .equ SRT_NX56_vic_int_enclear_osac      ,	30
 .equ MSK_NX56_vic_int_enclear_reserved31,	0x80000000
 .equ SRT_NX56_vic_int_enclear_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_softint
@ => VIC Software interrupt register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_softint,	0x00000018
 .equ Adr_NX56_vic_vic_softint,	0x101FF018
 .equ Adr_NX56_vic_softint    ,	0x101FF018

 .equ MSK_NX56_vic_softint_sw0       ,	0x00000001
 .equ SRT_NX56_vic_softint_sw0       ,	0
 .equ MSK_NX56_vic_softint_timer0    ,	0x00000002
 .equ SRT_NX56_vic_softint_timer0    ,	1
 .equ MSK_NX56_vic_softint_timer1    ,	0x00000004
 .equ SRT_NX56_vic_softint_timer1    ,	2
 .equ MSK_NX56_vic_softint_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_softint_gpio_timer,	3
 .equ MSK_NX56_vic_softint_systime_ns,	0x00000010
 .equ SRT_NX56_vic_softint_systime_ns,	4
 .equ MSK_NX56_vic_softint_systime_s ,	0x00000020
 .equ SRT_NX56_vic_softint_systime_s ,	5
 .equ MSK_NX56_vic_softint_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_softint_gpio31    ,	6
 .equ MSK_NX56_vic_softint_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_softint_watchdog  ,	7
 .equ MSK_NX56_vic_softint_uart0     ,	0x00000100
 .equ SRT_NX56_vic_softint_uart0     ,	8
 .equ MSK_NX56_vic_softint_uart1     ,	0x00000200
 .equ SRT_NX56_vic_softint_uart1     ,	9
 .equ MSK_NX56_vic_softint_uart2     ,	0x00000400
 .equ SRT_NX56_vic_softint_uart2     ,	10
 .equ MSK_NX56_vic_softint_usb       ,	0x00000800
 .equ SRT_NX56_vic_softint_usb       ,	11
 .equ MSK_NX56_vic_softint_spi       ,	0x00001000
 .equ SRT_NX56_vic_softint_spi       ,	12
 .equ MSK_NX56_vic_softint_i2c       ,	0x00002000
 .equ SRT_NX56_vic_softint_i2c       ,	13
 .equ MSK_NX56_vic_softint_reserved14,	0x00004000
 .equ SRT_NX56_vic_softint_reserved14,	14
 .equ MSK_NX56_vic_softint_hif       ,	0x00008000
 .equ SRT_NX56_vic_softint_hif       ,	15
 .equ MSK_NX56_vic_softint_gpio      ,	0x00010000
 .equ SRT_NX56_vic_softint_gpio      ,	16
 .equ MSK_NX56_vic_softint_com0      ,	0x00020000
 .equ SRT_NX56_vic_softint_com0      ,	17
 .equ MSK_NX56_vic_softint_com1      ,	0x00040000
 .equ SRT_NX56_vic_softint_com1      ,	18
 .equ MSK_NX56_vic_softint_com2      ,	0x00080000
 .equ SRT_NX56_vic_softint_com2      ,	19
 .equ MSK_NX56_vic_softint_com3      ,	0x00100000
 .equ SRT_NX56_vic_softint_com3      ,	20
 .equ MSK_NX56_vic_softint_msync0    ,	0x00200000
 .equ SRT_NX56_vic_softint_msync0    ,	21
 .equ MSK_NX56_vic_softint_msync1    ,	0x00400000
 .equ SRT_NX56_vic_softint_msync1    ,	22
 .equ MSK_NX56_vic_softint_msync2    ,	0x00800000
 .equ SRT_NX56_vic_softint_msync2    ,	23
 .equ MSK_NX56_vic_softint_msync3    ,	0x01000000
 .equ SRT_NX56_vic_softint_msync3    ,	24
 .equ MSK_NX56_vic_softint_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_softint_int_phy   ,	25
 .equ MSK_NX56_vic_softint_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_softint_sysstate  ,	26
 .equ MSK_NX56_vic_softint_dmac      ,	0x08000000
 .equ SRT_NX56_vic_softint_dmac      ,	27
 .equ MSK_NX56_vic_softint_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_softint_trigger_lt,	28
 .equ MSK_NX56_vic_softint_can       ,	0x20000000
 .equ SRT_NX56_vic_softint_can       ,	29
 .equ MSK_NX56_vic_softint_osac      ,	0x40000000
 .equ SRT_NX56_vic_softint_osac      ,	30
 .equ MSK_NX56_vic_softint_reserved31,	0x80000000
 .equ SRT_NX56_vic_softint_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_softint_clear
@ => VIC Software interrupt clear register:
@    clear software interrupt bits
@ => Mode: W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_softint_clear,	0x0000001C
 .equ Adr_NX56_vic_vic_softint_clear,	0x101FF01C
 .equ Adr_NX56_vic_softint_clear    ,	0x101FF01C

 .equ MSK_NX56_vic_softint_clear_sw0       ,	0x00000001
 .equ SRT_NX56_vic_softint_clear_sw0       ,	0
 .equ MSK_NX56_vic_softint_clear_timer0    ,	0x00000002
 .equ SRT_NX56_vic_softint_clear_timer0    ,	1
 .equ MSK_NX56_vic_softint_clear_timer1    ,	0x00000004
 .equ SRT_NX56_vic_softint_clear_timer1    ,	2
 .equ MSK_NX56_vic_softint_clear_gpio_timer,	0x00000008
 .equ SRT_NX56_vic_softint_clear_gpio_timer,	3
 .equ MSK_NX56_vic_softint_clear_systime_ns,	0x00000010
 .equ SRT_NX56_vic_softint_clear_systime_ns,	4
 .equ MSK_NX56_vic_softint_clear_systime_s ,	0x00000020
 .equ SRT_NX56_vic_softint_clear_systime_s ,	5
 .equ MSK_NX56_vic_softint_clear_gpio31    ,	0x00000040
 .equ SRT_NX56_vic_softint_clear_gpio31    ,	6
 .equ MSK_NX56_vic_softint_clear_watchdog  ,	0x00000080
 .equ SRT_NX56_vic_softint_clear_watchdog  ,	7
 .equ MSK_NX56_vic_softint_clear_uart0     ,	0x00000100
 .equ SRT_NX56_vic_softint_clear_uart0     ,	8
 .equ MSK_NX56_vic_softint_clear_uart1     ,	0x00000200
 .equ SRT_NX56_vic_softint_clear_uart1     ,	9
 .equ MSK_NX56_vic_softint_clear_uart2     ,	0x00000400
 .equ SRT_NX56_vic_softint_clear_uart2     ,	10
 .equ MSK_NX56_vic_softint_clear_usb       ,	0x00000800
 .equ SRT_NX56_vic_softint_clear_usb       ,	11
 .equ MSK_NX56_vic_softint_clear_spi       ,	0x00001000
 .equ SRT_NX56_vic_softint_clear_spi       ,	12
 .equ MSK_NX56_vic_softint_clear_i2c       ,	0x00002000
 .equ SRT_NX56_vic_softint_clear_i2c       ,	13
 .equ MSK_NX56_vic_softint_clear_reserved14,	0x00004000
 .equ SRT_NX56_vic_softint_clear_reserved14,	14
 .equ MSK_NX56_vic_softint_clear_hif       ,	0x00008000
 .equ SRT_NX56_vic_softint_clear_hif       ,	15
 .equ MSK_NX56_vic_softint_clear_gpio      ,	0x00010000
 .equ SRT_NX56_vic_softint_clear_gpio      ,	16
 .equ MSK_NX56_vic_softint_clear_com0      ,	0x00020000
 .equ SRT_NX56_vic_softint_clear_com0      ,	17
 .equ MSK_NX56_vic_softint_clear_com1      ,	0x00040000
 .equ SRT_NX56_vic_softint_clear_com1      ,	18
 .equ MSK_NX56_vic_softint_clear_com2      ,	0x00080000
 .equ SRT_NX56_vic_softint_clear_com2      ,	19
 .equ MSK_NX56_vic_softint_clear_com3      ,	0x00100000
 .equ SRT_NX56_vic_softint_clear_com3      ,	20
 .equ MSK_NX56_vic_softint_clear_msync0    ,	0x00200000
 .equ SRT_NX56_vic_softint_clear_msync0    ,	21
 .equ MSK_NX56_vic_softint_clear_msync1    ,	0x00400000
 .equ SRT_NX56_vic_softint_clear_msync1    ,	22
 .equ MSK_NX56_vic_softint_clear_msync2    ,	0x00800000
 .equ SRT_NX56_vic_softint_clear_msync2    ,	23
 .equ MSK_NX56_vic_softint_clear_msync3    ,	0x01000000
 .equ SRT_NX56_vic_softint_clear_msync3    ,	24
 .equ MSK_NX56_vic_softint_clear_int_phy   ,	0x02000000
 .equ SRT_NX56_vic_softint_clear_int_phy   ,	25
 .equ MSK_NX56_vic_softint_clear_sysstate  ,	0x04000000
 .equ SRT_NX56_vic_softint_clear_sysstate  ,	26
 .equ MSK_NX56_vic_softint_clear_dmac      ,	0x08000000
 .equ SRT_NX56_vic_softint_clear_dmac      ,	27
 .equ MSK_NX56_vic_softint_clear_trigger_lt,	0x10000000
 .equ SRT_NX56_vic_softint_clear_trigger_lt,	28
 .equ MSK_NX56_vic_softint_clear_can       ,	0x20000000
 .equ SRT_NX56_vic_softint_clear_can       ,	29
 .equ MSK_NX56_vic_softint_clear_osac      ,	0x40000000
 .equ SRT_NX56_vic_softint_clear_osac      ,	30
 .equ MSK_NX56_vic_softint_clear_reserved31,	0x80000000
 .equ SRT_NX56_vic_softint_clear_reserved31,	31

@ ---------------------------------------------------------------------
@ Register vic_protection
@ => VIC Protection enable register
@    netX does not support protected mode, so this register is unused.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_protection,	0x00000020
 .equ Adr_NX56_vic_vic_protection,	0x101FF020
 .equ Adr_NX56_vic_protection    ,	0x101FF020

 .equ MSK_NX56_vic_protection_PROTECTION,	0x00000001
 .equ SRT_NX56_vic_protection_PROTECTION,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr
@ => VIC Vector address register
@    Any writes to this register clear the interrupt.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr,	0x00000030
 .equ Adr_NX56_vic_vic_vect_addr,	0x101FF030
 .equ Adr_NX56_vic_vect_addr    ,	0x101FF030

 .equ MSK_NX56_vic_vect_addr_VECT_ADDR,	0xffffffff
 .equ SRT_NX56_vic_vect_addr_VECT_ADDR,	0

@ ---------------------------------------------------------------------
@ Register vic_def_vect_addr
@ => VIC Default vector address register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_def_vect_addr,	0x00000034
 .equ Adr_NX56_vic_vic_def_vect_addr,	0x101FF034
 .equ Adr_NX56_vic_def_vect_addr    ,	0x101FF034

 .equ MSK_NX56_vic_def_vect_addr_DEF_VECT_ADDR,	0xffffffff
 .equ SRT_NX56_vic_def_vect_addr_DEF_VECT_ADDR,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr0
@ => VIC Vector address 0 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr0,	0x00000100
 .equ Adr_NX56_vic_vic_vect_addr0,	0x101FF100
 .equ Adr_NX56_vic_vect_addr0    ,	0x101FF100

 .equ MSK_NX56_vic_vect_addr0_VECT_ADDR0,	0xffffffff
 .equ SRT_NX56_vic_vect_addr0_VECT_ADDR0,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr1
@ => VIC Vector address 1 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr1,	0x00000104
 .equ Adr_NX56_vic_vic_vect_addr1,	0x101FF104
 .equ Adr_NX56_vic_vect_addr1    ,	0x101FF104

 .equ MSK_NX56_vic_vect_addr1_VECT_ADDR1,	0xffffffff
 .equ SRT_NX56_vic_vect_addr1_VECT_ADDR1,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr2
@ => VIC Vector address 2 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr2,	0x00000108
 .equ Adr_NX56_vic_vic_vect_addr2,	0x101FF108
 .equ Adr_NX56_vic_vect_addr2    ,	0x101FF108

 .equ MSK_NX56_vic_vect_addr2_VECT_ADDR2,	0xffffffff
 .equ SRT_NX56_vic_vect_addr2_VECT_ADDR2,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr3
@ => VIC Vector address 3 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr3,	0x0000010C
 .equ Adr_NX56_vic_vic_vect_addr3,	0x101FF10C
 .equ Adr_NX56_vic_vect_addr3    ,	0x101FF10C

 .equ MSK_NX56_vic_vect_addr3_VECT_ADDR3,	0xffffffff
 .equ SRT_NX56_vic_vect_addr3_VECT_ADDR3,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr4
@ => VIC Vector address 4 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr4,	0x00000110
 .equ Adr_NX56_vic_vic_vect_addr4,	0x101FF110
 .equ Adr_NX56_vic_vect_addr4    ,	0x101FF110

 .equ MSK_NX56_vic_vect_addr4_VECT_ADDR4,	0xffffffff
 .equ SRT_NX56_vic_vect_addr4_VECT_ADDR4,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr5
@ => VIC Vector address 5 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr5,	0x00000114
 .equ Adr_NX56_vic_vic_vect_addr5,	0x101FF114
 .equ Adr_NX56_vic_vect_addr5    ,	0x101FF114

 .equ MSK_NX56_vic_vect_addr5_VECT_ADDR5,	0xffffffff
 .equ SRT_NX56_vic_vect_addr5_VECT_ADDR5,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr6
@ => VIC Vector address 6 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr6,	0x00000118
 .equ Adr_NX56_vic_vic_vect_addr6,	0x101FF118
 .equ Adr_NX56_vic_vect_addr6    ,	0x101FF118

 .equ MSK_NX56_vic_vect_addr6_VECT_ADDR6,	0xffffffff
 .equ SRT_NX56_vic_vect_addr6_VECT_ADDR6,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr7
@ => VIC Vector address 7 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr7,	0x0000011C
 .equ Adr_NX56_vic_vic_vect_addr7,	0x101FF11C
 .equ Adr_NX56_vic_vect_addr7    ,	0x101FF11C

 .equ MSK_NX56_vic_vect_addr7_VECT_ADDR7,	0xffffffff
 .equ SRT_NX56_vic_vect_addr7_VECT_ADDR7,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr8
@ => VIC Vector address 8 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr8,	0x00000120
 .equ Adr_NX56_vic_vic_vect_addr8,	0x101FF120
 .equ Adr_NX56_vic_vect_addr8    ,	0x101FF120

 .equ MSK_NX56_vic_vect_addr8_VECT_ADDR8,	0xffffffff
 .equ SRT_NX56_vic_vect_addr8_VECT_ADDR8,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr9
@ => VIC Vector address 9 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr9,	0x00000124
 .equ Adr_NX56_vic_vic_vect_addr9,	0x101FF124
 .equ Adr_NX56_vic_vect_addr9    ,	0x101FF124

 .equ MSK_NX56_vic_vect_addr9_VECT_ADDR9,	0xffffffff
 .equ SRT_NX56_vic_vect_addr9_VECT_ADDR9,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr10
@ => VIC Vector address 10 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr10,	0x00000128
 .equ Adr_NX56_vic_vic_vect_addr10,	0x101FF128
 .equ Adr_NX56_vic_vect_addr10    ,	0x101FF128

 .equ MSK_NX56_vic_vect_addr10_VECT_ADDR10,	0xffffffff
 .equ SRT_NX56_vic_vect_addr10_VECT_ADDR10,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr11
@ => VIC Vector address 11 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr11,	0x0000012C
 .equ Adr_NX56_vic_vic_vect_addr11,	0x101FF12C
 .equ Adr_NX56_vic_vect_addr11    ,	0x101FF12C

 .equ MSK_NX56_vic_vect_addr11_VECT_ADDR11,	0xffffffff
 .equ SRT_NX56_vic_vect_addr11_VECT_ADDR11,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr12
@ => VIC Vector address 12 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr12,	0x00000130
 .equ Adr_NX56_vic_vic_vect_addr12,	0x101FF130
 .equ Adr_NX56_vic_vect_addr12    ,	0x101FF130

 .equ MSK_NX56_vic_vect_addr12_VECT_ADDR12,	0xffffffff
 .equ SRT_NX56_vic_vect_addr12_VECT_ADDR12,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr13
@ => VIC Vector address 13 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr13,	0x00000134
 .equ Adr_NX56_vic_vic_vect_addr13,	0x101FF134
 .equ Adr_NX56_vic_vect_addr13    ,	0x101FF134

 .equ MSK_NX56_vic_vect_addr13_VECT_ADDR13,	0xffffffff
 .equ SRT_NX56_vic_vect_addr13_VECT_ADDR13,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr14
@ => VIC Vector address 14 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr14,	0x00000138
 .equ Adr_NX56_vic_vic_vect_addr14,	0x101FF138
 .equ Adr_NX56_vic_vect_addr14    ,	0x101FF138

 .equ MSK_NX56_vic_vect_addr14_VECT_ADDR14,	0xffffffff
 .equ SRT_NX56_vic_vect_addr14_VECT_ADDR14,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_addr15
@ => VIC Vector address 15 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_addr15,	0x0000013C
 .equ Adr_NX56_vic_vic_vect_addr15,	0x101FF13C
 .equ Adr_NX56_vic_vect_addr15    ,	0x101FF13C

 .equ MSK_NX56_vic_vect_addr15_VECT_ADDR15,	0xffffffff
 .equ SRT_NX56_vic_vect_addr15_VECT_ADDR15,	0

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl0
@ => VIC Vector control 0 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl0,	0x00000200
 .equ Adr_NX56_vic_vic_vect_cntl0,	0x101FF200
 .equ Adr_NX56_vic_vect_cntl0    ,	0x101FF200

 .equ MSK_NX56_vic_vect_cntl0_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl0_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl0_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl0_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl1
@ => VIC Vector control 1 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl1,	0x00000204
 .equ Adr_NX56_vic_vic_vect_cntl1,	0x101FF204
 .equ Adr_NX56_vic_vect_cntl1    ,	0x101FF204

 .equ MSK_NX56_vic_vect_cntl1_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl1_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl1_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl1_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl2
@ => VIC Vector control 2 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl2,	0x00000208
 .equ Adr_NX56_vic_vic_vect_cntl2,	0x101FF208
 .equ Adr_NX56_vic_vect_cntl2    ,	0x101FF208

 .equ MSK_NX56_vic_vect_cntl2_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl2_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl2_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl2_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl3
@ => VIC Vector control 3 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl3,	0x0000020C
 .equ Adr_NX56_vic_vic_vect_cntl3,	0x101FF20C
 .equ Adr_NX56_vic_vect_cntl3    ,	0x101FF20C

 .equ MSK_NX56_vic_vect_cntl3_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl3_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl3_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl3_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl4
@ => VIC Vector control 4 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl4,	0x00000210
 .equ Adr_NX56_vic_vic_vect_cntl4,	0x101FF210
 .equ Adr_NX56_vic_vect_cntl4    ,	0x101FF210

 .equ MSK_NX56_vic_vect_cntl4_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl4_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl4_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl4_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl5
@ => VIC Vector control 5 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl5,	0x00000214
 .equ Adr_NX56_vic_vic_vect_cntl5,	0x101FF214
 .equ Adr_NX56_vic_vect_cntl5    ,	0x101FF214

 .equ MSK_NX56_vic_vect_cntl5_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl5_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl5_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl5_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl6
@ => VIC Vector control 6 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl6,	0x00000218
 .equ Adr_NX56_vic_vic_vect_cntl6,	0x101FF218
 .equ Adr_NX56_vic_vect_cntl6    ,	0x101FF218

 .equ MSK_NX56_vic_vect_cntl6_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl6_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl6_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl6_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl7
@ => VIC Vector control 7 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl7,	0x0000021C
 .equ Adr_NX56_vic_vic_vect_cntl7,	0x101FF21C
 .equ Adr_NX56_vic_vect_cntl7    ,	0x101FF21C

 .equ MSK_NX56_vic_vect_cntl7_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl7_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl7_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl7_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl8
@ => VIC Vector control 8 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl8,	0x00000220
 .equ Adr_NX56_vic_vic_vect_cntl8,	0x101FF220
 .equ Adr_NX56_vic_vect_cntl8    ,	0x101FF220

 .equ MSK_NX56_vic_vect_cntl8_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl8_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl8_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl8_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl9
@ => VIC Vector control 9 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl9,	0x00000224
 .equ Adr_NX56_vic_vic_vect_cntl9,	0x101FF224
 .equ Adr_NX56_vic_vect_cntl9    ,	0x101FF224

 .equ MSK_NX56_vic_vect_cntl9_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl9_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl9_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl9_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl10
@ => VIC Vector control 10 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl10,	0x00000228
 .equ Adr_NX56_vic_vic_vect_cntl10,	0x101FF228
 .equ Adr_NX56_vic_vect_cntl10    ,	0x101FF228

 .equ MSK_NX56_vic_vect_cntl10_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl10_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl10_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl10_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl11
@ => VIC Vector control 11 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl11,	0x0000022C
 .equ Adr_NX56_vic_vic_vect_cntl11,	0x101FF22C
 .equ Adr_NX56_vic_vect_cntl11    ,	0x101FF22C

 .equ MSK_NX56_vic_vect_cntl11_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl11_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl11_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl11_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl12
@ => VIC Vector control 12 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl12,	0x00000230
 .equ Adr_NX56_vic_vic_vect_cntl12,	0x101FF230
 .equ Adr_NX56_vic_vect_cntl12    ,	0x101FF230

 .equ MSK_NX56_vic_vect_cntl12_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl12_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl12_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl12_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl13
@ => VIC Vector control 13 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl13,	0x00000234
 .equ Adr_NX56_vic_vic_vect_cntl13,	0x101FF234
 .equ Adr_NX56_vic_vect_cntl13    ,	0x101FF234

 .equ MSK_NX56_vic_vect_cntl13_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl13_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl13_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl13_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl14
@ => VIC Vector control 14 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl14,	0x00000238
 .equ Adr_NX56_vic_vic_vect_cntl14,	0x101FF238
 .equ Adr_NX56_vic_vect_cntl14    ,	0x101FF238

 .equ MSK_NX56_vic_vect_cntl14_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl14_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl14_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl14_ENABLE    ,	5

@ ---------------------------------------------------------------------
@ Register vic_vect_cntl15
@ => VIC Vector control 15 register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_vic_vect_cntl15,	0x0000023C
 .equ Adr_NX56_vic_vic_vect_cntl15,	0x101FF23C
 .equ Adr_NX56_vic_vect_cntl15    ,	0x101FF23C

 .equ MSK_NX56_vic_vect_cntl15_INT_SOURCE,	0x0000001f
 .equ SRT_NX56_vic_vect_cntl15_INT_SOURCE,	0
 .equ MSK_NX56_vic_vect_cntl15_ENABLE    ,	0x00000020
 .equ SRT_NX56_vic_vect_cntl15_ENABLE    ,	5


@ =====================================================================
@
@ Area of nfifo
@
@ =====================================================================

 .equ Addr_NX56_nfifo, 0x10200000

@ ---------------------------------------------------------------------
@ Register nfifo_config
@ => NFIFO config register
@    'base_config' is a pointer to start of NFIFO configuration area in memory.
@    The configuration area must be setup by software, before using a FIFO.
@    Each FIFO-configuration entry consists of 3 DW and contains the following:
@    {       |
@    mem-DW0: base(31:2),mas(1:0)
@    mem-DW1: wr_sen(31:30),wr_swc(29),watm(28:16),rd_sen(15:14),rd_swc(13),bottom(12:0)
@    mem-DW2: undr(31),emw(30),empty(29),write(28:16),ovfl(15),fmw(14),full(13),fill(12:0) }
@    This allows FIFOs of up to 8k entries each.
@    The first DWords mem-DW0 and mem-DW1 are only read by NFIFO controller.
@    To reset a FIFO, reinit the configuration entries mem-DW0..2.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_config  ,	0x00000000
 .equ Adr_NX56_nfifo_nfifo_config,	0x10200000
 .equ Adr_NX56_nfifo_config      ,	0x10200000

 .equ MSK_NX56_nfifo_config_base_config,	0xfffffffc
 .equ SRT_NX56_nfifo_config_base_config,	2

@ ---------------------------------------------------------------------
@ Register nfifo_scheduler_req
@ => NFIFO scheduler request register:
@    When working with the netXACCOS scheduler, the read or write accesses
@    to a certain FIFO must be requested first in this register.
@    This allows the scheduler to change the task,
@    if a FIFO does not contain the requested data or free entries.
@    Read access to this register delivers the lastly requested fifo_nr and wr.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_scheduler_req  ,	0x00000004
 .equ Adr_NX56_nfifo_nfifo_scheduler_req,	0x10200004
 .equ Adr_NX56_nfifo_scheduler_req      ,	0x10200004

 .equ MSK_NX56_nfifo_scheduler_req_fifo_nr,	0x000003ff
 .equ SRT_NX56_nfifo_scheduler_req_fifo_nr,	0
 .equ MSK_NX56_nfifo_scheduler_req_wr     ,	0x80000000
 .equ SRT_NX56_nfifo_scheduler_req_wr     ,	31

@ ---------------------------------------------------------------------
@ Register nfifo_last_access
@ => NFIFO last access register:
@    This register shows the last access, that generated an interrupt.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_last_access  ,	0x00000008
 .equ Adr_NX56_nfifo_nfifo_last_access,	0x10200008
 .equ Adr_NX56_nfifo_last_access      ,	0x10200008

 .equ MSK_NX56_nfifo_last_access_fifo_nr,	0x000003ff
 .equ SRT_NX56_nfifo_last_access_fifo_nr,	0
 .equ MSK_NX56_nfifo_last_access_rd_rdy ,	0x20000000
 .equ SRT_NX56_nfifo_last_access_rd_rdy ,	29
 .equ MSK_NX56_nfifo_last_access_wr_rdy ,	0x40000000
 .equ SRT_NX56_nfifo_last_access_wr_rdy ,	30
 .equ MSK_NX56_nfifo_last_access_wr     ,	0x80000000
 .equ SRT_NX56_nfifo_last_access_wr     ,	31

@ ---------------------------------------------------------------------
@ Register nfifo_irq_raw
@ => Raw IRQ:
@    Read access shows status of unmasked IRQs. \
@    IRQs are set automatically and reset by writing to this register:
@    Write access with '1' resets the appropriate IRQ.
@    Write access with '0' does not influence this bit.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_raw  ,	0x0000000C
 .equ Adr_NX56_nfifo_nfifo_irq_raw,	0x1020000C
 .equ Adr_NX56_nfifo_irq_raw      ,	0x1020000C

 .equ MSK_NX56_nfifo_irq_raw_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_raw_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_raw_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_raw_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_raw_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_raw_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_raw_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_raw_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_raw_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_raw_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_raw_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_raw_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_raw_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_raw_read               ,	6
 .equ MSK_NX56_nfifo_irq_raw_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_raw_write              ,	7
 .equ MSK_NX56_nfifo_irq_raw_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_raw_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_irq_arm_masked
@ => Masked IRQ of ARM:
@    Shows status of masked IRQs as connected to ARM.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_arm_masked  ,	0x00000010
 .equ Adr_NX56_nfifo_nfifo_irq_arm_masked,	0x10200010
 .equ Adr_NX56_nfifo_irq_arm_masked      ,	0x10200010

 .equ MSK_NX56_nfifo_irq_arm_masked_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_arm_masked_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_arm_masked_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_arm_masked_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_arm_masked_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_arm_masked_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_arm_masked_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_arm_masked_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_arm_masked_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_arm_masked_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_arm_masked_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_arm_masked_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_arm_masked_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_arm_masked_read               ,	6
 .equ MSK_NX56_nfifo_irq_arm_masked_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_arm_masked_write              ,	7
 .equ MSK_NX56_nfifo_irq_arm_masked_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_arm_masked_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_irq_arm_msk_set
@ => IRQ enable mask of ARM:
@    The IRQ mask enables interrupt requests for corresponding interrupt sources. \
@    As its bits might be changed by different software tasks, \
@    the IRQ mask register is not writable directly, but by set and reset masks:
@    Write access with '1' sets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_arm_msk_set  ,	0x00000014
 .equ Adr_NX56_nfifo_nfifo_irq_arm_msk_set,	0x10200014
 .equ Adr_NX56_nfifo_irq_arm_msk_set      ,	0x10200014

 .equ MSK_NX56_nfifo_irq_arm_msk_set_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_arm_msk_set_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_arm_msk_set_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_arm_msk_set_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_arm_msk_set_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_arm_msk_set_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_arm_msk_set_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_arm_msk_set_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_arm_msk_set_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_arm_msk_set_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_arm_msk_set_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_arm_msk_set_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_arm_msk_set_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_arm_msk_set_read               ,	6
 .equ MSK_NX56_nfifo_irq_arm_msk_set_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_arm_msk_set_write              ,	7
 .equ MSK_NX56_nfifo_irq_arm_msk_set_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_arm_msk_set_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_irq_arm_msk_reset
@ => IRQ disable mask of ARM:
@    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources:
@    Write access with '1' resets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_arm_msk_reset  ,	0x00000018
 .equ Adr_NX56_nfifo_nfifo_irq_arm_msk_reset,	0x10200018
 .equ Adr_NX56_nfifo_irq_arm_msk_reset      ,	0x10200018

 .equ MSK_NX56_nfifo_irq_arm_msk_reset_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_read               ,	6
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_write              ,	7
 .equ MSK_NX56_nfifo_irq_arm_msk_reset_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_arm_msk_reset_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_irq_xpic_masked
@ => Masked IRQ of xPIC:
@    Shows status of masked IRQs as connected to xPIC.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_xpic_masked  ,	0x0000001C
 .equ Adr_NX56_nfifo_nfifo_irq_xpic_masked,	0x1020001C
 .equ Adr_NX56_nfifo_irq_xpic_masked      ,	0x1020001C

 .equ MSK_NX56_nfifo_irq_xpic_masked_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_xpic_masked_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_xpic_masked_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_xpic_masked_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_xpic_masked_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_xpic_masked_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_xpic_masked_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_xpic_masked_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_xpic_masked_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_xpic_masked_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_xpic_masked_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_xpic_masked_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_xpic_masked_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_xpic_masked_read               ,	6
 .equ MSK_NX56_nfifo_irq_xpic_masked_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_xpic_masked_write              ,	7
 .equ MSK_NX56_nfifo_irq_xpic_masked_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_xpic_masked_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_irq_xpic_msk_set
@ => IRQ enable mask of xPIC:
@    The IRQ mask enables interrupt requests for corresponding interrupt sources. \
@    As its bits might be changed by different software tasks, \
@    the IRQ mask register is not writable directly, but by set and reset masks:
@    Write access with '1' sets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_xpic_msk_set  ,	0x00000020
 .equ Adr_NX56_nfifo_nfifo_irq_xpic_msk_set,	0x10200020
 .equ Adr_NX56_nfifo_irq_xpic_msk_set      ,	0x10200020

 .equ MSK_NX56_nfifo_irq_xpic_msk_set_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_read               ,	6
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_write              ,	7
 .equ MSK_NX56_nfifo_irq_xpic_msk_set_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_xpic_msk_set_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_irq_xpic_msk_reset
@ => IRQ disable mask of xPIC:
@    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources:
@    Write access with '1' resets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_irq_xpic_msk_reset  ,	0x00000024
 .equ Adr_NX56_nfifo_nfifo_irq_xpic_msk_reset,	0x10200024
 .equ Adr_NX56_nfifo_irq_xpic_msk_reset      ,	0x10200024

 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_reprogram_wait_req ,	0x00000001
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_reprogram_wait_req ,	0
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_reschedule_wait_req,	0x00000002
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_reschedule_wait_req,	1
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_reschedule_req     ,	0x00000004
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_reschedule_req     ,	2
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_update_req         ,	0x00000008
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_update_req         ,	3
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_locking_req        ,	0x00000010
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_locking_req        ,	4
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_fifo_active        ,	0x00000020
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_fifo_active        ,	5
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_read               ,	0x00000040
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_read               ,	6
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_write              ,	0x00000080
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_write              ,	7
 .equ MSK_NX56_nfifo_irq_xpic_msk_reset_ahbl_error         ,	0x00000100
 .equ SRT_NX56_nfifo_irq_xpic_msk_reset_ahbl_error         ,	8

@ ---------------------------------------------------------------------
@ Register nfifo_fifo_start
@ => Start of NFIFO FIFO access addresses:
@    The following DW-addresses are associated with FIFOs:
@    Read accesses to an address in this area are reading from the appropriate FIFO,
@    write accesses to an address in this area are writing to the appropriate FIFO.
@    The number of FIFOs is limited by this address area to 1014.
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_fifo_start  ,	0x00000028
 .equ Adr_NX56_nfifo_nfifo_fifo_start,	0x10200028
 .equ Adr_NX56_nfifo_fifo_start      ,	0x10200028

@ ---------------------------------------------------------------------
@ Register nfifo_fifo_end
@ => End of NFIFO FIFO access addresses
@ => Mode: 
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_nfifo_fifo_end  ,	0x00000FFC
 .equ Adr_NX56_nfifo_nfifo_fifo_end,	0x10200FFC
 .equ Adr_NX56_nfifo_fifo_end      ,	0x10200FFC


@ =====================================================================
@
@ Area of feth, feth_buf
@
@ =====================================================================

 .equ Addr_NX56_feth, 0x10210000
 .equ Addr_NX56_feth_buf, 0x08210000

@ =====================================================================
@
@ Area of eth
@
@ =====================================================================

 .equ Addr_NX56_eth, 0x10210000

@ ---------------------------------------------------------------------
@ Register eth_config
@ => ETH config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_config,	0x00000000
 .equ Adr_NX56_eth_eth_config,	0x10210000
 .equ Adr_NX56_eth_config    ,	0x10210000

 .equ MSK_NX56_eth_config_rx_watermark_irq      ,	0x0000000f
 .equ SRT_NX56_eth_config_rx_watermark_irq      ,	0
 .equ MSK_NX56_eth_config_rx_sample_phase       ,	0x00000070
 .equ SRT_NX56_eth_config_rx_sample_phase       ,	4
 .equ MSK_NX56_eth_config_rx_delay_inputs       ,	0x00000080
 .equ SRT_NX56_eth_config_rx_delay_inputs       ,	7
 .equ MSK_NX56_eth_config_rx_allow_jumbo_packets,	0x00000100
 .equ SRT_NX56_eth_config_rx_allow_jumbo_packets,	8
 .equ MSK_NX56_eth_config_rx_exact_preamble     ,	0x00000200
 .equ SRT_NX56_eth_config_rx_exact_preamble     ,	9
 .equ MSK_NX56_eth_config_rx_no_preamble        ,	0x00000400
 .equ SRT_NX56_eth_config_rx_no_preamble        ,	10
 .equ MSK_NX56_eth_config_rx_dma_mode           ,	0x00000800
 .equ SRT_NX56_eth_config_rx_dma_mode           ,	11
 .equ MSK_NX56_eth_config_rx_systime_sfd        ,	0x00001000
 .equ SRT_NX56_eth_config_rx_systime_sfd        ,	12
 .equ MSK_NX56_eth_config_rx_enable             ,	0x00002000
 .equ SRT_NX56_eth_config_rx_enable             ,	13
 .equ MSK_NX56_eth_config_frequency             ,	0x08000000
 .equ SRT_NX56_eth_config_frequency             ,	27
 .equ MSK_NX56_eth_config_hd_suppress_loopback  ,	0x10000000
 .equ SRT_NX56_eth_config_hd_suppress_loopback  ,	28
 .equ MSK_NX56_eth_config_phy_mode              ,	0x20000000
 .equ SRT_NX56_eth_config_phy_mode              ,	29
 .equ MSK_NX56_eth_config_xpic_irq              ,	0x40000000
 .equ SRT_NX56_eth_config_xpic_irq              ,	30
 .equ MSK_NX56_eth_config_arm_irq               ,	0x80000000
 .equ SRT_NX56_eth_config_arm_irq               ,	31

@ ---------------------------------------------------------------------
@ Register eth_tx_config
@ => ETH config register
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_tx_config,	0x00000004
 .equ Adr_NX56_eth_eth_tx_config,	0x10210004
 .equ Adr_NX56_eth_tx_config    ,	0x10210004

 .equ MSK_NX56_eth_tx_config_tx_watermark_irq  ,	0x0000000f
 .equ SRT_NX56_eth_tx_config_tx_watermark_irq  ,	0
 .equ MSK_NX56_eth_tx_config_tx_watermark_start,	0x000000f0
 .equ SRT_NX56_eth_tx_config_tx_watermark_start,	4
 .equ MSK_NX56_eth_tx_config_tx_output_phase   ,	0x00000700
 .equ SRT_NX56_eth_tx_config_tx_output_phase   ,	8
 .equ MSK_NX56_eth_tx_config_tx_preamble_len   ,	0x0000f800
 .equ SRT_NX56_eth_tx_config_tx_preamble_len   ,	11
 .equ MSK_NX56_eth_tx_config_tx_min_ifg_cycles ,	0x001f0000
 .equ SRT_NX56_eth_tx_config_tx_min_ifg_cycles ,	16
 .equ MSK_NX56_eth_tx_config_tx_crs_low_cycles ,	0x03e00000
 .equ SRT_NX56_eth_tx_config_tx_crs_low_cycles ,	21
 .equ MSK_NX56_eth_tx_config_tx_abort_frame    ,	0x1c000000
 .equ SRT_NX56_eth_tx_config_tx_abort_frame    ,	26
 .equ MSK_NX56_eth_tx_config_tx_systime_sfd    ,	0x20000000
 .equ SRT_NX56_eth_tx_config_tx_systime_sfd    ,	29
 .equ MSK_NX56_eth_tx_config_tx_dma_mode       ,	0x40000000
 .equ SRT_NX56_eth_tx_config_tx_dma_mode       ,	30
 .equ MSK_NX56_eth_tx_config_half_duplex       ,	0x80000000
 .equ SRT_NX56_eth_tx_config_half_duplex       ,	31

@ ---------------------------------------------------------------------
@ Register eth_status
@ => ETH status register:
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_status,	0x00000008
 .equ Adr_NX56_eth_eth_status,	0x10210008
 .equ Adr_NX56_eth_status    ,	0x10210008

 .equ MSK_NX56_eth_status_rx_fill,	0x0000001f
 .equ SRT_NX56_eth_status_rx_fill,	0
 .equ MSK_NX56_eth_status_tx_fill,	0x00000f80
 .equ SRT_NX56_eth_status_tx_fill,	7

@ ---------------------------------------------------------------------
@ Register eth_tx_data
@ => Data to TX-FIFO:
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_tx_data,	0x0000000C
 .equ Adr_NX56_eth_eth_tx_data,	0x1021000C
 .equ Adr_NX56_eth_tx_data    ,	0x1021000C

 .equ MSK_NX56_eth_tx_data_val,	0xffffffff
 .equ SRT_NX56_eth_tx_data_val,	0

@ ---------------------------------------------------------------------
@ Register eth_rx_data
@ => Data from RX-FIFO:
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_rx_data,	0x00000010
 .equ Adr_NX56_eth_eth_rx_data,	0x10210010
 .equ Adr_NX56_eth_rx_data    ,	0x10210010

 .equ MSK_NX56_eth_rx_data_val,	0xffffffff
 .equ SRT_NX56_eth_rx_data_val,	0

@ ---------------------------------------------------------------------
@ Register eth_tx_len
@ => Length of data inside transmitted frame (between SFD and FCS)
@    Note: Set this value after previous frame is completely transmitted (irq-tx_frame_finished).
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_tx_len,	0x00000014
 .equ Adr_NX56_eth_eth_tx_len,	0x10210014
 .equ Adr_NX56_eth_tx_len    ,	0x10210014

 .equ MSK_NX56_eth_tx_len_val,	0x000007ff
 .equ SRT_NX56_eth_tx_len_val,	0

@ ---------------------------------------------------------------------
@ Register eth_rx_len_stat
@ => Length and status information of lastly received frame
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_rx_len_stat,	0x00000018
 .equ Adr_NX56_eth_eth_rx_len_stat,	0x10210018
 .equ Adr_NX56_eth_rx_len_stat    ,	0x10210018

 .equ MSK_NX56_eth_rx_len_stat_rx_len           ,	0x000007ff
 .equ SRT_NX56_eth_rx_len_stat_rx_len           ,	0
 .equ MSK_NX56_eth_rx_len_stat_rx_short_ifg     ,	0x08000000
 .equ SRT_NX56_eth_rx_len_stat_rx_short_ifg     ,	27
 .equ MSK_NX56_eth_rx_len_stat_rx_jumbo_packet  ,	0x10000000
 .equ SRT_NX56_eth_rx_len_stat_rx_jumbo_packet  ,	28
 .equ MSK_NX56_eth_rx_len_stat_rx_dribble_nibble,	0x20000000
 .equ SRT_NX56_eth_rx_len_stat_rx_dribble_nibble,	29
 .equ MSK_NX56_eth_rx_len_stat_rx_crc_error     ,	0x40000000
 .equ SRT_NX56_eth_rx_len_stat_rx_crc_error     ,	30
 .equ MSK_NX56_eth_rx_len_stat_rx_mii_rxerr     ,	0x80000000
 .equ SRT_NX56_eth_rx_len_stat_rx_mii_rxerr     ,	31

@ ---------------------------------------------------------------------
@ Register eth_rx_systime_ns
@ => Systime_ns sampled at start of received frame.
@    Exact position of start of frame is defined in eth_config-systime_sfd.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_rx_systime_ns,	0x00000020
 .equ Adr_NX56_eth_eth_rx_systime_ns,	0x10210020
 .equ Adr_NX56_eth_rx_systime_ns    ,	0x10210020

 .equ MSK_NX56_eth_rx_systime_ns_val,	0xffffffff
 .equ SRT_NX56_eth_rx_systime_ns_val,	0

@ ---------------------------------------------------------------------
@ Register eth_tx_systime_ns
@ => Systime_ns sampled at start of transmitted frame.
@    Exact position of start of frame is defined in eth_tx_config-systime_sfd.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_tx_systime_ns,	0x00000024
 .equ Adr_NX56_eth_eth_tx_systime_ns,	0x10210024
 .equ Adr_NX56_eth_tx_systime_ns    ,	0x10210024

 .equ MSK_NX56_eth_tx_systime_ns_val,	0xffffffff
 .equ SRT_NX56_eth_tx_systime_ns_val,	0

@ ---------------------------------------------------------------------
@ Register eth_irq_raw
@ => Raw IRQ:
@    Read access shows status of unmasked IRQs. \
@    IRQs are set automatically and reset by writing to this register:
@    Write access with '1' resets the appropriate IRQ.
@    Write access with '0' does not influence this bit.
@    Write access with '1' to rx_/tx_fifo_undr/_ovfl resets RX-FIFO/TX-FIFO.
@    Bits rx_data and tx_fifo are cleared by reading from/filling the appropriate FIFO.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_irq_raw,	0x00000028
 .equ Adr_NX56_eth_eth_irq_raw,	0x10210028
 .equ Adr_NX56_eth_irq_raw    ,	0x10210028

 .equ MSK_NX56_eth_irq_raw_tx_fifo          ,	0x00000001
 .equ SRT_NX56_eth_irq_raw_tx_fifo          ,	0
 .equ MSK_NX56_eth_irq_raw_tx_frame_finished,	0x00000002
 .equ SRT_NX56_eth_irq_raw_tx_frame_finished,	1
 .equ MSK_NX56_eth_irq_raw_rx_data          ,	0x00000004
 .equ SRT_NX56_eth_irq_raw_rx_data          ,	2
 .equ MSK_NX56_eth_irq_raw_rx_frame_finished,	0x00000008
 .equ SRT_NX56_eth_irq_raw_rx_frame_finished,	3
 .equ MSK_NX56_eth_irq_raw_tx_fifo_undr     ,	0x00000010
 .equ SRT_NX56_eth_irq_raw_tx_fifo_undr     ,	4
 .equ MSK_NX56_eth_irq_raw_tx_fifo_ovfl     ,	0x00000020
 .equ SRT_NX56_eth_irq_raw_tx_fifo_ovfl     ,	5
 .equ MSK_NX56_eth_irq_raw_rx_fifo_undr     ,	0x00000040
 .equ SRT_NX56_eth_irq_raw_rx_fifo_undr     ,	6
 .equ MSK_NX56_eth_irq_raw_rx_fifo_ovfl     ,	0x00000080
 .equ SRT_NX56_eth_irq_raw_rx_fifo_ovfl     ,	7
 .equ MSK_NX56_eth_irq_raw_rx_cpu_too_slow  ,	0x00000100
 .equ SRT_NX56_eth_irq_raw_rx_cpu_too_slow  ,	8
 .equ MSK_NX56_eth_irq_raw_rx_short_dv      ,	0x00000200
 .equ SRT_NX56_eth_irq_raw_rx_short_dv      ,	9
 .equ MSK_NX56_eth_irq_raw_rx_preamble_error,	0x00000400
 .equ SRT_NX56_eth_irq_raw_rx_preamble_error,	10
 .equ MSK_NX56_eth_irq_raw_tx_col           ,	0x00000800
 .equ SRT_NX56_eth_irq_raw_tx_col           ,	11
 .equ MSK_NX56_eth_irq_raw_tx_late_col      ,	0x00001000
 .equ SRT_NX56_eth_irq_raw_tx_late_col      ,	12

@ ---------------------------------------------------------------------
@ Register eth_irq_masked
@ => Masked IRQ:
@    Shows status of masked IRQs as connected to ARM.
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_irq_masked,	0x0000002C
 .equ Adr_NX56_eth_eth_irq_masked,	0x1021002C
 .equ Adr_NX56_eth_irq_masked    ,	0x1021002C

 .equ MSK_NX56_eth_irq_masked_tx_fifo          ,	0x00000001
 .equ SRT_NX56_eth_irq_masked_tx_fifo          ,	0
 .equ MSK_NX56_eth_irq_masked_tx_frame_finished,	0x00000002
 .equ SRT_NX56_eth_irq_masked_tx_frame_finished,	1
 .equ MSK_NX56_eth_irq_masked_rx_data          ,	0x00000004
 .equ SRT_NX56_eth_irq_masked_rx_data          ,	2
 .equ MSK_NX56_eth_irq_masked_rx_frame_finished,	0x00000008
 .equ SRT_NX56_eth_irq_masked_rx_frame_finished,	3
 .equ MSK_NX56_eth_irq_masked_tx_fifo_undr     ,	0x00000010
 .equ SRT_NX56_eth_irq_masked_tx_fifo_undr     ,	4
 .equ MSK_NX56_eth_irq_masked_tx_fifo_ovfl     ,	0x00000020
 .equ SRT_NX56_eth_irq_masked_tx_fifo_ovfl     ,	5
 .equ MSK_NX56_eth_irq_masked_rx_fifo_undr     ,	0x00000040
 .equ SRT_NX56_eth_irq_masked_rx_fifo_undr     ,	6
 .equ MSK_NX56_eth_irq_masked_rx_fifo_ovfl     ,	0x00000080
 .equ SRT_NX56_eth_irq_masked_rx_fifo_ovfl     ,	7
 .equ MSK_NX56_eth_irq_masked_rx_cpu_too_slow  ,	0x00000100
 .equ SRT_NX56_eth_irq_masked_rx_cpu_too_slow  ,	8
 .equ MSK_NX56_eth_irq_masked_rx_short_dv      ,	0x00000200
 .equ SRT_NX56_eth_irq_masked_rx_short_dv      ,	9
 .equ MSK_NX56_eth_irq_masked_rx_preamble_error,	0x00000400
 .equ SRT_NX56_eth_irq_masked_rx_preamble_error,	10
 .equ MSK_NX56_eth_irq_masked_tx_col           ,	0x00000800
 .equ SRT_NX56_eth_irq_masked_tx_col           ,	11
 .equ MSK_NX56_eth_irq_masked_tx_late_col      ,	0x00001000
 .equ SRT_NX56_eth_irq_masked_tx_late_col      ,	12

@ ---------------------------------------------------------------------
@ Register eth_irq_msk_set
@ => IRQ enable mask:
@    The IRQ mask enables interrupt requests for corresponding interrupt sources. \
@    As its bits might be changed by different software tasks, \
@    the IRQ mask register is not writable directly, but by set and reset masks:
@    Write access with '1' sets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_eth_irq_raw.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_irq_msk_set,	0x00000030
 .equ Adr_NX56_eth_eth_irq_msk_set,	0x10210030
 .equ Adr_NX56_eth_irq_msk_set    ,	0x10210030

 .equ MSK_NX56_eth_irq_msk_set_tx_fifo          ,	0x00000001
 .equ SRT_NX56_eth_irq_msk_set_tx_fifo          ,	0
 .equ MSK_NX56_eth_irq_msk_set_tx_frame_finished,	0x00000002
 .equ SRT_NX56_eth_irq_msk_set_tx_frame_finished,	1
 .equ MSK_NX56_eth_irq_msk_set_rx_data          ,	0x00000004
 .equ SRT_NX56_eth_irq_msk_set_rx_data          ,	2
 .equ MSK_NX56_eth_irq_msk_set_rx_frame_finished,	0x00000008
 .equ SRT_NX56_eth_irq_msk_set_rx_frame_finished,	3
 .equ MSK_NX56_eth_irq_msk_set_tx_fifo_undr     ,	0x00000010
 .equ SRT_NX56_eth_irq_msk_set_tx_fifo_undr     ,	4
 .equ MSK_NX56_eth_irq_msk_set_tx_fifo_ovfl     ,	0x00000020
 .equ SRT_NX56_eth_irq_msk_set_tx_fifo_ovfl     ,	5
 .equ MSK_NX56_eth_irq_msk_set_rx_fifo_undr     ,	0x00000040
 .equ SRT_NX56_eth_irq_msk_set_rx_fifo_undr     ,	6
 .equ MSK_NX56_eth_irq_msk_set_rx_fifo_ovfl     ,	0x00000080
 .equ SRT_NX56_eth_irq_msk_set_rx_fifo_ovfl     ,	7
 .equ MSK_NX56_eth_irq_msk_set_rx_cpu_too_slow  ,	0x00000100
 .equ SRT_NX56_eth_irq_msk_set_rx_cpu_too_slow  ,	8
 .equ MSK_NX56_eth_irq_msk_set_rx_short_dv      ,	0x00000200
 .equ SRT_NX56_eth_irq_msk_set_rx_short_dv      ,	9
 .equ MSK_NX56_eth_irq_msk_set_rx_preamble_error,	0x00000400
 .equ SRT_NX56_eth_irq_msk_set_rx_preamble_error,	10
 .equ MSK_NX56_eth_irq_msk_set_tx_col           ,	0x00000800
 .equ SRT_NX56_eth_irq_msk_set_tx_col           ,	11
 .equ MSK_NX56_eth_irq_msk_set_tx_late_col      ,	0x00001000
 .equ SRT_NX56_eth_irq_msk_set_tx_late_col      ,	12

@ ---------------------------------------------------------------------
@ Register eth_irq_msk_reset
@ => IRQ disable mask:
@    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources:
@    Write access with '1' resets interrupt mask bit.
@    Write access with '0' does not influence this bit.
@    Read access shows actual interrupt mask.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_eth_irq_msk_reset,	0x00000034
 .equ Adr_NX56_eth_eth_irq_msk_reset,	0x10210034
 .equ Adr_NX56_eth_irq_msk_reset    ,	0x10210034

 .equ MSK_NX56_eth_irq_msk_reset_tx_fifo          ,	0x00000001
 .equ SRT_NX56_eth_irq_msk_reset_tx_fifo          ,	0
 .equ MSK_NX56_eth_irq_msk_reset_tx_frame_finished,	0x00000002
 .equ SRT_NX56_eth_irq_msk_reset_tx_frame_finished,	1
 .equ MSK_NX56_eth_irq_msk_reset_rx_data          ,	0x00000004
 .equ SRT_NX56_eth_irq_msk_reset_rx_data          ,	2
 .equ MSK_NX56_eth_irq_msk_reset_rx_frame_finished,	0x00000008
 .equ SRT_NX56_eth_irq_msk_reset_rx_frame_finished,	3
 .equ MSK_NX56_eth_irq_msk_reset_tx_fifo_undr     ,	0x00000010
 .equ SRT_NX56_eth_irq_msk_reset_tx_fifo_undr     ,	4
 .equ MSK_NX56_eth_irq_msk_reset_tx_fifo_ovfl     ,	0x00000020
 .equ SRT_NX56_eth_irq_msk_reset_tx_fifo_ovfl     ,	5
 .equ MSK_NX56_eth_irq_msk_reset_rx_fifo_undr     ,	0x00000040
 .equ SRT_NX56_eth_irq_msk_reset_rx_fifo_undr     ,	6
 .equ MSK_NX56_eth_irq_msk_reset_rx_fifo_ovfl     ,	0x00000080
 .equ SRT_NX56_eth_irq_msk_reset_rx_fifo_ovfl     ,	7
 .equ MSK_NX56_eth_irq_msk_reset_rx_cpu_too_slow  ,	0x00000100
 .equ SRT_NX56_eth_irq_msk_reset_rx_cpu_too_slow  ,	8
 .equ MSK_NX56_eth_irq_msk_reset_rx_short_dv      ,	0x00000200
 .equ SRT_NX56_eth_irq_msk_reset_rx_short_dv      ,	9
 .equ MSK_NX56_eth_irq_msk_reset_rx_preamble_error,	0x00000400
 .equ SRT_NX56_eth_irq_msk_reset_rx_preamble_error,	10
 .equ MSK_NX56_eth_irq_msk_reset_tx_col           ,	0x00000800
 .equ SRT_NX56_eth_irq_msk_reset_tx_col           ,	11
 .equ MSK_NX56_eth_irq_msk_reset_tx_late_col      ,	0x00001000
 .equ SRT_NX56_eth_irq_msk_reset_tx_late_col      ,	12


@ =====================================================================
@
@ Area of erich, erich_buf
@
@ =====================================================================

 .equ Addr_NX56_erich, 0x10280000
 .equ Addr_NX56_erich_buf, 0x08280000

@ =====================================================================
@
@ Area of intramhs_straight_mirror, intramhs_dpm_mirror, intramhs_arm_mirror, intramhs_xpic_mirror, intramhs_mirror_hi, intramhs_mirror_itcm, intramhs_buf_straight_mirror, intramhs_buf_xpic_mirror, intramhs_buf_arm_mirror, intramhs, intramhs_mirror_dtcm, intramhs_buf_dpm_mirror
@
@ =====================================================================

 .equ Addr_NX56_intramhs_straight_mirror, 0x1A000000
 .equ Addr_NX56_intramhs_dpm_mirror, 0x1A008000
 .equ Addr_NX56_intramhs_arm_mirror, 0x1A010000
 .equ Addr_NX56_intramhs_xpic_mirror, 0x1A018000
 .equ Addr_NX56_intramhs_mirror_hi, 0xFFEA0000
 .equ Addr_NX56_intramhs_mirror_itcm, 0x000A0000
 .equ Addr_NX56_intramhs_buf_straight_mirror, 0x0A000000
 .equ Addr_NX56_intramhs_buf_xpic_mirror, 0x0A018000
 .equ Addr_NX56_intramhs_buf_arm_mirror, 0x0A010000
 .equ Addr_NX56_intramhs, 0x080A0000
 .equ Addr_NX56_intramhs_mirror_dtcm, 0x040A0000
 .equ Addr_NX56_intramhs_buf_dpm_mirror, 0x0A008000

@ ---------------------------------------------------------------------
@ Register intramhs_base
@ => Internal Handshake RAM start address.
@    Area size: 32kB
@    Handshake RAM is mirrored several times in this AHBL slave. Special handshake IRQ generation can be
@    associated to single mirrors. View HANDSHAKE_CTRL register area for details.
@    Read accesses in this memory area: 0WS, byte accessable
@    Write accesses in this memory area: 0WS, byte accessable
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intramhs_base                         ,	0x00000000
 .equ Adr_NX56_intramhs_straight_mirror_intramhs_base    ,	0x1A000000
 .equ Adr_NX56_intramhs_dpm_mirror_intramhs_base         ,	0x1A008000
 .equ Adr_NX56_intramhs_arm_mirror_intramhs_base         ,	0x1A010000
 .equ Adr_NX56_intramhs_xpic_mirror_intramhs_base        ,	0x1A018000
 .equ Adr_NX56_intramhs_mirror_hi_intramhs_base          ,	0xFFEA0000
 .equ Adr_NX56_intramhs_mirror_itcm_intramhs_base        ,	0x000A0000
 .equ Adr_NX56_intramhs_buf_straight_mirror_intramhs_base,	0x0A000000
 .equ Adr_NX56_intramhs_buf_xpic_mirror_intramhs_base    ,	0x0A018000
 .equ Adr_NX56_intramhs_buf_arm_mirror_intramhs_base     ,	0x0A010000
 .equ Adr_NX56_intramhs_intramhs_base                    ,	0x080A0000
 .equ Adr_NX56_intramhs_mirror_dtcm_intramhs_base        ,	0x040A0000
 .equ Adr_NX56_intramhs_buf_dpm_mirror_intramhs_base     ,	0x0A008000

@ ---------------------------------------------------------------------
@ Register intramhs_end
@ => Internal Handshake RAM end address
@    ARM special: When ARM instruction TCM is enabled, access to "mirror_itcm" areas can not be done. They are hidden by instruction TCM.
@    ARM special: When ARM data TCM is enabled, access to "mirror_dtcm" areas can not be done. They are hidden by data TCM.
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_intramhs_end                         ,	0x00007FFC
 .equ Adr_NX56_intramhs_straight_mirror_intramhs_end    ,	0x1A007FFC
 .equ Adr_NX56_intramhs_dpm_mirror_intramhs_end         ,	0x1A00FFFC
 .equ Adr_NX56_intramhs_arm_mirror_intramhs_end         ,	0x1A017FFC
 .equ Adr_NX56_intramhs_xpic_mirror_intramhs_end        ,	0x1A01FFFC
 .equ Adr_NX56_intramhs_mirror_hi_intramhs_end          ,	0xFFEA7FFC
 .equ Adr_NX56_intramhs_mirror_itcm_intramhs_end        ,	0x000A7FFC
 .equ Adr_NX56_intramhs_buf_straight_mirror_intramhs_end,	0x0A007FFC
 .equ Adr_NX56_intramhs_buf_xpic_mirror_intramhs_end    ,	0x0A01FFFC
 .equ Adr_NX56_intramhs_buf_arm_mirror_intramhs_end     ,	0x0A017FFC
 .equ Adr_NX56_intramhs_intramhs_end                    ,	0x080A7FFC
 .equ Adr_NX56_intramhs_mirror_dtcm_intramhs_end        ,	0x040A7FFC
 .equ Adr_NX56_intramhs_buf_dpm_mirror_intramhs_end     ,	0x0A00FFFC


@ =====================================================================
@
@ Area of hif_sdram_lite, sdram
@
@ =====================================================================

 .equ Addr_NX56_hif_sdram_lite, 0x40000000
 .equ Addr_NX56_sdram, 0x80000000

@ ---------------------------------------------------------------------
@ Register sdram_base
@ => external SDRAM chipselect start address
@    Area size: 512MB
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sdram_base           ,	0x00000000
 .equ Adr_NX56_hif_sdram_lite_sdram_base,	0x40000000
 .equ Adr_NX56_sdram_sdram_base         ,	0x80000000

@ ---------------------------------------------------------------------
@ Register sdram_end
@ => external SDRAM chipselect end address
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_sdram_end           ,	0x1FFFFFFC
 .equ Adr_NX56_hif_sdram_lite_sdram_end,	0x5FFFFFFC
 .equ Adr_NX56_sdram_sdram_end         ,	0x9FFFFFFC


@ =====================================================================
@
@ Area of hif_extsram, extsram
@
@ =====================================================================

 .equ Addr_NX56_hif_extsram, 0x60000000
 .equ Addr_NX56_extsram, 0xC0000000

@ ---------------------------------------------------------------------
@ Register cs0_base
@ => external SRAM/Flash/NVRAM,... chip-select 0 start address
@    Area size: 64MB
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs0_base        ,	0x00000000
 .equ Adr_NX56_hif_extsram_cs0_base,	0x60000000
 .equ Adr_NX56_extsram_cs0_base    ,	0xC0000000

@ ---------------------------------------------------------------------
@ Register cs0_end
@ => external SRAM/Flash/NVRAM,... chip select 0 end address
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs0_end        ,	0x03FFFFFC
 .equ Adr_NX56_hif_extsram_cs0_end,	0x63FFFFFC
 .equ Adr_NX56_extsram_cs0_end    ,	0xC3FFFFFC

@ ---------------------------------------------------------------------
@ Register cs1_base
@ => external SRAM/Flash/NVRAM,... chip-select 1 start address
@    Area size: 64MB
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs1_base        ,	0x04000000
 .equ Adr_NX56_hif_extsram_cs1_base,	0x64000000
 .equ Adr_NX56_extsram_cs1_base    ,	0xC4000000

@ ---------------------------------------------------------------------
@ Register cs1_end
@ => external SRAM/Flash/NVRAM,... chip select 1 end address
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs1_end        ,	0x07FFFFFC
 .equ Adr_NX56_hif_extsram_cs1_end,	0x67FFFFFC
 .equ Adr_NX56_extsram_cs1_end    ,	0xC7FFFFFC

@ ---------------------------------------------------------------------
@ Register cs2_base
@ => external SRAM/Flash/NVRAM,... chip-select 2 start address
@    Area size: 64MB
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs2_base        ,	0x08000000
 .equ Adr_NX56_hif_extsram_cs2_base,	0x68000000
 .equ Adr_NX56_extsram_cs2_base    ,	0xC8000000

@ ---------------------------------------------------------------------
@ Register cs2_end
@ => external SRAM/Flash/NVRAM,... chip select 2 end address
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs2_end        ,	0x0BFFFFFC
 .equ Adr_NX56_hif_extsram_cs2_end,	0x6BFFFFFC
 .equ Adr_NX56_extsram_cs2_end    ,	0xCBFFFFFC

@ ---------------------------------------------------------------------
@ Register cs3_base
@ => external SRAM/Flash/NVRAM,... chip-select 3 start address
@    Area size: 64MB
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs3_base        ,	0x0C000000
 .equ Adr_NX56_hif_extsram_cs3_base,	0x6C000000
 .equ Adr_NX56_extsram_cs3_base    ,	0xCC000000

@ ---------------------------------------------------------------------
@ Register cs3_end
@ => external SRAM/Flash/NVRAM,... chip select 3 end address
@ => Mode: R
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_cs3_end        ,	0x0FFFFFFC
 .equ Adr_NX56_hif_extsram_cs3_end,	0x6FFFFFFC
 .equ Adr_NX56_extsram_cs3_end    ,	0xCFFFFFFC


@ =====================================================================
@
@ Area of 
@
@ =====================================================================


@ ---------------------------------------------------------------------
@ Register xc_extbus_sel_ctrl
@ => External XC-bus-selection register - FPGA/EVA-Board version only!!!
@    Bus coding:
@    0000 : PHY1
@    0001 : PHY2
@    0010 : MMC
@    0011 : ProfiBus
@    0100 : CAN
@    0101 : ASI
@    1111 : nothing selected
@    Each XC-block can be assigned to one of these busses by setting the according bit-arear to the
@    value, the bus is coded with.
@    NO bus MUST be assigned to more than one XC-Block!
@ => Mode: R/W
@ ---------------------------------------------------------------------

 .equ REL_Adr_NX56_xc_extbus_sel_ctrl,	0x00000000

 .equ MSK_NX56_xc_extbus_sel_ctrl_xmac0_sel,	0x0000000f
 .equ SRT_NX56_xc_extbus_sel_ctrl_xmac0_sel,	0
 .equ MSK_NX56_xc_extbus_sel_ctrl_xmac1_sel,	0x000000f0
 .equ SRT_NX56_xc_extbus_sel_ctrl_xmac1_sel,	4
 .equ MSK_NX56_xc_extbus_sel_ctrl_xmac2_sel,	0x00000f00
 .equ SRT_NX56_xc_extbus_sel_ctrl_xmac2_sel,	8
 .equ MSK_NX56_xc_extbus_sel_ctrl_xmac3_sel,	0x0000f000
 .equ SRT_NX56_xc_extbus_sel_ctrl_xmac3_sel,	12



