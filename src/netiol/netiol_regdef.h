/*********************************************************************/
/* from regdef.v by regdef2h auto-generated C-header file            */
/* please see the regdef.html file for detailed register description */
/*********************************************************************/

#ifndef __NETIOL_REGDEF_H__
#define __NETIOL_REGDEF_H__

#include <stdint.h>

/* ===================================================================== */

/* Area of intlogic */

/* ===================================================================== */

#define Addr_NIOL_intlogic 0x00000000U

/* ===================================================================== */

/* Area of sdm_adc */

/* ===================================================================== */

#define Addr_NIOL_sdm_adc 0x00000000U

/* --------------------------------------------------------------------- */
/* Register sdm_adc_wait_mux */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_wait_mux     0x00000004U
#define Adr_NIOL_sdm_adc_sdm_adc_wait_mux 0x00000004U
#define Adr_NIOL_sdm_adc_wait_mux         0x00000004U
#define DFLT_VAL_NIOL_sdm_adc_wait_mux    0x00000000U

#define MSK_NIOL_sdm_adc_wait_mux_wait_mux         0x000000ffU
#define SRT_NIOL_sdm_adc_wait_mux_wait_mux         0
#define DFLT_VAL_NIOL_sdm_adc_wait_mux_wait_mux    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_wait_mux_wait_mux 0x00000000U

/* all used bits of 'NIOL_sdm_adc_wait_mux': */
#define MSK_USED_BITS_NIOL_sdm_adc_wait_mux 0x000000ffU

enum {
  BFW_NIOL_sdm_adc_wait_mux_wait_mux  = 8,  /* [7:0] */
  BFW_NIOL_sdm_adc_wait_mux_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SDM_ADC_WAIT_MUX_BIT_Ttag {
  unsigned int wait_mux  : BFW_NIOL_sdm_adc_wait_mux_wait_mux;  /* in SDM clock cycles. To be set to ADC_TSETTLE,max * f(sdm_clk) */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_wait_mux_reserved1; /* reserved                                                       */
} NIOL_SDM_ADC_WAIT_MUX_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SDM_ADC_WAIT_MUX_BIT_T bf;
} NIOL_SDM_ADC_WAIT_MUX_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_ac_low */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_ac_low     0x00000008U
#define Adr_NIOL_sdm_adc_sdm_adc_ac_low 0x00000008U
#define Adr_NIOL_sdm_adc_ac_low         0x00000008U
#define DFLT_VAL_NIOL_sdm_adc_ac_low    0x00000010U

#define MSK_NIOL_sdm_adc_ac_low_ac_low         0x0000fff0U
#define SRT_NIOL_sdm_adc_ac_low_ac_low         4
#define DFLT_VAL_NIOL_sdm_adc_ac_low_ac_low    0x00000010U
#define DFLT_BF_VAL_NIOL_sdm_adc_ac_low_ac_low 0x00000001U

/* all used bits of 'NIOL_sdm_adc_ac_low': */
#define MSK_USED_BITS_NIOL_sdm_adc_ac_low 0x0000fff0U

enum {
  BFW_NIOL_sdm_adc_ac_low_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_sdm_adc_ac_low_ac_low    = 12, /* [15:4] */
  BFW_NIOL_sdm_adc_ac_low_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_AC_LOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_sdm_adc_ac_low_reserved1; /* reserved                                           */
  unsigned int ac_low    : BFW_NIOL_sdm_adc_ac_low_ac_low;    /* write access allowed for AC_LOW <= TADR <= AC_HIGH */
                                                              /* There is no access control for read access.        */
  unsigned int reserved2 : BFW_NIOL_sdm_adc_ac_low_reserved2; /* reserved                                           */
} NIOL_SDM_ADC_AC_LOW_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_SDM_ADC_AC_LOW_BIT_T bf;
} NIOL_SDM_ADC_AC_LOW_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_ac_high */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_ac_high     0x0000000CU
#define Adr_NIOL_sdm_adc_sdm_adc_ac_high 0x0000000CU
#define Adr_NIOL_sdm_adc_ac_high         0x0000000CU
#define DFLT_VAL_NIOL_sdm_adc_ac_high    0x00000000U

#define MSK_NIOL_sdm_adc_ac_high_ac_high         0x0000fff0U
#define SRT_NIOL_sdm_adc_ac_high_ac_high         4
#define DFLT_VAL_NIOL_sdm_adc_ac_high_ac_high    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_ac_high_ac_high 0x00000000U

/* all used bits of 'NIOL_sdm_adc_ac_high': */
#define MSK_USED_BITS_NIOL_sdm_adc_ac_high 0x0000fff0U

enum {
  BFW_NIOL_sdm_adc_ac_high_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_sdm_adc_ac_high_ac_high   = 12, /* [15:4] */
  BFW_NIOL_sdm_adc_ac_high_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_AC_HIGH_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_sdm_adc_ac_high_reserved1; /* reserved  */
  unsigned int ac_high   : BFW_NIOL_sdm_adc_ac_high_ac_high;   /* see above */
  unsigned int reserved2 : BFW_NIOL_sdm_adc_ac_high_reserved2; /* reserved  */
} NIOL_SDM_ADC_AC_HIGH_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_AC_HIGH_BIT_T bf;
} NIOL_SDM_ADC_AC_HIGH_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_sdm_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_sdm_cfg     0x00000010U
#define Adr_NIOL_sdm_adc_sdm_adc_sdm_cfg 0x00000010U
#define Adr_NIOL_sdm_adc_sdm_cfg         0x00000010U
#define DFLT_VAL_NIOL_sdm_adc_sdm_cfg    0x00000003U

#define MSK_NIOL_sdm_adc_sdm_cfg_clk_div             0x000000ffU
#define SRT_NIOL_sdm_adc_sdm_cfg_clk_div             0
#define DFLT_VAL_NIOL_sdm_adc_sdm_cfg_clk_div        0x00000003U
#define DFLT_BF_VAL_NIOL_sdm_adc_sdm_cfg_clk_div     0x00000003U
#define MSK_NIOL_sdm_adc_sdm_cfg_spol                0x00000100U
#define SRT_NIOL_sdm_adc_sdm_cfg_spol                8
#define DFLT_VAL_NIOL_sdm_adc_sdm_cfg_spol           0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_sdm_cfg_spol        0x00000000U
#define MSK_NIOL_sdm_adc_sdm_cfg_clk_div_add         0x0000fe00U
#define SRT_NIOL_sdm_adc_sdm_cfg_clk_div_add         9
#define DFLT_VAL_NIOL_sdm_adc_sdm_cfg_clk_div_add    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_sdm_cfg_clk_div_add 0x00000000U

/* all used bits of 'NIOL_sdm_adc_sdm_cfg': */
#define MSK_USED_BITS_NIOL_sdm_adc_sdm_cfg 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_sdm_cfg_clk_div     = 8,  /* [7:0] */
  BFW_NIOL_sdm_adc_sdm_cfg_spol        = 1,  /* [8] */
  BFW_NIOL_sdm_adc_sdm_cfg_clk_div_add = 7,  /* [15:9] */
  BFW_NIOL_sdm_adc_sdm_cfg_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_SDM_CFG_BIT_Ttag {
  unsigned int clk_div     : BFW_NIOL_sdm_adc_sdm_cfg_clk_div;     /* 3..MAX : f(SDM_CLK) <= f(clk) / (clk_div+1)                                                                             */
  unsigned int spol        : BFW_NIOL_sdm_adc_sdm_cfg_spol;        /* 0: SDM data sampled at rising edge of sdc_clk                                                                           */
                                                                   /* 1: SDM data sampled at falling edge of sdc_clk                                                                          */
  unsigned int clk_div_add : BFW_NIOL_sdm_adc_sdm_cfg_clk_div_add; /* 0: sdm_clk is generated as specified by clk_div                                                                         */
                                                                   /* 1: sdm_clk is generated as specified by clk_div                                                                         */
                                                                   /* 2: every second SDM_CLK period is extended by one clk cycle vs. the value specified in clk_div (T=clk_div +2)           */
                                                                   /* 3..MAX: every clk_div_add SDM_CLK period is extended by one clk cycle vs. the value specified in clk_div (T=clk_div +2) */
  unsigned int reserved1   : BFW_NIOL_sdm_adc_sdm_cfg_reserved1;   /* reserved                                                                                                                */
} NIOL_SDM_ADC_SDM_CFG_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_SDM_CFG_BIT_T bf;
} NIOL_SDM_ADC_SDM_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_cic_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_cic_cfg     0x00000014U
#define Adr_NIOL_sdm_adc_sdm_adc_cic_cfg 0x00000014U
#define Adr_NIOL_sdm_adc_cic_cfg         0x00000014U
#define DFLT_VAL_NIOL_sdm_adc_cic_cfg    0x00000000U

#define MSK_NIOL_sdm_adc_cic_cfg_dr            0x00000007U
#define SRT_NIOL_sdm_adc_cic_cfg_dr            0
#define DFLT_VAL_NIOL_sdm_adc_cic_cfg_dr       0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_cic_cfg_dr    0x00000000U
#define MSK_NIOL_sdm_adc_cic_cfg_order         0x00000008U
#define SRT_NIOL_sdm_adc_cic_cfg_order         3
#define DFLT_VAL_NIOL_sdm_adc_cic_cfg_order    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_cic_cfg_order 0x00000000U

/* all used bits of 'NIOL_sdm_adc_cic_cfg': */
#define MSK_USED_BITS_NIOL_sdm_adc_cic_cfg 0x0000000fU

enum {
  BFW_NIOL_sdm_adc_cic_cfg_dr        = 3,  /* [2:0] */
  BFW_NIOL_sdm_adc_cic_cfg_order     = 1,  /* [3] */
  BFW_NIOL_sdm_adc_cic_cfg_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_SDM_ADC_CIC_CFG_BIT_Ttag {
  unsigned int dr        : BFW_NIOL_sdm_adc_cic_cfg_dr;        /* 0..7 : Decimation rate of the CIC filter is 2^(dr+1)                                                      */
                                                               /* The output of the CIC filter is shifted depending on the dr to be normalized to 16 bit maximum amplitude. */
  unsigned int order     : BFW_NIOL_sdm_adc_cic_cfg_order;     /* 0: 2nd order CIC                                                                                          */
                                                               /* 1: 3rd order CIC                                                                                          */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_cic_cfg_reserved1; /* reserved                                                                                                  */
} NIOL_SDM_ADC_CIC_CFG_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_CIC_CFG_BIT_T bf;
} NIOL_SDM_ADC_CIC_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_sum_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_sum_cfg     0x00000018U
#define Adr_NIOL_sdm_adc_sdm_adc_sum_cfg 0x00000018U
#define Adr_NIOL_sdm_adc_sum_cfg         0x00000018U
#define DFLT_VAL_NIOL_sdm_adc_sum_cfg    0x00000000U

#define MSK_NIOL_sdm_adc_sum_cfg_no            0x000003ffU
#define SRT_NIOL_sdm_adc_sum_cfg_no            0
#define DFLT_VAL_NIOL_sdm_adc_sum_cfg_no       0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_sum_cfg_no    0x00000000U
#define MSK_NIOL_sdm_adc_sum_cfg_shift         0x00003c00U
#define SRT_NIOL_sdm_adc_sum_cfg_shift         10
#define DFLT_VAL_NIOL_sdm_adc_sum_cfg_shift    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_sum_cfg_shift 0x00000000U

/* all used bits of 'NIOL_sdm_adc_sum_cfg': */
#define MSK_USED_BITS_NIOL_sdm_adc_sum_cfg 0x00003fffU

enum {
  BFW_NIOL_sdm_adc_sum_cfg_no        = 10, /* [9:0] */
  BFW_NIOL_sdm_adc_sum_cfg_shift     = 4,  /* [13:10] */
  BFW_NIOL_sdm_adc_sum_cfg_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_SDM_ADC_SUM_CFG_BIT_Ttag {
  unsigned int no        : BFW_NIOL_sdm_adc_sum_cfg_no;        /* number of CIC outputs -1 to sum (1..1024 CIC outputs are summed) */
  unsigned int shift     : BFW_NIOL_sdm_adc_sum_cfg_shift;     /* 0..10: SUM <= SUM32 >> shift                                     */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_sum_cfg_reserved1; /* reserved                                                         */
} NIOL_SDM_ADC_SUM_CFG_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_SUM_CFG_BIT_T bf;
} NIOL_SDM_ADC_SUM_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_pc */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_pc     0x0000001CU
#define Adr_NIOL_sdm_adc_sdm_adc_pc 0x0000001CU
#define Adr_NIOL_sdm_adc_pc         0x0000001CU
#define DFLT_VAL_NIOL_sdm_adc_pc    0x00000000U

#define MSK_NIOL_sdm_adc_pc_pc         0x0000fffeU
#define SRT_NIOL_sdm_adc_pc_pc         1
#define DFLT_VAL_NIOL_sdm_adc_pc_pc    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_pc_pc 0x00000000U

/* all used bits of 'NIOL_sdm_adc_pc': */
#define MSK_USED_BITS_NIOL_sdm_adc_pc 0x0000fffeU

enum {
  BFW_NIOL_sdm_adc_pc_reserved1 = 1,  /* [0] */
  BFW_NIOL_sdm_adc_pc_pc        = 15, /* [15:1] */
  BFW_NIOL_sdm_adc_pc_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_PC_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_sdm_adc_pc_reserved1; /* reserved                */
  unsigned int pc        : BFW_NIOL_sdm_adc_pc_pc;        /* current program counter */
  unsigned int reserved2 : BFW_NIOL_sdm_adc_pc_reserved2; /* reserved                */
} NIOL_SDM_ADC_PC_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_SDM_ADC_PC_BIT_T bf;
} NIOL_SDM_ADC_PC_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_tadr */
/* => State (read only) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_tadr     0x00000020U
#define Adr_NIOL_sdm_adc_sdm_adc_tadr 0x00000020U
#define Adr_NIOL_sdm_adc_tadr         0x00000020U
#define DFLT_VAL_NIOL_sdm_adc_tadr    0x00000000U

#define MSK_NIOL_sdm_adc_tadr_tadr         0x0000fffeU
#define SRT_NIOL_sdm_adc_tadr_tadr         1
#define DFLT_VAL_NIOL_sdm_adc_tadr_tadr    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_tadr_tadr 0x00000000U

/* all used bits of 'NIOL_sdm_adc_tadr': */
#define MSK_USED_BITS_NIOL_sdm_adc_tadr 0x0000fffeU

enum {
  BFW_NIOL_sdm_adc_tadr_reserved1 = 1,  /* [0] */
  BFW_NIOL_sdm_adc_tadr_tadr      = 15, /* [15:1] */
  BFW_NIOL_sdm_adc_tadr_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_TADR_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_sdm_adc_tadr_reserved1; /* reserved                                          */
  unsigned int tadr      : BFW_NIOL_sdm_adc_tadr_tadr;      /* the next sample will be written to this location. */
  unsigned int reserved2 : BFW_NIOL_sdm_adc_tadr_reserved2; /* reserved                                          */
} NIOL_SDM_ADC_TADR_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_SDM_ADC_TADR_BIT_T bf;
} NIOL_SDM_ADC_TADR_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_command */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_command     0x00000024U
#define Adr_NIOL_sdm_adc_sdm_adc_command 0x00000024U
#define Adr_NIOL_sdm_adc_command         0x00000024U

#define MSK_NIOL_sdm_adc_command_command 0x0000ffffU
#define SRT_NIOL_sdm_adc_command_command 0

/* all used bits of 'NIOL_sdm_adc_command': */
#define MSK_USED_BITS_NIOL_sdm_adc_command 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_command_command   = 16, /* [15:0] */
  BFW_NIOL_sdm_adc_command_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_COMMAND_BIT_Ttag {
  unsigned int command   : BFW_NIOL_sdm_adc_command_command;   /* currently executed command */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_command_reserved1; /* reserved                   */
} NIOL_SDM_ADC_COMMAND_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_COMMAND_BIT_T bf;
} NIOL_SDM_ADC_COMMAND_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_cic */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_cic     0x00000028U
#define Adr_NIOL_sdm_adc_sdm_adc_cic 0x00000028U
#define Adr_NIOL_sdm_adc_cic         0x00000028U

#define MSK_NIOL_sdm_adc_cic_cic 0x0000ffffU
#define SRT_NIOL_sdm_adc_cic_cic 0

/* all used bits of 'NIOL_sdm_adc_cic': */
#define MSK_USED_BITS_NIOL_sdm_adc_cic 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_cic_cic       = 16, /* [15:0] */
  BFW_NIOL_sdm_adc_cic_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_CIC_BIT_Ttag {
  unsigned int cic       : BFW_NIOL_sdm_adc_cic_cic;       /* normalized CIC output, permanently updated */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_cic_reserved1; /* reserved                                   */
} NIOL_SDM_ADC_CIC_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_SDM_ADC_CIC_BIT_T bf;
} NIOL_SDM_ADC_CIC_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_sum32_lw */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_sum32_lw     0x0000002CU
#define Adr_NIOL_sdm_adc_sdm_adc_sum32_lw 0x0000002CU
#define Adr_NIOL_sdm_adc_sum32_lw         0x0000002CU

#define MSK_NIOL_sdm_adc_sum32_lw_sum32_lw 0x0000ffffU
#define SRT_NIOL_sdm_adc_sum32_lw_sum32_lw 0

/* all used bits of 'NIOL_sdm_adc_sum32_lw': */
#define MSK_USED_BITS_NIOL_sdm_adc_sum32_lw 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_sum32_lw_sum32_lw  = 16, /* [15:0] */
  BFW_NIOL_sdm_adc_sum32_lw_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_SUM32_LW_BIT_Ttag {
  unsigned int sum32_lw  : BFW_NIOL_sdm_adc_sum32_lw_sum32_lw;  /* current sum of normalized CIC output, low word */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_sum32_lw_reserved1; /* reserved                                       */
} NIOL_SDM_ADC_SUM32_LW_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SDM_ADC_SUM32_LW_BIT_T bf;
} NIOL_SDM_ADC_SUM32_LW_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_sum32_hw */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_sum32_hw     0x00000030U
#define Adr_NIOL_sdm_adc_sdm_adc_sum32_hw 0x00000030U
#define Adr_NIOL_sdm_adc_sum32_hw         0x00000030U

#define MSK_NIOL_sdm_adc_sum32_hw_sum32_hw   0x000003ffU
#define SRT_NIOL_sdm_adc_sum32_hw_sum32_hw   0
#define MSK_NIOL_sdm_adc_sum32_hw_sum32_sign 0x0000fc00U
#define SRT_NIOL_sdm_adc_sum32_hw_sum32_sign 10

/* all used bits of 'NIOL_sdm_adc_sum32_hw': */
#define MSK_USED_BITS_NIOL_sdm_adc_sum32_hw 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_sum32_hw_sum32_hw   = 10, /* [9:0] */
  BFW_NIOL_sdm_adc_sum32_hw_sum32_sign = 6,  /* [15:10] */
  BFW_NIOL_sdm_adc_sum32_hw_reserved1  = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_SUM32_HW_BIT_Ttag {
  unsigned int sum32_hw   : BFW_NIOL_sdm_adc_sum32_hw_sum32_hw;   /* see above      */
  unsigned int sum32_sign : BFW_NIOL_sdm_adc_sum32_hw_sum32_sign; /* sign extension */
  unsigned int reserved1  : BFW_NIOL_sdm_adc_sum32_hw_reserved1;  /* reserved       */
} NIOL_SDM_ADC_SUM32_HW_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SDM_ADC_SUM32_HW_BIT_T bf;
} NIOL_SDM_ADC_SUM32_HW_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_sum */
/* => IRQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_sum     0x00000034U
#define Adr_NIOL_sdm_adc_sdm_adc_sum 0x00000034U
#define Adr_NIOL_sdm_adc_sum         0x00000034U

#define MSK_NIOL_sdm_adc_sum_sum 0x0000ffffU
#define SRT_NIOL_sdm_adc_sum_sum 0

/* all used bits of 'NIOL_sdm_adc_sum': */
#define MSK_USED_BITS_NIOL_sdm_adc_sum 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_sum_sum       = 16, /* [15:0] */
  BFW_NIOL_sdm_adc_sum_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_SUM_BIT_Ttag {
  unsigned int sum       : BFW_NIOL_sdm_adc_sum_sum;       /* shifted SUM32 (only updated with final SUM32) */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_sum_reserved1; /* reserved                                      */
} NIOL_SDM_ADC_SUM_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_SDM_ADC_SUM_BIT_T bf;
} NIOL_SDM_ADC_SUM_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_irq_raw */
/* => IRQ raw event register */
/*    Writing a '1' to a bit position with an event type IRQ will clear the event flag. */
/*    Writing to bit positions with a 'status' type IRQ has no effect. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_irq_raw     0x00000038U
#define Adr_NIOL_sdm_adc_sdm_adc_irq_raw 0x00000038U
#define Adr_NIOL_sdm_adc_irq_raw         0x00000038U
#define DFLT_VAL_NIOL_sdm_adc_irq_raw    0x00000001U

#define MSK_NIOL_sdm_adc_irq_raw_en                    0x00000001U
#define SRT_NIOL_sdm_adc_irq_raw_en                    0
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_en               0x00000001U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_en            0x00000001U
#define MSK_NIOL_sdm_adc_irq_raw_cic_evt               0x00000002U
#define SRT_NIOL_sdm_adc_irq_raw_cic_evt               1
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_cic_evt          0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_cic_evt       0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq0_evt          0x00000004U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq0_evt          2
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq0_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq0_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq1_evt          0x00000008U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq1_evt          3
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq1_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq1_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq2_evt          0x00000010U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq2_evt          4
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq2_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq2_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq3_evt          0x00000020U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq3_evt          5
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq3_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq3_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq4_evt          0x00000040U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq4_evt          6
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq4_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq4_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq5_evt          0x00000080U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq5_evt          7
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq5_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq5_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq6_evt          0x00000100U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq6_evt          8
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq6_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq6_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_set_irq7_evt          0x00000200U
#define SRT_NIOL_sdm_adc_irq_raw_set_irq7_evt          9
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_set_irq7_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_set_irq7_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_acc_err_evt           0x00000400U
#define SRT_NIOL_sdm_adc_irq_raw_acc_err_evt           10
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_acc_err_evt      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_acc_err_evt   0x00000000U
#define MSK_NIOL_sdm_adc_irq_raw_instr_err_evt         0x00000800U
#define SRT_NIOL_sdm_adc_irq_raw_instr_err_evt         11
#define DFLT_VAL_NIOL_sdm_adc_irq_raw_instr_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_raw_instr_err_evt 0x00000000U

/* all used bits of 'NIOL_sdm_adc_irq_raw': */
#define MSK_USED_BITS_NIOL_sdm_adc_irq_raw 0x00000fffU

enum {
  BFW_NIOL_sdm_adc_irq_raw_en            = 1,  /* [0] */
  BFW_NIOL_sdm_adc_irq_raw_cic_evt       = 1,  /* [1] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq0_evt  = 1,  /* [2] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq1_evt  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq2_evt  = 1,  /* [4] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq3_evt  = 1,  /* [5] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq4_evt  = 1,  /* [6] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq5_evt  = 1,  /* [7] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq6_evt  = 1,  /* [8] */
  BFW_NIOL_sdm_adc_irq_raw_set_irq7_evt  = 1,  /* [9] */
  BFW_NIOL_sdm_adc_irq_raw_acc_err_evt   = 1,  /* [10] */
  BFW_NIOL_sdm_adc_irq_raw_instr_err_evt = 1,  /* [11] */
  BFW_NIOL_sdm_adc_irq_raw_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_SDM_ADC_IRQ_RAW_BIT_Ttag {
  unsigned int en            : BFW_NIOL_sdm_adc_irq_raw_en;            /* STATUS: CFG.en                                   */
  unsigned int cic_evt       : BFW_NIOL_sdm_adc_irq_raw_cic_evt;       /* EVENT : CIC sample update (output of CIC filter) */
  unsigned int set_irq0_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq0_evt;  /* EVENT : SET_IRQ (0) instruction executed         */
  unsigned int set_irq1_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq1_evt;  /* EVENT : " "                                      */
  unsigned int set_irq2_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq2_evt;  /* EVENT : " "                                      */
  unsigned int set_irq3_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq3_evt;  /* EVENT : " "                                      */
  unsigned int set_irq4_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq4_evt;  /* EVENT : " "                                      */
  unsigned int set_irq5_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq5_evt;  /* EVENT : " "                                      */
  unsigned int set_irq6_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq6_evt;  /* EVENT : " "                                      */
  unsigned int set_irq7_evt  : BFW_NIOL_sdm_adc_irq_raw_set_irq7_evt;  /* EVENT : " "                                      */
  unsigned int acc_err_evt   : BFW_NIOL_sdm_adc_irq_raw_acc_err_evt;   /* EVENT : write outside of permitted address range */
  unsigned int instr_err_evt : BFW_NIOL_sdm_adc_irq_raw_instr_err_evt; /* EVENT : encountered unknown instruction.         */
  unsigned int reserved1     : BFW_NIOL_sdm_adc_irq_raw_reserved1;     /* reserved                                         */
} NIOL_SDM_ADC_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_IRQ_RAW_BIT_T bf;
} NIOL_SDM_ADC_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_irq_masked */
/* => Masked IRQ register */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_irq_masked     0x0000003CU
#define Adr_NIOL_sdm_adc_sdm_adc_irq_masked 0x0000003CU
#define Adr_NIOL_sdm_adc_irq_masked         0x0000003CU

#define MSK_NIOL_sdm_adc_irq_masked_en            0x00000001U
#define SRT_NIOL_sdm_adc_irq_masked_en            0
#define MSK_NIOL_sdm_adc_irq_masked_cic_evt       0x00000002U
#define SRT_NIOL_sdm_adc_irq_masked_cic_evt       1
#define MSK_NIOL_sdm_adc_irq_masked_set_irq0_evt  0x00000004U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq0_evt  2
#define MSK_NIOL_sdm_adc_irq_masked_set_irq1_evt  0x00000008U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq1_evt  3
#define MSK_NIOL_sdm_adc_irq_masked_set_irq2_evt  0x00000010U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq2_evt  4
#define MSK_NIOL_sdm_adc_irq_masked_set_irq3_evt  0x00000020U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq3_evt  5
#define MSK_NIOL_sdm_adc_irq_masked_set_irq4_evt  0x00000040U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq4_evt  6
#define MSK_NIOL_sdm_adc_irq_masked_set_irq5_evt  0x00000080U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq5_evt  7
#define MSK_NIOL_sdm_adc_irq_masked_set_irq6_evt  0x00000100U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq6_evt  8
#define MSK_NIOL_sdm_adc_irq_masked_set_irq7_evt  0x00000200U
#define SRT_NIOL_sdm_adc_irq_masked_set_irq7_evt  9
#define MSK_NIOL_sdm_adc_irq_masked_acc_err_evt   0x00000400U
#define SRT_NIOL_sdm_adc_irq_masked_acc_err_evt   10
#define MSK_NIOL_sdm_adc_irq_masked_instr_err_evt 0x00000800U
#define SRT_NIOL_sdm_adc_irq_masked_instr_err_evt 11

/* all used bits of 'NIOL_sdm_adc_irq_masked': */
#define MSK_USED_BITS_NIOL_sdm_adc_irq_masked 0x00000fffU

enum {
  BFW_NIOL_sdm_adc_irq_masked_en            = 1,  /* [0] */
  BFW_NIOL_sdm_adc_irq_masked_cic_evt       = 1,  /* [1] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq0_evt  = 1,  /* [2] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq1_evt  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq2_evt  = 1,  /* [4] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq3_evt  = 1,  /* [5] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq4_evt  = 1,  /* [6] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq5_evt  = 1,  /* [7] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq6_evt  = 1,  /* [8] */
  BFW_NIOL_sdm_adc_irq_masked_set_irq7_evt  = 1,  /* [9] */
  BFW_NIOL_sdm_adc_irq_masked_acc_err_evt   = 1,  /* [10] */
  BFW_NIOL_sdm_adc_irq_masked_instr_err_evt = 1,  /* [11] */
  BFW_NIOL_sdm_adc_irq_masked_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_SDM_ADC_IRQ_MASKED_BIT_Ttag {
  unsigned int en            : BFW_NIOL_sdm_adc_irq_masked_en;            /* STATUS: CFG.en                                   */
  unsigned int cic_evt       : BFW_NIOL_sdm_adc_irq_masked_cic_evt;       /* EVENT : CIC sample update (output of CIC filter) */
  unsigned int set_irq0_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq0_evt;  /* EVENT : SET_IRQ (0) instruction executed         */
  unsigned int set_irq1_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq1_evt;  /* EVENT : " "                                      */
  unsigned int set_irq2_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq2_evt;  /* EVENT : " "                                      */
  unsigned int set_irq3_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq3_evt;  /* EVENT : " "                                      */
  unsigned int set_irq4_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq4_evt;  /* EVENT : " "                                      */
  unsigned int set_irq5_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq5_evt;  /* EVENT : " "                                      */
  unsigned int set_irq6_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq6_evt;  /* EVENT : " "                                      */
  unsigned int set_irq7_evt  : BFW_NIOL_sdm_adc_irq_masked_set_irq7_evt;  /* EVENT : " "                                      */
  unsigned int acc_err_evt   : BFW_NIOL_sdm_adc_irq_masked_acc_err_evt;   /* EVENT : write outside of permitted address range */
  unsigned int instr_err_evt : BFW_NIOL_sdm_adc_irq_masked_instr_err_evt; /* EVENT : encountered unknown instruction.         */
  unsigned int reserved1     : BFW_NIOL_sdm_adc_irq_masked_reserved1;     /* reserved                                         */
} NIOL_SDM_ADC_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SDM_ADC_IRQ_MASKED_BIT_T bf;
} NIOL_SDM_ADC_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_irq_msk_set */
/* => IRQ mask set register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_irq_msk_set     0x00000040U
#define Adr_NIOL_sdm_adc_sdm_adc_irq_msk_set 0x00000040U
#define Adr_NIOL_sdm_adc_irq_msk_set         0x00000040U
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set    0x00000000U

#define MSK_NIOL_sdm_adc_irq_msk_set_en                    0x00000001U
#define SRT_NIOL_sdm_adc_irq_msk_set_en                    0
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_en               0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_en            0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_cic_evt               0x00000002U
#define SRT_NIOL_sdm_adc_irq_msk_set_cic_evt               1
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_cic_evt          0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_cic_evt       0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq0_evt          0x00000004U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq0_evt          2
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq0_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq0_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq1_evt          0x00000008U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq1_evt          3
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq1_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq1_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq2_evt          0x00000010U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq2_evt          4
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq2_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq2_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq3_evt          0x00000020U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq3_evt          5
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq3_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq3_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq4_evt          0x00000040U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq4_evt          6
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq4_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq4_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq5_evt          0x00000080U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq5_evt          7
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq5_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq5_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq6_evt          0x00000100U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq6_evt          8
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq6_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq6_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_set_irq7_evt          0x00000200U
#define SRT_NIOL_sdm_adc_irq_msk_set_set_irq7_evt          9
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_set_irq7_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_set_irq7_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_acc_err_evt           0x00000400U
#define SRT_NIOL_sdm_adc_irq_msk_set_acc_err_evt           10
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_acc_err_evt      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_acc_err_evt   0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_set_instr_err_evt         0x00000800U
#define SRT_NIOL_sdm_adc_irq_msk_set_instr_err_evt         11
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_set_instr_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_set_instr_err_evt 0x00000000U

/* all used bits of 'NIOL_sdm_adc_irq_msk_set': */
#define MSK_USED_BITS_NIOL_sdm_adc_irq_msk_set 0x00000fffU

enum {
  BFW_NIOL_sdm_adc_irq_msk_set_en            = 1,  /* [0] */
  BFW_NIOL_sdm_adc_irq_msk_set_cic_evt       = 1,  /* [1] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq0_evt  = 1,  /* [2] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq1_evt  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq2_evt  = 1,  /* [4] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq3_evt  = 1,  /* [5] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq4_evt  = 1,  /* [6] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq5_evt  = 1,  /* [7] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq6_evt  = 1,  /* [8] */
  BFW_NIOL_sdm_adc_irq_msk_set_set_irq7_evt  = 1,  /* [9] */
  BFW_NIOL_sdm_adc_irq_msk_set_acc_err_evt   = 1,  /* [10] */
  BFW_NIOL_sdm_adc_irq_msk_set_instr_err_evt = 1,  /* [11] */
  BFW_NIOL_sdm_adc_irq_msk_set_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_SDM_ADC_IRQ_MSK_SET_BIT_Ttag {
  unsigned int en            : BFW_NIOL_sdm_adc_irq_msk_set_en;            /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int cic_evt       : BFW_NIOL_sdm_adc_irq_msk_set_cic_evt;       /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq0_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq0_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq1_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq1_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq2_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq2_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq3_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq3_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq4_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq4_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq5_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq5_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq6_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq6_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int set_irq7_evt  : BFW_NIOL_sdm_adc_irq_msk_set_set_irq7_evt;  /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int acc_err_evt   : BFW_NIOL_sdm_adc_irq_msk_set_acc_err_evt;   /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int instr_err_evt : BFW_NIOL_sdm_adc_irq_msk_set_instr_err_evt; /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                           /* Read: returns IRQ mask                              */
  unsigned int reserved1     : BFW_NIOL_sdm_adc_irq_msk_set_reserved1;     /* reserved                                            */
} NIOL_SDM_ADC_IRQ_MSK_SET_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SDM_ADC_IRQ_MSK_SET_BIT_T bf;
} NIOL_SDM_ADC_IRQ_MSK_SET_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_irq_msk_reset */
/* => IRQ mask reset register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_irq_msk_reset     0x00000044U
#define Adr_NIOL_sdm_adc_sdm_adc_irq_msk_reset 0x00000044U
#define Adr_NIOL_sdm_adc_irq_msk_reset         0x00000044U
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset    0x00000000U

#define MSK_NIOL_sdm_adc_irq_msk_reset_en                    0x00000001U
#define SRT_NIOL_sdm_adc_irq_msk_reset_en                    0
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_en               0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_en            0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_cic_evt               0x00000002U
#define SRT_NIOL_sdm_adc_irq_msk_reset_cic_evt               1
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_cic_evt          0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_cic_evt       0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq0_evt          0x00000004U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq0_evt          2
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq0_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq0_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq1_evt          0x00000008U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq1_evt          3
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq1_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq1_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq2_evt          0x00000010U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq2_evt          4
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq2_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq2_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq3_evt          0x00000020U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq3_evt          5
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq3_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq3_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq4_evt          0x00000040U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq4_evt          6
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq4_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq4_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq5_evt          0x00000080U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq5_evt          7
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq5_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq5_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq6_evt          0x00000100U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq6_evt          8
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq6_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq6_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_set_irq7_evt          0x00000200U
#define SRT_NIOL_sdm_adc_irq_msk_reset_set_irq7_evt          9
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq7_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_set_irq7_evt  0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_acc_err_evt           0x00000400U
#define SRT_NIOL_sdm_adc_irq_msk_reset_acc_err_evt           10
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_acc_err_evt      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_acc_err_evt   0x00000000U
#define MSK_NIOL_sdm_adc_irq_msk_reset_instr_err_evt         0x00000800U
#define SRT_NIOL_sdm_adc_irq_msk_reset_instr_err_evt         11
#define DFLT_VAL_NIOL_sdm_adc_irq_msk_reset_instr_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_irq_msk_reset_instr_err_evt 0x00000000U

/* all used bits of 'NIOL_sdm_adc_irq_msk_reset': */
#define MSK_USED_BITS_NIOL_sdm_adc_irq_msk_reset 0x00000fffU

enum {
  BFW_NIOL_sdm_adc_irq_msk_reset_en            = 1,  /* [0] */
  BFW_NIOL_sdm_adc_irq_msk_reset_cic_evt       = 1,  /* [1] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq0_evt  = 1,  /* [2] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq1_evt  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq2_evt  = 1,  /* [4] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq3_evt  = 1,  /* [5] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq4_evt  = 1,  /* [6] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq5_evt  = 1,  /* [7] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq6_evt  = 1,  /* [8] */
  BFW_NIOL_sdm_adc_irq_msk_reset_set_irq7_evt  = 1,  /* [9] */
  BFW_NIOL_sdm_adc_irq_msk_reset_acc_err_evt   = 1,  /* [10] */
  BFW_NIOL_sdm_adc_irq_msk_reset_instr_err_evt = 1,  /* [11] */
  BFW_NIOL_sdm_adc_irq_msk_reset_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_SDM_ADC_IRQ_MSK_RESET_BIT_Ttag {
  unsigned int en            : BFW_NIOL_sdm_adc_irq_msk_reset_en;            /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int cic_evt       : BFW_NIOL_sdm_adc_irq_msk_reset_cic_evt;       /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq0_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq0_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq1_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq1_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq2_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq2_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq3_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq3_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq4_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq4_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq5_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq5_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq6_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq6_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int set_irq7_evt  : BFW_NIOL_sdm_adc_irq_msk_reset_set_irq7_evt;  /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int acc_err_evt   : BFW_NIOL_sdm_adc_irq_msk_reset_acc_err_evt;   /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int instr_err_evt : BFW_NIOL_sdm_adc_irq_msk_reset_instr_err_evt; /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                             /* Read: returns IRQ mask                                */
  unsigned int reserved1     : BFW_NIOL_sdm_adc_irq_msk_reset_reserved1;     /* reserved                                              */
} NIOL_SDM_ADC_IRQ_MSK_RESET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SDM_ADC_IRQ_MSK_RESET_BIT_T bf;
} NIOL_SDM_ADC_IRQ_MSK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_irq_no */
/* => IRQ number register */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_irq_no     0x00000048U
#define Adr_NIOL_sdm_adc_sdm_adc_irq_no 0x00000048U
#define Adr_NIOL_sdm_adc_irq_no         0x00000048U

#define MSK_NIOL_sdm_adc_irq_no_irq_no 0x0000ffffU
#define SRT_NIOL_sdm_adc_irq_no_irq_no 0

/* all used bits of 'NIOL_sdm_adc_irq_no': */
#define MSK_USED_BITS_NIOL_sdm_adc_irq_no 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_irq_no_irq_no    = 16, /* [15:0] */
  BFW_NIOL_sdm_adc_irq_no_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_IRQ_NO_BIT_Ttag {
  unsigned int irq_no    : BFW_NIOL_sdm_adc_irq_no_irq_no;    /* Number of the non-masked pending IRQ with the highest priority (=lowest bit position). When no non-masked IRQ is pending the number of the highest IRQ plus one is returned. */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_irq_no_reserved1; /* reserved                                                                                                                                                                     */
} NIOL_SDM_ADC_IRQ_NO_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_SDM_ADC_IRQ_NO_BIT_T bf;
} NIOL_SDM_ADC_IRQ_NO_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_d2a_sdm_pga_vimux */
/* => Interface to analog part */
/*    These registers directly control (D2A) or sample (A2D) the signals to the analog part. When the module is enabled (CFG.en=1) some of these values are also written by the module. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_d2a_sdm_pga_vimux     0x0000004CU
#define Adr_NIOL_sdm_adc_sdm_adc_d2a_sdm_pga_vimux 0x0000004CU
#define Adr_NIOL_sdm_adc_d2a_sdm_pga_vimux         0x0000004CU
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux    0x00000000U

#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_on           0x00000001U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_on           0
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_on      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_on   0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_clk          0x00000002U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_clk          1
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_clk     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_clk  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_on           0x00000004U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_on           2
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_on      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_on   0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_sel          0x00000018U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_sel          3
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_sel     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_sel  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_gain         0x00000060U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_gain         5
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_gain    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_gain 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_oe          0x00000080U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_oe          7
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_sel         0x00001f00U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_sel         8
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_sel 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_oe          0x00002000U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_oe          13
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_sel         0x0000c000U
#define SRT_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_sel         14
#define DFLT_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_sel 0x00000000U

/* all used bits of 'NIOL_sdm_adc_d2a_sdm_pga_vimux': */
#define MSK_USED_BITS_NIOL_sdm_adc_d2a_sdm_pga_vimux 0x0000ffffU

enum {
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_on   = 1,  /* [0] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_clk  = 1,  /* [1] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_on   = 1,  /* [2] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_sel  = 2,  /* [4:3] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_gain = 2,  /* [6:5] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_oe  = 1,  /* [7] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_sel = 5,  /* [12:8] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_oe  = 1,  /* [13] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_sel = 2,  /* [15:14] */
  BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_reserved1      = 16  /* [31:16] */
};

typedef struct NIOL_SDM_ADC_D2A_SDM_PGA_VIMUX_BIT_Ttag {
  unsigned int d_adc_sdm_on   : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_on;   /* 1: SDM powered on. Needs to be set by SW. */
  unsigned int d_adc_sdm_clk  : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_sdm_clk;  /*                                           */
  unsigned int d_adc_pga_on   : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_on;   /* 1: PGA powered on. Needs to be set by SW. */
  unsigned int d_adc_pga_sel  : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_sel;  /*                                           */
  unsigned int d_adc_pga_gain : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_pga_gain; /*                                           */
  unsigned int d_adc_vmux_oe  : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_oe;  /*                                           */
  unsigned int d_adc_vmux_sel : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_vmux_sel; /*                                           */
  unsigned int d_adc_imux_oe  : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_oe;  /*                                           */
  unsigned int d_adc_imux_sel : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_d_adc_imux_sel; /*                                           */
  unsigned int reserved1      : BFW_NIOL_sdm_adc_d2a_sdm_pga_vimux_reserved1;      /* reserved                                  */
} NIOL_SDM_ADC_D2A_SDM_PGA_VIMUX_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SDM_ADC_D2A_SDM_PGA_VIMUX_BIT_T bf;
} NIOL_SDM_ADC_D2A_SDM_PGA_VIMUX_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_d2a_port_a */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_d2a_port_a     0x00000050U
#define Adr_NIOL_sdm_adc_sdm_adc_d2a_port_a 0x00000050U
#define Adr_NIOL_sdm_adc_d2a_port_a         0x00000050U
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_a    0x00000000U

#define MSK_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_oe           0x00000001U
#define SRT_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_oe           0
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_oe      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_oe   0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_sel          0x00000006U
#define SRT_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_sel          1
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_sel     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_sel  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_oe          0x00000008U
#define SRT_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_oe          3
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_sel         0x00000030U
#define SRT_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_sel         4
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_sel 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_a_d_gate_a_sense_swap         0x000001c0U
#define SRT_NIOL_sdm_adc_d2a_port_a_d_gate_a_sense_swap         6
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_a_d_gate_a_sense_swap    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_a_d_gate_a_sense_swap 0x00000000U

/* all used bits of 'NIOL_sdm_adc_d2a_port_a': */
#define MSK_USED_BITS_NIOL_sdm_adc_d2a_port_a 0x000001ffU

enum {
  BFW_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_oe   = 1,  /* [0] */
  BFW_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_sel  = 2,  /* [2:1] */
  BFW_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_oe  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_sel = 2,  /* [5:4] */
  BFW_NIOL_sdm_adc_d2a_port_a_d_gate_a_sense_swap = 3,  /* [8:6] */
  BFW_NIOL_sdm_adc_d2a_port_a_reserved1           = 23  /* [31:9] */
};

typedef struct NIOL_SDM_ADC_D2A_PORT_A_BIT_Ttag {
  unsigned int d_iol_a_vsense_oe   : BFW_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_oe;   /*          */
  unsigned int d_iol_a_vsense_sel  : BFW_NIOL_sdm_adc_d2a_port_a_d_iol_a_vsense_sel;  /*          */
  unsigned int d_gate_a_isense_oe  : BFW_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_oe;  /*          */
  unsigned int d_gate_a_isense_sel : BFW_NIOL_sdm_adc_d2a_port_a_d_gate_a_isense_sel; /*          */
  unsigned int d_gate_a_sense_swap : BFW_NIOL_sdm_adc_d2a_port_a_d_gate_a_sense_swap; /*          */
  unsigned int reserved1           : BFW_NIOL_sdm_adc_d2a_port_a_reserved1;           /* reserved */
} NIOL_SDM_ADC_D2A_PORT_A_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SDM_ADC_D2A_PORT_A_BIT_T bf;
} NIOL_SDM_ADC_D2A_PORT_A_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_d2a_port_b */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_d2a_port_b     0x00000054U
#define Adr_NIOL_sdm_adc_sdm_adc_d2a_port_b 0x00000054U
#define Adr_NIOL_sdm_adc_d2a_port_b         0x00000054U
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_b    0x00000000U

#define MSK_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_oe           0x00000001U
#define SRT_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_oe           0
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_oe      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_oe   0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_sel          0x00000006U
#define SRT_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_sel          1
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_sel     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_sel  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_oe          0x00000008U
#define SRT_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_oe          3
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_sel         0x00000030U
#define SRT_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_sel         4
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_sel 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_b_d_gate_b_sense_swap         0x000001c0U
#define SRT_NIOL_sdm_adc_d2a_port_b_d_gate_b_sense_swap         6
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_b_d_gate_b_sense_swap    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_b_d_gate_b_sense_swap 0x00000000U

/* all used bits of 'NIOL_sdm_adc_d2a_port_b': */
#define MSK_USED_BITS_NIOL_sdm_adc_d2a_port_b 0x000001ffU

enum {
  BFW_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_oe   = 1,  /* [0] */
  BFW_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_sel  = 2,  /* [2:1] */
  BFW_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_oe  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_sel = 2,  /* [5:4] */
  BFW_NIOL_sdm_adc_d2a_port_b_d_gate_b_sense_swap = 3,  /* [8:6] */
  BFW_NIOL_sdm_adc_d2a_port_b_reserved1           = 23  /* [31:9] */
};

typedef struct NIOL_SDM_ADC_D2A_PORT_B_BIT_Ttag {
  unsigned int d_iol_b_vsense_oe   : BFW_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_oe;   /*          */
  unsigned int d_iol_b_vsense_sel  : BFW_NIOL_sdm_adc_d2a_port_b_d_iol_b_vsense_sel;  /*          */
  unsigned int d_gate_b_isense_oe  : BFW_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_oe;  /*          */
  unsigned int d_gate_b_isense_sel : BFW_NIOL_sdm_adc_d2a_port_b_d_gate_b_isense_sel; /*          */
  unsigned int d_gate_b_sense_swap : BFW_NIOL_sdm_adc_d2a_port_b_d_gate_b_sense_swap; /*          */
  unsigned int reserved1           : BFW_NIOL_sdm_adc_d2a_port_b_reserved1;           /* reserved */
} NIOL_SDM_ADC_D2A_PORT_B_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SDM_ADC_D2A_PORT_B_BIT_T bf;
} NIOL_SDM_ADC_D2A_PORT_B_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_d2a_port_c */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_d2a_port_c     0x00000058U
#define Adr_NIOL_sdm_adc_sdm_adc_d2a_port_c 0x00000058U
#define Adr_NIOL_sdm_adc_d2a_port_c         0x00000058U
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_c    0x00000000U

#define MSK_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_oe           0x00000001U
#define SRT_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_oe           0
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_oe      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_oe   0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_sel          0x00000006U
#define SRT_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_sel          1
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_sel     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_sel  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_oe          0x00000008U
#define SRT_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_oe          3
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_sel         0x00000030U
#define SRT_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_sel         4
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_sel 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_c_d_gate_c_sense_swap         0x000001c0U
#define SRT_NIOL_sdm_adc_d2a_port_c_d_gate_c_sense_swap         6
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_c_d_gate_c_sense_swap    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_c_d_gate_c_sense_swap 0x00000000U

/* all used bits of 'NIOL_sdm_adc_d2a_port_c': */
#define MSK_USED_BITS_NIOL_sdm_adc_d2a_port_c 0x000001ffU

enum {
  BFW_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_oe   = 1,  /* [0] */
  BFW_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_sel  = 2,  /* [2:1] */
  BFW_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_oe  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_sel = 2,  /* [5:4] */
  BFW_NIOL_sdm_adc_d2a_port_c_d_gate_c_sense_swap = 3,  /* [8:6] */
  BFW_NIOL_sdm_adc_d2a_port_c_reserved1           = 23  /* [31:9] */
};

typedef struct NIOL_SDM_ADC_D2A_PORT_C_BIT_Ttag {
  unsigned int d_iol_c_vsense_oe   : BFW_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_oe;   /*          */
  unsigned int d_iol_c_vsense_sel  : BFW_NIOL_sdm_adc_d2a_port_c_d_iol_c_vsense_sel;  /*          */
  unsigned int d_gate_c_isense_oe  : BFW_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_oe;  /*          */
  unsigned int d_gate_c_isense_sel : BFW_NIOL_sdm_adc_d2a_port_c_d_gate_c_isense_sel; /*          */
  unsigned int d_gate_c_sense_swap : BFW_NIOL_sdm_adc_d2a_port_c_d_gate_c_sense_swap; /*          */
  unsigned int reserved1           : BFW_NIOL_sdm_adc_d2a_port_c_reserved1;           /* reserved */
} NIOL_SDM_ADC_D2A_PORT_C_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SDM_ADC_D2A_PORT_C_BIT_T bf;
} NIOL_SDM_ADC_D2A_PORT_C_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_d2a_port_d */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_d2a_port_d     0x0000005CU
#define Adr_NIOL_sdm_adc_sdm_adc_d2a_port_d 0x0000005CU
#define Adr_NIOL_sdm_adc_d2a_port_d         0x0000005CU
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_d    0x00000000U

#define MSK_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_oe           0x00000001U
#define SRT_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_oe           0
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_oe      0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_oe   0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_sel          0x00000006U
#define SRT_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_sel          1
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_sel     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_sel  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_oe          0x00000008U
#define SRT_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_oe          3
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_sel         0x00000030U
#define SRT_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_sel         4
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_sel 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_port_d_d_gate_d_sense_swap         0x000001c0U
#define SRT_NIOL_sdm_adc_d2a_port_d_d_gate_d_sense_swap         6
#define DFLT_VAL_NIOL_sdm_adc_d2a_port_d_d_gate_d_sense_swap    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_port_d_d_gate_d_sense_swap 0x00000000U

/* all used bits of 'NIOL_sdm_adc_d2a_port_d': */
#define MSK_USED_BITS_NIOL_sdm_adc_d2a_port_d 0x000001ffU

enum {
  BFW_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_oe   = 1,  /* [0] */
  BFW_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_sel  = 2,  /* [2:1] */
  BFW_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_oe  = 1,  /* [3] */
  BFW_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_sel = 2,  /* [5:4] */
  BFW_NIOL_sdm_adc_d2a_port_d_d_gate_d_sense_swap = 3,  /* [8:6] */
  BFW_NIOL_sdm_adc_d2a_port_d_reserved1           = 23  /* [31:9] */
};

typedef struct NIOL_SDM_ADC_D2A_PORT_D_BIT_Ttag {
  unsigned int d_iol_d_vsense_oe   : BFW_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_oe;   /*          */
  unsigned int d_iol_d_vsense_sel  : BFW_NIOL_sdm_adc_d2a_port_d_d_iol_d_vsense_sel;  /*          */
  unsigned int d_gate_d_isense_oe  : BFW_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_oe;  /*          */
  unsigned int d_gate_d_isense_sel : BFW_NIOL_sdm_adc_d2a_port_d_d_gate_d_isense_sel; /*          */
  unsigned int d_gate_d_sense_swap : BFW_NIOL_sdm_adc_d2a_port_d_d_gate_d_sense_swap; /*          */
  unsigned int reserved1           : BFW_NIOL_sdm_adc_d2a_port_d_reserved1;           /* reserved */
} NIOL_SDM_ADC_D2A_PORT_D_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SDM_ADC_D2A_PORT_D_BIT_T bf;
} NIOL_SDM_ADC_D2A_PORT_D_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_d2a_di_x_tdio */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_d2a_di_x_tdio     0x00000060U
#define Adr_NIOL_sdm_adc_sdm_adc_d2a_di_x_tdio 0x00000060U
#define Adr_NIOL_sdm_adc_d2a_di_x_tdio         0x00000060U
#define DFLT_VAL_NIOL_sdm_adc_d2a_di_x_tdio    0x00000000U

#define MSK_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_oe          0x00000001U
#define SRT_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_oe          0
#define DFLT_VAL_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_oe  0x00000000U
#define MSK_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_sel         0x00000002U
#define SRT_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_sel         1
#define DFLT_VAL_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_sel 0x00000000U
#define MSK_NIOL_sdm_adc_d2a_di_x_tdio_d_adc_tdio_on             0x00000004U
#define SRT_NIOL_sdm_adc_d2a_di_x_tdio_d_adc_tdio_on             2
#define DFLT_VAL_NIOL_sdm_adc_d2a_di_x_tdio_d_adc_tdio_on        0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_d2a_di_x_tdio_d_adc_tdio_on     0x00000000U

/* all used bits of 'NIOL_sdm_adc_d2a_di_x_tdio': */
#define MSK_USED_BITS_NIOL_sdm_adc_d2a_di_x_tdio 0x00000007U

enum {
  BFW_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_oe  = 1,  /* [0] */
  BFW_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_sel = 1,  /* [1] */
  BFW_NIOL_sdm_adc_d2a_di_x_tdio_d_adc_tdio_on     = 1,  /* [2] */
  BFW_NIOL_sdm_adc_d2a_di_x_tdio_reserved1         = 29  /* [31:3] */
};

typedef struct NIOL_SDM_ADC_D2A_DI_X_TDIO_BIT_Ttag {
  unsigned int d_di_x_vsense_oe  : BFW_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_oe;  /*                                            */
  unsigned int d_di_x_vsense_sel : BFW_NIOL_sdm_adc_d2a_di_x_tdio_d_di_x_vsense_sel; /*                                            */
  unsigned int d_adc_tdio_on     : BFW_NIOL_sdm_adc_d2a_di_x_tdio_d_adc_tdio_on;     /* 1: TDIO powered on. Needs to be set by SW. */
  unsigned int reserved1         : BFW_NIOL_sdm_adc_d2a_di_x_tdio_reserved1;         /* reserved                                   */
} NIOL_SDM_ADC_D2A_DI_X_TDIO_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SDM_ADC_D2A_DI_X_TDIO_BIT_T bf;
} NIOL_SDM_ADC_D2A_DI_X_TDIO_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_iomux_ai_gpo */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_iomux_ai_gpo     0x00000064U
#define Adr_NIOL_sdm_adc_sdm_adc_iomux_ai_gpo 0x00000064U
#define Adr_NIOL_sdm_adc_iomux_ai_gpo         0x00000064U
#define DFLT_VAL_NIOL_sdm_adc_iomux_ai_gpo    0x00000000U

#define MSK_NIOL_sdm_adc_iomux_ai_gpo_gpz_out         0x0000000fU
#define SRT_NIOL_sdm_adc_iomux_ai_gpo_gpz_out         0
#define DFLT_VAL_NIOL_sdm_adc_iomux_ai_gpo_gpz_out    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_iomux_ai_gpo_gpz_out 0x00000000U
#define MSK_NIOL_sdm_adc_iomux_ai_gpo_gpz_oe          0x000000f0U
#define SRT_NIOL_sdm_adc_iomux_ai_gpo_gpz_oe          4
#define DFLT_VAL_NIOL_sdm_adc_iomux_ai_gpo_gpz_oe     0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_iomux_ai_gpo_gpz_oe  0x00000000U
#define MSK_NIOL_sdm_adc_iomux_ai_gpo_gpo             0x00000f00U
#define SRT_NIOL_sdm_adc_iomux_ai_gpo_gpo             8
#define DFLT_VAL_NIOL_sdm_adc_iomux_ai_gpo_gpo        0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_iomux_ai_gpo_gpo     0x00000000U

/* all used bits of 'NIOL_sdm_adc_iomux_ai_gpo': */
#define MSK_USED_BITS_NIOL_sdm_adc_iomux_ai_gpo 0x00000fffU

enum {
  BFW_NIOL_sdm_adc_iomux_ai_gpo_gpz_out   = 4,  /* [3:0] */
  BFW_NIOL_sdm_adc_iomux_ai_gpo_gpz_oe    = 4,  /* [7:4] */
  BFW_NIOL_sdm_adc_iomux_ai_gpo_gpo       = 4,  /* [11:8] */
  BFW_NIOL_sdm_adc_iomux_ai_gpo_reserved1 = 20  /* [31:12] */
};

typedef struct NIOL_SDM_ADC_IOMUX_AI_GPO_BIT_Ttag {
  unsigned int gpz_out   : BFW_NIOL_sdm_adc_iomux_ai_gpo_gpz_out;   /* to AI_* pins via IO MUX Module              */
  unsigned int gpz_oe    : BFW_NIOL_sdm_adc_iomux_ai_gpo_gpz_oe;    /* " " 1 <=> output driven; 0<=> output high-Z */
  unsigned int gpo       : BFW_NIOL_sdm_adc_iomux_ai_gpo_gpo;       /* to DIO pins via IO MUX Module               */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_iomux_ai_gpo_reserved1; /* reserved                                    */
} NIOL_SDM_ADC_IOMUX_AI_GPO_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SDM_ADC_IOMUX_AI_GPO_BIT_T bf;
} NIOL_SDM_ADC_IOMUX_AI_GPO_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_a2d_sdm */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_a2d_sdm     0x00000068U
#define Adr_NIOL_sdm_adc_sdm_adc_a2d_sdm 0x00000068U
#define Adr_NIOL_sdm_adc_a2d_sdm         0x00000068U

#define MSK_NIOL_sdm_adc_a2d_sdm_d_adc_sdm_data 0x00000001U
#define SRT_NIOL_sdm_adc_a2d_sdm_d_adc_sdm_data 0

/* all used bits of 'NIOL_sdm_adc_a2d_sdm': */
#define MSK_USED_BITS_NIOL_sdm_adc_a2d_sdm 0x00000001U

enum {
  BFW_NIOL_sdm_adc_a2d_sdm_d_adc_sdm_data = 1,  /* [0] */
  BFW_NIOL_sdm_adc_a2d_sdm_reserved1      = 31  /* [31:1] */
};

typedef struct NIOL_SDM_ADC_A2D_SDM_BIT_Ttag {
  unsigned int d_adc_sdm_data : BFW_NIOL_sdm_adc_a2d_sdm_d_adc_sdm_data; /* sampled with two rising edges of the system clock */
  unsigned int reserved1      : BFW_NIOL_sdm_adc_a2d_sdm_reserved1;      /* reserved                                          */
} NIOL_SDM_ADC_A2D_SDM_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SDM_ADC_A2D_SDM_BIT_T bf;
} NIOL_SDM_ADC_A2D_SDM_T;

/* --------------------------------------------------------------------- */
/* Register sdm_adc_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sdm_adc_cfg     0x00000070U
#define Adr_NIOL_sdm_adc_sdm_adc_cfg 0x00000070U
#define Adr_NIOL_sdm_adc_cfg         0x00000070U
#define DFLT_VAL_NIOL_sdm_adc_cfg    0x00000000U

#define MSK_NIOL_sdm_adc_cfg_en             0x00000001U
#define SRT_NIOL_sdm_adc_cfg_en             0
#define DFLT_VAL_NIOL_sdm_adc_cfg_en        0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_cfg_en     0x00000000U
#define MSK_NIOL_sdm_adc_cfg_sdm_en         0x00000002U
#define SRT_NIOL_sdm_adc_cfg_sdm_en         1
#define DFLT_VAL_NIOL_sdm_adc_cfg_sdm_en    0x00000000U
#define DFLT_BF_VAL_NIOL_sdm_adc_cfg_sdm_en 0x00000000U

/* all used bits of 'NIOL_sdm_adc_cfg': */
#define MSK_USED_BITS_NIOL_sdm_adc_cfg 0x00000003U

enum {
  BFW_NIOL_sdm_adc_cfg_en        = 1,  /* [0] */
  BFW_NIOL_sdm_adc_cfg_sdm_en    = 1,  /* [1] */
  BFW_NIOL_sdm_adc_cfg_reserved1 = 30  /* [31:2] */
};

typedef struct NIOL_SDM_ADC_CFG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_sdm_adc_cfg_en;        /* 0: Command execution stopped. Current instruction is aborted.             */
                                                           /* 1: Command execution running. When enabled starts executing at address PC */
  unsigned int sdm_en    : BFW_NIOL_sdm_adc_cfg_sdm_en;    /* 1: SDM clk generated and CIC filter running                               */
                                                           /* SDM needs to be enabled for SAMPLE and SAMPLEF command execution.         */
  unsigned int reserved1 : BFW_NIOL_sdm_adc_cfg_reserved1; /* reserved                                                                  */
} NIOL_SDM_ADC_CFG_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_SDM_ADC_CFG_BIT_T bf;
} NIOL_SDM_ADC_CFG_T;


/* ===================================================================== */

/* Area of pio */

/* ===================================================================== */

#define Addr_NIOL_pio 0x00000080U

/* --------------------------------------------------------------------- */
/* Register pio_out */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_out  0x00000000U
#define Adr_NIOL_pio_pio_out  0x00000080U
#define Adr_NIOL_pio_out      0x00000080U
#define DFLT_VAL_NIOL_pio_out 0x00000000U

#define MSK_NIOL_pio_out_val         0x00003fffU
#define SRT_NIOL_pio_out_val         0
#define DFLT_VAL_NIOL_pio_out_val    0x00000000U
#define DFLT_BF_VAL_NIOL_pio_out_val 0x00000000U

/* all used bits of 'NIOL_pio_out': */
#define MSK_USED_BITS_NIOL_pio_out 0x00003fffU

enum {
  BFW_NIOL_pio_out_val       = 14, /* [13:0] */
  BFW_NIOL_pio_out_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_OUT_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_out_val;       /* 0: driving low  */
                                                       /* 1: driving high */
  unsigned int reserved1 : BFW_NIOL_pio_out_reserved1; /* reserved        */
} NIOL_PIO_OUT_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_PIO_OUT_BIT_T bf;
} NIOL_PIO_OUT_T;

/* --------------------------------------------------------------------- */
/* Register pio_out_set */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_out_set  0x00000004U
#define Adr_NIOL_pio_pio_out_set  0x00000084U
#define Adr_NIOL_pio_out_set      0x00000084U
#define DFLT_VAL_NIOL_pio_out_set 0x00000000U

#define MSK_NIOL_pio_out_set_val         0x00003fffU
#define SRT_NIOL_pio_out_set_val         0
#define DFLT_VAL_NIOL_pio_out_set_val    0x00000000U
#define DFLT_BF_VAL_NIOL_pio_out_set_val 0x00000000U

/* all used bits of 'NIOL_pio_out_set': */
#define MSK_USED_BITS_NIOL_pio_out_set 0x00003fffU

enum {
  BFW_NIOL_pio_out_set_val       = 14, /* [13:0] */
  BFW_NIOL_pio_out_set_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_OUT_SET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_out_set_val;       /* write 1: set the corresponding bit in the OUT register */
                                                           /* read: pio_out register                                 */
  unsigned int reserved1 : BFW_NIOL_pio_out_set_reserved1; /* reserved                                               */
} NIOL_PIO_OUT_SET_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_PIO_OUT_SET_BIT_T bf;
} NIOL_PIO_OUT_SET_T;

/* --------------------------------------------------------------------- */
/* Register pio_out_clr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_out_clr  0x00000008U
#define Adr_NIOL_pio_pio_out_clr  0x00000088U
#define Adr_NIOL_pio_out_clr      0x00000088U
#define DFLT_VAL_NIOL_pio_out_clr 0x00000000U

#define MSK_NIOL_pio_out_clr_val         0x00003fffU
#define SRT_NIOL_pio_out_clr_val         0
#define DFLT_VAL_NIOL_pio_out_clr_val    0x00000000U
#define DFLT_BF_VAL_NIOL_pio_out_clr_val 0x00000000U

/* all used bits of 'NIOL_pio_out_clr': */
#define MSK_USED_BITS_NIOL_pio_out_clr 0x00003fffU

enum {
  BFW_NIOL_pio_out_clr_val       = 14, /* [13:0] */
  BFW_NIOL_pio_out_clr_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_OUT_CLR_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_out_clr_val;       /* write 1: clear the corresponding bit in the OUT register */
                                                           /* read: pio_out register                                   */
  unsigned int reserved1 : BFW_NIOL_pio_out_clr_reserved1; /* reserved                                                 */
} NIOL_PIO_OUT_CLR_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_PIO_OUT_CLR_BIT_T bf;
} NIOL_PIO_OUT_CLR_T;

/* --------------------------------------------------------------------- */
/* Register pio_oe */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_oe  0x0000000CU
#define Adr_NIOL_pio_pio_oe  0x0000008CU
#define Adr_NIOL_pio_oe      0x0000008CU
#define DFLT_VAL_NIOL_pio_oe 0x00000000U

#define MSK_NIOL_pio_oe_val         0x00003fffU
#define SRT_NIOL_pio_oe_val         0
#define DFLT_VAL_NIOL_pio_oe_val    0x00000000U
#define DFLT_BF_VAL_NIOL_pio_oe_val 0x00000000U

/* all used bits of 'NIOL_pio_oe': */
#define MSK_USED_BITS_NIOL_pio_oe 0x00003fffU

enum {
  BFW_NIOL_pio_oe_val       = 14, /* [13:0] */
  BFW_NIOL_pio_oe_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_OE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_oe_val;       /* 0: not drive output */
                                                      /* 1: drive output     */
  unsigned int reserved1 : BFW_NIOL_pio_oe_reserved1; /* reserved            */
} NIOL_PIO_OE_BIT_T;

typedef union {
  uint32_t          val;
  NIOL_PIO_OE_BIT_T bf;
} NIOL_PIO_OE_T;

/* --------------------------------------------------------------------- */
/* Register pio_oe_set */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_oe_set  0x00000010U
#define Adr_NIOL_pio_pio_oe_set  0x00000090U
#define Adr_NIOL_pio_oe_set      0x00000090U
#define DFLT_VAL_NIOL_pio_oe_set 0x00000000U

#define MSK_NIOL_pio_oe_set_val         0x00003fffU
#define SRT_NIOL_pio_oe_set_val         0
#define DFLT_VAL_NIOL_pio_oe_set_val    0x00000000U
#define DFLT_BF_VAL_NIOL_pio_oe_set_val 0x00000000U

/* all used bits of 'NIOL_pio_oe_set': */
#define MSK_USED_BITS_NIOL_pio_oe_set 0x00003fffU

enum {
  BFW_NIOL_pio_oe_set_val       = 14, /* [13:0] */
  BFW_NIOL_pio_oe_set_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_OE_SET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_oe_set_val;       /* write 1: set the corresponding bit in the OUT_OE register */
                                                          /* read: pio_oe register                                     */
  unsigned int reserved1 : BFW_NIOL_pio_oe_set_reserved1; /* reserved                                                  */
} NIOL_PIO_OE_SET_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_PIO_OE_SET_BIT_T bf;
} NIOL_PIO_OE_SET_T;

/* --------------------------------------------------------------------- */
/* Register pio_oe_clr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_oe_clr  0x00000014U
#define Adr_NIOL_pio_pio_oe_clr  0x00000094U
#define Adr_NIOL_pio_oe_clr      0x00000094U
#define DFLT_VAL_NIOL_pio_oe_clr 0x00000000U

#define MSK_NIOL_pio_oe_clr_val         0x00003fffU
#define SRT_NIOL_pio_oe_clr_val         0
#define DFLT_VAL_NIOL_pio_oe_clr_val    0x00000000U
#define DFLT_BF_VAL_NIOL_pio_oe_clr_val 0x00000000U

/* all used bits of 'NIOL_pio_oe_clr': */
#define MSK_USED_BITS_NIOL_pio_oe_clr 0x00003fffU

enum {
  BFW_NIOL_pio_oe_clr_val       = 14, /* [13:0] */
  BFW_NIOL_pio_oe_clr_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_OE_CLR_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_oe_clr_val;       /* write 1: clear the corresponding bit in the OUT_OE register */
                                                          /* read: pio_oe register                                       */
  unsigned int reserved1 : BFW_NIOL_pio_oe_clr_reserved1; /* reserved                                                    */
} NIOL_PIO_OE_CLR_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_PIO_OE_CLR_BIT_T bf;
} NIOL_PIO_OE_CLR_T;

/* --------------------------------------------------------------------- */
/* Register pio_in */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pio_in 0x00000018U
#define Adr_NIOL_pio_pio_in 0x00000098U
#define Adr_NIOL_pio_in     0x00000098U

#define MSK_NIOL_pio_in_val 0x00003fffU
#define SRT_NIOL_pio_in_val 0

/* all used bits of 'NIOL_pio_in': */
#define MSK_USED_BITS_NIOL_pio_in 0x00003fffU

enum {
  BFW_NIOL_pio_in_val       = 14, /* [13:0] */
  BFW_NIOL_pio_in_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_PIO_IN_BIT_Ttag {
  unsigned int val       : BFW_NIOL_pio_in_val;       /* 0: driving low                                                 */
                                                      /* 1: driving high                                                */
                                                      /*    pio_in is sampled with two rising edged of the system clock */
  unsigned int reserved1 : BFW_NIOL_pio_in_reserved1; /* reserved                                                       */
} NIOL_PIO_IN_BIT_T;

typedef union {
  uint32_t          val;
  NIOL_PIO_IN_BIT_T bf;
} NIOL_PIO_IN_T;


/* ===================================================================== */

/* AREA hispi_reg_interface */
/* Area of hispi */

/* ===================================================================== */

#define Addr_NIOL_hispi 0x00000100U

/* --------------------------------------------------------------------- */
/* Register hispi_reserved_sda0 */
/* => The adr_hispi_reserved_sda? registers are placeholders for addresses used to identify SDA frames. These addresses are not */
/*    accessible by HISPI and thus no hardware should be placed at them. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_reserved_sda0   0x00000000U
#define Adr_NIOL_hispi_hispi_reserved_sda0 0x00000100U
#define Adr_NIOL_hispi_reserved_sda0       0x00000100U

#define MSK_NIOL_hispi_reserved_sda0_val 0x0000ffffU
#define SRT_NIOL_hispi_reserved_sda0_val 0

/* all used bits of 'NIOL_hispi_reserved_sda0': */
#define MSK_USED_BITS_NIOL_hispi_reserved_sda0 0x0000ffffU

enum {
  BFW_NIOL_hispi_reserved_sda0_val       = 16, /* [15:0] */
  BFW_NIOL_hispi_reserved_sda0_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RESERVED_SDA0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_hispi_reserved_sda0_val;       /* see description */
  unsigned int reserved1 : BFW_NIOL_hispi_reserved_sda0_reserved1; /* reserved        */
} NIOL_HISPI_RESERVED_SDA0_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_HISPI_RESERVED_SDA0_BIT_T bf;
} NIOL_HISPI_RESERVED_SDA0_T;

/* --------------------------------------------------------------------- */
/* Register hispi_reserved_sda1 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_reserved_sda1   0x00000004U
#define Adr_NIOL_hispi_hispi_reserved_sda1 0x00000104U
#define Adr_NIOL_hispi_reserved_sda1       0x00000104U

#define MSK_NIOL_hispi_reserved_sda1_val 0x0000ffffU
#define SRT_NIOL_hispi_reserved_sda1_val 0

/* all used bits of 'NIOL_hispi_reserved_sda1': */
#define MSK_USED_BITS_NIOL_hispi_reserved_sda1 0x0000ffffU

enum {
  BFW_NIOL_hispi_reserved_sda1_val       = 16, /* [15:0] */
  BFW_NIOL_hispi_reserved_sda1_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RESERVED_SDA1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_hispi_reserved_sda1_val;       /* see description */
  unsigned int reserved1 : BFW_NIOL_hispi_reserved_sda1_reserved1; /* reserved        */
} NIOL_HISPI_RESERVED_SDA1_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_HISPI_RESERVED_SDA1_BIT_T bf;
} NIOL_HISPI_RESERVED_SDA1_T;

/* --------------------------------------------------------------------- */
/* Register hispi_reserved_sda2 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_reserved_sda2   0x00000008U
#define Adr_NIOL_hispi_hispi_reserved_sda2 0x00000108U
#define Adr_NIOL_hispi_reserved_sda2       0x00000108U

#define MSK_NIOL_hispi_reserved_sda2_val 0x0000ffffU
#define SRT_NIOL_hispi_reserved_sda2_val 0

/* all used bits of 'NIOL_hispi_reserved_sda2': */
#define MSK_USED_BITS_NIOL_hispi_reserved_sda2 0x0000ffffU

enum {
  BFW_NIOL_hispi_reserved_sda2_val       = 16, /* [15:0] */
  BFW_NIOL_hispi_reserved_sda2_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RESERVED_SDA2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_hispi_reserved_sda2_val;       /* see description */
  unsigned int reserved1 : BFW_NIOL_hispi_reserved_sda2_reserved1; /* reserved        */
} NIOL_HISPI_RESERVED_SDA2_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_HISPI_RESERVED_SDA2_BIT_T bf;
} NIOL_HISPI_RESERVED_SDA2_T;

/* --------------------------------------------------------------------- */
/* Register hispi_reserved_sda3 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_reserved_sda3   0x0000000CU
#define Adr_NIOL_hispi_hispi_reserved_sda3 0x0000010CU
#define Adr_NIOL_hispi_reserved_sda3       0x0000010CU

#define MSK_NIOL_hispi_reserved_sda3_val 0x0000ffffU
#define SRT_NIOL_hispi_reserved_sda3_val 0

/* all used bits of 'NIOL_hispi_reserved_sda3': */
#define MSK_USED_BITS_NIOL_hispi_reserved_sda3 0x0000ffffU

enum {
  BFW_NIOL_hispi_reserved_sda3_val       = 16, /* [15:0] */
  BFW_NIOL_hispi_reserved_sda3_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RESERVED_SDA3_BIT_Ttag {
  unsigned int val       : BFW_NIOL_hispi_reserved_sda3_val;       /* see description */
  unsigned int reserved1 : BFW_NIOL_hispi_reserved_sda3_reserved1; /* reserved        */
} NIOL_HISPI_RESERVED_SDA3_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_HISPI_RESERVED_SDA3_BIT_T bf;
} NIOL_HISPI_RESERVED_SDA3_T;

/* --------------------------------------------------------------------- */
/* Register hispi_reserved_sda4 */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_reserved_sda4   0x00000010U
#define Adr_NIOL_hispi_hispi_reserved_sda4 0x00000110U
#define Adr_NIOL_hispi_reserved_sda4       0x00000110U

#define MSK_NIOL_hispi_reserved_sda4_val 0x0000ffffU
#define SRT_NIOL_hispi_reserved_sda4_val 0

/* all used bits of 'NIOL_hispi_reserved_sda4': */
#define MSK_USED_BITS_NIOL_hispi_reserved_sda4 0x0000ffffU

enum {
  BFW_NIOL_hispi_reserved_sda4_val       = 16, /* [15:0] */
  BFW_NIOL_hispi_reserved_sda4_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RESERVED_SDA4_BIT_Ttag {
  unsigned int val       : BFW_NIOL_hispi_reserved_sda4_val;       /* see description */
  unsigned int reserved1 : BFW_NIOL_hispi_reserved_sda4_reserved1; /* reserved        */
} NIOL_HISPI_RESERVED_SDA4_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_HISPI_RESERVED_SDA4_BIT_T bf;
} NIOL_HISPI_RESERVED_SDA4_T;

/* --------------------------------------------------------------------- */
/* Register hispi_cfg */
/* => CFG Register */
/*    The SCK domain samples these parameters from the CLK Domain just before they are used, no resynchronization is performed */
/*    Thus it is required to perform a reset, if these parameters are changed */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_cfg   0x00000014U
#define Adr_NIOL_hispi_hispi_cfg 0x00000114U
#define Adr_NIOL_hispi_cfg       0x00000114U
#define DFLT_VAL_NIOL_hispi_cfg  0x00000000U

#define MSK_NIOL_hispi_cfg_irq_pos                 0x0000000fU
#define SRT_NIOL_hispi_cfg_irq_pos                 0
#define DFLT_VAL_NIOL_hispi_cfg_irq_pos            0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_irq_pos         0x00000000U
#define MSK_NIOL_hispi_cfg_sync_out_offset         0x00001ff0U
#define SRT_NIOL_hispi_cfg_sync_out_offset         4
#define DFLT_VAL_NIOL_hispi_cfg_sync_out_offset    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_sync_out_offset 0x00000000U

/* all used bits of 'NIOL_hispi_cfg': */
#define MSK_USED_BITS_NIOL_hispi_cfg 0x00001fffU

enum {
  BFW_NIOL_hispi_cfg_irq_pos         = 4,  /* [3:0] */
  BFW_NIOL_hispi_cfg_sync_out_offset = 9,  /* [12:4] */
  BFW_NIOL_hispi_cfg_reserved1       = 19  /* [31:13] */
};

typedef struct NIOL_HISPI_CFG_BIT_Ttag {
  unsigned int irq_pos         : BFW_NIOL_hispi_cfg_irq_pos;         /* 0: frame field irq forwarded unchanged                                                  */
                                                                     /* 1..12: irq'[irq_pos-1] <= ( irq_in | irq[irq_pos-1] )                                   */
  unsigned int sync_out_offset : BFW_NIOL_hispi_cfg_sync_out_offset; /* 0..511 delay of the sync_out pulse in SCK cycles counter following the frame field CRC4 */
                                                                     /*  0:  sync_out asserted at 1st bit of frame field irq                                    */
  unsigned int reserved1       : BFW_NIOL_hispi_cfg_reserved1;       /* reserved                                                                                */
} NIOL_HISPI_CFG_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_HISPI_CFG_BIT_T bf;
} NIOL_HISPI_CFG_T;

/* --------------------------------------------------------------------- */
/* Register hispi_cfg_miso */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_cfg_miso   0x00000018U
#define Adr_NIOL_hispi_hispi_cfg_miso 0x00000118U
#define Adr_NIOL_hispi_cfg_miso       0x00000118U
#define DFLT_VAL_NIOL_hispi_cfg_miso  0x00000000U

#define MSK_NIOL_hispi_cfg_miso_early          0x00000001U
#define SRT_NIOL_hispi_cfg_miso_early          0
#define DFLT_VAL_NIOL_hispi_cfg_miso_early     0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_miso_early  0x00000000U
#define MSK_NIOL_hispi_cfg_miso_on_irq         0x00000006U
#define SRT_NIOL_hispi_cfg_miso_on_irq         1
#define DFLT_VAL_NIOL_hispi_cfg_miso_on_irq    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_miso_on_irq 0x00000000U
#define MSK_NIOL_hispi_cfg_miso_delay          0x00000038U
#define SRT_NIOL_hispi_cfg_miso_delay          3
#define DFLT_VAL_NIOL_hispi_cfg_miso_delay     0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_miso_delay  0x00000000U

/* all used bits of 'NIOL_hispi_cfg_miso': */
#define MSK_USED_BITS_NIOL_hispi_cfg_miso 0x0000003fU

enum {
  BFW_NIOL_hispi_cfg_miso_early     = 1,  /* [0] */
  BFW_NIOL_hispi_cfg_miso_on_irq    = 2,  /* [2:1] */
  BFW_NIOL_hispi_cfg_miso_delay     = 3,  /* [5:3] */
  BFW_NIOL_hispi_cfg_miso_reserved1 = 26  /* [31:6] */
};

typedef struct NIOL_HISPI_CFG_MISO_BIT_Ttag {
  unsigned int early     : BFW_NIOL_hispi_cfg_miso_early;     /* 0: MOSI output updated with the rising edge of SCK                         */
                                                              /* 1: "early MOSI"                                                            */
                                                              /*    1st bit after idle: MOSI output updated with the rising edge of SCK     */
                                                              /*    2nd..* bit after idle: MOSI output updated with the falling edge of SCK */
  unsigned int on_irq    : BFW_NIOL_hispi_cfg_miso_on_irq;    /* 00: IRQ on MISO disabled                                                   */
                                                              /* 01: irq_in output to MOSI                                                  */
                                                              /* 10: (irq_in or MOSI) output to MISO                                        */
  unsigned int delay     : BFW_NIOL_hispi_cfg_miso_delay;     /* 0..7: MISO output is delayed by 2 + CFG_MISO.delay SCK cycles              */
  unsigned int reserved1 : BFW_NIOL_hispi_cfg_miso_reserved1; /* reserved                                                                   */
} NIOL_HISPI_CFG_MISO_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_HISPI_CFG_MISO_BIT_T bf;
} NIOL_HISPI_CFG_MISO_T;

/* --------------------------------------------------------------------- */
/* Register hispi_cfg_idle */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_cfg_idle   0x0000001CU
#define Adr_NIOL_hispi_hispi_cfg_idle 0x0000011CU
#define Adr_NIOL_hispi_cfg_idle       0x0000011CU
#define DFLT_VAL_NIOL_hispi_cfg_idle  0x000000c8U

#define MSK_NIOL_hispi_cfg_idle_idle_time           0x000007ffU
#define SRT_NIOL_hispi_cfg_idle_idle_time           0
#define DFLT_VAL_NIOL_hispi_cfg_idle_idle_time      0x000000c8U
#define DFLT_BF_VAL_NIOL_hispi_cfg_idle_idle_time   0x000000c8U
#define MSK_NIOL_hispi_cfg_idle_idle_action         0x00000800U
#define SRT_NIOL_hispi_cfg_idle_idle_action         11
#define DFLT_VAL_NIOL_hispi_cfg_idle_idle_action    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_idle_idle_action 0x00000000U

/* all used bits of 'NIOL_hispi_cfg_idle': */
#define MSK_USED_BITS_NIOL_hispi_cfg_idle 0x00000fffU

enum {
  BFW_NIOL_hispi_cfg_idle_idle_time   = 11, /* [10:0] */
  BFW_NIOL_hispi_cfg_idle_idle_action = 1,  /* [11] */
  BFW_NIOL_hispi_cfg_idle_reserved1   = 20  /* [31:12] */
};

typedef struct NIOL_HISPI_CFG_IDLE_BIT_Ttag {
  unsigned int idle_time   : BFW_NIOL_hispi_cfg_idle_idle_time;   /* idle state is detected when SCK has no rising edge for CFG_IDLE clock cycles                                                   */
                                                                  /* Default idle time of 200 cycles allows initial SPI clock down to < 1MHz at 100MHz system clock                                 */
  unsigned int idle_action : BFW_NIOL_hispi_cfg_idle_idle_action; /* 0: when the idle time expires the front end (sck domain) is always reset for one system clock cycle.                           */
                                                                  /* 1: when the idle time has expired and only when the front end (sck domain) is not idle it is reset for one system clock cycle. */
  unsigned int reserved1   : BFW_NIOL_hispi_cfg_idle_reserved1;   /* reserved                                                                                                                       */
} NIOL_HISPI_CFG_IDLE_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_HISPI_CFG_IDLE_BIT_T bf;
} NIOL_HISPI_CFG_IDLE_T;

/* --------------------------------------------------------------------- */
/* Register hispi_cfg_ac_high */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_cfg_ac_high   0x00000020U
#define Adr_NIOL_hispi_hispi_cfg_ac_high 0x00000120U
#define Adr_NIOL_hispi_cfg_ac_high       0x00000120U
#define DFLT_VAL_NIOL_hispi_cfg_ac_high  0x0000fff0U

#define MSK_NIOL_hispi_cfg_ac_high_val         0x0000fff0U
#define SRT_NIOL_hispi_cfg_ac_high_val         4
#define DFLT_VAL_NIOL_hispi_cfg_ac_high_val    0x0000fff0U
#define DFLT_BF_VAL_NIOL_hispi_cfg_ac_high_val 0x00000fffU

/* all used bits of 'NIOL_hispi_cfg_ac_high': */
#define MSK_USED_BITS_NIOL_hispi_cfg_ac_high 0x0000fff0U

enum {
  BFW_NIOL_hispi_cfg_ac_high_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_hispi_cfg_ac_high_val       = 12, /* [15:4] */
  BFW_NIOL_hispi_cfg_ac_high_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_CFG_AC_HIGH_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_cfg_ac_high_reserved1; /* reserved                     */
  unsigned int val       : BFW_NIOL_hispi_cfg_ac_high_val;       /* access control upper address */
  unsigned int reserved2 : BFW_NIOL_hispi_cfg_ac_high_reserved2; /* reserved                     */
} NIOL_HISPI_CFG_AC_HIGH_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_HISPI_CFG_AC_HIGH_BIT_T bf;
} NIOL_HISPI_CFG_AC_HIGH_T;

/* --------------------------------------------------------------------- */
/* Register hispi_cfg_ac_low */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_cfg_ac_low   0x00000024U
#define Adr_NIOL_hispi_hispi_cfg_ac_low 0x00000124U
#define Adr_NIOL_hispi_cfg_ac_low       0x00000124U
#define DFLT_VAL_NIOL_hispi_cfg_ac_low  0x00000000U

#define MSK_NIOL_hispi_cfg_ac_low_val         0x0000fff0U
#define SRT_NIOL_hispi_cfg_ac_low_val         4
#define DFLT_VAL_NIOL_hispi_cfg_ac_low_val    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cfg_ac_low_val 0x00000000U

/* all used bits of 'NIOL_hispi_cfg_ac_low': */
#define MSK_USED_BITS_NIOL_hispi_cfg_ac_low 0x0000fff0U

enum {
  BFW_NIOL_hispi_cfg_ac_low_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_hispi_cfg_ac_low_val       = 12, /* [15:4] */
  BFW_NIOL_hispi_cfg_ac_low_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_CFG_AC_LOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_cfg_ac_low_reserved1; /* reserved                                                                  */
  unsigned int val       : BFW_NIOL_hispi_cfg_ac_low_val;       /* access control lower address                                              */
                                                                /* Writes are executed when CFG_AC_LOW & 0x0 <= address <= CFG_AC_HIGH & 0xF */
                                                                /* Writes to CMD_RESET are always allowed.                                   */
                                                                /* Reads are allowed to the whole address space of the IC.                   */
  unsigned int reserved2 : BFW_NIOL_hispi_cfg_ac_low_reserved2; /* reserved                                                                  */
} NIOL_HISPI_CFG_AC_LOW_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_HISPI_CFG_AC_LOW_BIT_T bf;
} NIOL_HISPI_CFG_AC_LOW_T;

/* --------------------------------------------------------------------- */
/* Register hispi_cmd */
/* => CMD Register */
/*    Resets front end of HISPI or entire SoC. */
/*    This register can always be written via HISPI regardless of the state of its access control. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_cmd   0x00000028U
#define Adr_NIOL_hispi_hispi_cmd 0x00000128U
#define Adr_NIOL_hispi_cmd       0x00000128U
#define DFLT_VAL_NIOL_hispi_cmd  0x00000000U

#define MSK_NIOL_hispi_cmd_reset_sck         0x00000001U
#define SRT_NIOL_hispi_cmd_reset_sck         0
#define DFLT_VAL_NIOL_hispi_cmd_reset_sck    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cmd_reset_sck 0x00000000U
#define MSK_NIOL_hispi_cmd_reset_sys         0x00000002U
#define SRT_NIOL_hispi_cmd_reset_sys         1
#define DFLT_VAL_NIOL_hispi_cmd_reset_sys    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cmd_reset_sys 0x00000000U
#define MSK_NIOL_hispi_cmd_halt_cpu          0x00000004U
#define SRT_NIOL_hispi_cmd_halt_cpu          2
#define DFLT_VAL_NIOL_hispi_cmd_halt_cpu     0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cmd_halt_cpu  0x00000000U
#define MSK_NIOL_hispi_cmd_nmi               0x00000008U
#define SRT_NIOL_hispi_cmd_nmi               3
#define DFLT_VAL_NIOL_hispi_cmd_nmi          0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cmd_nmi       0x00000000U
#define MSK_NIOL_hispi_cmd_pwd               0x0000fff0U
#define SRT_NIOL_hispi_cmd_pwd               4
#define DFLT_VAL_NIOL_hispi_cmd_pwd          0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_cmd_pwd       0x00000000U

/* all used bits of 'NIOL_hispi_cmd': */
#define MSK_USED_BITS_NIOL_hispi_cmd 0x0000ffffU

enum {
  BFW_NIOL_hispi_cmd_reset_sck = 1,  /* [0] */
  BFW_NIOL_hispi_cmd_reset_sys = 1,  /* [1] */
  BFW_NIOL_hispi_cmd_halt_cpu  = 1,  /* [2] */
  BFW_NIOL_hispi_cmd_nmi       = 1,  /* [3] */
  BFW_NIOL_hispi_cmd_pwd       = 12, /* [15:4] */
  BFW_NIOL_hispi_cmd_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_CMD_BIT_Ttag {
  unsigned int reset_sck : BFW_NIOL_hispi_cmd_reset_sck; /* 1: reset of SCK domain asserted for one system clock cycles                                                                                                                */
  unsigned int reset_sys : BFW_NIOL_hispi_cmd_reset_sys; /* 1: set the do_reset output to '1', causing a system reset. System reset will also reset SCK domain.                                                                        */
  unsigned int halt_cpu  : BFW_NIOL_hispi_cmd_halt_cpu;  /* Not used in RISCV system. Reserved for OpenMSP430 use. 1: halt CPU,  0: CPU running                                                                                        */
  unsigned int nmi       : BFW_NIOL_hispi_cmd_nmi;       /* Not used in RISCV system. Reserved for OpenMSP430 use. 0/1: set CPU nmi signal to 0 / 1                                                                                    */
  unsigned int pwd       : BFW_NIOL_hispi_cmd_pwd;       /* When pwd is 0xB52 the register will be written immediately.                                                                                                                */
                                                         /* When pwd is 0x25B only slices halt_cpu and nmi will be written immediately. Reset_sck and reset_sys will only be written                                                   */
                                                         /* if the CRC12 of the current frame is correct. When the frame is broken (i.e. CRC12 wrong or frame too short) the write to reset_sck and reset_sys will be discarded.       */
                                                         /* Note: A system reset will cause netIOl to switch its clock to the CLKREF pin and disable the PLL. Thus for any subsequent frame f(SCK) must be smaller or equal f(CLKREF). */
  unsigned int reserved1 : BFW_NIOL_hispi_cmd_reserved1; /* reserved                                                                                                                                                                   */
} NIOL_HISPI_CMD_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_HISPI_CMD_BIT_T bf;
} NIOL_HISPI_CMD_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda_ctrl */
/* => SDA Control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda_ctrl   0x0000002CU
#define Adr_NIOL_hispi_hispi_sda_ctrl 0x0000012CU
#define Adr_NIOL_hispi_sda_ctrl       0x0000012CU
#define DFLT_VAL_NIOL_hispi_sda_ctrl  0x00000000U

#define MSK_NIOL_hispi_sda_ctrl_sda0_clr         0x00000001U
#define SRT_NIOL_hispi_sda_ctrl_sda0_clr         0
#define DFLT_VAL_NIOL_hispi_sda_ctrl_sda0_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda_ctrl_sda0_clr 0x00000000U
#define MSK_NIOL_hispi_sda_ctrl_sda1_clr         0x00000002U
#define SRT_NIOL_hispi_sda_ctrl_sda1_clr         1
#define DFLT_VAL_NIOL_hispi_sda_ctrl_sda1_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda_ctrl_sda1_clr 0x00000000U
#define MSK_NIOL_hispi_sda_ctrl_sda2_clr         0x00000004U
#define SRT_NIOL_hispi_sda_ctrl_sda2_clr         2
#define DFLT_VAL_NIOL_hispi_sda_ctrl_sda2_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda_ctrl_sda2_clr 0x00000000U
#define MSK_NIOL_hispi_sda_ctrl_sda3_clr         0x00000008U
#define SRT_NIOL_hispi_sda_ctrl_sda3_clr         3
#define DFLT_VAL_NIOL_hispi_sda_ctrl_sda3_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda_ctrl_sda3_clr 0x00000000U
#define MSK_NIOL_hispi_sda_ctrl_sda4_clr         0x00000010U
#define SRT_NIOL_hispi_sda_ctrl_sda4_clr         4
#define DFLT_VAL_NIOL_hispi_sda_ctrl_sda4_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda_ctrl_sda4_clr 0x00000000U

/* all used bits of 'NIOL_hispi_sda_ctrl': */
#define MSK_USED_BITS_NIOL_hispi_sda_ctrl 0x0000001fU

enum {
  BFW_NIOL_hispi_sda_ctrl_sda0_clr  = 1,  /* [0] */
  BFW_NIOL_hispi_sda_ctrl_sda1_clr  = 1,  /* [1] */
  BFW_NIOL_hispi_sda_ctrl_sda2_clr  = 1,  /* [2] */
  BFW_NIOL_hispi_sda_ctrl_sda3_clr  = 1,  /* [3] */
  BFW_NIOL_hispi_sda_ctrl_sda4_clr  = 1,  /* [4] */
  BFW_NIOL_hispi_sda_ctrl_reserved1 = 27  /* [31:5] */
};

typedef struct NIOL_HISPI_SDA_CTRL_BIT_Ttag {
  unsigned int sda0_clr  : BFW_NIOL_hispi_sda_ctrl_sda0_clr;  /* Write '1' clears SDA0 FIFO. Write only recommended if frontend_idle == 1. Read returns SDA0 FIFO level (1 when not empty). */
  unsigned int sda1_clr  : BFW_NIOL_hispi_sda_ctrl_sda1_clr;  /*                                                                                                                            */
  unsigned int sda2_clr  : BFW_NIOL_hispi_sda_ctrl_sda2_clr;  /*                                                                                                                            */
  unsigned int sda3_clr  : BFW_NIOL_hispi_sda_ctrl_sda3_clr;  /*                                                                                                                            */
  unsigned int sda4_clr  : BFW_NIOL_hispi_sda_ctrl_sda4_clr;  /*                                                                                                                            */
  unsigned int reserved1 : BFW_NIOL_hispi_sda_ctrl_reserved1; /* reserved                                                                                                                   */
} NIOL_HISPI_SDA_CTRL_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_HISPI_SDA_CTRL_BIT_T bf;
} NIOL_HISPI_SDA_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda0   0x00000030U
#define Adr_NIOL_hispi_hispi_sda0 0x00000130U
#define Adr_NIOL_hispi_sda0       0x00000130U
#define DFLT_VAL_NIOL_hispi_sda0  0x00000000U

#define MSK_NIOL_hispi_sda0_val         0x0000fffeU
#define SRT_NIOL_hispi_sda0_val         1
#define DFLT_VAL_NIOL_hispi_sda0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda0_val 0x00000000U

/* all used bits of 'NIOL_hispi_sda0': */
#define MSK_USED_BITS_NIOL_hispi_sda0 0x0000fffeU

enum {
  BFW_NIOL_hispi_sda0_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_sda0_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_sda0_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_SDA0_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_sda0_reserved1; /* reserved                                                                  */
  unsigned int val       : BFW_NIOL_hispi_sda0_val;       /* pointer to data structure used for software defined address RESERVED_SDA0 */
  unsigned int reserved2 : BFW_NIOL_hispi_sda0_reserved2; /* reserved                                                                  */
} NIOL_HISPI_SDA0_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_SDA0_BIT_T bf;
} NIOL_HISPI_SDA0_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda1   0x00000034U
#define Adr_NIOL_hispi_hispi_sda1 0x00000134U
#define Adr_NIOL_hispi_sda1       0x00000134U
#define DFLT_VAL_NIOL_hispi_sda1  0x00000000U

#define MSK_NIOL_hispi_sda1_val         0x0000fffeU
#define SRT_NIOL_hispi_sda1_val         1
#define DFLT_VAL_NIOL_hispi_sda1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda1_val 0x00000000U

/* all used bits of 'NIOL_hispi_sda1': */
#define MSK_USED_BITS_NIOL_hispi_sda1 0x0000fffeU

enum {
  BFW_NIOL_hispi_sda1_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_sda1_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_sda1_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_SDA1_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_sda1_reserved1; /* reserved                                                                  */
  unsigned int val       : BFW_NIOL_hispi_sda1_val;       /* pointer to data structure used for software defined address RESERVED_SDA1 */
  unsigned int reserved2 : BFW_NIOL_hispi_sda1_reserved2; /* reserved                                                                  */
} NIOL_HISPI_SDA1_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_SDA1_BIT_T bf;
} NIOL_HISPI_SDA1_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda2   0x00000038U
#define Adr_NIOL_hispi_hispi_sda2 0x00000138U
#define Adr_NIOL_hispi_sda2       0x00000138U
#define DFLT_VAL_NIOL_hispi_sda2  0x00000000U

#define MSK_NIOL_hispi_sda2_val         0x0000fffeU
#define SRT_NIOL_hispi_sda2_val         1
#define DFLT_VAL_NIOL_hispi_sda2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda2_val 0x00000000U

/* all used bits of 'NIOL_hispi_sda2': */
#define MSK_USED_BITS_NIOL_hispi_sda2 0x0000fffeU

enum {
  BFW_NIOL_hispi_sda2_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_sda2_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_sda2_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_SDA2_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_sda2_reserved1; /* reserved                                                                  */
  unsigned int val       : BFW_NIOL_hispi_sda2_val;       /* pointer to data structure used for software defined address RESERVED_SDA2 */
  unsigned int reserved2 : BFW_NIOL_hispi_sda2_reserved2; /* reserved                                                                  */
} NIOL_HISPI_SDA2_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_SDA2_BIT_T bf;
} NIOL_HISPI_SDA2_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda3   0x0000003CU
#define Adr_NIOL_hispi_hispi_sda3 0x0000013CU
#define Adr_NIOL_hispi_sda3       0x0000013CU
#define DFLT_VAL_NIOL_hispi_sda3  0x00000000U

#define MSK_NIOL_hispi_sda3_val         0x0000fffeU
#define SRT_NIOL_hispi_sda3_val         1
#define DFLT_VAL_NIOL_hispi_sda3_val    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda3_val 0x00000000U

/* all used bits of 'NIOL_hispi_sda3': */
#define MSK_USED_BITS_NIOL_hispi_sda3 0x0000fffeU

enum {
  BFW_NIOL_hispi_sda3_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_sda3_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_sda3_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_SDA3_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_sda3_reserved1; /* reserved                                                                  */
  unsigned int val       : BFW_NIOL_hispi_sda3_val;       /* pointer to data structure used for software defined address RESERVED_SDA3 */
  unsigned int reserved2 : BFW_NIOL_hispi_sda3_reserved2; /* reserved                                                                  */
} NIOL_HISPI_SDA3_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_SDA3_BIT_T bf;
} NIOL_HISPI_SDA3_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda4 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda4   0x00000040U
#define Adr_NIOL_hispi_hispi_sda4 0x00000140U
#define Adr_NIOL_hispi_sda4       0x00000140U
#define DFLT_VAL_NIOL_hispi_sda4  0x00000000U

#define MSK_NIOL_hispi_sda4_val         0x0000fffeU
#define SRT_NIOL_hispi_sda4_val         1
#define DFLT_VAL_NIOL_hispi_sda4_val    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_sda4_val 0x00000000U

/* all used bits of 'NIOL_hispi_sda4': */
#define MSK_USED_BITS_NIOL_hispi_sda4 0x0000fffeU

enum {
  BFW_NIOL_hispi_sda4_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_sda4_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_sda4_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_SDA4_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_sda4_reserved1; /* reserved                                                                  */
  unsigned int val       : BFW_NIOL_hispi_sda4_val;       /* pointer to data structure used for software defined address RESERVED_SDA4 */
  unsigned int reserved2 : BFW_NIOL_hispi_sda4_reserved2; /* reserved                                                                  */
} NIOL_HISPI_SDA4_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_SDA4_BIT_T bf;
} NIOL_HISPI_SDA4_T;

/* --------------------------------------------------------------------- */
/* Register hispi_status */
/* => Debug use only. Write access to this register resets the crc4 error counter. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_status   0x00000044U
#define Adr_NIOL_hispi_hispi_status 0x00000144U
#define Adr_NIOL_hispi_status       0x00000144U
#define DFLT_VAL_NIOL_hispi_status  0x00000000U

#define MSK_NIOL_hispi_status_crc4_err_cnt          0x00000fffU
#define SRT_NIOL_hispi_status_crc4_err_cnt          0
#define DFLT_VAL_NIOL_hispi_status_crc4_err_cnt     0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_status_crc4_err_cnt  0x00000000U
#define MSK_NIOL_hispi_status_frontend_idle         0x00008000U
#define SRT_NIOL_hispi_status_frontend_idle         15
#define DFLT_VAL_NIOL_hispi_status_frontend_idle    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_status_frontend_idle 0x00000000U

/* all used bits of 'NIOL_hispi_status': */
#define MSK_USED_BITS_NIOL_hispi_status 0x00008fffU

enum {
  BFW_NIOL_hispi_status_crc4_err_cnt  = 12, /* [11:0] */
  BFW_NIOL_hispi_status_reserved1     = 3,  /* [14:12] */
  BFW_NIOL_hispi_status_frontend_idle = 1,  /* [15] */
  BFW_NIOL_hispi_status_reserved2     = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_STATUS_BIT_Ttag {
  unsigned int crc4_err_cnt  : BFW_NIOL_hispi_status_crc4_err_cnt;  /* indicates how many crc4 errors occurred since last reset. CRC4 field will saturate at 4095. */
  unsigned int reserved1     : BFW_NIOL_hispi_status_reserved1;     /* reserved                                                                                    */
  unsigned int frontend_idle : BFW_NIOL_hispi_status_frontend_idle; /* 1: front end idle no frame in progress.                                                     */
  unsigned int reserved2     : BFW_NIOL_hispi_status_reserved2;     /* reserved                                                                                    */
} NIOL_HISPI_STATUS_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_HISPI_STATUS_BIT_T bf;
} NIOL_HISPI_STATUS_T;

/* --------------------------------------------------------------------- */
/* Register hispi_frame_w0 */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_frame_w0   0x00000048U
#define Adr_NIOL_hispi_hispi_frame_w0 0x00000148U
#define Adr_NIOL_hispi_frame_w0       0x00000148U

#define MSK_NIOL_hispi_frame_w0_adr   0x00007fffU
#define SRT_NIOL_hispi_frame_w0_adr   0
#define MSK_NIOL_hispi_frame_w0_start 0x00008000U
#define SRT_NIOL_hispi_frame_w0_start 15

/* all used bits of 'NIOL_hispi_frame_w0': */
#define MSK_USED_BITS_NIOL_hispi_frame_w0 0x0000ffffU

enum {
  BFW_NIOL_hispi_frame_w0_adr       = 15, /* [14:0] */
  BFW_NIOL_hispi_frame_w0_start     = 1,  /* [15] */
  BFW_NIOL_hispi_frame_w0_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_FRAME_W0_BIT_Ttag {
  unsigned int adr       : BFW_NIOL_hispi_frame_w0_adr;       /* address of last frame received    */
  unsigned int start     : BFW_NIOL_hispi_frame_w0_start;     /* first word of last frame received */
  unsigned int reserved1 : BFW_NIOL_hispi_frame_w0_reserved1; /* reserved                          */
} NIOL_HISPI_FRAME_W0_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_HISPI_FRAME_W0_BIT_T bf;
} NIOL_HISPI_FRAME_W0_T;

/* --------------------------------------------------------------------- */
/* Register hispi_frame_w1 */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_frame_w1   0x0000004CU
#define Adr_NIOL_hispi_hispi_frame_w1 0x0000014CU
#define Adr_NIOL_hispi_frame_w1       0x0000014CU

#define MSK_NIOL_hispi_frame_w1_len  0x000000ffU
#define SRT_NIOL_hispi_frame_w1_len  0
#define MSK_NIOL_hispi_frame_w1_nadr 0x00007f00U
#define SRT_NIOL_hispi_frame_w1_nadr 8
#define MSK_NIOL_hispi_frame_w1_nrw  0x00008000U
#define SRT_NIOL_hispi_frame_w1_nrw  15

/* all used bits of 'NIOL_hispi_frame_w1': */
#define MSK_USED_BITS_NIOL_hispi_frame_w1 0x0000ffffU

enum {
  BFW_NIOL_hispi_frame_w1_len       = 8,  /* [7:0] */
  BFW_NIOL_hispi_frame_w1_nadr      = 7,  /* [14:8] */
  BFW_NIOL_hispi_frame_w1_nrw       = 1,  /* [15] */
  BFW_NIOL_hispi_frame_w1_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_FRAME_W1_BIT_Ttag {
  unsigned int len       : BFW_NIOL_hispi_frame_w1_len;       /*                                                 */
  unsigned int nadr      : BFW_NIOL_hispi_frame_w1_nadr;      /* bit order as received via MISO, i.e. LSB to MSB */
  unsigned int nrw       : BFW_NIOL_hispi_frame_w1_nrw;       /* second word of last frame received              */
  unsigned int reserved1 : BFW_NIOL_hispi_frame_w1_reserved1; /* reserved                                        */
} NIOL_HISPI_FRAME_W1_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_HISPI_FRAME_W1_BIT_T bf;
} NIOL_HISPI_FRAME_W1_T;

/* --------------------------------------------------------------------- */
/* Register hispi_sda */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_sda   0x00000050U
#define Adr_NIOL_hispi_hispi_sda 0x00000150U
#define Adr_NIOL_hispi_sda       0x00000150U

#define MSK_NIOL_hispi_sda_val 0x0000fffeU
#define SRT_NIOL_hispi_sda_val 1

/* all used bits of 'NIOL_hispi_sda': */
#define MSK_USED_BITS_NIOL_hispi_sda 0x0000fffeU

enum {
  BFW_NIOL_hispi_sda_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_sda_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_sda_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_SDA_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_sda_reserved1; /* reserved                                   */
  unsigned int val       : BFW_NIOL_hispi_sda_val;       /* Software defined address currently in use. */
  unsigned int reserved2 : BFW_NIOL_hispi_sda_reserved2; /* reserved                                   */
} NIOL_HISPI_SDA_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_HISPI_SDA_BIT_T bf;
} NIOL_HISPI_SDA_T;

/* --------------------------------------------------------------------- */
/* Register hispi_radr */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_radr   0x00000054U
#define Adr_NIOL_hispi_hispi_radr 0x00000154U
#define Adr_NIOL_hispi_radr       0x00000154U

#define MSK_NIOL_hispi_radr_val 0x0000fffeU
#define SRT_NIOL_hispi_radr_val 1

/* all used bits of 'NIOL_hispi_radr': */
#define MSK_USED_BITS_NIOL_hispi_radr 0x0000fffeU

enum {
  BFW_NIOL_hispi_radr_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_radr_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_radr_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RADR_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_radr_reserved1; /* reserved                */
  unsigned int val       : BFW_NIOL_hispi_radr_val;       /* next address to be read */
  unsigned int reserved2 : BFW_NIOL_hispi_radr_reserved2; /* reserved                */
} NIOL_HISPI_RADR_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_RADR_BIT_T bf;
} NIOL_HISPI_RADR_T;

/* --------------------------------------------------------------------- */
/* Register hispi_rd */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_rd   0x00000058U
#define Adr_NIOL_hispi_hispi_rd 0x00000158U
#define Adr_NIOL_hispi_rd       0x00000158U

#define MSK_NIOL_hispi_rd_roff 0x000000ffU
#define SRT_NIOL_hispi_rd_roff 0
#define MSK_NIOL_hispi_rd_rlen 0x0000ff00U
#define SRT_NIOL_hispi_rd_rlen 8

/* all used bits of 'NIOL_hispi_rd': */
#define MSK_USED_BITS_NIOL_hispi_rd 0x0000ffffU

enum {
  BFW_NIOL_hispi_rd_roff      = 8,  /* [7:0] */
  BFW_NIOL_hispi_rd_rlen      = 8,  /* [15:8] */
  BFW_NIOL_hispi_rd_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_RD_BIT_Ttag {
  unsigned int roff      : BFW_NIOL_hispi_rd_roff;      /* remaining words offset of read data in the frame field data */
  unsigned int rlen      : BFW_NIOL_hispi_rd_rlen;      /* remaining number of words left to be read                   */
  unsigned int reserved1 : BFW_NIOL_hispi_rd_reserved1; /* reserved                                                    */
} NIOL_HISPI_RD_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_HISPI_RD_BIT_T bf;
} NIOL_HISPI_RD_T;

/* --------------------------------------------------------------------- */
/* Register hispi_wadr */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_wadr   0x0000005CU
#define Adr_NIOL_hispi_hispi_wadr 0x0000015CU
#define Adr_NIOL_hispi_wadr       0x0000015CU

#define MSK_NIOL_hispi_wadr_val 0x0000fffeU
#define SRT_NIOL_hispi_wadr_val 1

/* all used bits of 'NIOL_hispi_wadr': */
#define MSK_USED_BITS_NIOL_hispi_wadr 0x0000fffeU

enum {
  BFW_NIOL_hispi_wadr_reserved1 = 1,  /* [0] */
  BFW_NIOL_hispi_wadr_val       = 15, /* [15:1] */
  BFW_NIOL_hispi_wadr_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_WADR_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_hispi_wadr_reserved1; /* reserved                   */
  unsigned int val       : BFW_NIOL_hispi_wadr_val;       /* next address to be written */
  unsigned int reserved2 : BFW_NIOL_hispi_wadr_reserved2; /* reserved                   */
} NIOL_HISPI_WADR_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_WADR_BIT_T bf;
} NIOL_HISPI_WADR_T;

/* --------------------------------------------------------------------- */
/* Register hispi_wr */
/* => Debug use only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_wr   0x00000060U
#define Adr_NIOL_hispi_hispi_wr 0x00000160U
#define Adr_NIOL_hispi_wr       0x00000160U

#define MSK_NIOL_hispi_wr_woff 0x000000ffU
#define SRT_NIOL_hispi_wr_woff 0
#define MSK_NIOL_hispi_wr_wlen 0x0000ff00U
#define SRT_NIOL_hispi_wr_wlen 8

/* all used bits of 'NIOL_hispi_wr': */
#define MSK_USED_BITS_NIOL_hispi_wr 0x0000ffffU

enum {
  BFW_NIOL_hispi_wr_woff      = 8,  /* [7:0] */
  BFW_NIOL_hispi_wr_wlen      = 8,  /* [15:8] */
  BFW_NIOL_hispi_wr_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_WR_BIT_Ttag {
  unsigned int woff      : BFW_NIOL_hispi_wr_woff;      /* remaining words offset of write data in the frame field data */
  unsigned int wlen      : BFW_NIOL_hispi_wr_wlen;      /* remaining number of words left to be written                 */
  unsigned int reserved1 : BFW_NIOL_hispi_wr_reserved1; /* reserved                                                     */
} NIOL_HISPI_WR_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_HISPI_WR_BIT_T bf;
} NIOL_HISPI_WR_T;

/* --------------------------------------------------------------------- */
/* Register hispi_post */
/* => Debug use only. wlen is incremented as soon as the supplied word by frame is written via the AHBL bus. rlen is incremented as soon as the word that will be inserted in frame is read on the AHBL bus. Due to prefetching and synchronization latency the rlen field might be incremented even when the data is not inserted in frame (e.g. frame not long enough). Worst case: rlen is two words larger than inserted in frame. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_post   0x00000064U
#define Adr_NIOL_hispi_hispi_post 0x00000164U
#define Adr_NIOL_hispi_post       0x00000164U

#define MSK_NIOL_hispi_post_wlen 0x000000ffU
#define SRT_NIOL_hispi_post_wlen 0
#define MSK_NIOL_hispi_post_rlen 0x0000ff00U
#define SRT_NIOL_hispi_post_rlen 8

/* all used bits of 'NIOL_hispi_post': */
#define MSK_USED_BITS_NIOL_hispi_post 0x0000ffffU

enum {
  BFW_NIOL_hispi_post_wlen      = 8,  /* [7:0] */
  BFW_NIOL_hispi_post_rlen      = 8,  /* [15:8] */
  BFW_NIOL_hispi_post_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_POST_BIT_Ttag {
  unsigned int wlen      : BFW_NIOL_hispi_post_wlen;      /* number of written words in frame.                                                                                                                        */
  unsigned int rlen      : BFW_NIOL_hispi_post_rlen;      /* number of read words from AHBL (in case of insufficient length of frame register shows additional reads due to prefetching and synchronization latency). */
  unsigned int reserved1 : BFW_NIOL_hispi_post_reserved1; /* reserved                                                                                                                                                 */
} NIOL_HISPI_POST_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_HISPI_POST_BIT_T bf;
} NIOL_HISPI_POST_T;

/* --------------------------------------------------------------------- */
/* Register hispi_irq_raw */
/* => Raw IRQs: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event IRQ, status IRQs must be reset at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_irq_raw   0x0000006CU
#define Adr_NIOL_hispi_hispi_irq_raw 0x0000016CU
#define Adr_NIOL_hispi_irq_raw       0x0000016CU
#define DFLT_VAL_NIOL_hispi_irq_raw  0x00000000U

#define MSK_NIOL_hispi_irq_raw_da_valid_evt              0x00000001U
#define SRT_NIOL_hispi_irq_raw_da_valid_evt              0
#define DFLT_VAL_NIOL_hispi_irq_raw_da_valid_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_da_valid_evt      0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda0_valid_evt            0x00000002U
#define SRT_NIOL_hispi_irq_raw_sda0_valid_evt            1
#define DFLT_VAL_NIOL_hispi_irq_raw_sda0_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda0_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda1_valid_evt            0x00000004U
#define SRT_NIOL_hispi_irq_raw_sda1_valid_evt            2
#define DFLT_VAL_NIOL_hispi_irq_raw_sda1_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda1_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda2_valid_evt            0x00000008U
#define SRT_NIOL_hispi_irq_raw_sda2_valid_evt            3
#define DFLT_VAL_NIOL_hispi_irq_raw_sda2_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda2_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda3_valid_evt            0x00000010U
#define SRT_NIOL_hispi_irq_raw_sda3_valid_evt            4
#define DFLT_VAL_NIOL_hispi_irq_raw_sda3_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda3_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda4_valid_evt            0x00000020U
#define SRT_NIOL_hispi_irq_raw_sda4_valid_evt            5
#define DFLT_VAL_NIOL_hispi_irq_raw_sda4_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda4_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda0_empty                0x00000040U
#define SRT_NIOL_hispi_irq_raw_sda0_empty                6
#define DFLT_VAL_NIOL_hispi_irq_raw_sda0_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda0_empty        0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda1_empty                0x00000080U
#define SRT_NIOL_hispi_irq_raw_sda1_empty                7
#define DFLT_VAL_NIOL_hispi_irq_raw_sda1_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda1_empty        0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda2_empty                0x00000100U
#define SRT_NIOL_hispi_irq_raw_sda2_empty                8
#define DFLT_VAL_NIOL_hispi_irq_raw_sda2_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda2_empty        0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda3_empty                0x00000200U
#define SRT_NIOL_hispi_irq_raw_sda3_empty                9
#define DFLT_VAL_NIOL_hispi_irq_raw_sda3_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda3_empty        0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda4_empty                0x00000400U
#define SRT_NIOL_hispi_irq_raw_sda4_empty                10
#define DFLT_VAL_NIOL_hispi_irq_raw_sda4_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda4_empty        0x00000000U
#define MSK_NIOL_hispi_irq_raw_crc4_err_evt              0x00000800U
#define SRT_NIOL_hispi_irq_raw_crc4_err_evt              11
#define DFLT_VAL_NIOL_hispi_irq_raw_crc4_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_crc4_err_evt      0x00000000U
#define MSK_NIOL_hispi_irq_raw_crc12_err_evt             0x00001000U
#define SRT_NIOL_hispi_irq_raw_crc12_err_evt             12
#define DFLT_VAL_NIOL_hispi_irq_raw_crc12_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_crc12_err_evt     0x00000000U
#define MSK_NIOL_hispi_irq_raw_sda_empty_err_evt         0x00002000U
#define SRT_NIOL_hispi_irq_raw_sda_empty_err_evt         13
#define DFLT_VAL_NIOL_hispi_irq_raw_sda_empty_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_sda_empty_err_evt 0x00000000U
#define MSK_NIOL_hispi_irq_raw_short_err_evt             0x00004000U
#define SRT_NIOL_hispi_irq_raw_short_err_evt             14
#define DFLT_VAL_NIOL_hispi_irq_raw_short_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_short_err_evt     0x00000000U
#define MSK_NIOL_hispi_irq_raw_ac_err_evt                0x00008000U
#define SRT_NIOL_hispi_irq_raw_ac_err_evt                15
#define DFLT_VAL_NIOL_hispi_irq_raw_ac_err_evt           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_raw_ac_err_evt        0x00000000U

/* all used bits of 'NIOL_hispi_irq_raw': */
#define MSK_USED_BITS_NIOL_hispi_irq_raw 0x0000ffffU

enum {
  BFW_NIOL_hispi_irq_raw_da_valid_evt      = 1,  /* [0] */
  BFW_NIOL_hispi_irq_raw_sda0_valid_evt    = 1,  /* [1] */
  BFW_NIOL_hispi_irq_raw_sda1_valid_evt    = 1,  /* [2] */
  BFW_NIOL_hispi_irq_raw_sda2_valid_evt    = 1,  /* [3] */
  BFW_NIOL_hispi_irq_raw_sda3_valid_evt    = 1,  /* [4] */
  BFW_NIOL_hispi_irq_raw_sda4_valid_evt    = 1,  /* [5] */
  BFW_NIOL_hispi_irq_raw_sda0_empty        = 1,  /* [6] */
  BFW_NIOL_hispi_irq_raw_sda1_empty        = 1,  /* [7] */
  BFW_NIOL_hispi_irq_raw_sda2_empty        = 1,  /* [8] */
  BFW_NIOL_hispi_irq_raw_sda3_empty        = 1,  /* [9] */
  BFW_NIOL_hispi_irq_raw_sda4_empty        = 1,  /* [10] */
  BFW_NIOL_hispi_irq_raw_crc4_err_evt      = 1,  /* [11] */
  BFW_NIOL_hispi_irq_raw_crc12_err_evt     = 1,  /* [12] */
  BFW_NIOL_hispi_irq_raw_sda_empty_err_evt = 1,  /* [13] */
  BFW_NIOL_hispi_irq_raw_short_err_evt     = 1,  /* [14] */
  BFW_NIOL_hispi_irq_raw_ac_err_evt        = 1,  /* [15] */
  BFW_NIOL_hispi_irq_raw_reserved1         = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_IRQ_RAW_BIT_Ttag {
  unsigned int da_valid_evt      : BFW_NIOL_hispi_irq_raw_da_valid_evt;      /* EVENT: 1: completed processing of a valid frame using direct address. Only set if node is addressed, CRC4 OK, CRC12 OK, no AC violation, no AHBL write error and no invalid AHBL read.       */
  unsigned int sda0_valid_evt    : BFW_NIOL_hispi_irq_raw_sda0_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA0. Valid event only set if frame was SDA frame, CRC4 OK, SDAx FIFO not empty and node was addressed (via (nadr == 0) or broadcast). */
  unsigned int sda1_valid_evt    : BFW_NIOL_hispi_irq_raw_sda1_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA1.                                                                                                                                  */
  unsigned int sda2_valid_evt    : BFW_NIOL_hispi_irq_raw_sda2_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA2.                                                                                                                                  */
  unsigned int sda3_valid_evt    : BFW_NIOL_hispi_irq_raw_sda3_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA3.                                                                                                                                  */
  unsigned int sda4_valid_evt    : BFW_NIOL_hispi_irq_raw_sda4_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA4.                                                                                                                                  */
  unsigned int sda0_empty        : BFW_NIOL_hispi_irq_raw_sda0_empty;        /* STATUS: 1: register SDA0 is empty                                                                                                                                                            */
  unsigned int sda1_empty        : BFW_NIOL_hispi_irq_raw_sda1_empty;        /* STATUS: 1: register SDA1 is empty                                                                                                                                                            */
  unsigned int sda2_empty        : BFW_NIOL_hispi_irq_raw_sda2_empty;        /* STATUS: 1: register SDA2 is empty                                                                                                                                                            */
  unsigned int sda3_empty        : BFW_NIOL_hispi_irq_raw_sda3_empty;        /* STATUS: 1: register SDA3 is empty                                                                                                                                                            */
  unsigned int sda4_empty        : BFW_NIOL_hispi_irq_raw_sda4_empty;        /* STATUS: 1: register SDA4 is empty                                                                                                                                                            */
  unsigned int crc4_err_evt      : BFW_NIOL_hispi_irq_raw_crc4_err_evt;      /* EVENT: 1: crc4 invalid                                                                                                                                                                       */
  unsigned int crc12_err_evt     : BFW_NIOL_hispi_irq_raw_crc12_err_evt;     /* EVENT: 1: crc12 invalid (only set when frame is received completely and CRC12 evaluated to wrong. In SDA Post structure CRC12 error is set when frame too short error event occurs.)         */
  unsigned int sda_empty_err_evt : BFW_NIOL_hispi_irq_raw_sda_empty_err_evt; /* EVENT: 1: SDA? register empty when required by frame                                                                                                                                         */
  unsigned int short_err_evt     : BFW_NIOL_hispi_irq_raw_short_err_evt;     /* EVENT: 1: frame to short                                                                                                                                                                     */
  unsigned int ac_err_evt        : BFW_NIOL_hispi_irq_raw_ac_err_evt;        /* EVENT: 1: access control error: write outside of allowed addresses                                                                                                                           */
  unsigned int reserved1         : BFW_NIOL_hispi_irq_raw_reserved1;         /* reserved                                                                                                                                                                                     */
} NIOL_HISPI_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_HISPI_IRQ_RAW_BIT_T bf;
} NIOL_HISPI_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register hispi_irq_mask_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing to adr_hispi_irq_raw */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_irq_mask_set   0x00000070U
#define Adr_NIOL_hispi_hispi_irq_mask_set 0x00000170U
#define Adr_NIOL_hispi_irq_mask_set       0x00000170U
#define DFLT_VAL_NIOL_hispi_irq_mask_set  0x00000000U

#define MSK_NIOL_hispi_irq_mask_set_da_valid_evt              0x00000001U
#define SRT_NIOL_hispi_irq_mask_set_da_valid_evt              0
#define DFLT_VAL_NIOL_hispi_irq_mask_set_da_valid_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_da_valid_evt      0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda0_valid_evt            0x00000002U
#define SRT_NIOL_hispi_irq_mask_set_sda0_valid_evt            1
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda0_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda0_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda1_valid_evt            0x00000004U
#define SRT_NIOL_hispi_irq_mask_set_sda1_valid_evt            2
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda1_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda1_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda2_valid_evt            0x00000008U
#define SRT_NIOL_hispi_irq_mask_set_sda2_valid_evt            3
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda2_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda2_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda3_valid_evt            0x00000010U
#define SRT_NIOL_hispi_irq_mask_set_sda3_valid_evt            4
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda3_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda3_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda4_valid_evt            0x00000020U
#define SRT_NIOL_hispi_irq_mask_set_sda4_valid_evt            5
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda4_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda4_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda0_empty                0x00000040U
#define SRT_NIOL_hispi_irq_mask_set_sda0_empty                6
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda0_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda0_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda1_empty                0x00000080U
#define SRT_NIOL_hispi_irq_mask_set_sda1_empty                7
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda1_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda1_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda2_empty                0x00000100U
#define SRT_NIOL_hispi_irq_mask_set_sda2_empty                8
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda2_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda2_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda3_empty                0x00000200U
#define SRT_NIOL_hispi_irq_mask_set_sda3_empty                9
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda3_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda3_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda4_empty                0x00000400U
#define SRT_NIOL_hispi_irq_mask_set_sda4_empty                10
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda4_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda4_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_crc4_err_evt              0x00000800U
#define SRT_NIOL_hispi_irq_mask_set_crc4_err_evt              11
#define DFLT_VAL_NIOL_hispi_irq_mask_set_crc4_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_crc4_err_evt      0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_crc12_err_evt             0x00001000U
#define SRT_NIOL_hispi_irq_mask_set_crc12_err_evt             12
#define DFLT_VAL_NIOL_hispi_irq_mask_set_crc12_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_crc12_err_evt     0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_sda_empty_err_evt         0x00002000U
#define SRT_NIOL_hispi_irq_mask_set_sda_empty_err_evt         13
#define DFLT_VAL_NIOL_hispi_irq_mask_set_sda_empty_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_sda_empty_err_evt 0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_short_err_evt             0x00004000U
#define SRT_NIOL_hispi_irq_mask_set_short_err_evt             14
#define DFLT_VAL_NIOL_hispi_irq_mask_set_short_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_short_err_evt     0x00000000U
#define MSK_NIOL_hispi_irq_mask_set_ac_err_evt                0x00008000U
#define SRT_NIOL_hispi_irq_mask_set_ac_err_evt                15
#define DFLT_VAL_NIOL_hispi_irq_mask_set_ac_err_evt           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_set_ac_err_evt        0x00000000U

/* all used bits of 'NIOL_hispi_irq_mask_set': */
#define MSK_USED_BITS_NIOL_hispi_irq_mask_set 0x0000ffffU

enum {
  BFW_NIOL_hispi_irq_mask_set_da_valid_evt      = 1,  /* [0] */
  BFW_NIOL_hispi_irq_mask_set_sda0_valid_evt    = 1,  /* [1] */
  BFW_NIOL_hispi_irq_mask_set_sda1_valid_evt    = 1,  /* [2] */
  BFW_NIOL_hispi_irq_mask_set_sda2_valid_evt    = 1,  /* [3] */
  BFW_NIOL_hispi_irq_mask_set_sda3_valid_evt    = 1,  /* [4] */
  BFW_NIOL_hispi_irq_mask_set_sda4_valid_evt    = 1,  /* [5] */
  BFW_NIOL_hispi_irq_mask_set_sda0_empty        = 1,  /* [6] */
  BFW_NIOL_hispi_irq_mask_set_sda1_empty        = 1,  /* [7] */
  BFW_NIOL_hispi_irq_mask_set_sda2_empty        = 1,  /* [8] */
  BFW_NIOL_hispi_irq_mask_set_sda3_empty        = 1,  /* [9] */
  BFW_NIOL_hispi_irq_mask_set_sda4_empty        = 1,  /* [10] */
  BFW_NIOL_hispi_irq_mask_set_crc4_err_evt      = 1,  /* [11] */
  BFW_NIOL_hispi_irq_mask_set_crc12_err_evt     = 1,  /* [12] */
  BFW_NIOL_hispi_irq_mask_set_sda_empty_err_evt = 1,  /* [13] */
  BFW_NIOL_hispi_irq_mask_set_short_err_evt     = 1,  /* [14] */
  BFW_NIOL_hispi_irq_mask_set_ac_err_evt        = 1,  /* [15] */
  BFW_NIOL_hispi_irq_mask_set_reserved1         = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_IRQ_MASK_SET_BIT_Ttag {
  unsigned int da_valid_evt      : BFW_NIOL_hispi_irq_mask_set_da_valid_evt;      /* EVENT: 1: completed processing of a valid frame using direct address. Only set if node is addressed, CRC4 OK, CRC12 OK, no AC violation, no AHBL write error and no invalid AHBL read.       */
  unsigned int sda0_valid_evt    : BFW_NIOL_hispi_irq_mask_set_sda0_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA0. Valid event only set if frame was SDA frame, CRC4 OK, SDAx FIFO not empty and node was addressed (via (nadr == 0) or broadcast). */
  unsigned int sda1_valid_evt    : BFW_NIOL_hispi_irq_mask_set_sda1_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA1.                                                                                                                                  */
  unsigned int sda2_valid_evt    : BFW_NIOL_hispi_irq_mask_set_sda2_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA2.                                                                                                                                  */
  unsigned int sda3_valid_evt    : BFW_NIOL_hispi_irq_mask_set_sda3_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA3.                                                                                                                                  */
  unsigned int sda4_valid_evt    : BFW_NIOL_hispi_irq_mask_set_sda4_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA4.                                                                                                                                  */
  unsigned int sda0_empty        : BFW_NIOL_hispi_irq_mask_set_sda0_empty;        /* STATUS: 1: register SDA0 is empty                                                                                                                                                            */
  unsigned int sda1_empty        : BFW_NIOL_hispi_irq_mask_set_sda1_empty;        /* STATUS: 1: register SDA1 is empty                                                                                                                                                            */
  unsigned int sda2_empty        : BFW_NIOL_hispi_irq_mask_set_sda2_empty;        /* STATUS: 1: register SDA2 is empty                                                                                                                                                            */
  unsigned int sda3_empty        : BFW_NIOL_hispi_irq_mask_set_sda3_empty;        /* STATUS: 1: register SDA3 is empty                                                                                                                                                            */
  unsigned int sda4_empty        : BFW_NIOL_hispi_irq_mask_set_sda4_empty;        /* STATUS: 1: register SDA4 is empty                                                                                                                                                            */
  unsigned int crc4_err_evt      : BFW_NIOL_hispi_irq_mask_set_crc4_err_evt;      /* EVENT: 1: crc4 invalid                                                                                                                                                                       */
  unsigned int crc12_err_evt     : BFW_NIOL_hispi_irq_mask_set_crc12_err_evt;     /* EVENT: 1: crc12 invalid (only set when frame is received completely and CRC12 evaluated to wrong. In SDA Post structure CRC12 error is set when frame too short error event occurs.)         */
  unsigned int sda_empty_err_evt : BFW_NIOL_hispi_irq_mask_set_sda_empty_err_evt; /* EVENT: 1: SDA? register empty when required by frame                                                                                                                                         */
  unsigned int short_err_evt     : BFW_NIOL_hispi_irq_mask_set_short_err_evt;     /* EVENT: 1: frame to short                                                                                                                                                                     */
  unsigned int ac_err_evt        : BFW_NIOL_hispi_irq_mask_set_ac_err_evt;        /* EVENT: 1: access control error: write outside of allowed addresses                                                                                                                           */
  unsigned int reserved1         : BFW_NIOL_hispi_irq_mask_set_reserved1;         /* reserved                                                                                                                                                                                     */
} NIOL_HISPI_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_HISPI_IRQ_MASK_SET_BIT_T bf;
} NIOL_HISPI_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register hispi_irq_mask_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_irq_mask_reset   0x00000074U
#define Adr_NIOL_hispi_hispi_irq_mask_reset 0x00000174U
#define Adr_NIOL_hispi_irq_mask_reset       0x00000174U
#define DFLT_VAL_NIOL_hispi_irq_mask_reset  0x00000000U

#define MSK_NIOL_hispi_irq_mask_reset_da_valid_evt              0x00000001U
#define SRT_NIOL_hispi_irq_mask_reset_da_valid_evt              0
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_da_valid_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_da_valid_evt      0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda0_valid_evt            0x00000002U
#define SRT_NIOL_hispi_irq_mask_reset_sda0_valid_evt            1
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda0_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda0_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda1_valid_evt            0x00000004U
#define SRT_NIOL_hispi_irq_mask_reset_sda1_valid_evt            2
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda1_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda1_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda2_valid_evt            0x00000008U
#define SRT_NIOL_hispi_irq_mask_reset_sda2_valid_evt            3
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda2_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda2_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda3_valid_evt            0x00000010U
#define SRT_NIOL_hispi_irq_mask_reset_sda3_valid_evt            4
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda3_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda3_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda4_valid_evt            0x00000020U
#define SRT_NIOL_hispi_irq_mask_reset_sda4_valid_evt            5
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda4_valid_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda4_valid_evt    0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda0_empty                0x00000040U
#define SRT_NIOL_hispi_irq_mask_reset_sda0_empty                6
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda0_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda0_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda1_empty                0x00000080U
#define SRT_NIOL_hispi_irq_mask_reset_sda1_empty                7
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda1_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda1_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda2_empty                0x00000100U
#define SRT_NIOL_hispi_irq_mask_reset_sda2_empty                8
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda2_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda2_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda3_empty                0x00000200U
#define SRT_NIOL_hispi_irq_mask_reset_sda3_empty                9
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda3_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda3_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda4_empty                0x00000400U
#define SRT_NIOL_hispi_irq_mask_reset_sda4_empty                10
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda4_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda4_empty        0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_crc4_err_evt              0x00000800U
#define SRT_NIOL_hispi_irq_mask_reset_crc4_err_evt              11
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_crc4_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_crc4_err_evt      0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_crc12_err_evt             0x00001000U
#define SRT_NIOL_hispi_irq_mask_reset_crc12_err_evt             12
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_crc12_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_crc12_err_evt     0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_sda_empty_err_evt         0x00002000U
#define SRT_NIOL_hispi_irq_mask_reset_sda_empty_err_evt         13
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_sda_empty_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_sda_empty_err_evt 0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_short_err_evt             0x00004000U
#define SRT_NIOL_hispi_irq_mask_reset_short_err_evt             14
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_short_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_short_err_evt     0x00000000U
#define MSK_NIOL_hispi_irq_mask_reset_ac_err_evt                0x00008000U
#define SRT_NIOL_hispi_irq_mask_reset_ac_err_evt                15
#define DFLT_VAL_NIOL_hispi_irq_mask_reset_ac_err_evt           0x00000000U
#define DFLT_BF_VAL_NIOL_hispi_irq_mask_reset_ac_err_evt        0x00000000U

/* all used bits of 'NIOL_hispi_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_hispi_irq_mask_reset 0x0000ffffU

enum {
  BFW_NIOL_hispi_irq_mask_reset_da_valid_evt      = 1,  /* [0] */
  BFW_NIOL_hispi_irq_mask_reset_sda0_valid_evt    = 1,  /* [1] */
  BFW_NIOL_hispi_irq_mask_reset_sda1_valid_evt    = 1,  /* [2] */
  BFW_NIOL_hispi_irq_mask_reset_sda2_valid_evt    = 1,  /* [3] */
  BFW_NIOL_hispi_irq_mask_reset_sda3_valid_evt    = 1,  /* [4] */
  BFW_NIOL_hispi_irq_mask_reset_sda4_valid_evt    = 1,  /* [5] */
  BFW_NIOL_hispi_irq_mask_reset_sda0_empty        = 1,  /* [6] */
  BFW_NIOL_hispi_irq_mask_reset_sda1_empty        = 1,  /* [7] */
  BFW_NIOL_hispi_irq_mask_reset_sda2_empty        = 1,  /* [8] */
  BFW_NIOL_hispi_irq_mask_reset_sda3_empty        = 1,  /* [9] */
  BFW_NIOL_hispi_irq_mask_reset_sda4_empty        = 1,  /* [10] */
  BFW_NIOL_hispi_irq_mask_reset_crc4_err_evt      = 1,  /* [11] */
  BFW_NIOL_hispi_irq_mask_reset_crc12_err_evt     = 1,  /* [12] */
  BFW_NIOL_hispi_irq_mask_reset_sda_empty_err_evt = 1,  /* [13] */
  BFW_NIOL_hispi_irq_mask_reset_short_err_evt     = 1,  /* [14] */
  BFW_NIOL_hispi_irq_mask_reset_ac_err_evt        = 1,  /* [15] */
  BFW_NIOL_hispi_irq_mask_reset_reserved1         = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int da_valid_evt      : BFW_NIOL_hispi_irq_mask_reset_da_valid_evt;      /* EVENT: 1: completed processing of a valid frame using direct address. Only set if node is addressed, CRC4 OK, CRC12 OK, no AC violation, no AHBL write error and no invalid AHBL read.       */
  unsigned int sda0_valid_evt    : BFW_NIOL_hispi_irq_mask_reset_sda0_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA0. Valid event only set if frame was SDA frame, CRC4 OK, SDAx FIFO not empty and node was addressed (via (nadr == 0) or broadcast). */
  unsigned int sda1_valid_evt    : BFW_NIOL_hispi_irq_mask_reset_sda1_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA1.                                                                                                                                  */
  unsigned int sda2_valid_evt    : BFW_NIOL_hispi_irq_mask_reset_sda2_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA2.                                                                                                                                  */
  unsigned int sda3_valid_evt    : BFW_NIOL_hispi_irq_mask_reset_sda3_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA3.                                                                                                                                  */
  unsigned int sda4_valid_evt    : BFW_NIOL_hispi_irq_mask_reset_sda4_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA4.                                                                                                                                  */
  unsigned int sda0_empty        : BFW_NIOL_hispi_irq_mask_reset_sda0_empty;        /* STATUS: 1: register SDA0 is empty                                                                                                                                                            */
  unsigned int sda1_empty        : BFW_NIOL_hispi_irq_mask_reset_sda1_empty;        /* STATUS: 1: register SDA1 is empty                                                                                                                                                            */
  unsigned int sda2_empty        : BFW_NIOL_hispi_irq_mask_reset_sda2_empty;        /* STATUS: 1: register SDA2 is empty                                                                                                                                                            */
  unsigned int sda3_empty        : BFW_NIOL_hispi_irq_mask_reset_sda3_empty;        /* STATUS: 1: register SDA3 is empty                                                                                                                                                            */
  unsigned int sda4_empty        : BFW_NIOL_hispi_irq_mask_reset_sda4_empty;        /* STATUS: 1: register SDA4 is empty                                                                                                                                                            */
  unsigned int crc4_err_evt      : BFW_NIOL_hispi_irq_mask_reset_crc4_err_evt;      /* EVENT: 1: crc4 invalid                                                                                                                                                                       */
  unsigned int crc12_err_evt     : BFW_NIOL_hispi_irq_mask_reset_crc12_err_evt;     /* EVENT: 1: crc12 invalid (only set when frame is received completely and CRC12 evaluated to wrong. In SDA Post structure CRC12 error is set when frame too short error event occurs.)         */
  unsigned int sda_empty_err_evt : BFW_NIOL_hispi_irq_mask_reset_sda_empty_err_evt; /* EVENT: 1: SDA? register empty when required by frame                                                                                                                                         */
  unsigned int short_err_evt     : BFW_NIOL_hispi_irq_mask_reset_short_err_evt;     /* EVENT: 1: frame to short                                                                                                                                                                     */
  unsigned int ac_err_evt        : BFW_NIOL_hispi_irq_mask_reset_ac_err_evt;        /* EVENT: 1: access control error: write outside of allowed addresses                                                                                                                           */
  unsigned int reserved1         : BFW_NIOL_hispi_irq_mask_reset_reserved1;         /* reserved                                                                                                                                                                                     */
} NIOL_HISPI_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_HISPI_IRQ_MASK_RESET_BIT_T bf;
} NIOL_HISPI_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register hispi_irq_masked */
/* => Masked IRQs: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_irq_masked   0x00000078U
#define Adr_NIOL_hispi_hispi_irq_masked 0x00000178U
#define Adr_NIOL_hispi_irq_masked       0x00000178U

#define MSK_NIOL_hispi_irq_masked_da_valid_evt      0x00000001U
#define SRT_NIOL_hispi_irq_masked_da_valid_evt      0
#define MSK_NIOL_hispi_irq_masked_sda0_valid_evt    0x00000002U
#define SRT_NIOL_hispi_irq_masked_sda0_valid_evt    1
#define MSK_NIOL_hispi_irq_masked_sda1_valid_evt    0x00000004U
#define SRT_NIOL_hispi_irq_masked_sda1_valid_evt    2
#define MSK_NIOL_hispi_irq_masked_sda2_valid_evt    0x00000008U
#define SRT_NIOL_hispi_irq_masked_sda2_valid_evt    3
#define MSK_NIOL_hispi_irq_masked_sda3_valid_evt    0x00000010U
#define SRT_NIOL_hispi_irq_masked_sda3_valid_evt    4
#define MSK_NIOL_hispi_irq_masked_sda4_valid_evt    0x00000020U
#define SRT_NIOL_hispi_irq_masked_sda4_valid_evt    5
#define MSK_NIOL_hispi_irq_masked_sda0_empty        0x00000040U
#define SRT_NIOL_hispi_irq_masked_sda0_empty        6
#define MSK_NIOL_hispi_irq_masked_sda1_empty        0x00000080U
#define SRT_NIOL_hispi_irq_masked_sda1_empty        7
#define MSK_NIOL_hispi_irq_masked_sda2_empty        0x00000100U
#define SRT_NIOL_hispi_irq_masked_sda2_empty        8
#define MSK_NIOL_hispi_irq_masked_sda3_empty        0x00000200U
#define SRT_NIOL_hispi_irq_masked_sda3_empty        9
#define MSK_NIOL_hispi_irq_masked_sda4_empty        0x00000400U
#define SRT_NIOL_hispi_irq_masked_sda4_empty        10
#define MSK_NIOL_hispi_irq_masked_crc4_err_evt      0x00000800U
#define SRT_NIOL_hispi_irq_masked_crc4_err_evt      11
#define MSK_NIOL_hispi_irq_masked_crc12_err_evt     0x00001000U
#define SRT_NIOL_hispi_irq_masked_crc12_err_evt     12
#define MSK_NIOL_hispi_irq_masked_sda_empty_err_evt 0x00002000U
#define SRT_NIOL_hispi_irq_masked_sda_empty_err_evt 13
#define MSK_NIOL_hispi_irq_masked_short_err_evt     0x00004000U
#define SRT_NIOL_hispi_irq_masked_short_err_evt     14
#define MSK_NIOL_hispi_irq_masked_ac_err_evt        0x00008000U
#define SRT_NIOL_hispi_irq_masked_ac_err_evt        15

/* all used bits of 'NIOL_hispi_irq_masked': */
#define MSK_USED_BITS_NIOL_hispi_irq_masked 0x0000ffffU

enum {
  BFW_NIOL_hispi_irq_masked_da_valid_evt      = 1,  /* [0] */
  BFW_NIOL_hispi_irq_masked_sda0_valid_evt    = 1,  /* [1] */
  BFW_NIOL_hispi_irq_masked_sda1_valid_evt    = 1,  /* [2] */
  BFW_NIOL_hispi_irq_masked_sda2_valid_evt    = 1,  /* [3] */
  BFW_NIOL_hispi_irq_masked_sda3_valid_evt    = 1,  /* [4] */
  BFW_NIOL_hispi_irq_masked_sda4_valid_evt    = 1,  /* [5] */
  BFW_NIOL_hispi_irq_masked_sda0_empty        = 1,  /* [6] */
  BFW_NIOL_hispi_irq_masked_sda1_empty        = 1,  /* [7] */
  BFW_NIOL_hispi_irq_masked_sda2_empty        = 1,  /* [8] */
  BFW_NIOL_hispi_irq_masked_sda3_empty        = 1,  /* [9] */
  BFW_NIOL_hispi_irq_masked_sda4_empty        = 1,  /* [10] */
  BFW_NIOL_hispi_irq_masked_crc4_err_evt      = 1,  /* [11] */
  BFW_NIOL_hispi_irq_masked_crc12_err_evt     = 1,  /* [12] */
  BFW_NIOL_hispi_irq_masked_sda_empty_err_evt = 1,  /* [13] */
  BFW_NIOL_hispi_irq_masked_short_err_evt     = 1,  /* [14] */
  BFW_NIOL_hispi_irq_masked_ac_err_evt        = 1,  /* [15] */
  BFW_NIOL_hispi_irq_masked_reserved1         = 16  /* [31:16] */
};

typedef struct NIOL_HISPI_IRQ_MASKED_BIT_Ttag {
  unsigned int da_valid_evt      : BFW_NIOL_hispi_irq_masked_da_valid_evt;      /* EVENT: 1: completed processing of a valid frame using direct address. Only set if node is addressed, CRC4 OK, CRC12 OK, no AC violation, no AHBL write error and no invalid AHBL read.       */
  unsigned int sda0_valid_evt    : BFW_NIOL_hispi_irq_masked_sda0_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA0. Valid event only set if frame was SDA frame, CRC4 OK, SDAx FIFO not empty and node was addressed (via (nadr == 0) or broadcast). */
  unsigned int sda1_valid_evt    : BFW_NIOL_hispi_irq_masked_sda1_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA1.                                                                                                                                  */
  unsigned int sda2_valid_evt    : BFW_NIOL_hispi_irq_masked_sda2_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA2.                                                                                                                                  */
  unsigned int sda3_valid_evt    : BFW_NIOL_hispi_irq_masked_sda3_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA3.                                                                                                                                  */
  unsigned int sda4_valid_evt    : BFW_NIOL_hispi_irq_masked_sda4_valid_evt;    /* EVENT: 1: completed processing of a valid frame using SDA4.                                                                                                                                  */
  unsigned int sda0_empty        : BFW_NIOL_hispi_irq_masked_sda0_empty;        /* STATUS: 1: register SDA0 is empty                                                                                                                                                            */
  unsigned int sda1_empty        : BFW_NIOL_hispi_irq_masked_sda1_empty;        /* STATUS: 1: register SDA1 is empty                                                                                                                                                            */
  unsigned int sda2_empty        : BFW_NIOL_hispi_irq_masked_sda2_empty;        /* STATUS: 1: register SDA2 is empty                                                                                                                                                            */
  unsigned int sda3_empty        : BFW_NIOL_hispi_irq_masked_sda3_empty;        /* STATUS: 1: register SDA3 is empty                                                                                                                                                            */
  unsigned int sda4_empty        : BFW_NIOL_hispi_irq_masked_sda4_empty;        /* STATUS: 1: register SDA4 is empty                                                                                                                                                            */
  unsigned int crc4_err_evt      : BFW_NIOL_hispi_irq_masked_crc4_err_evt;      /* EVENT: 1: crc4 invalid                                                                                                                                                                       */
  unsigned int crc12_err_evt     : BFW_NIOL_hispi_irq_masked_crc12_err_evt;     /* EVENT: 1: crc12 invalid (only set when frame is received completely and CRC12 evaluated to wrong. In SDA Post structure CRC12 error is set when frame too short error event occurs.)         */
  unsigned int sda_empty_err_evt : BFW_NIOL_hispi_irq_masked_sda_empty_err_evt; /* EVENT: 1: SDA? register empty when required by frame                                                                                                                                         */
  unsigned int short_err_evt     : BFW_NIOL_hispi_irq_masked_short_err_evt;     /* EVENT: 1: frame to short                                                                                                                                                                     */
  unsigned int ac_err_evt        : BFW_NIOL_hispi_irq_masked_ac_err_evt;        /* EVENT: 1: access control error: write outside of allowed addresses                                                                                                                           */
  unsigned int reserved1         : BFW_NIOL_hispi_irq_masked_reserved1;         /* reserved                                                                                                                                                                                     */
} NIOL_HISPI_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_HISPI_IRQ_MASKED_BIT_T bf;
} NIOL_HISPI_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register hispi_irq_no */
/* => Lowest active interrupt: */
/*    Shows the highest prior active IRQ (= lowest IRQ number). */
/*    When no IRQ is pending the number of the highest IRQ plus one is returned. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_hispi_irq_no   0x0000007CU
#define Adr_NIOL_hispi_hispi_irq_no 0x0000017CU
#define Adr_NIOL_hispi_irq_no       0x0000017CU

#define MSK_NIOL_hispi_irq_no_val 0x0000001fU
#define SRT_NIOL_hispi_irq_no_val 0

/* all used bits of 'NIOL_hispi_irq_no': */
#define MSK_USED_BITS_NIOL_hispi_irq_no 0x0000001fU

enum {
  BFW_NIOL_hispi_irq_no_val       = 5,  /* [4:0] */
  BFW_NIOL_hispi_irq_no_reserved1 = 27  /* [31:5] */
};

typedef struct NIOL_HISPI_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_hispi_irq_no_val;       /* Number of the pending IRQ */
  unsigned int reserved1 : BFW_NIOL_hispi_irq_no_reserved1; /* reserved                  */
} NIOL_HISPI_IRQ_NO_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_HISPI_IRQ_NO_BIT_T bf;
} NIOL_HISPI_IRQ_NO_T;


/* ===================================================================== */

/* AREA riscv_irq */
/* Area of irq_ext, irq_int */

/* ===================================================================== */

#define Addr_NIOL_irq_ext 0x00000180U
#define Addr_NIOL_irq_int 0x00000200U

/* --------------------------------------------------------------------- */
/* Register riscv_irq_raw */
/* => Read: Status of raw IRQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_raw     0x00000000U
#define Adr_NIOL_irq_ext_riscv_irq_raw 0x00000180U
#define Adr_NIOL_irq_int_riscv_irq_raw 0x00000200U

#define MSK_NIOL_riscv_irq_raw_val 0x0000ffffU
#define SRT_NIOL_riscv_irq_raw_val 0

/* all used bits of 'NIOL_riscv_irq_raw': */
#define MSK_USED_BITS_NIOL_riscv_irq_raw 0x0000ffffU

enum {
  BFW_NIOL_riscv_irq_raw_val       = 16, /* [15:0] */
  BFW_NIOL_riscv_irq_raw_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_RISCV_IRQ_RAW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_riscv_irq_raw_val;       /* see netiol_interrupts document */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_raw_reserved1; /* reserved                       */
} NIOL_RISCV_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_RISCV_IRQ_RAW_BIT_T bf;
} NIOL_RISCV_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register riscv_irq_masked */
/* => Read: Status of masked IRQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_masked     0x00000004U
#define Adr_NIOL_irq_ext_riscv_irq_masked 0x00000184U
#define Adr_NIOL_irq_int_riscv_irq_masked 0x00000204U

#define MSK_NIOL_riscv_irq_masked_val 0x0000ffffU
#define SRT_NIOL_riscv_irq_masked_val 0

/* all used bits of 'NIOL_riscv_irq_masked': */
#define MSK_USED_BITS_NIOL_riscv_irq_masked 0x0000ffffU

enum {
  BFW_NIOL_riscv_irq_masked_val       = 16, /* [15:0] */
  BFW_NIOL_riscv_irq_masked_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_RISCV_IRQ_MASKED_BIT_Ttag {
  unsigned int val       : BFW_NIOL_riscv_irq_masked_val;       /* see netiol_interrupts document */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_masked_reserved1; /* reserved                       */
} NIOL_RISCV_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_RISCV_IRQ_MASKED_BIT_T bf;
} NIOL_RISCV_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register riscv_irq_msk_set */
/* => irq_msk_set # Write: 1: set the corresponding bit in the IRQ mask # default 0 */
/*    Read: returns IRQ mask */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_msk_set     0x00000008U
#define Adr_NIOL_irq_ext_riscv_irq_msk_set 0x00000188U
#define Adr_NIOL_irq_int_riscv_irq_msk_set 0x00000208U
#define DFLT_VAL_NIOL_riscv_irq_msk_set    0x00000000U

#define MSK_NIOL_riscv_irq_msk_set_val         0x0000ffffU
#define SRT_NIOL_riscv_irq_msk_set_val         0
#define DFLT_VAL_NIOL_riscv_irq_msk_set_val    0x00000000U
#define DFLT_BF_VAL_NIOL_riscv_irq_msk_set_val 0x00000000U

/* all used bits of 'NIOL_riscv_irq_msk_set': */
#define MSK_USED_BITS_NIOL_riscv_irq_msk_set 0x0000ffffU

enum {
  BFW_NIOL_riscv_irq_msk_set_val       = 16, /* [15:0] */
  BFW_NIOL_riscv_irq_msk_set_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_RISCV_IRQ_MSK_SET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_riscv_irq_msk_set_val;       /* see netiol_interrupts document */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_msk_set_reserved1; /* reserved                       */
} NIOL_RISCV_IRQ_MSK_SET_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_RISCV_IRQ_MSK_SET_BIT_T bf;
} NIOL_RISCV_IRQ_MSK_SET_T;

/* --------------------------------------------------------------------- */
/* Register riscv_irq_msk_reset */
/* => irq_msk_reset # Write: 1: clear the corresponding bit in the IRQ mask # default 0 */
/*    Read: returns IRQ mask */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_msk_reset     0x0000000CU
#define Adr_NIOL_irq_ext_riscv_irq_msk_reset 0x0000018CU
#define Adr_NIOL_irq_int_riscv_irq_msk_reset 0x0000020CU
#define DFLT_VAL_NIOL_riscv_irq_msk_reset    0x00000000U

#define MSK_NIOL_riscv_irq_msk_reset_val         0x0000ffffU
#define SRT_NIOL_riscv_irq_msk_reset_val         0
#define DFLT_VAL_NIOL_riscv_irq_msk_reset_val    0x00000000U
#define DFLT_BF_VAL_NIOL_riscv_irq_msk_reset_val 0x00000000U

/* all used bits of 'NIOL_riscv_irq_msk_reset': */
#define MSK_USED_BITS_NIOL_riscv_irq_msk_reset 0x0000ffffU

enum {
  BFW_NIOL_riscv_irq_msk_reset_val       = 16, /* [15:0] */
  BFW_NIOL_riscv_irq_msk_reset_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_RISCV_IRQ_MSK_RESET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_riscv_irq_msk_reset_val;       /* see netiol_interrupts document */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_msk_reset_reserved1; /* reserved                       */
} NIOL_RISCV_IRQ_MSK_RESET_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_RISCV_IRQ_MSK_RESET_BIT_T bf;
} NIOL_RISCV_IRQ_MSK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register riscv_irq_softint_set */
/* => Software interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_softint_set     0x00000010U
#define Adr_NIOL_irq_ext_riscv_irq_softint_set 0x00000190U
#define Adr_NIOL_irq_int_riscv_irq_softint_set 0x00000210U
#define DFLT_VAL_NIOL_riscv_irq_softint_set    0x00000000U

#define MSK_NIOL_riscv_irq_softint_set_val         0x0000ffffU
#define SRT_NIOL_riscv_irq_softint_set_val         0
#define DFLT_VAL_NIOL_riscv_irq_softint_set_val    0x00000000U
#define DFLT_BF_VAL_NIOL_riscv_irq_softint_set_val 0x00000000U

/* all used bits of 'NIOL_riscv_irq_softint_set': */
#define MSK_USED_BITS_NIOL_riscv_irq_softint_set 0x0000ffffU

enum {
  BFW_NIOL_riscv_irq_softint_set_val       = 16, /* [15:0] */
  BFW_NIOL_riscv_irq_softint_set_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_RISCV_IRQ_SOFTINT_SET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_riscv_irq_softint_set_val;       /* see netiol_interrupts document */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_softint_set_reserved1; /* reserved                       */
} NIOL_RISCV_IRQ_SOFTINT_SET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_RISCV_IRQ_SOFTINT_SET_BIT_T bf;
} NIOL_RISCV_IRQ_SOFTINT_SET_T;

/* --------------------------------------------------------------------- */
/* Register riscv_irq_softint_reset */
/* => Software interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_softint_reset     0x00000014U
#define Adr_NIOL_irq_ext_riscv_irq_softint_reset 0x00000194U
#define Adr_NIOL_irq_int_riscv_irq_softint_reset 0x00000214U
#define DFLT_VAL_NIOL_riscv_irq_softint_reset    0x00000000U

#define MSK_NIOL_riscv_irq_softint_reset_val         0x0000ffffU
#define SRT_NIOL_riscv_irq_softint_reset_val         0
#define DFLT_VAL_NIOL_riscv_irq_softint_reset_val    0x00000000U
#define DFLT_BF_VAL_NIOL_riscv_irq_softint_reset_val 0x00000000U

/* all used bits of 'NIOL_riscv_irq_softint_reset': */
#define MSK_USED_BITS_NIOL_riscv_irq_softint_reset 0x0000ffffU

enum {
  BFW_NIOL_riscv_irq_softint_reset_val       = 16, /* [15:0] */
  BFW_NIOL_riscv_irq_softint_reset_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_RISCV_IRQ_SOFTINT_RESET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_riscv_irq_softint_reset_val;       /* see netiol_interrupts document */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_softint_reset_reserved1; /* reserved                       */
} NIOL_RISCV_IRQ_SOFTINT_RESET_BIT_T;

typedef union {
  uint32_t                           val;
  NIOL_RISCV_IRQ_SOFTINT_RESET_BIT_T bf;
} NIOL_RISCV_IRQ_SOFTINT_RESET_T;

/* --------------------------------------------------------------------- */
/* Register riscv_irq_no */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_riscv_irq_no     0x00000018U
#define Adr_NIOL_irq_ext_riscv_irq_no 0x00000198U
#define Adr_NIOL_irq_int_riscv_irq_no 0x00000218U

#define MSK_NIOL_riscv_irq_no_irq_no 0x0000001fU
#define SRT_NIOL_riscv_irq_no_irq_no 0

/* all used bits of 'NIOL_riscv_irq_no': */
#define MSK_USED_BITS_NIOL_riscv_irq_no 0x0000001fU

enum {
  BFW_NIOL_riscv_irq_no_irq_no    = 5,  /* [4:0] */
  BFW_NIOL_riscv_irq_no_reserved1 = 27  /* [31:5] */
};

typedef struct NIOL_RISCV_IRQ_NO_BIT_Ttag {
  unsigned int irq_no    : BFW_NIOL_riscv_irq_no_irq_no;    /* Number of the non-masked pending IRQ with the highest priority (=lowest bit position). When no non-masked IRQ is pending the number of the highest IRQ plus one is returned. */
  unsigned int reserved1 : BFW_NIOL_riscv_irq_no_reserved1; /* reserved                                                                                                                                                                     */
} NIOL_RISCV_IRQ_NO_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_RISCV_IRQ_NO_BIT_T bf;
} NIOL_RISCV_IRQ_NO_T;


/* ===================================================================== */

/* Area of ledm */

/* ===================================================================== */

#define Addr_NIOL_ledm 0x00000280U

/* --------------------------------------------------------------------- */
/* Register ledm_cfg */
/* => LED matrix control register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_cfg  0x00000000U
#define Adr_NIOL_ledm_ledm_cfg 0x00000280U
#define Adr_NIOL_ledm_cfg      0x00000280U
#define DFLT_VAL_NIOL_ledm_cfg 0x00000826U

#define MSK_NIOL_ledm_cfg_en                      0x00000001U
#define SRT_NIOL_ledm_cfg_en                      0
#define DFLT_VAL_NIOL_ledm_cfg_en                 0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_cfg_en              0x00000000U
#define MSK_NIOL_ledm_cfg_column_last             0x0000000eU
#define SRT_NIOL_ledm_cfg_column_last             1
#define DFLT_VAL_NIOL_ledm_cfg_column_last        0x00000006U
#define DFLT_BF_VAL_NIOL_ledm_cfg_column_last     0x00000003U
#define MSK_NIOL_ledm_cfg_bipolar                 0x00000010U
#define SRT_NIOL_ledm_cfg_bipolar                 4
#define DFLT_VAL_NIOL_ledm_cfg_bipolar            0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_cfg_bipolar         0x00000000U
#define MSK_NIOL_ledm_cfg_column_adaptive         0x00000020U
#define SRT_NIOL_ledm_cfg_column_adaptive         5
#define DFLT_VAL_NIOL_ledm_cfg_column_adaptive    0x00000020U
#define DFLT_BF_VAL_NIOL_ledm_cfg_column_adaptive 0x00000001U
#define MSK_NIOL_ledm_cfg_cycle                   0x000007c0U
#define SRT_NIOL_ledm_cfg_cycle                   6
#define DFLT_VAL_NIOL_ledm_cfg_cycle              0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_cfg_cycle           0x00000000U
#define MSK_NIOL_ledm_cfg_precharge_en            0x00000800U
#define SRT_NIOL_ledm_cfg_precharge_en            11
#define DFLT_VAL_NIOL_ledm_cfg_precharge_en       0x00000800U
#define DFLT_BF_VAL_NIOL_ledm_cfg_precharge_en    0x00000001U

/* all used bits of 'NIOL_ledm_cfg': */
#define MSK_USED_BITS_NIOL_ledm_cfg 0x00000fffU

enum {
  BFW_NIOL_ledm_cfg_en              = 1,  /* [0] */
  BFW_NIOL_ledm_cfg_column_last     = 3,  /* [3:1] */
  BFW_NIOL_ledm_cfg_bipolar         = 1,  /* [4] */
  BFW_NIOL_ledm_cfg_column_adaptive = 1,  /* [5] */
  BFW_NIOL_ledm_cfg_cycle           = 5,  /* [10:6] */
  BFW_NIOL_ledm_cfg_precharge_en    = 1,  /* [11] */
  BFW_NIOL_ledm_cfg_reserved1       = 20  /* [31:12] */
};

typedef struct NIOL_LEDM_CFG_BIT_Ttag {
  unsigned int en              : BFW_NIOL_ledm_cfg_en;              /* 0: disabled (led_i[*]=0, led_oen[*]=1). Matrix cycling is stopped.                                                               */
                                                                    /* 1: LED matrix running                                                                                                            */
  unsigned int column_last     : BFW_NIOL_ledm_cfg_column_last;     /* column ranges from 0 to column_last                                                                                              */
                                                                    /* 0..5 for bipolar mode                                                                                                            */
                                                                    /* 0,2,4 for unipolar mode                                                                                                          */
                                                                    /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int bipolar         : BFW_NIOL_ledm_cfg_bipolar;         /* 0: unipolar matrix. Maximum length column sequence is 0,2,4.                                                                     */
                                                                    /* 1: bipolar matrix. Maximum length column sequence is 0,1,2,3,4,5                                                                 */
                                                                    /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int column_adaptive : BFW_NIOL_ledm_cfg_column_adaptive; /* 0: all column driver segments are enabled                                                                                        */
                                                                    /* 1: number of enabled column driver segments equal to conducting row drivers                                                      */
                                                                    /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int cycle           : BFW_NIOL_ledm_cfg_cycle;           /* 0..31                                                                                                                            */
                                                                    /* 0: IRQ.cycle_evt is asserted at the beginning of every LED matrix cycle                                                          */
                                                                    /* 1: IRQ.cycle_evt is asserted at the beginning of every 2nd LED matrix cycle                                                      */
                                                                    /* ...                                                                                                                              */
                                                                    /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int precharge_en    : BFW_NIOL_ledm_cfg_precharge_en;    /* 0: disable precharge                                                                                                             */
                                                                    /* 1: enable precharge of column lines (led_c_oen) in column_adaptive mode                                                          */
  unsigned int reserved1       : BFW_NIOL_ledm_cfg_reserved1;       /* reserved                                                                                                                         */
} NIOL_LEDM_CFG_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_LEDM_CFG_BIT_T bf;
} NIOL_LEDM_CFG_T;

/* --------------------------------------------------------------------- */
/* Register ledm_prescaler */
/* => LED matrix prescaler */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_prescaler  0x00000004U
#define Adr_NIOL_ledm_ledm_prescaler 0x00000284U
#define Adr_NIOL_ledm_prescaler      0x00000284U
#define DFLT_VAL_NIOL_ledm_prescaler 0x00000000U

#define MSK_NIOL_ledm_prescaler_prescaler         0x000000ffU
#define SRT_NIOL_ledm_prescaler_prescaler         0
#define DFLT_VAL_NIOL_ledm_prescaler_prescaler    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_prescaler_prescaler 0x00000000U

/* all used bits of 'NIOL_ledm_prescaler': */
#define MSK_USED_BITS_NIOL_ledm_prescaler 0x000000ffU

enum {
  BFW_NIOL_ledm_prescaler_prescaler = 8,  /* [7:0] */
  BFW_NIOL_ledm_prescaler_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_PRESCALER_BIT_Ttag {
  unsigned int prescaler : BFW_NIOL_ledm_prescaler_prescaler; /* 1..MAX: prescaler generates a tick every cfg_prescaler clock cycles                                                              */
                                                              /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int reserved1 : BFW_NIOL_ledm_prescaler_reserved1; /* reserved                                                                                                                         */
} NIOL_LEDM_PRESCALER_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_LEDM_PRESCALER_BIT_T bf;
} NIOL_LEDM_PRESCALER_T;

/* --------------------------------------------------------------------- */
/* Register ledm_t0 */
/* => LED matrix time 0 */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_t0  0x00000008U
#define Adr_NIOL_ledm_ledm_t0 0x00000288U
#define Adr_NIOL_ledm_t0      0x00000288U
#define DFLT_VAL_NIOL_ledm_t0 0x00000000U

#define MSK_NIOL_ledm_t0_t0         0x00003fffU
#define SRT_NIOL_ledm_t0_t0         0
#define DFLT_VAL_NIOL_ledm_t0_t0    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_t0_t0 0x00000000U

/* all used bits of 'NIOL_ledm_t0': */
#define MSK_USED_BITS_NIOL_ledm_t0 0x00003fffU

enum {
  BFW_NIOL_ledm_t0_t0        = 14, /* [13:0] */
  BFW_NIOL_ledm_t0_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_LEDM_T0_BIT_Ttag {
  unsigned int t0        : BFW_NIOL_ledm_t0_t0;        /* 1..MAX: time in prescaler ticks, see functional description                                                                      */
                                                       /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int reserved1 : BFW_NIOL_ledm_t0_reserved1; /* reserved                                                                                                                         */
} NIOL_LEDM_T0_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_LEDM_T0_BIT_T bf;
} NIOL_LEDM_T0_T;

/* --------------------------------------------------------------------- */
/* Register ledm_t1 */
/* => LED matrix time 1 */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_t1  0x0000000CU
#define Adr_NIOL_ledm_ledm_t1 0x0000028CU
#define Adr_NIOL_ledm_t1      0x0000028CU
#define DFLT_VAL_NIOL_ledm_t1 0x00000000U

#define MSK_NIOL_ledm_t1_t1         0x000000ffU
#define SRT_NIOL_ledm_t1_t1         0
#define DFLT_VAL_NIOL_ledm_t1_t1    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_t1_t1 0x00000000U

/* all used bits of 'NIOL_ledm_t1': */
#define MSK_USED_BITS_NIOL_ledm_t1 0x000000ffU

enum {
  BFW_NIOL_ledm_t1_t1        = 8,  /* [7:0] */
  BFW_NIOL_ledm_t1_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_T1_BIT_Ttag {
  unsigned int t1        : BFW_NIOL_ledm_t1_t1;        /* 1..MAX: time in prescaler ticks, see functional description                                                                      */
                                                       /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int reserved1 : BFW_NIOL_ledm_t1_reserved1; /* reserved                                                                                                                         */
} NIOL_LEDM_T1_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_LEDM_T1_BIT_T bf;
} NIOL_LEDM_T1_T;

/* --------------------------------------------------------------------- */
/* Register ledm_t2 */
/* => LED matrix time 2 */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_t2  0x00000010U
#define Adr_NIOL_ledm_ledm_t2 0x00000290U
#define Adr_NIOL_ledm_t2      0x00000290U
#define DFLT_VAL_NIOL_ledm_t2 0x00000000U

#define MSK_NIOL_ledm_t2_t2         0x000000ffU
#define SRT_NIOL_ledm_t2_t2         0
#define DFLT_VAL_NIOL_ledm_t2_t2    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_t2_t2 0x00000000U

/* all used bits of 'NIOL_ledm_t2': */
#define MSK_USED_BITS_NIOL_ledm_t2 0x000000ffU

enum {
  BFW_NIOL_ledm_t2_t2        = 8,  /* [7:0] */
  BFW_NIOL_ledm_t2_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_T2_BIT_Ttag {
  unsigned int t2        : BFW_NIOL_ledm_t2_t2;        /* 1..MAX: time in prescaler ticks, see functional description                                                                      */
                                                       /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int reserved1 : BFW_NIOL_ledm_t2_reserved1; /* reserved                                                                                                                         */
} NIOL_LEDM_T2_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_LEDM_T2_BIT_T bf;
} NIOL_LEDM_T2_T;

/* --------------------------------------------------------------------- */
/* Register ledm_t3 */
/* => LED matrix time 3 */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_t3  0x00000014U
#define Adr_NIOL_ledm_ledm_t3 0x00000294U
#define Adr_NIOL_ledm_t3      0x00000294U
#define DFLT_VAL_NIOL_ledm_t3 0x00000000U

#define MSK_NIOL_ledm_t3_t3         0x0000ffffU
#define SRT_NIOL_ledm_t3_t3         0
#define DFLT_VAL_NIOL_ledm_t3_t3    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_t3_t3 0x00000000U

/* all used bits of 'NIOL_ledm_t3': */
#define MSK_USED_BITS_NIOL_ledm_t3 0x0000ffffU

enum {
  BFW_NIOL_ledm_t3_t3        = 16, /* [15:0] */
  BFW_NIOL_ledm_t3_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_T3_BIT_Ttag {
  unsigned int t3        : BFW_NIOL_ledm_t3_t3;        /* 1..MAX: time in prescaler ticks, see functional description                                                                      */
                                                       /* changing this value while CFG.en=1 may result in a temporary deviation from the intended LED matrix sequencing and timing scheme */
  unsigned int reserved1 : BFW_NIOL_ledm_t3_reserved1; /* reserved                                                                                                                         */
} NIOL_LEDM_T3_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_LEDM_T3_BIT_T bf;
} NIOL_LEDM_T3_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led15_0 */
/* => LED matrix LED values register */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led15_0  0x00000018U
#define Adr_NIOL_ledm_ledm_led15_0 0x00000298U
#define Adr_NIOL_ledm_led15_0      0x00000298U

#define MSK_NIOL_ledm_led15_0_led15_0 0x0000ffffU
#define SRT_NIOL_ledm_led15_0_led15_0 0

/* all used bits of 'NIOL_ledm_led15_0': */
#define MSK_USED_BITS_NIOL_ledm_led15_0 0x0000ffffU

enum {
  BFW_NIOL_ledm_led15_0_led15_0   = 16, /* [15:0] */
  BFW_NIOL_ledm_led15_0_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_LED15_0_BIT_Ttag {
  unsigned int led15_0   : BFW_NIOL_ledm_led15_0_led15_0;   /* Matrix mode: 0 : LED off 1: LED on                                                                                  */
                                                            /* During the matrix cycle a sequence of pulses is written to the D2A output register so that all enabled LEDs are on. */
  unsigned int reserved1 : BFW_NIOL_ledm_led15_0_reserved1; /* reserved                                                                                                            */
} NIOL_LEDM_LED15_0_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_LEDM_LED15_0_BIT_T bf;
} NIOL_LEDM_LED15_0_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led23_16 */
/* => LED matrix LED values register */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led23_16  0x0000001CU
#define Adr_NIOL_ledm_ledm_led23_16 0x0000029CU
#define Adr_NIOL_ledm_led23_16      0x0000029CU

#define MSK_NIOL_ledm_led23_16_led23_16 0x000000ffU
#define SRT_NIOL_ledm_led23_16_led23_16 0

/* all used bits of 'NIOL_ledm_led23_16': */
#define MSK_USED_BITS_NIOL_ledm_led23_16 0x000000ffU

enum {
  BFW_NIOL_ledm_led23_16_led23_16  = 8,  /* [7:0] */
  BFW_NIOL_ledm_led23_16_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_LED23_16_BIT_Ttag {
  unsigned int led23_16  : BFW_NIOL_ledm_led23_16_led23_16;  /* see LED15_0 */
  unsigned int reserved1 : BFW_NIOL_ledm_led23_16_reserved1; /* reserved    */
} NIOL_LEDM_LED23_16_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_LEDM_LED23_16_BIT_T bf;
} NIOL_LEDM_LED23_16_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led15_0_rld */
/* => LED matrix LED values reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led15_0_rld  0x00000020U
#define Adr_NIOL_ledm_ledm_led15_0_rld 0x000002A0U
#define Adr_NIOL_ledm_led15_0_rld      0x000002A0U
#define DFLT_VAL_NIOL_ledm_led15_0_rld 0x00000000U

#define MSK_NIOL_ledm_led15_0_rld_led15_0_rld         0x0000ffffU
#define SRT_NIOL_ledm_led15_0_rld_led15_0_rld         0
#define DFLT_VAL_NIOL_ledm_led15_0_rld_led15_0_rld    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_led15_0_rld_led15_0_rld 0x00000000U

/* all used bits of 'NIOL_ledm_led15_0_rld': */
#define MSK_USED_BITS_NIOL_ledm_led15_0_rld 0x0000ffffU

enum {
  BFW_NIOL_ledm_led15_0_rld_led15_0_rld = 16, /* [15:0] */
  BFW_NIOL_ledm_led15_0_rld_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_LED15_0_RLD_BIT_Ttag {
  unsigned int led15_0_rld : BFW_NIOL_ledm_led15_0_rld_led15_0_rld; /* reload register copied to LED15_0 at the beginning of every CFG.cycle LED matrix cycle. */
  unsigned int reserved1   : BFW_NIOL_ledm_led15_0_rld_reserved1;   /* reserved                                                                                */
} NIOL_LEDM_LED15_0_RLD_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_LEDM_LED15_0_RLD_BIT_T bf;
} NIOL_LEDM_LED15_0_RLD_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led23_16_rld */
/* => LED matrix LED values reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led23_16_rld  0x00000024U
#define Adr_NIOL_ledm_ledm_led23_16_rld 0x000002A4U
#define Adr_NIOL_ledm_led23_16_rld      0x000002A4U
#define DFLT_VAL_NIOL_ledm_led23_16_rld 0x00000000U

#define MSK_NIOL_ledm_led23_16_rld_led23_16_rld         0x000000ffU
#define SRT_NIOL_ledm_led23_16_rld_led23_16_rld         0
#define DFLT_VAL_NIOL_ledm_led23_16_rld_led23_16_rld    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_led23_16_rld_led23_16_rld 0x00000000U

/* all used bits of 'NIOL_ledm_led23_16_rld': */
#define MSK_USED_BITS_NIOL_ledm_led23_16_rld 0x000000ffU

enum {
  BFW_NIOL_ledm_led23_16_rld_led23_16_rld = 8,  /* [7:0] */
  BFW_NIOL_ledm_led23_16_rld_reserved1    = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_LED23_16_RLD_BIT_Ttag {
  unsigned int led23_16_rld : BFW_NIOL_ledm_led23_16_rld_led23_16_rld; /* see LED15_0_RLD */
  unsigned int reserved1    : BFW_NIOL_ledm_led23_16_rld_reserved1;    /* reserved        */
} NIOL_LEDM_LED23_16_RLD_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_LEDM_LED23_16_RLD_BIT_T bf;
} NIOL_LEDM_LED23_16_RLD_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led15_0_rld_set */
/* => LED matrix LED values reload set register */
/*     */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led15_0_rld_set  0x00000028U
#define Adr_NIOL_ledm_ledm_led15_0_rld_set 0x000002A8U
#define Adr_NIOL_ledm_led15_0_rld_set      0x000002A8U
#define DFLT_VAL_NIOL_ledm_led15_0_rld_set 0x00000000U

#define MSK_NIOL_ledm_led15_0_rld_set_led15_0_rld_set         0x0000ffffU
#define SRT_NIOL_ledm_led15_0_rld_set_led15_0_rld_set         0
#define DFLT_VAL_NIOL_ledm_led15_0_rld_set_led15_0_rld_set    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_led15_0_rld_set_led15_0_rld_set 0x00000000U

/* all used bits of 'NIOL_ledm_led15_0_rld_set': */
#define MSK_USED_BITS_NIOL_ledm_led15_0_rld_set 0x0000ffffU

enum {
  BFW_NIOL_ledm_led15_0_rld_set_led15_0_rld_set = 16, /* [15:0] */
  BFW_NIOL_ledm_led15_0_rld_set_reserved1       = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_LED15_0_RLD_SET_BIT_Ttag {
  unsigned int led15_0_rld_set : BFW_NIOL_ledm_led15_0_rld_set_led15_0_rld_set; /* 1: set the corresponding bit in LED15_0_RLD */
  unsigned int reserved1       : BFW_NIOL_ledm_led15_0_rld_set_reserved1;       /* reserved                                    */
} NIOL_LEDM_LED15_0_RLD_SET_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_LEDM_LED15_0_RLD_SET_BIT_T bf;
} NIOL_LEDM_LED15_0_RLD_SET_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led15_0_rld_reset */
/* => LED matrix LED values reload reset register */
/*     */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led15_0_rld_reset  0x0000002CU
#define Adr_NIOL_ledm_ledm_led15_0_rld_reset 0x000002ACU
#define Adr_NIOL_ledm_led15_0_rld_reset      0x000002ACU
#define DFLT_VAL_NIOL_ledm_led15_0_rld_reset 0x00000000U

#define MSK_NIOL_ledm_led15_0_rld_reset_led15_0_rld_reset         0x0000ffffU
#define SRT_NIOL_ledm_led15_0_rld_reset_led15_0_rld_reset         0
#define DFLT_VAL_NIOL_ledm_led15_0_rld_reset_led15_0_rld_reset    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_led15_0_rld_reset_led15_0_rld_reset 0x00000000U

/* all used bits of 'NIOL_ledm_led15_0_rld_reset': */
#define MSK_USED_BITS_NIOL_ledm_led15_0_rld_reset 0x0000ffffU

enum {
  BFW_NIOL_ledm_led15_0_rld_reset_led15_0_rld_reset = 16, /* [15:0] */
  BFW_NIOL_ledm_led15_0_rld_reset_reserved1         = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_LED15_0_RLD_RESET_BIT_Ttag {
  unsigned int led15_0_rld_reset : BFW_NIOL_ledm_led15_0_rld_reset_led15_0_rld_reset; /* 1: clear the corresponding bit in LED15_0_RLD */
  unsigned int reserved1         : BFW_NIOL_ledm_led15_0_rld_reset_reserved1;         /* reserved                                      */
} NIOL_LEDM_LED15_0_RLD_RESET_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_LEDM_LED15_0_RLD_RESET_BIT_T bf;
} NIOL_LEDM_LED15_0_RLD_RESET_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led23_16_rld_set */
/* => LED matrix LED values reload set register */
/*     */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led23_16_rld_set  0x00000030U
#define Adr_NIOL_ledm_ledm_led23_16_rld_set 0x000002B0U
#define Adr_NIOL_ledm_led23_16_rld_set      0x000002B0U
#define DFLT_VAL_NIOL_ledm_led23_16_rld_set 0x00000000U

#define MSK_NIOL_ledm_led23_16_rld_set_led23_16_rld_set         0x000000ffU
#define SRT_NIOL_ledm_led23_16_rld_set_led23_16_rld_set         0
#define DFLT_VAL_NIOL_ledm_led23_16_rld_set_led23_16_rld_set    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_led23_16_rld_set_led23_16_rld_set 0x00000000U

/* all used bits of 'NIOL_ledm_led23_16_rld_set': */
#define MSK_USED_BITS_NIOL_ledm_led23_16_rld_set 0x000000ffU

enum {
  BFW_NIOL_ledm_led23_16_rld_set_led23_16_rld_set = 8,  /* [7:0] */
  BFW_NIOL_ledm_led23_16_rld_set_reserved1        = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_LED23_16_RLD_SET_BIT_Ttag {
  unsigned int led23_16_rld_set : BFW_NIOL_ledm_led23_16_rld_set_led23_16_rld_set; /* 1: set the corresponding bit in LED23_16_RLD */
  unsigned int reserved1        : BFW_NIOL_ledm_led23_16_rld_set_reserved1;        /* reserved                                     */
} NIOL_LEDM_LED23_16_RLD_SET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_LEDM_LED23_16_RLD_SET_BIT_T bf;
} NIOL_LEDM_LED23_16_RLD_SET_T;

/* --------------------------------------------------------------------- */
/* Register ledm_led23_16_rld_reset */
/* => LED matrix LED values reload reset register */
/*     */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_led23_16_rld_reset  0x00000034U
#define Adr_NIOL_ledm_ledm_led23_16_rld_reset 0x000002B4U
#define Adr_NIOL_ledm_led23_16_rld_reset      0x000002B4U
#define DFLT_VAL_NIOL_ledm_led23_16_rld_reset 0x00000000U

#define MSK_NIOL_ledm_led23_16_rld_reset_led23_16_rld_reset         0x000000ffU
#define SRT_NIOL_ledm_led23_16_rld_reset_led23_16_rld_reset         0
#define DFLT_VAL_NIOL_ledm_led23_16_rld_reset_led23_16_rld_reset    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_led23_16_rld_reset_led23_16_rld_reset 0x00000000U

/* all used bits of 'NIOL_ledm_led23_16_rld_reset': */
#define MSK_USED_BITS_NIOL_ledm_led23_16_rld_reset 0x000000ffU

enum {
  BFW_NIOL_ledm_led23_16_rld_reset_led23_16_rld_reset = 8,  /* [7:0] */
  BFW_NIOL_ledm_led23_16_rld_reset_reserved1          = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_LED23_16_RLD_RESET_BIT_Ttag {
  unsigned int led23_16_rld_reset : BFW_NIOL_ledm_led23_16_rld_reset_led23_16_rld_reset; /* 1: clear the corresponding bit in LED23_16_RLD */
  unsigned int reserved1          : BFW_NIOL_ledm_led23_16_rld_reset_reserved1;          /* reserved                                       */
} NIOL_LEDM_LED23_16_RLD_RESET_BIT_T;

typedef union {
  uint32_t                           val;
  NIOL_LEDM_LED23_16_RLD_RESET_BIT_T bf;
} NIOL_LEDM_LED23_16_RLD_RESET_T;

/* --------------------------------------------------------------------- */
/* Register ledm_irq_raw */
/* => IRQ raw event register */
/*    Writing a '1' to a bit position with an event type IRQ will clear the event flag. */
/*    Writing to bit positions with a 'status' type IRQ has no effect. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_irq_raw  0x00000038U
#define Adr_NIOL_ledm_ledm_irq_raw 0x000002B8U
#define Adr_NIOL_ledm_irq_raw      0x000002B8U
#define DFLT_VAL_NIOL_ledm_irq_raw 0x00000000U

#define MSK_NIOL_ledm_irq_raw_cycle_evt         0x00000001U
#define SRT_NIOL_ledm_irq_raw_cycle_evt         0
#define DFLT_VAL_NIOL_ledm_irq_raw_cycle_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_irq_raw_cycle_evt 0x00000000U

/* all used bits of 'NIOL_ledm_irq_raw': */
#define MSK_USED_BITS_NIOL_ledm_irq_raw 0x00000001U

enum {
  BFW_NIOL_ledm_irq_raw_cycle_evt = 1,  /* [0] */
  BFW_NIOL_ledm_irq_raw_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_LEDM_IRQ_RAW_BIT_Ttag {
  unsigned int cycle_evt : BFW_NIOL_ledm_irq_raw_cycle_evt; /* EVENT: LED matrix mode: shadow registers have been copied to LED matrix state registers */
  unsigned int reserved1 : BFW_NIOL_ledm_irq_raw_reserved1; /* reserved                                                                                */
} NIOL_LEDM_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_LEDM_IRQ_RAW_BIT_T bf;
} NIOL_LEDM_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register ledm_irq_masked */
/* => Masked IRQ register */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_irq_masked  0x0000003CU
#define Adr_NIOL_ledm_ledm_irq_masked 0x000002BCU
#define Adr_NIOL_ledm_irq_masked      0x000002BCU

#define MSK_NIOL_ledm_irq_masked_cycle_evt 0x00000001U
#define SRT_NIOL_ledm_irq_masked_cycle_evt 0

/* all used bits of 'NIOL_ledm_irq_masked': */
#define MSK_USED_BITS_NIOL_ledm_irq_masked 0x00000001U

enum {
  BFW_NIOL_ledm_irq_masked_cycle_evt = 1,  /* [0] */
  BFW_NIOL_ledm_irq_masked_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_LEDM_IRQ_MASKED_BIT_Ttag {
  unsigned int cycle_evt : BFW_NIOL_ledm_irq_masked_cycle_evt; /* EVENT:   */
  unsigned int reserved1 : BFW_NIOL_ledm_irq_masked_reserved1; /* reserved */
} NIOL_LEDM_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_LEDM_IRQ_MASKED_BIT_T bf;
} NIOL_LEDM_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register ledm_irq_msk_set */
/* => IRQ mask set register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_irq_msk_set  0x00000040U
#define Adr_NIOL_ledm_ledm_irq_msk_set 0x000002C0U
#define Adr_NIOL_ledm_irq_msk_set      0x000002C0U
#define DFLT_VAL_NIOL_ledm_irq_msk_set 0x00000000U

#define MSK_NIOL_ledm_irq_msk_set_cycle_evt         0x00000001U
#define SRT_NIOL_ledm_irq_msk_set_cycle_evt         0
#define DFLT_VAL_NIOL_ledm_irq_msk_set_cycle_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_irq_msk_set_cycle_evt 0x00000000U

/* all used bits of 'NIOL_ledm_irq_msk_set': */
#define MSK_USED_BITS_NIOL_ledm_irq_msk_set 0x00000001U

enum {
  BFW_NIOL_ledm_irq_msk_set_cycle_evt = 1,  /* [0] */
  BFW_NIOL_ledm_irq_msk_set_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_LEDM_IRQ_MSK_SET_BIT_Ttag {
  unsigned int cycle_evt : BFW_NIOL_ledm_irq_msk_set_cycle_evt; /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                /* Read: returns IRQ mask                              */
  unsigned int reserved1 : BFW_NIOL_ledm_irq_msk_set_reserved1; /* reserved                                            */
} NIOL_LEDM_IRQ_MSK_SET_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_LEDM_IRQ_MSK_SET_BIT_T bf;
} NIOL_LEDM_IRQ_MSK_SET_T;

/* --------------------------------------------------------------------- */
/* Register ledm_irq_msk_reset */
/* => IRQ mask reset register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_irq_msk_reset  0x00000044U
#define Adr_NIOL_ledm_ledm_irq_msk_reset 0x000002C4U
#define Adr_NIOL_ledm_irq_msk_reset      0x000002C4U
#define DFLT_VAL_NIOL_ledm_irq_msk_reset 0x00000000U

#define MSK_NIOL_ledm_irq_msk_reset_cycle_evt         0x00000001U
#define SRT_NIOL_ledm_irq_msk_reset_cycle_evt         0
#define DFLT_VAL_NIOL_ledm_irq_msk_reset_cycle_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_irq_msk_reset_cycle_evt 0x00000000U

/* all used bits of 'NIOL_ledm_irq_msk_reset': */
#define MSK_USED_BITS_NIOL_ledm_irq_msk_reset 0x00000001U

enum {
  BFW_NIOL_ledm_irq_msk_reset_cycle_evt = 1,  /* [0] */
  BFW_NIOL_ledm_irq_msk_reset_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_LEDM_IRQ_MSK_RESET_BIT_Ttag {
  unsigned int cycle_evt : BFW_NIOL_ledm_irq_msk_reset_cycle_evt; /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                  /* Read: returns IRQ mask                                */
  unsigned int reserved1 : BFW_NIOL_ledm_irq_msk_reset_reserved1; /* reserved                                              */
} NIOL_LEDM_IRQ_MSK_RESET_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_LEDM_IRQ_MSK_RESET_BIT_T bf;
} NIOL_LEDM_IRQ_MSK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register ledm_irq_no */
/* => IRQ number register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_irq_no  0x00000048U
#define Adr_NIOL_ledm_ledm_irq_no 0x000002C8U
#define Adr_NIOL_ledm_irq_no      0x000002C8U

#define MSK_NIOL_ledm_irq_no_irq_no 0x0000ffffU
#define SRT_NIOL_ledm_irq_no_irq_no 0

/* all used bits of 'NIOL_ledm_irq_no': */
#define MSK_USED_BITS_NIOL_ledm_irq_no 0x0000ffffU

enum {
  BFW_NIOL_ledm_irq_no_irq_no    = 16, /* [15:0] */
  BFW_NIOL_ledm_irq_no_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_IRQ_NO_BIT_Ttag {
  unsigned int irq_no    : BFW_NIOL_ledm_irq_no_irq_no;    /* Number of the non-masked pending IRQ with the highest priority (=lowest bit position). When no non-masked IRQ is pending the number of the highest IRQ plus one is returned. */
  unsigned int reserved1 : BFW_NIOL_ledm_irq_no_reserved1; /* reserved                                                                                                                                                                     */
} NIOL_LEDM_IRQ_NO_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_LEDM_IRQ_NO_BIT_T bf;
} NIOL_LEDM_IRQ_NO_T;

/* --------------------------------------------------------------------- */
/* Register ledm_d2a_col */
/* => LED matrix interface register to the analog part */
/*    These registers directly control (D2A) the LED drivers when the IOMUX assigns the LED drivers to this module. These D2A registers are also written by the led matrix controller when CFG.en=1. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_d2a_col  0x0000004CU
#define Adr_NIOL_ledm_ledm_d2a_col 0x000002CCU
#define Adr_NIOL_ledm_d2a_col      0x000002CCU
#define DFLT_VAL_NIOL_ledm_d2a_col 0x00001ffeU

#define MSK_NIOL_ledm_d2a_col_d_led_on                0x00000001U
#define SRT_NIOL_ledm_d2a_col_d_led_on                0
#define DFLT_VAL_NIOL_ledm_d2a_col_d_led_on           0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_d2a_col_d_led_on        0x00000000U
#define MSK_NIOL_ledm_d2a_col_d_led_c_s0_oe_n         0x0000000eU
#define SRT_NIOL_ledm_d2a_col_d_led_c_s0_oe_n         1
#define DFLT_VAL_NIOL_ledm_d2a_col_d_led_c_s0_oe_n    0x0000000eU
#define DFLT_BF_VAL_NIOL_ledm_d2a_col_d_led_c_s0_oe_n 0x00000007U
#define MSK_NIOL_ledm_d2a_col_d_led_c_s1_oe_n         0x00000070U
#define SRT_NIOL_ledm_d2a_col_d_led_c_s1_oe_n         4
#define DFLT_VAL_NIOL_ledm_d2a_col_d_led_c_s1_oe_n    0x00000070U
#define DFLT_BF_VAL_NIOL_ledm_d2a_col_d_led_c_s1_oe_n 0x00000007U
#define MSK_NIOL_ledm_d2a_col_d_led_c_s2_oe_n         0x00000380U
#define SRT_NIOL_ledm_d2a_col_d_led_c_s2_oe_n         7
#define DFLT_VAL_NIOL_ledm_d2a_col_d_led_c_s2_oe_n    0x00000380U
#define DFLT_BF_VAL_NIOL_ledm_d2a_col_d_led_c_s2_oe_n 0x00000007U
#define MSK_NIOL_ledm_d2a_col_d_led_c_s3_oe_n         0x00001c00U
#define SRT_NIOL_ledm_d2a_col_d_led_c_s3_oe_n         10
#define DFLT_VAL_NIOL_ledm_d2a_col_d_led_c_s3_oe_n    0x00001c00U
#define DFLT_BF_VAL_NIOL_ledm_d2a_col_d_led_c_s3_oe_n 0x00000007U
#define MSK_NIOL_ledm_d2a_col_d_led_c_i               0x0000e000U
#define SRT_NIOL_ledm_d2a_col_d_led_c_i               13
#define DFLT_VAL_NIOL_ledm_d2a_col_d_led_c_i          0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_d2a_col_d_led_c_i       0x00000000U

/* all used bits of 'NIOL_ledm_d2a_col': */
#define MSK_USED_BITS_NIOL_ledm_d2a_col 0x0000ffffU

enum {
  BFW_NIOL_ledm_d2a_col_d_led_on        = 1,  /* [0] */
  BFW_NIOL_ledm_d2a_col_d_led_c_s0_oe_n = 3,  /* [3:1] */
  BFW_NIOL_ledm_d2a_col_d_led_c_s1_oe_n = 3,  /* [6:4] */
  BFW_NIOL_ledm_d2a_col_d_led_c_s2_oe_n = 3,  /* [9:7] */
  BFW_NIOL_ledm_d2a_col_d_led_c_s3_oe_n = 3,  /* [12:10] */
  BFW_NIOL_ledm_d2a_col_d_led_c_i       = 3,  /* [15:13] */
  BFW_NIOL_ledm_d2a_col_reserved1       = 16  /* [31:16] */
};

typedef struct NIOL_LEDM_D2A_COL_BIT_Ttag {
  unsigned int d_led_on        : BFW_NIOL_ledm_d2a_col_d_led_on;        /* D2A, 1: LED drivers enabled. To be set by software before matrix operation.      */
  unsigned int d_led_c_s0_oe_n : BFW_NIOL_ledm_d2a_col_d_led_c_s0_oe_n; /* D2A, 0: strong column driver [index] slice 0 is enabled. Polarity comes from *_i */
  unsigned int d_led_c_s1_oe_n : BFW_NIOL_ledm_d2a_col_d_led_c_s1_oe_n; /* D2A                                                                              */
  unsigned int d_led_c_s2_oe_n : BFW_NIOL_ledm_d2a_col_d_led_c_s2_oe_n; /* D2A                                                                              */
  unsigned int d_led_c_s3_oe_n : BFW_NIOL_ledm_d2a_col_d_led_c_s3_oe_n; /* D2A                                                                              */
  unsigned int d_led_c_i       : BFW_NIOL_ledm_d2a_col_d_led_c_i;       /* D2A, data to pad                                                                 */
  unsigned int reserved1       : BFW_NIOL_ledm_d2a_col_reserved1;       /* reserved                                                                         */
} NIOL_LEDM_D2A_COL_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_LEDM_D2A_COL_BIT_T bf;
} NIOL_LEDM_D2A_COL_T;

/* --------------------------------------------------------------------- */
/* Register ledm_d2a_row */
/* => LED matrix interface register to the analog part */
/*    These registers directly control (D2A) the LED drivers when the IOMUX assigns the LED drivers to this module. These D2A registers are also written by the led matrix controller when CFG.en=1. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_ledm_d2a_row  0x00000050U
#define Adr_NIOL_ledm_ledm_d2a_row 0x000002D0U
#define Adr_NIOL_ledm_d2a_row      0x000002D0U
#define DFLT_VAL_NIOL_ledm_d2a_row 0x0000000fU

#define MSK_NIOL_ledm_d2a_row_d_led_r_s0_oe_n         0x0000000fU
#define SRT_NIOL_ledm_d2a_row_d_led_r_s0_oe_n         0
#define DFLT_VAL_NIOL_ledm_d2a_row_d_led_r_s0_oe_n    0x0000000fU
#define DFLT_BF_VAL_NIOL_ledm_d2a_row_d_led_r_s0_oe_n 0x0000000fU
#define MSK_NIOL_ledm_d2a_row_d_led_r_i               0x000000f0U
#define SRT_NIOL_ledm_d2a_row_d_led_r_i               4
#define DFLT_VAL_NIOL_ledm_d2a_row_d_led_r_i          0x00000000U
#define DFLT_BF_VAL_NIOL_ledm_d2a_row_d_led_r_i       0x00000000U

/* all used bits of 'NIOL_ledm_d2a_row': */
#define MSK_USED_BITS_NIOL_ledm_d2a_row 0x000000ffU

enum {
  BFW_NIOL_ledm_d2a_row_d_led_r_s0_oe_n = 4,  /* [3:0] */
  BFW_NIOL_ledm_d2a_row_d_led_r_i       = 4,  /* [7:4] */
  BFW_NIOL_ledm_d2a_row_reserved1       = 24  /* [31:8] */
};

typedef struct NIOL_LEDM_D2A_ROW_BIT_Ttag {
  unsigned int d_led_r_s0_oe_n : BFW_NIOL_ledm_d2a_row_d_led_r_s0_oe_n; /* D2A, 0: strong row driver [index] slice 3 is enabled. Direction comes from *_i */
  unsigned int d_led_r_i       : BFW_NIOL_ledm_d2a_row_d_led_r_i;       /* D2A, data to pad                                                               */
  unsigned int reserved1       : BFW_NIOL_ledm_d2a_row_reserved1;       /* reserved                                                                       */
} NIOL_LEDM_D2A_ROW_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_LEDM_D2A_ROW_BIT_T bf;
} NIOL_LEDM_D2A_ROW_T;


/* ===================================================================== */

/* AREA arm_timer */
/* Area of sw_timer */

/* ===================================================================== */

#define Addr_NIOL_sw_timer 0x00000300U

/* --------------------------------------------------------------------- */
/* Register sw_timer_en_mode */
/* => Timers enable and mode register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_en_mode      0x00000000U
#define Adr_NIOL_sw_timer_sw_timer_en_mode 0x00000300U
#define Adr_NIOL_sw_timer_en_mode          0x00000300U
#define DFLT_VAL_NIOL_sw_timer_en_mode     0x00000000U

#define MSK_NIOL_sw_timer_en_mode_t0_en           0x00000001U
#define SRT_NIOL_sw_timer_en_mode_t0_en           0
#define DFLT_VAL_NIOL_sw_timer_en_mode_t0_en      0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_t0_en   0x00000000U
#define MSK_NIOL_sw_timer_en_mode_t0_mode         0x00000002U
#define SRT_NIOL_sw_timer_en_mode_t0_mode         1
#define DFLT_VAL_NIOL_sw_timer_en_mode_t0_mode    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_t0_mode 0x00000000U
#define MSK_NIOL_sw_timer_en_mode_t1_en           0x00000004U
#define SRT_NIOL_sw_timer_en_mode_t1_en           2
#define DFLT_VAL_NIOL_sw_timer_en_mode_t1_en      0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_t1_en   0x00000000U
#define MSK_NIOL_sw_timer_en_mode_t1_mode         0x00000008U
#define SRT_NIOL_sw_timer_en_mode_t1_mode         3
#define DFLT_VAL_NIOL_sw_timer_en_mode_t1_mode    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_t1_mode 0x00000000U
#define MSK_NIOL_sw_timer_en_mode_t2_en           0x00000010U
#define SRT_NIOL_sw_timer_en_mode_t2_en           4
#define DFLT_VAL_NIOL_sw_timer_en_mode_t2_en      0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_t2_en   0x00000000U
#define MSK_NIOL_sw_timer_en_mode_t2_mode         0x00000020U
#define SRT_NIOL_sw_timer_en_mode_t2_mode         5
#define DFLT_VAL_NIOL_sw_timer_en_mode_t2_mode    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_t2_mode 0x00000000U

/* all used bits of 'NIOL_sw_timer_en_mode': */
#define MSK_USED_BITS_NIOL_sw_timer_en_mode 0x0000003fU

enum {
  BFW_NIOL_sw_timer_en_mode_t0_en     = 1,  /* [0] */
  BFW_NIOL_sw_timer_en_mode_t0_mode   = 1,  /* [1] */
  BFW_NIOL_sw_timer_en_mode_t1_en     = 1,  /* [2] */
  BFW_NIOL_sw_timer_en_mode_t1_mode   = 1,  /* [3] */
  BFW_NIOL_sw_timer_en_mode_t2_en     = 1,  /* [4] */
  BFW_NIOL_sw_timer_en_mode_t2_mode   = 1,  /* [5] */
  BFW_NIOL_sw_timer_en_mode_reserved1 = 26  /* [31:6] */
};

typedef struct NIOL_SW_TIMER_EN_MODE_BIT_Ttag {
  unsigned int t0_en     : BFW_NIOL_sw_timer_en_mode_t0_en;     /* 0: timer paused (do not change)                                                      */
                                                                /* 1: timer running                                                                     */
  unsigned int t0_mode   : BFW_NIOL_sw_timer_en_mode_t0_mode;   /* 0: single shot - swt0_en set to '0' when timer expires                               */
                                                                /* 1: periodic - timer automatically reload its associated reload value when it expires */
  unsigned int t1_en     : BFW_NIOL_sw_timer_en_mode_t1_en;     /* 0: timer paused (do not change)                                                      */
                                                                /* 1: timer running                                                                     */
  unsigned int t1_mode   : BFW_NIOL_sw_timer_en_mode_t1_mode;   /* 0: single shot - swt0_en set to '0' when timer expires                               */
                                                                /* 1: periodic - timer automatically reload its associated reload value when it expires */
  unsigned int t2_en     : BFW_NIOL_sw_timer_en_mode_t2_en;     /* 0: timer paused (do not change)                                                      */
                                                                /* 1: timer running                                                                     */
  unsigned int t2_mode   : BFW_NIOL_sw_timer_en_mode_t2_mode;   /* 0: single shot - swt0_en set to '0' when timer expires                               */
                                                                /* 1: periodic - timer automatically reload its associated reload value when it expires */
  unsigned int reserved1 : BFW_NIOL_sw_timer_en_mode_reserved1; /* reserved                                                                             */
} NIOL_SW_TIMER_EN_MODE_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SW_TIMER_EN_MODE_BIT_T bf;
} NIOL_SW_TIMER_EN_MODE_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_en_mode_set */
/* => Timers enable and mode set register */
/*    Read: timer_en_mode */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_en_mode_set      0x00000004U
#define Adr_NIOL_sw_timer_sw_timer_en_mode_set 0x00000304U
#define Adr_NIOL_sw_timer_en_mode_set          0x00000304U
#define DFLT_VAL_NIOL_sw_timer_en_mode_set     0x00000000U

#define MSK_NIOL_sw_timer_en_mode_set_val         0x000000ffU
#define SRT_NIOL_sw_timer_en_mode_set_val         0
#define DFLT_VAL_NIOL_sw_timer_en_mode_set_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_set_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_en_mode_set': */
#define MSK_USED_BITS_NIOL_sw_timer_en_mode_set 0x000000ffU

enum {
  BFW_NIOL_sw_timer_en_mode_set_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_en_mode_set_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_EN_MODE_SET_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_en_mode_set_val;       /* 1: set the corresponding bit in MODE */
  unsigned int reserved1 : BFW_NIOL_sw_timer_en_mode_set_reserved1; /* reserved                             */
} NIOL_SW_TIMER_EN_MODE_SET_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SW_TIMER_EN_MODE_SET_BIT_T bf;
} NIOL_SW_TIMER_EN_MODE_SET_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_en_mode_clr */
/* => Timers enable and mode clear register */
/*    Read: timer_en_mode */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_en_mode_clr      0x00000008U
#define Adr_NIOL_sw_timer_sw_timer_en_mode_clr 0x00000308U
#define Adr_NIOL_sw_timer_en_mode_clr          0x00000308U
#define DFLT_VAL_NIOL_sw_timer_en_mode_clr     0x00000000U

#define MSK_NIOL_sw_timer_en_mode_clr_val         0x000000ffU
#define SRT_NIOL_sw_timer_en_mode_clr_val         0
#define DFLT_VAL_NIOL_sw_timer_en_mode_clr_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_en_mode_clr_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_en_mode_clr': */
#define MSK_USED_BITS_NIOL_sw_timer_en_mode_clr 0x000000ffU

enum {
  BFW_NIOL_sw_timer_en_mode_clr_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_en_mode_clr_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_EN_MODE_CLR_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_en_mode_clr_val;       /* 1: clear the corresponding bit in MODE */
  unsigned int reserved1 : BFW_NIOL_sw_timer_en_mode_clr_reserved1; /* reserved                               */
} NIOL_SW_TIMER_EN_MODE_CLR_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SW_TIMER_EN_MODE_CLR_BIT_T bf;
} NIOL_SW_TIMER_EN_MODE_CLR_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer0_upper */
/* => Timer 0 upper register value */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer0_upper      0x00000010U
#define Adr_NIOL_sw_timer_sw_timer_timer0_upper 0x00000310U
#define Adr_NIOL_sw_timer_timer0_upper          0x00000310U
#define DFLT_VAL_NIOL_sw_timer_timer0_upper     0x00000000U

#define MSK_NIOL_sw_timer_timer0_upper_val         0x000000ffU
#define SRT_NIOL_sw_timer_timer0_upper_val         0
#define DFLT_VAL_NIOL_sw_timer_timer0_upper_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer0_upper_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer0_upper': */
#define MSK_USED_BITS_NIOL_sw_timer_timer0_upper 0x000000ffU

enum {
  BFW_NIOL_sw_timer_timer0_upper_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_timer0_upper_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_TIMER0_UPPER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer0_upper_val;       /* current value timer0[23:16] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer0_upper_reserved1; /* reserved                    */
} NIOL_SW_TIMER_TIMER0_UPPER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SW_TIMER_TIMER0_UPPER_BIT_T bf;
} NIOL_SW_TIMER_TIMER0_UPPER_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer0_lower */
/* => Timer 0 lower register value */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer0_lower      0x00000014U
#define Adr_NIOL_sw_timer_sw_timer_timer0_lower 0x00000314U
#define Adr_NIOL_sw_timer_timer0_lower          0x00000314U
#define DFLT_VAL_NIOL_sw_timer_timer0_lower     0x00000000U

#define MSK_NIOL_sw_timer_timer0_lower_val         0x0000ffffU
#define SRT_NIOL_sw_timer_timer0_lower_val         0
#define DFLT_VAL_NIOL_sw_timer_timer0_lower_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer0_lower_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer0_lower': */
#define MSK_USED_BITS_NIOL_sw_timer_timer0_lower 0x0000ffffU

enum {
  BFW_NIOL_sw_timer_timer0_lower_val       = 16, /* [15:0] */
  BFW_NIOL_sw_timer_timer0_lower_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SW_TIMER_TIMER0_LOWER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer0_lower_val;       /* current timer timer0[15:0] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer0_lower_reserved1; /* reserved                   */
} NIOL_SW_TIMER_TIMER0_LOWER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SW_TIMER_TIMER0_LOWER_BIT_T bf;
} NIOL_SW_TIMER_TIMER0_LOWER_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer0_upper_rld */
/* => Timer 0 upper reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer0_upper_rld      0x00000018U
#define Adr_NIOL_sw_timer_sw_timer_timer0_upper_rld 0x00000318U
#define Adr_NIOL_sw_timer_timer0_upper_rld          0x00000318U
#define DFLT_VAL_NIOL_sw_timer_timer0_upper_rld     0x00000000U

#define MSK_NIOL_sw_timer_timer0_upper_rld_val         0x000000ffU
#define SRT_NIOL_sw_timer_timer0_upper_rld_val         0
#define DFLT_VAL_NIOL_sw_timer_timer0_upper_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer0_upper_rld_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer0_upper_rld': */
#define MSK_USED_BITS_NIOL_sw_timer_timer0_upper_rld 0x000000ffU

enum {
  BFW_NIOL_sw_timer_timer0_upper_rld_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_timer0_upper_rld_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_TIMER0_UPPER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer0_upper_rld_val;       /* reload value timer0[23:16] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer0_upper_rld_reserved1; /* reserved                   */
} NIOL_SW_TIMER_TIMER0_UPPER_RLD_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SW_TIMER_TIMER0_UPPER_RLD_BIT_T bf;
} NIOL_SW_TIMER_TIMER0_UPPER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer0_lower_rld */
/* => Timer 0 lower reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer0_lower_rld      0x0000001CU
#define Adr_NIOL_sw_timer_sw_timer_timer0_lower_rld 0x0000031CU
#define Adr_NIOL_sw_timer_timer0_lower_rld          0x0000031CU
#define DFLT_VAL_NIOL_sw_timer_timer0_lower_rld     0x00000000U

#define MSK_NIOL_sw_timer_timer0_lower_rld_val         0x0000ffffU
#define SRT_NIOL_sw_timer_timer0_lower_rld_val         0
#define DFLT_VAL_NIOL_sw_timer_timer0_lower_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer0_lower_rld_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer0_lower_rld': */
#define MSK_USED_BITS_NIOL_sw_timer_timer0_lower_rld 0x0000ffffU

enum {
  BFW_NIOL_sw_timer_timer0_lower_rld_val       = 16, /* [15:0] */
  BFW_NIOL_sw_timer_timer0_lower_rld_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SW_TIMER_TIMER0_LOWER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer0_lower_rld_val;       /* reload value timer0[15:0] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer0_lower_rld_reserved1; /* reserved                  */
} NIOL_SW_TIMER_TIMER0_LOWER_RLD_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SW_TIMER_TIMER0_LOWER_RLD_BIT_T bf;
} NIOL_SW_TIMER_TIMER0_LOWER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer1_upper */
/* => Timer 1 upper register value */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer1_upper      0x00000020U
#define Adr_NIOL_sw_timer_sw_timer_timer1_upper 0x00000320U
#define Adr_NIOL_sw_timer_timer1_upper          0x00000320U
#define DFLT_VAL_NIOL_sw_timer_timer1_upper     0x00000000U

#define MSK_NIOL_sw_timer_timer1_upper_val         0x000000ffU
#define SRT_NIOL_sw_timer_timer1_upper_val         0
#define DFLT_VAL_NIOL_sw_timer_timer1_upper_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer1_upper_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer1_upper': */
#define MSK_USED_BITS_NIOL_sw_timer_timer1_upper 0x000000ffU

enum {
  BFW_NIOL_sw_timer_timer1_upper_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_timer1_upper_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_TIMER1_UPPER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer1_upper_val;       /* current value timer1[23:16] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer1_upper_reserved1; /* reserved                    */
} NIOL_SW_TIMER_TIMER1_UPPER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SW_TIMER_TIMER1_UPPER_BIT_T bf;
} NIOL_SW_TIMER_TIMER1_UPPER_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer1_lower */
/* => Timer 1 lower register value */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer1_lower      0x00000024U
#define Adr_NIOL_sw_timer_sw_timer_timer1_lower 0x00000324U
#define Adr_NIOL_sw_timer_timer1_lower          0x00000324U
#define DFLT_VAL_NIOL_sw_timer_timer1_lower     0x00000000U

#define MSK_NIOL_sw_timer_timer1_lower_val         0x0000ffffU
#define SRT_NIOL_sw_timer_timer1_lower_val         0
#define DFLT_VAL_NIOL_sw_timer_timer1_lower_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer1_lower_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer1_lower': */
#define MSK_USED_BITS_NIOL_sw_timer_timer1_lower 0x0000ffffU

enum {
  BFW_NIOL_sw_timer_timer1_lower_val       = 16, /* [15:0] */
  BFW_NIOL_sw_timer_timer1_lower_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SW_TIMER_TIMER1_LOWER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer1_lower_val;       /* current timer timer1[15:0] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer1_lower_reserved1; /* reserved                   */
} NIOL_SW_TIMER_TIMER1_LOWER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SW_TIMER_TIMER1_LOWER_BIT_T bf;
} NIOL_SW_TIMER_TIMER1_LOWER_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer1_upper_rld */
/* => Timer 1 upper reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer1_upper_rld      0x00000028U
#define Adr_NIOL_sw_timer_sw_timer_timer1_upper_rld 0x00000328U
#define Adr_NIOL_sw_timer_timer1_upper_rld          0x00000328U
#define DFLT_VAL_NIOL_sw_timer_timer1_upper_rld     0x00000000U

#define MSK_NIOL_sw_timer_timer1_upper_rld_val         0x000000ffU
#define SRT_NIOL_sw_timer_timer1_upper_rld_val         0
#define DFLT_VAL_NIOL_sw_timer_timer1_upper_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer1_upper_rld_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer1_upper_rld': */
#define MSK_USED_BITS_NIOL_sw_timer_timer1_upper_rld 0x000000ffU

enum {
  BFW_NIOL_sw_timer_timer1_upper_rld_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_timer1_upper_rld_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_TIMER1_UPPER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer1_upper_rld_val;       /* reload value timer1[23:16] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer1_upper_rld_reserved1; /* reserved                   */
} NIOL_SW_TIMER_TIMER1_UPPER_RLD_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SW_TIMER_TIMER1_UPPER_RLD_BIT_T bf;
} NIOL_SW_TIMER_TIMER1_UPPER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer1_lower_rld */
/* => Timer 1 lower reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer1_lower_rld      0x0000002CU
#define Adr_NIOL_sw_timer_sw_timer_timer1_lower_rld 0x0000032CU
#define Adr_NIOL_sw_timer_timer1_lower_rld          0x0000032CU
#define DFLT_VAL_NIOL_sw_timer_timer1_lower_rld     0x00000000U

#define MSK_NIOL_sw_timer_timer1_lower_rld_val         0x0000ffffU
#define SRT_NIOL_sw_timer_timer1_lower_rld_val         0
#define DFLT_VAL_NIOL_sw_timer_timer1_lower_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer1_lower_rld_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer1_lower_rld': */
#define MSK_USED_BITS_NIOL_sw_timer_timer1_lower_rld 0x0000ffffU

enum {
  BFW_NIOL_sw_timer_timer1_lower_rld_val       = 16, /* [15:0] */
  BFW_NIOL_sw_timer_timer1_lower_rld_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SW_TIMER_TIMER1_LOWER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer1_lower_rld_val;       /* reload value timer1[15:0] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer1_lower_rld_reserved1; /* reserved                  */
} NIOL_SW_TIMER_TIMER1_LOWER_RLD_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SW_TIMER_TIMER1_LOWER_RLD_BIT_T bf;
} NIOL_SW_TIMER_TIMER1_LOWER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer2_upper */
/* => Timer 2 upper register value */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer2_upper      0x00000030U
#define Adr_NIOL_sw_timer_sw_timer_timer2_upper 0x00000330U
#define Adr_NIOL_sw_timer_timer2_upper          0x00000330U
#define DFLT_VAL_NIOL_sw_timer_timer2_upper     0x00000000U

#define MSK_NIOL_sw_timer_timer2_upper_val         0x000000ffU
#define SRT_NIOL_sw_timer_timer2_upper_val         0
#define DFLT_VAL_NIOL_sw_timer_timer2_upper_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer2_upper_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer2_upper': */
#define MSK_USED_BITS_NIOL_sw_timer_timer2_upper 0x000000ffU

enum {
  BFW_NIOL_sw_timer_timer2_upper_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_timer2_upper_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_TIMER2_UPPER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer2_upper_val;       /* current value timer2[23:16] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer2_upper_reserved1; /* reserved                    */
} NIOL_SW_TIMER_TIMER2_UPPER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SW_TIMER_TIMER2_UPPER_BIT_T bf;
} NIOL_SW_TIMER_TIMER2_UPPER_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer2_lower */
/* => Timer 2 lower register value */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer2_lower      0x00000034U
#define Adr_NIOL_sw_timer_sw_timer_timer2_lower 0x00000334U
#define Adr_NIOL_sw_timer_timer2_lower          0x00000334U
#define DFLT_VAL_NIOL_sw_timer_timer2_lower     0x00000000U

#define MSK_NIOL_sw_timer_timer2_lower_val         0x0000ffffU
#define SRT_NIOL_sw_timer_timer2_lower_val         0
#define DFLT_VAL_NIOL_sw_timer_timer2_lower_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer2_lower_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer2_lower': */
#define MSK_USED_BITS_NIOL_sw_timer_timer2_lower 0x0000ffffU

enum {
  BFW_NIOL_sw_timer_timer2_lower_val       = 16, /* [15:0] */
  BFW_NIOL_sw_timer_timer2_lower_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SW_TIMER_TIMER2_LOWER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer2_lower_val;       /* current timer timer2[15:0] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer2_lower_reserved1; /* reserved                   */
} NIOL_SW_TIMER_TIMER2_LOWER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SW_TIMER_TIMER2_LOWER_BIT_T bf;
} NIOL_SW_TIMER_TIMER2_LOWER_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer2_upper_rld */
/* => Timer 2 upper reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer2_upper_rld      0x00000038U
#define Adr_NIOL_sw_timer_sw_timer_timer2_upper_rld 0x00000338U
#define Adr_NIOL_sw_timer_timer2_upper_rld          0x00000338U
#define DFLT_VAL_NIOL_sw_timer_timer2_upper_rld     0x00000000U

#define MSK_NIOL_sw_timer_timer2_upper_rld_val         0x000000ffU
#define SRT_NIOL_sw_timer_timer2_upper_rld_val         0
#define DFLT_VAL_NIOL_sw_timer_timer2_upper_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer2_upper_rld_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer2_upper_rld': */
#define MSK_USED_BITS_NIOL_sw_timer_timer2_upper_rld 0x000000ffU

enum {
  BFW_NIOL_sw_timer_timer2_upper_rld_val       = 8,  /* [7:0] */
  BFW_NIOL_sw_timer_timer2_upper_rld_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_SW_TIMER_TIMER2_UPPER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer2_upper_rld_val;       /* reload value timer2[23:16] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer2_upper_rld_reserved1; /* reserved                   */
} NIOL_SW_TIMER_TIMER2_UPPER_RLD_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SW_TIMER_TIMER2_UPPER_RLD_BIT_T bf;
} NIOL_SW_TIMER_TIMER2_UPPER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_timer2_lower_rld */
/* => Timer 2 lower reload register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_timer2_lower_rld      0x0000003CU
#define Adr_NIOL_sw_timer_sw_timer_timer2_lower_rld 0x0000033CU
#define Adr_NIOL_sw_timer_timer2_lower_rld          0x0000033CU
#define DFLT_VAL_NIOL_sw_timer_timer2_lower_rld     0x00000000U

#define MSK_NIOL_sw_timer_timer2_lower_rld_val         0x0000ffffU
#define SRT_NIOL_sw_timer_timer2_lower_rld_val         0
#define DFLT_VAL_NIOL_sw_timer_timer2_lower_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_timer2_lower_rld_val 0x00000000U

/* all used bits of 'NIOL_sw_timer_timer2_lower_rld': */
#define MSK_USED_BITS_NIOL_sw_timer_timer2_lower_rld 0x0000ffffU

enum {
  BFW_NIOL_sw_timer_timer2_lower_rld_val       = 16, /* [15:0] */
  BFW_NIOL_sw_timer_timer2_lower_rld_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SW_TIMER_TIMER2_LOWER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sw_timer_timer2_lower_rld_val;       /* reload value timer2[15:0] */
  unsigned int reserved1 : BFW_NIOL_sw_timer_timer2_lower_rld_reserved1; /* reserved                  */
} NIOL_SW_TIMER_TIMER2_LOWER_RLD_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_SW_TIMER_TIMER2_LOWER_RLD_BIT_T bf;
} NIOL_SW_TIMER_TIMER2_LOWER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_irq_raw */
/* => Writing a '1' to a bit position with an event type IRQ will clear the event flag. */
/*    Writing to bit positions with a 'status' type IRQ has no effect. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_irq_raw      0x00000060U
#define Adr_NIOL_sw_timer_sw_timer_irq_raw 0x00000360U
#define Adr_NIOL_sw_timer_irq_raw          0x00000360U
#define DFLT_VAL_NIOL_sw_timer_irq_raw     0x00000000U

#define MSK_NIOL_sw_timer_irq_raw_t0_evt         0x00000001U
#define SRT_NIOL_sw_timer_irq_raw_t0_evt         0
#define DFLT_VAL_NIOL_sw_timer_irq_raw_t0_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_raw_t0_evt 0x00000000U
#define MSK_NIOL_sw_timer_irq_raw_t1_evt         0x00000002U
#define SRT_NIOL_sw_timer_irq_raw_t1_evt         1
#define DFLT_VAL_NIOL_sw_timer_irq_raw_t1_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_raw_t1_evt 0x00000000U
#define MSK_NIOL_sw_timer_irq_raw_t2_evt         0x00000004U
#define SRT_NIOL_sw_timer_irq_raw_t2_evt         2
#define DFLT_VAL_NIOL_sw_timer_irq_raw_t2_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_raw_t2_evt 0x00000000U

/* all used bits of 'NIOL_sw_timer_irq_raw': */
#define MSK_USED_BITS_NIOL_sw_timer_irq_raw 0x00000007U

enum {
  BFW_NIOL_sw_timer_irq_raw_t0_evt    = 1,  /* [0] */
  BFW_NIOL_sw_timer_irq_raw_t1_evt    = 1,  /* [1] */
  BFW_NIOL_sw_timer_irq_raw_t2_evt    = 1,  /* [2] */
  BFW_NIOL_sw_timer_irq_raw_reserved1 = 29  /* [31:3] */
};

typedef struct NIOL_SW_TIMER_IRQ_RAW_BIT_Ttag {
  unsigned int t0_evt    : BFW_NIOL_sw_timer_irq_raw_t0_evt;    /* EVENT: timer 0 expired */
  unsigned int t1_evt    : BFW_NIOL_sw_timer_irq_raw_t1_evt;    /* EVENT: timer 1 expired */
  unsigned int t2_evt    : BFW_NIOL_sw_timer_irq_raw_t2_evt;    /* EVENT: timer 2 expired */
  unsigned int reserved1 : BFW_NIOL_sw_timer_irq_raw_reserved1; /* reserved               */
} NIOL_SW_TIMER_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SW_TIMER_IRQ_RAW_BIT_T bf;
} NIOL_SW_TIMER_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_irq_masked */
/* => Masked IRQ register */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_irq_masked      0x00000064U
#define Adr_NIOL_sw_timer_sw_timer_irq_masked 0x00000364U
#define Adr_NIOL_sw_timer_irq_masked          0x00000364U

#define MSK_NIOL_sw_timer_irq_masked_t0_evt 0x00000001U
#define SRT_NIOL_sw_timer_irq_masked_t0_evt 0
#define MSK_NIOL_sw_timer_irq_masked_t1_evt 0x00000002U
#define SRT_NIOL_sw_timer_irq_masked_t1_evt 1
#define MSK_NIOL_sw_timer_irq_masked_t2_evt 0x00000004U
#define SRT_NIOL_sw_timer_irq_masked_t2_evt 2

/* all used bits of 'NIOL_sw_timer_irq_masked': */
#define MSK_USED_BITS_NIOL_sw_timer_irq_masked 0x00000007U

enum {
  BFW_NIOL_sw_timer_irq_masked_t0_evt    = 1,  /* [0] */
  BFW_NIOL_sw_timer_irq_masked_t1_evt    = 1,  /* [1] */
  BFW_NIOL_sw_timer_irq_masked_t2_evt    = 1,  /* [2] */
  BFW_NIOL_sw_timer_irq_masked_reserved1 = 29  /* [31:3] */
};

typedef struct NIOL_SW_TIMER_IRQ_MASKED_BIT_Ttag {
  unsigned int t0_evt    : BFW_NIOL_sw_timer_irq_masked_t0_evt;    /*          */
  unsigned int t1_evt    : BFW_NIOL_sw_timer_irq_masked_t1_evt;    /*          */
  unsigned int t2_evt    : BFW_NIOL_sw_timer_irq_masked_t2_evt;    /*          */
  unsigned int reserved1 : BFW_NIOL_sw_timer_irq_masked_reserved1; /* reserved */
} NIOL_SW_TIMER_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SW_TIMER_IRQ_MASKED_BIT_T bf;
} NIOL_SW_TIMER_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_irq_msk_set */
/* => IRQ mask set register */
/*    irq_msk_set Write: 1: set the corresponding bit in the IRQ mask # default 0 */
/*    Read: returns IRQ mask */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_irq_msk_set      0x0000006CU
#define Adr_NIOL_sw_timer_sw_timer_irq_msk_set 0x0000036CU
#define Adr_NIOL_sw_timer_irq_msk_set          0x0000036CU
#define DFLT_VAL_NIOL_sw_timer_irq_msk_set     0x00000000U

#define MSK_NIOL_sw_timer_irq_msk_set_t0_evt         0x00000001U
#define SRT_NIOL_sw_timer_irq_msk_set_t0_evt         0
#define DFLT_VAL_NIOL_sw_timer_irq_msk_set_t0_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_msk_set_t0_evt 0x00000000U
#define MSK_NIOL_sw_timer_irq_msk_set_t1_evt         0x00000002U
#define SRT_NIOL_sw_timer_irq_msk_set_t1_evt         1
#define DFLT_VAL_NIOL_sw_timer_irq_msk_set_t1_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_msk_set_t1_evt 0x00000000U
#define MSK_NIOL_sw_timer_irq_msk_set_t2_evt         0x00000004U
#define SRT_NIOL_sw_timer_irq_msk_set_t2_evt         2
#define DFLT_VAL_NIOL_sw_timer_irq_msk_set_t2_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_msk_set_t2_evt 0x00000000U

/* all used bits of 'NIOL_sw_timer_irq_msk_set': */
#define MSK_USED_BITS_NIOL_sw_timer_irq_msk_set 0x00000007U

enum {
  BFW_NIOL_sw_timer_irq_msk_set_t0_evt    = 1,  /* [0] */
  BFW_NIOL_sw_timer_irq_msk_set_t1_evt    = 1,  /* [1] */
  BFW_NIOL_sw_timer_irq_msk_set_t2_evt    = 1,  /* [2] */
  BFW_NIOL_sw_timer_irq_msk_set_reserved1 = 29  /* [31:3] */
};

typedef struct NIOL_SW_TIMER_IRQ_MSK_SET_BIT_Ttag {
  unsigned int t0_evt    : BFW_NIOL_sw_timer_irq_msk_set_t0_evt;    /*          */
  unsigned int t1_evt    : BFW_NIOL_sw_timer_irq_msk_set_t1_evt;    /*          */
  unsigned int t2_evt    : BFW_NIOL_sw_timer_irq_msk_set_t2_evt;    /*          */
  unsigned int reserved1 : BFW_NIOL_sw_timer_irq_msk_set_reserved1; /* reserved */
} NIOL_SW_TIMER_IRQ_MSK_SET_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SW_TIMER_IRQ_MSK_SET_BIT_T bf;
} NIOL_SW_TIMER_IRQ_MSK_SET_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_irq_msk_reset */
/* => IRQ mask reset register */
/*    irq_msk_reset Write: 1: clear the corresponding bit in the IRQ mask # default 0 */
/*    Read: returns IRQ mask */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_irq_msk_reset      0x00000070U
#define Adr_NIOL_sw_timer_sw_timer_irq_msk_reset 0x00000370U
#define Adr_NIOL_sw_timer_irq_msk_reset          0x00000370U
#define DFLT_VAL_NIOL_sw_timer_irq_msk_reset     0x00000000U

#define MSK_NIOL_sw_timer_irq_msk_reset_t0_evt         0x00000001U
#define SRT_NIOL_sw_timer_irq_msk_reset_t0_evt         0
#define DFLT_VAL_NIOL_sw_timer_irq_msk_reset_t0_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_msk_reset_t0_evt 0x00000000U
#define MSK_NIOL_sw_timer_irq_msk_reset_t1_evt         0x00000002U
#define SRT_NIOL_sw_timer_irq_msk_reset_t1_evt         1
#define DFLT_VAL_NIOL_sw_timer_irq_msk_reset_t1_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_msk_reset_t1_evt 0x00000000U
#define MSK_NIOL_sw_timer_irq_msk_reset_t2_evt         0x00000004U
#define SRT_NIOL_sw_timer_irq_msk_reset_t2_evt         2
#define DFLT_VAL_NIOL_sw_timer_irq_msk_reset_t2_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sw_timer_irq_msk_reset_t2_evt 0x00000000U

/* all used bits of 'NIOL_sw_timer_irq_msk_reset': */
#define MSK_USED_BITS_NIOL_sw_timer_irq_msk_reset 0x00000007U

enum {
  BFW_NIOL_sw_timer_irq_msk_reset_t0_evt    = 1,  /* [0] */
  BFW_NIOL_sw_timer_irq_msk_reset_t1_evt    = 1,  /* [1] */
  BFW_NIOL_sw_timer_irq_msk_reset_t2_evt    = 1,  /* [2] */
  BFW_NIOL_sw_timer_irq_msk_reset_reserved1 = 29  /* [31:3] */
};

typedef struct NIOL_SW_TIMER_IRQ_MSK_RESET_BIT_Ttag {
  unsigned int t0_evt    : BFW_NIOL_sw_timer_irq_msk_reset_t0_evt;    /*          */
  unsigned int t1_evt    : BFW_NIOL_sw_timer_irq_msk_reset_t1_evt;    /*          */
  unsigned int t2_evt    : BFW_NIOL_sw_timer_irq_msk_reset_t2_evt;    /*          */
  unsigned int reserved1 : BFW_NIOL_sw_timer_irq_msk_reset_reserved1; /* reserved */
} NIOL_SW_TIMER_IRQ_MSK_RESET_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_SW_TIMER_IRQ_MSK_RESET_BIT_T bf;
} NIOL_SW_TIMER_IRQ_MSK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register sw_timer_irq_no */
/* => IRQ number register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sw_timer_irq_no      0x00000074U
#define Adr_NIOL_sw_timer_sw_timer_irq_no 0x00000374U
#define Adr_NIOL_sw_timer_irq_no          0x00000374U

#define MSK_NIOL_sw_timer_irq_no_irq_no 0x00000003U
#define SRT_NIOL_sw_timer_irq_no_irq_no 0

/* all used bits of 'NIOL_sw_timer_irq_no': */
#define MSK_USED_BITS_NIOL_sw_timer_irq_no 0x00000003U

enum {
  BFW_NIOL_sw_timer_irq_no_irq_no    = 2,  /* [1:0] */
  BFW_NIOL_sw_timer_irq_no_reserved1 = 30  /* [31:2] */
};

typedef struct NIOL_SW_TIMER_IRQ_NO_BIT_Ttag {
  unsigned int irq_no    : BFW_NIOL_sw_timer_irq_no_irq_no;    /* Number of the non-masked pending IRQ with the highest priority (=lowest bit position). When no non-masked IRQ is pending the number of the highest IRQ plus one is returned. */
  unsigned int reserved1 : BFW_NIOL_sw_timer_irq_no_reserved1; /* reserved                                                                                                                                                                     */
} NIOL_SW_TIMER_IRQ_NO_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SW_TIMER_IRQ_NO_BIT_T bf;
} NIOL_SW_TIMER_IRQ_NO_T;


/* ===================================================================== */

/* Area of asic_ctrl */

/* ===================================================================== */

#define Addr_NIOL_asic_ctrl 0x00000380U

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_io_config0 */
/* => IO Config0 Register: */
/*    Selects of pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Note: Some functions configured by this register are enabled by default/during reset. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_io_config0       0x00000000U
#define Adr_NIOL_asic_ctrl_asic_ctrl_io_config0 0x00000380U
#define Adr_NIOL_asic_ctrl_io_config0           0x00000380U
#define DFLT_VAL_NIOL_asic_ctrl_io_config0      0x00000280U
#define PW_VAL_NIOL_asic_ctrl_io_config0        0x00007000U
#define PW_BF_VAL_NIOL_asic_ctrl_io_config0     0x0000001cU

#define MSK_NIOL_asic_ctrl_io_config0_sel_uart_d         0x0000000fU
#define SRT_NIOL_asic_ctrl_io_config0_sel_uart_d         0
#define DFLT_VAL_NIOL_asic_ctrl_io_config0_sel_uart_d    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config0_sel_uart_d 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config0_sel_spi            0x00000070U
#define SRT_NIOL_asic_ctrl_io_config0_sel_spi            4
#define DFLT_VAL_NIOL_asic_ctrl_io_config0_sel_spi       0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config0_sel_spi    0x00000000U
#define MSK_NIOL_asic_ctrl_io_config0_sel_hispi          0x00000080U
#define SRT_NIOL_asic_ctrl_io_config0_sel_hispi          7
#define DFLT_VAL_NIOL_asic_ctrl_io_config0_sel_hispi     0x00000080U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config0_sel_hispi  0x00000001U
#define MSK_NIOL_asic_ctrl_io_config0_sel_jtag           0x00000300U
#define SRT_NIOL_asic_ctrl_io_config0_sel_jtag           8
#define DFLT_VAL_NIOL_asic_ctrl_io_config0_sel_jtag      0x00000200U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config0_sel_jtag   0x00000002U
#define MSK_NIOL_asic_ctrl_io_config0_pw                 0x0000fc00U
#define SRT_NIOL_asic_ctrl_io_config0_pw                 10
#define DFLT_VAL_NIOL_asic_ctrl_io_config0_pw            0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config0_pw         0x00000000U

/* all used bits of 'NIOL_asic_ctrl_io_config0': */
#define MSK_USED_BITS_NIOL_asic_ctrl_io_config0 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_io_config0_sel_uart_d = 4,  /* [3:0] */
  BFW_NIOL_asic_ctrl_io_config0_sel_spi    = 3,  /* [6:4] */
  BFW_NIOL_asic_ctrl_io_config0_sel_hispi  = 1,  /* [7] */
  BFW_NIOL_asic_ctrl_io_config0_sel_jtag   = 2,  /* [9:8] */
  BFW_NIOL_asic_ctrl_io_config0_pw         = 6,  /* [15:10] */
  BFW_NIOL_asic_ctrl_io_config0_reserved1  = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_IO_CONFIG0_BIT_Ttag {
  unsigned int sel_uart_d : BFW_NIOL_asic_ctrl_io_config0_sel_uart_d; /* Select the multiplexing for the UART_D module:                                      */
                                                                      /* {      |         |          |                                         |             */
                                                                      /*         RX/TX     TX-enable  selects                                                */
                                                                      /*   0000: IOL_RX/TX IOL_TX     sel_uart_d_int                            (default)    */
                                                                      /*   0001: AI_B/AI_A --         sel_uart_d_ai_ab                                       */
                                                                      /*   0010: AI_B/AI_A LED_C2     sel_uart_d_ai_ab + sel_uart_d_txen_led_c2              */
                                                                      /*   0011: reserved                                                                    */
                                                                      /*   0100: AI_D/AI_C --         sel_uart_d_ai_cd                                       */
                                                                      /*   0101: AI_D/AI_C LED_C2     sel_uart_d_ai_cd + sel_uart_d_txen_led_c2              */
                                                                      /*   0110: reserved                                                                    */
                                                                      /*   0111: LED_C1/2  --         sel_uart_d_led_c                                       */
                                                                      /*   1000: LED_C1/2  LED_C0     sel_uart_d_led_c + sel_uart_d_txen_led_c               */
                                                                      /*   1001: LED_C1/2  SCK        sel_uart_d_led_c + sel_uart_d_txen_hispi               */
                                                                      /*   1010: MOSI/MISO --         sel_uart_d_hispi                                       */
                                                                      /*   1011: MOSI/MISO LED_C0     sel_uart_d_hispi + sel_uart_d_txen_led_c               */
                                                                      /*   1100: MOSI/MISO SCK        sel_uart_d_hispi + sel_uart_d_txen_hispi               */
                                                                      /*   1101: reserved                                                                    */
                                                                      /*   1111: reserved }                                                                  */
  unsigned int sel_spi    : BFW_NIOL_asic_ctrl_io_config0_sel_spi;    /* Select the multiplexing for the SPI master:                                         */
                                                                      /* {     |                              |                                |             */
                                                                      /*        SPI master IO selection        active selects                                */
                                                                      /*   000: --                             none                             (default)    */
                                                                      /*   001: AI-pins w/o CS                 sel_spi_ai                                    */
                                                                      /*   010: AI-pins with CS                sel_spi_ai + sel_spi_ai_cs                    */
                                                                      /*   011: LED_R-pins w/o CS              sel_spi_led                                   */
                                                                      /*   100: LED_R-pins with CS             sel_spi_led + sel_spi_led_cs                  */
                                                                      /*   101: HISPI (MISO, MOSI, SCK) w/o CS sel_spi_hispi                                 */
                                                                      /*   110: HISPI-pins with CS on LED_C2   sel_spi_hispi + sel_spi_hispi_cs              */
                                                                      /*   111: reserved }                                                                   */
  unsigned int sel_hispi  : BFW_NIOL_asic_ctrl_io_config0_sel_hispi;  /* Selects HISPI slave multiplexing. Note: enabled during/after reset:                 */
                                                                      /* {   |                   |                                                           */
                                                                      /*   0:  HISPI not selected                                                            */
                                                                      /*   1:  HISPI selected     (default) }                                                */
  unsigned int sel_jtag   : BFW_NIOL_asic_ctrl_io_config0_sel_jtag;   /* Select the multiplexing position for the JTAG. Note: enabled during/after reset:    */
                                                                      /* {    |                        |              |                                      */
                                                                      /*       JTAG IO selection        selects                                              */
                                                                      /*   00: --                       none                                                 */
                                                                      /*   01: AI-pins                  sel_jtag_ai                                          */
                                                                      /*   10: LED_R-pins               sel_jtag_def   (default)                             */
                                                                      /*   11: LED_C2, MISO, MOSI, SCK  sel_jtag_hispi }                                     */
  unsigned int pw         : BFW_NIOL_asic_ctrl_io_config0_pw;         /* Password: pw=0x1c must be written here to validate a write access to this register. */
  unsigned int reserved1  : BFW_NIOL_asic_ctrl_io_config0_reserved1;  /* reserved                                                                            */
} NIOL_ASIC_CTRL_IO_CONFIG0_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_IO_CONFIG0_BIT_T bf;
} NIOL_ASIC_CTRL_IO_CONFIG0_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_io_config1 */
/* => IO Config1 Register: */
/*    Selects of pin multiplexing. */
/*    See Excel pinning sheet for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_io_config1       0x00000004U
#define Adr_NIOL_asic_ctrl_asic_ctrl_io_config1 0x00000384U
#define Adr_NIOL_asic_ctrl_io_config1           0x00000384U
#define DFLT_VAL_NIOL_asic_ctrl_io_config1      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_io_config1        0x00005000U
#define PW_BF_VAL_NIOL_asic_ctrl_io_config1     0x0000000aU

#define MSK_NIOL_asic_ctrl_io_config1_sel_sync_out_p         0x0000000fU
#define SRT_NIOL_asic_ctrl_io_config1_sel_sync_out_p         0
#define DFLT_VAL_NIOL_asic_ctrl_io_config1_sel_sync_out_p    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config1_sel_sync_out_p 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config1_sel_sync_in_p          0x000000f0U
#define SRT_NIOL_asic_ctrl_io_config1_sel_sync_in_p          4
#define DFLT_VAL_NIOL_asic_ctrl_io_config1_sel_sync_in_p     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config1_sel_sync_in_p  0x00000000U
#define MSK_NIOL_asic_ctrl_io_config1_sel_irq_ext_p          0x00000700U
#define SRT_NIOL_asic_ctrl_io_config1_sel_irq_ext_p          8
#define DFLT_VAL_NIOL_asic_ctrl_io_config1_sel_irq_ext_p     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config1_sel_irq_ext_p  0x00000000U
#define MSK_NIOL_asic_ctrl_io_config1_pw                     0x0000f800U
#define SRT_NIOL_asic_ctrl_io_config1_pw                     11
#define DFLT_VAL_NIOL_asic_ctrl_io_config1_pw                0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config1_pw             0x00000000U

/* all used bits of 'NIOL_asic_ctrl_io_config1': */
#define MSK_USED_BITS_NIOL_asic_ctrl_io_config1 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_io_config1_sel_sync_out_p = 4,  /* [3:0] */
  BFW_NIOL_asic_ctrl_io_config1_sel_sync_in_p  = 4,  /* [7:4] */
  BFW_NIOL_asic_ctrl_io_config1_sel_irq_ext_p  = 3,  /* [10:8] */
  BFW_NIOL_asic_ctrl_io_config1_pw             = 5,  /* [15:11] */
  BFW_NIOL_asic_ctrl_io_config1_reserved1      = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_IO_CONFIG1_BIT_Ttag {
  unsigned int sel_sync_out_p : BFW_NIOL_asic_ctrl_io_config1_sel_sync_out_p; /* Select the multiplexing position for the sync_out function:                         */
                                                                              /* {             |         |                |                                          */
                                                                              /*                position  active selects                                             */
                                                                              /*   0000:        --        none             (default)                                 */
                                                                              /*   0001:        AI_A      sel_sync_out_p0                                            */
                                                                              /*   0010:        AI_B      sel_sync_out_p1                                            */
                                                                              /*   0011:        AI_C      sel_sync_out_p2                                            */
                                                                              /*   0100:        AI_D      sel_sync_out_p3                                            */
                                                                              /*   1001 - 0101: reserved                                                             */
                                                                              /*   1010:        LED_C1    sel_sync_out_p9                                            */
                                                                              /*   1011:        LED_C1    sel_sync_out_p10                                           */
                                                                              /*   1100:        LED_C1    sel_sync_out_p11                                           */
                                                                              /*   1101:        LED_C1    sel_sync_out_p12                                           */
                                                                              /*   1110:        LED_C1    sel_sync_out_p13                                           */
                                                                              /*   1111:        reserved }                                                           */
                                                                              /* Valid positions: 0..3 and 9..13 (activates select sel_sync_out_p<position>).        */
                                                                              /* E.g. program to 3 to select sync_out on p2 (PIO2/AI_C)                              */
                                                                              /* For all other values sync_out is not mapped to an IO (no select is active).         */
  unsigned int sel_sync_in_p  : BFW_NIOL_asic_ctrl_io_config1_sel_sync_in_p;  /* Select the multiplexing position for the sync_in function:                          */
                                                                              /* {             |         |               |                                           */
                                                                              /*                position  active selects                                             */
                                                                              /*   0000:        --        none            (default)                                  */
                                                                              /*   0001:        AI_A      sel_sync_in_p0                                             */
                                                                              /*   0010:        AI_B      sel_sync_in_p1                                             */
                                                                              /*   0011:        AI_C      sel_sync_in_p2                                             */
                                                                              /*   0100:        AI_D      sel_sync_in_p3                                             */
                                                                              /*   1001 - 0101: reserved                                                             */
                                                                              /*   1010:        LED_C1    sel_sync_in_p9                                             */
                                                                              /*   1011:        LED_C1    sel_sync_in_p10                                            */
                                                                              /*   1100:        LED_C1    sel_sync_in_p11                                            */
                                                                              /*   1101:        LED_C1    sel_sync_in_p12                                            */
                                                                              /*   1110:        LED_C1    sel_sync_in_p13                                            */
                                                                              /*   1111:        reserved }                                                           */
                                                                              /* Valid positions: 0..3 and 9..13 (activates select sel_sync_out_p<position>).        */
                                                                              /* E.g. program to 3 to select sync_in on p2 (PIO2/AI_C)                               */
                                                                              /* For all other values sync_in is not mapped to an IO (no select is active).          */
  unsigned int sel_irq_ext_p  : BFW_NIOL_asic_ctrl_io_config1_sel_irq_ext_p;  /* Select the multiplexing position for the irq_ext function:                          */
                                                                              /* {     |         |               |                                                   */
                                                                              /*        position  active selects                                                     */
                                                                              /*   000: --        none            (default)                                          */
                                                                              /*   001: AI_A      sel_irq_ext_p0                                                     */
                                                                              /*   010: AI_B      sel_irq_ext_p1                                                     */
                                                                              /*   011: AI_C      sel_irq_ext_p2                                                     */
                                                                              /*   100: AI_D      sel_irq_ext_p3                                                     */
                                                                              /*   101: reserved                                                                     */
                                                                              /*   110: LED_C1    sel_irq_ext_p9                                                     */
                                                                              /*   111: LED_C2    sel_irq_ext_p10 }                                                  */
  unsigned int pw             : BFW_NIOL_asic_ctrl_io_config1_pw;             /* Password: pw=0x0a must be written here to validate a write access to this register. */
  unsigned int reserved1      : BFW_NIOL_asic_ctrl_io_config1_reserved1;      /* reserved                                                                            */
} NIOL_ASIC_CTRL_IO_CONFIG1_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_IO_CONFIG1_BIT_T bf;
} NIOL_ASIC_CTRL_IO_CONFIG1_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_io_config2 */
/* => IO Config2 Register: */
/*    Selects of pin multiplexing. */
/*    See Excel pinning sheet for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_io_config2       0x00000008U
#define Adr_NIOL_asic_ctrl_asic_ctrl_io_config2 0x00000388U
#define Adr_NIOL_asic_ctrl_io_config2           0x00000388U
#define DFLT_VAL_NIOL_asic_ctrl_io_config2      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_io_config2        0x0000cc00U
#define PW_BF_VAL_NIOL_asic_ctrl_io_config2     0x00000033U

#define MSK_NIOL_asic_ctrl_io_config2_sel_led_c         0x00000007U
#define SRT_NIOL_asic_ctrl_io_config2_sel_led_c         0
#define DFLT_VAL_NIOL_asic_ctrl_io_config2_sel_led_c    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config2_sel_led_c 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config2_sel_led_r         0x000000f0U
#define SRT_NIOL_asic_ctrl_io_config2_sel_led_r         4
#define DFLT_VAL_NIOL_asic_ctrl_io_config2_sel_led_r    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config2_sel_led_r 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config2_pw                0x0000fc00U
#define SRT_NIOL_asic_ctrl_io_config2_pw                10
#define DFLT_VAL_NIOL_asic_ctrl_io_config2_pw           0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config2_pw        0x00000000U

/* all used bits of 'NIOL_asic_ctrl_io_config2': */
#define MSK_USED_BITS_NIOL_asic_ctrl_io_config2 0x0000fcf7U

enum {
  BFW_NIOL_asic_ctrl_io_config2_sel_led_c = 3,  /* [2:0] */
  BFW_NIOL_asic_ctrl_io_config2_reserved1 = 1,  /* [3] */
  BFW_NIOL_asic_ctrl_io_config2_sel_led_r = 4,  /* [7:4] */
  BFW_NIOL_asic_ctrl_io_config2_reserved2 = 2,  /* [9:8] */
  BFW_NIOL_asic_ctrl_io_config2_pw        = 6,  /* [15:10] */
  BFW_NIOL_asic_ctrl_io_config2_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_IO_CONFIG2_BIT_Ttag {
  unsigned int sel_led_c : BFW_NIOL_asic_ctrl_io_config2_sel_led_c; /* Select the multiplexing for the LED column function:                                */
                                                                    /* sel_led_c[0] selects IO LED_C0 for for led_c0 of the LED matrix when 1              */
                                                                    /* sel_led_c[1] selects IO LED_C1 for for led_c1 of the LED matrix when 1              */
                                                                    /* sel_led_c[2] selects IO LED_C2 for for led_c2 of the LED matrix when 1              */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_io_config2_reserved1; /* reserved                                                                            */
  unsigned int sel_led_r : BFW_NIOL_asic_ctrl_io_config2_sel_led_r; /* Select the multiplexing for the LED row function:                                   */
                                                                    /* sel_led_r[0] selects IO LED_R0 for for led_r0 of the LED matrix when 1              */
                                                                    /* sel_led_r[1] selects IO LED_R1 for for led_r1 of the LED matrix when 1              */
                                                                    /* sel_led_r[2] selects IO LED_R2 for for led_r2 of the LED matrix when 1              */
                                                                    /* sel_led_r[3] selects IO LED_R3 for for led_r3 of the LED matrix when 1              */
  unsigned int reserved2 : BFW_NIOL_asic_ctrl_io_config2_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_asic_ctrl_io_config2_pw;        /* Password: pw=0x33 must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_asic_ctrl_io_config2_reserved3; /* reserved                                                                            */
} NIOL_ASIC_CTRL_IO_CONFIG2_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_IO_CONFIG2_BIT_T bf;
} NIOL_ASIC_CTRL_IO_CONFIG2_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_io_config3 */
/* => IO Config3 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_io_config3       0x0000000CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_io_config3 0x0000038CU
#define Adr_NIOL_asic_ctrl_io_config3           0x0000038CU
#define DFLT_VAL_NIOL_asic_ctrl_io_config3      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_io_config3        0x00009800U
#define PW_BF_VAL_NIOL_asic_ctrl_io_config3     0x00000026U

#define MSK_NIOL_asic_ctrl_io_config3_sel_adc_gpz          0x00000003U
#define SRT_NIOL_asic_ctrl_io_config3_sel_adc_gpz          0
#define DFLT_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpz     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpz  0x00000000U
#define MSK_NIOL_asic_ctrl_io_config3_sel_adc_gpo0         0x00000004U
#define SRT_NIOL_asic_ctrl_io_config3_sel_adc_gpo0         2
#define DFLT_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo0    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo0 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config3_sel_adc_gpo1         0x00000030U
#define SRT_NIOL_asic_ctrl_io_config3_sel_adc_gpo1         4
#define DFLT_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo1    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo1 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config3_sel_adc_gpo2         0x000000c0U
#define SRT_NIOL_asic_ctrl_io_config3_sel_adc_gpo2         6
#define DFLT_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo2    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo2 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config3_sel_adc_gpo3         0x00000300U
#define SRT_NIOL_asic_ctrl_io_config3_sel_adc_gpo3         8
#define DFLT_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo3    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config3_sel_adc_gpo3 0x00000000U
#define MSK_NIOL_asic_ctrl_io_config3_pw                   0x0000fc00U
#define SRT_NIOL_asic_ctrl_io_config3_pw                   10
#define DFLT_VAL_NIOL_asic_ctrl_io_config3_pw              0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_io_config3_pw           0x00000000U

/* all used bits of 'NIOL_asic_ctrl_io_config3': */
#define MSK_USED_BITS_NIOL_asic_ctrl_io_config3 0x0000fff7U

enum {
  BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpz  = 2,  /* [1:0] */
  BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo0 = 1,  /* [2] */
  BFW_NIOL_asic_ctrl_io_config3_reserved1    = 1,  /* [3] */
  BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo1 = 2,  /* [5:4] */
  BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo2 = 2,  /* [7:6] */
  BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo3 = 2,  /* [9:8] */
  BFW_NIOL_asic_ctrl_io_config3_pw           = 6,  /* [15:10] */
  BFW_NIOL_asic_ctrl_io_config3_reserved2    = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_IO_CONFIG3_BIT_Ttag {
  unsigned int sel_adc_gpz  : BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpz;  /* Select the multiplexing for the ADC_GPZ functions:                                  */
                                                                          /* {   |                         |                             |                       */
                                                                          /*      active ADC_GPZ functions  active selects                                       */
                                                                          /*  00: --                        none                          (default)              */
                                                                          /*  01: AI_A/GPZ0 + AI_B/GPZ1     sel_adc01_gpz                                        */
                                                                          /*  10: AI_C/GPZ1 + AI_D/GPZ2     sel_adc23_gpz                                        */
                                                                          /*  11: all: AI_A..D/GPZ0..3      sel_adc01_gpz + sel_adc23_gpz }                      */
  unsigned int sel_adc_gpo0 : BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo0; /* Select the multiplexing for the ADC_GPO0 functions:                                 */
                                                                          /*   0: ADC_GPO0 not available (default)                                               */
                                                                          /*   1: select ADC_GPO0 for LED_C2                                                     */
  unsigned int reserved1    : BFW_NIOL_asic_ctrl_io_config3_reserved1;    /* reserved                                                                            */
  unsigned int sel_adc_gpo1 : BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo1; /* Select the multiplexing for the ADC_GPO1 functions:                                 */
                                                                          /* {   |                  |                  |                                         */
                                                                          /*      selected IO        active selects                                              */
                                                                          /*  00: --                 none               (default)                                */
                                                                          /*  01: LED_C1             sel_adc_gpo1_led                                            */
                                                                          /*  10: SCK                sel_adc_gpo1_hispi                                          */
                                                                          /*  11: reserved }                                                                     */
  unsigned int sel_adc_gpo2 : BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo2; /* Select the multiplexing for the ADC_GPO2 functions:                                 */
                                                                          /* {   |                  |                  |                                         */
                                                                          /*      selected IO        active selects                                              */
                                                                          /*  00: --                 none               (default)                                */
                                                                          /*  01: LED_C0             sel_adc_gpo2_led                                            */
                                                                          /*  10: MISO               sel_adc_gpo2_hispi                                          */
                                                                          /*  11: reserved }                                                                     */
  unsigned int sel_adc_gpo3 : BFW_NIOL_asic_ctrl_io_config3_sel_adc_gpo3; /* Select the multiplexing for the ADC_GPO3 functions:                                 */
                                                                          /* {   |                  |                  |                                         */
                                                                          /*      selected IO        active selects                                              */
                                                                          /*  00: --                 none               (default)                                */
                                                                          /*  01: LED_R3             sel_adc_gpo3_led                                            */
                                                                          /*  10: MOSI               sel_adc_gpo3_hispi                                          */
                                                                          /*  11: reserved }                                                                     */
  unsigned int pw           : BFW_NIOL_asic_ctrl_io_config3_pw;           /* Password: pw=0x26 must be written here to validate a write access to this register. */
  unsigned int reserved2    : BFW_NIOL_asic_ctrl_io_config3_reserved2;    /* reserved                                                                            */
} NIOL_ASIC_CTRL_IO_CONFIG3_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_IO_CONFIG3_BIT_T bf;
} NIOL_ASIC_CTRL_IO_CONFIG3_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_boot_addr */
/* => Boot address of system CPU (MTVEC) configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_boot_addr       0x00000014U
#define Adr_NIOL_asic_ctrl_asic_ctrl_boot_addr 0x00000394U
#define Adr_NIOL_asic_ctrl_boot_addr           0x00000394U
#define DFLT_VAL_NIOL_asic_ctrl_boot_addr      0x00002000U

#define MSK_NIOL_asic_ctrl_boot_addr_addr         0x0000ff00U
#define SRT_NIOL_asic_ctrl_boot_addr_addr         8
#define DFLT_VAL_NIOL_asic_ctrl_boot_addr_addr    0x00002000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_boot_addr_addr 0x00000020U

/* all used bits of 'NIOL_asic_ctrl_boot_addr': */
#define MSK_USED_BITS_NIOL_asic_ctrl_boot_addr 0x0000ff00U

enum {
  BFW_NIOL_asic_ctrl_boot_addr_reserved1 = 8,  /* [7:0] */
  BFW_NIOL_asic_ctrl_boot_addr_addr      = 8,  /* [15:8] */
  BFW_NIOL_asic_ctrl_boot_addr_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_BOOT_ADDR_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_boot_addr_reserved1; /* reserved                                                                     */
  unsigned int addr      : BFW_NIOL_asic_ctrl_boot_addr_addr;      /* Upper bits of the base address of the reset, IRQ and exception vector table. */
                                                                   /* After reset points to start of ROM (i.e. the CPU always boots from ROM).     */
                                                                   /* Should be set to start of PMEM by boot loader after the user program has     */
                                                                   /* been copied to the core.                                                     */
  unsigned int reserved2 : BFW_NIOL_asic_ctrl_boot_addr_reserved2; /* reserved                                                                     */
} NIOL_ASIC_CTRL_BOOT_ADDR_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_ASIC_CTRL_BOOT_ADDR_BIT_T bf;
} NIOL_ASIC_CTRL_BOOT_ADDR_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_system_status */
/* => System Status Register. */
/*    This register provides information of special system events and system states. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_system_status       0x00000018U
#define Adr_NIOL_asic_ctrl_asic_ctrl_system_status 0x00000398U
#define Adr_NIOL_asic_ctrl_system_status           0x00000398U

#define MSK_NIOL_asic_ctrl_system_status_d_vdd_iol_uv     0x00000001U
#define SRT_NIOL_asic_ctrl_system_status_d_vdd_iol_uv     0
#define MSK_NIOL_asic_ctrl_system_status_d_vdd_iol_uv_fil 0x00000002U
#define SRT_NIOL_asic_ctrl_system_status_d_vdd_iol_uv_fil 1
#define MSK_NIOL_asic_ctrl_system_status_testmode         0x00000004U
#define SRT_NIOL_asic_ctrl_system_status_testmode         2

/* all used bits of 'NIOL_asic_ctrl_system_status': */
#define MSK_USED_BITS_NIOL_asic_ctrl_system_status 0x00000007U

enum {
  BFW_NIOL_asic_ctrl_system_status_d_vdd_iol_uv     = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_system_status_d_vdd_iol_uv_fil = 1,  /* [1] */
  BFW_NIOL_asic_ctrl_system_status_testmode         = 1,  /* [2] */
  BFW_NIOL_asic_ctrl_system_status_reserved1        = 29  /* [31:3] */
};

typedef struct NIOL_ASIC_CTRL_SYSTEM_STATUS_BIT_Ttag {
  unsigned int d_vdd_iol_uv     : BFW_NIOL_asic_ctrl_system_status_d_vdd_iol_uv;     /* A2D Signal. Unfiltered vdd_iol under voltage comparator / receiver. */
  unsigned int d_vdd_iol_uv_fil : BFW_NIOL_asic_ctrl_system_status_d_vdd_iol_uv_fil; /* A2D Signal. Filtered vdd_iol under voltage comparator / receiver.   */
  unsigned int testmode         : BFW_NIOL_asic_ctrl_system_status_testmode;         /* Sampled testmode input for production test purpose.                 */
  unsigned int reserved1        : BFW_NIOL_asic_ctrl_system_status_reserved1;        /* reserved                                                            */
} NIOL_ASIC_CTRL_SYSTEM_STATUS_BIT_T;

typedef union {
  uint32_t                           val;
  NIOL_ASIC_CTRL_SYSTEM_STATUS_BIT_T bf;
} NIOL_ASIC_CTRL_SYSTEM_STATUS_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_testmode_ctrl */
/* => Testmode Control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_testmode_ctrl       0x0000001CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_testmode_ctrl 0x0000039CU
#define Adr_NIOL_asic_ctrl_testmode_ctrl           0x0000039CU
#define DFLT_VAL_NIOL_asic_ctrl_testmode_ctrl      0x00000000U

#define MSK_NIOL_asic_ctrl_testmode_ctrl_scan_testmode         0x00000001U
#define SRT_NIOL_asic_ctrl_testmode_ctrl_scan_testmode         0
#define DFLT_VAL_NIOL_asic_ctrl_testmode_ctrl_scan_testmode    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_testmode_ctrl_scan_testmode 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_testmode_ctrl': */
#define MSK_USED_BITS_NIOL_asic_ctrl_testmode_ctrl 0x00000001U

enum {
  BFW_NIOL_asic_ctrl_testmode_ctrl_scan_testmode = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_testmode_ctrl_reserved1     = 31  /* [31:1] */
};

typedef struct NIOL_ASIC_CTRL_TESTMODE_CTRL_BIT_Ttag {
  unsigned int scan_testmode : BFW_NIOL_asic_ctrl_testmode_ctrl_scan_testmode; /* Enable scan testmode.                                                    */
                                                                               /* Note: This will change I/O multiplexing (s. pinning sheet).              */
                                                                               /* Note: Entering scan testmode is only possible if the testmode is active. */
                                                                               /* Note: Exiting scan testmode is only possible by exiting the testmode or  */
                                                                               /*       by driving '1' at scan_testmode_clr (= AI_D).                      */
  unsigned int reserved1     : BFW_NIOL_asic_ctrl_testmode_ctrl_reserved1;     /* reserved                                                                 */
} NIOL_ASIC_CTRL_TESTMODE_CTRL_BIT_T;

typedef union {
  uint32_t                           val;
  NIOL_ASIC_CTRL_TESTMODE_CTRL_BIT_T bf;
} NIOL_ASIC_CTRL_TESTMODE_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_bist_ctrl0 */
/* => RAM BIST control register 0: */
/*    2 bits bistmode per RAM to start BIST or RAM initialization: */
/*    00: disabled */
/*    01: initialize RAM */
/*    10: run BIST */
/*    Reset Value to 00 if status register shows that process is finished. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_bist_ctrl0       0x00000020U
#define Adr_NIOL_asic_ctrl_asic_ctrl_bist_ctrl0 0x000003A0U
#define Adr_NIOL_asic_ctrl_bist_ctrl0           0x000003A0U
#define DFLT_VAL_NIOL_asic_ctrl_bist_ctrl0      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_bist_ctrl0        0x0000d000U
#define PW_BF_VAL_NIOL_asic_ctrl_bist_ctrl0     0x0000000dU

#define MSK_NIOL_asic_ctrl_bist_ctrl0_dram_bist_mode         0x00000003U
#define SRT_NIOL_asic_ctrl_bist_ctrl0_dram_bist_mode         0
#define DFLT_VAL_NIOL_asic_ctrl_bist_ctrl0_dram_bist_mode    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_bist_ctrl0_dram_bist_mode 0x00000000U
#define MSK_NIOL_asic_ctrl_bist_ctrl0_pram_bist_mode         0x0000000cU
#define SRT_NIOL_asic_ctrl_bist_ctrl0_pram_bist_mode         2
#define DFLT_VAL_NIOL_asic_ctrl_bist_ctrl0_pram_bist_mode    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_bist_ctrl0_pram_bist_mode 0x00000000U
#define MSK_NIOL_asic_ctrl_bist_ctrl0_pw                     0x0000f000U
#define SRT_NIOL_asic_ctrl_bist_ctrl0_pw                     12
#define DFLT_VAL_NIOL_asic_ctrl_bist_ctrl0_pw                0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_bist_ctrl0_pw             0x00000000U

/* all used bits of 'NIOL_asic_ctrl_bist_ctrl0': */
#define MSK_USED_BITS_NIOL_asic_ctrl_bist_ctrl0 0x0000f00fU

enum {
  BFW_NIOL_asic_ctrl_bist_ctrl0_dram_bist_mode = 2,  /* [1:0] */
  BFW_NIOL_asic_ctrl_bist_ctrl0_pram_bist_mode = 2,  /* [3:2] */
  BFW_NIOL_asic_ctrl_bist_ctrl0_reserved1      = 8,  /* [11:4] */
  BFW_NIOL_asic_ctrl_bist_ctrl0_pw             = 4,  /* [15:12] */
  BFW_NIOL_asic_ctrl_bist_ctrl0_reserved2      = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_BIST_CTRL0_BIT_Ttag {
  unsigned int dram_bist_mode : BFW_NIOL_asic_ctrl_bist_ctrl0_dram_bist_mode; /* bist_mode of dram                                                                  */
  unsigned int pram_bist_mode : BFW_NIOL_asic_ctrl_bist_ctrl0_pram_bist_mode; /* bist_mode of pram                                                                  */
  unsigned int reserved1      : BFW_NIOL_asic_ctrl_bist_ctrl0_reserved1;      /* reserved                                                                           */
  unsigned int pw             : BFW_NIOL_asic_ctrl_bist_ctrl0_pw;             /* Password: pw=0xd must be written here to validate a write access to this register. */
  unsigned int reserved2      : BFW_NIOL_asic_ctrl_bist_ctrl0_reserved2;      /* reserved                                                                           */
} NIOL_ASIC_CTRL_BIST_CTRL0_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_BIST_CTRL0_BIT_T bf;
} NIOL_ASIC_CTRL_BIST_CTRL0_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_bist_stat0 */
/* => RAM BIST status register 0: */
/*    2 bits bist_status per RAM: */
/*    00: OK */
/*    01: running */
/*    11: failure */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_bist_stat0       0x00000024U
#define Adr_NIOL_asic_ctrl_asic_ctrl_bist_stat0 0x000003A4U
#define Adr_NIOL_asic_ctrl_bist_stat0           0x000003A4U

#define MSK_NIOL_asic_ctrl_bist_stat0_dram_bist_status 0x00000003U
#define SRT_NIOL_asic_ctrl_bist_stat0_dram_bist_status 0
#define MSK_NIOL_asic_ctrl_bist_stat0_pram_bist_status 0x0000000cU
#define SRT_NIOL_asic_ctrl_bist_stat0_pram_bist_status 2

/* all used bits of 'NIOL_asic_ctrl_bist_stat0': */
#define MSK_USED_BITS_NIOL_asic_ctrl_bist_stat0 0x0000000fU

enum {
  BFW_NIOL_asic_ctrl_bist_stat0_dram_bist_status = 2,  /* [1:0] */
  BFW_NIOL_asic_ctrl_bist_stat0_pram_bist_status = 2,  /* [3:2] */
  BFW_NIOL_asic_ctrl_bist_stat0_reserved1        = 28  /* [31:4] */
};

typedef struct NIOL_ASIC_CTRL_BIST_STAT0_BIT_Ttag {
  unsigned int dram_bist_status : BFW_NIOL_asic_ctrl_bist_stat0_dram_bist_status; /* bist_status of dram */
  unsigned int pram_bist_status : BFW_NIOL_asic_ctrl_bist_stat0_pram_bist_status; /* bist_status of pram */
  unsigned int reserved1        : BFW_NIOL_asic_ctrl_bist_stat0_reserved1;        /* reserved            */
} NIOL_ASIC_CTRL_BIST_STAT0_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_BIST_STAT0_BIT_T bf;
} NIOL_ASIC_CTRL_BIST_STAT0_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_reset_ctrl */
/* => Reset Control Register: */
/*    This register controls the reset functions of the chip and indicates the reset state. The reset state */
/*    shows which resets have occurred, allowing the firmware to detect which resets were active. In order to */
/*    determine the source of the last reset, the firmware should evaluate and reset these bits during its start */
/*    sequence. After a power on reset, the RESET_CTRL register is cleared completely. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_reset_ctrl       0x00000028U
#define Adr_NIOL_asic_ctrl_asic_ctrl_reset_ctrl 0x000003A8U
#define Adr_NIOL_asic_ctrl_reset_ctrl           0x000003A8U
#define DFLT_VAL_NIOL_asic_ctrl_reset_ctrl      0x00000000U

#define MSK_NIOL_asic_ctrl_reset_ctrl_RES_WDOG          0x00000001U
#define SRT_NIOL_asic_ctrl_reset_ctrl_RES_WDOG          0
#define DFLT_VAL_NIOL_asic_ctrl_reset_ctrl_RES_WDOG     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_reset_ctrl_RES_WDOG  0x00000000U
#define MSK_NIOL_asic_ctrl_reset_ctrl_RES_HISPI         0x00000002U
#define SRT_NIOL_asic_ctrl_reset_ctrl_RES_HISPI         1
#define DFLT_VAL_NIOL_asic_ctrl_reset_ctrl_RES_HISPI    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_reset_ctrl_RES_HISPI 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_reset_ctrl': */
#define MSK_USED_BITS_NIOL_asic_ctrl_reset_ctrl 0x00000003U

enum {
  BFW_NIOL_asic_ctrl_reset_ctrl_RES_WDOG  = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_reset_ctrl_RES_HISPI = 1,  /* [1] */
  BFW_NIOL_asic_ctrl_reset_ctrl_reserved1 = 30  /* [31:2] */
};

typedef struct NIOL_ASIC_CTRL_RESET_CTRL_BIT_Ttag {
  unsigned int RES_WDOG  : BFW_NIOL_asic_ctrl_reset_ctrl_RES_WDOG;  /* Reset status: A reset was performed by the system watchdog. */
                                                                    /* After reading write back a "1" to clear the status bit.     */
  unsigned int RES_HISPI : BFW_NIOL_asic_ctrl_reset_ctrl_RES_HISPI; /* Reset status: A reset was performed by HISPI                */
                                                                    /* After reading write back a "1" to clear the status bit.     */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_reset_ctrl_reserved1; /* reserved                                                    */
} NIOL_ASIC_CTRL_RESET_CTRL_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_RESET_CTRL_BIT_T bf;
} NIOL_ASIC_CTRL_RESET_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_pll_config0 */
/* => PLL Configuration Register 0 */
/*    The PLL is always powered down after power on reset. All clock-domains run directly on pin CLKREF. */
/*    To use the PLL: */
/*     1. set pll_config0 */
/*     2. set pll_config1 with pll_pd=1 */
/*     3. set pll_config1 with pll_pd=0 (power up PLL) */
/*     4. wait for PLL to stabilize */
/*     5. Use clk_sys_config to switch from CLKREF to PLL */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_pll_config0       0x0000002CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_pll_config0 0x000003ACU
#define Adr_NIOL_asic_ctrl_pll_config0           0x000003ACU
#define DFLT_VAL_NIOL_asic_ctrl_pll_config0      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_pll_config0        0x00006c00U
#define PW_BF_VAL_NIOL_asic_ctrl_pll_config0     0x00000036U

#define MSK_NIOL_asic_ctrl_pll_config0_pll_fd         0x000001ffU
#define SRT_NIOL_asic_ctrl_pll_config0_pll_fd         0
#define DFLT_VAL_NIOL_asic_ctrl_pll_config0_pll_fd    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config0_pll_fd 0x00000000U
#define MSK_NIOL_asic_ctrl_pll_config0_pw             0x0000fe00U
#define SRT_NIOL_asic_ctrl_pll_config0_pw             9
#define DFLT_VAL_NIOL_asic_ctrl_pll_config0_pw        0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config0_pw     0x00000000U

/* all used bits of 'NIOL_asic_ctrl_pll_config0': */
#define MSK_USED_BITS_NIOL_asic_ctrl_pll_config0 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_pll_config0_pll_fd    = 9,  /* [8:0] */
  BFW_NIOL_asic_ctrl_pll_config0_pw        = 7,  /* [15:9] */
  BFW_NIOL_asic_ctrl_pll_config0_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_PLL_CONFIG0_BIT_Ttag {
  unsigned int pll_fd    : BFW_NIOL_asic_ctrl_pll_config0_pll_fd;    /* PLL feedback divider (d_pll_fd)                                                     */
                                                                     /*   fvco/ffb = (d_fd + 2) * 2                                                         */
                                                                     /* ffb  = frequency of internal feedback clock to phase detector                       */
                                                                     /* fvco = frequency of vco                                                             */
  unsigned int pw        : BFW_NIOL_asic_ctrl_pll_config0_pw;        /* Password: pw=0x36 must be written here to validate a write access to this register. */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_pll_config0_reserved1; /* reserved                                                                            */
} NIOL_ASIC_CTRL_PLL_CONFIG0_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_ASIC_CTRL_PLL_CONFIG0_BIT_T bf;
} NIOL_ASIC_CTRL_PLL_CONFIG0_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_pll_config1 */
/* => PLL Configuration Register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_pll_config1       0x00000030U
#define Adr_NIOL_asic_ctrl_asic_ctrl_pll_config1 0x000003B0U
#define Adr_NIOL_asic_ctrl_pll_config1           0x000003B0U
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1      0x00000203U
#define PW_VAL_NIOL_asic_ctrl_pll_config1        0x00006800U
#define PW_BF_VAL_NIOL_asic_ctrl_pll_config1     0x0000001aU

#define MSK_NIOL_asic_ctrl_pll_config1_pll_oe_n           0x00000001U
#define SRT_NIOL_asic_ctrl_pll_config1_pll_oe_n           0
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1_pll_oe_n      0x00000001U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config1_pll_oe_n   0x00000001U
#define MSK_NIOL_asic_ctrl_pll_config1_pll_pd             0x00000002U
#define SRT_NIOL_asic_ctrl_pll_config1_pll_pd             1
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1_pll_pd        0x00000002U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config1_pll_pd     0x00000001U
#define MSK_NIOL_asic_ctrl_pll_config1_pll_rd             0x0000007cU
#define SRT_NIOL_asic_ctrl_pll_config1_pll_rd             2
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1_pll_rd        0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config1_pll_rd     0x00000000U
#define MSK_NIOL_asic_ctrl_pll_config1_pll_od             0x00000180U
#define SRT_NIOL_asic_ctrl_pll_config1_pll_od             7
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1_pll_od        0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config1_pll_od     0x00000000U
#define MSK_NIOL_asic_ctrl_pll_config1_pll_bypass         0x00000200U
#define SRT_NIOL_asic_ctrl_pll_config1_pll_bypass         9
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1_pll_bypass    0x00000200U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config1_pll_bypass 0x00000001U
#define MSK_NIOL_asic_ctrl_pll_config1_pw                 0x0000fc00U
#define SRT_NIOL_asic_ctrl_pll_config1_pw                 10
#define DFLT_VAL_NIOL_asic_ctrl_pll_config1_pw            0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_pll_config1_pw         0x00000000U

/* all used bits of 'NIOL_asic_ctrl_pll_config1': */
#define MSK_USED_BITS_NIOL_asic_ctrl_pll_config1 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_pll_config1_pll_oe_n   = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_pll_config1_pll_pd     = 1,  /* [1] */
  BFW_NIOL_asic_ctrl_pll_config1_pll_rd     = 5,  /* [6:2] */
  BFW_NIOL_asic_ctrl_pll_config1_pll_od     = 2,  /* [8:7] */
  BFW_NIOL_asic_ctrl_pll_config1_pll_bypass = 1,  /* [9] */
  BFW_NIOL_asic_ctrl_pll_config1_pw         = 6,  /* [15:10] */
  BFW_NIOL_asic_ctrl_pll_config1_reserved1  = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_PLL_CONFIG1_BIT_Ttag {
  unsigned int pll_oe_n   : BFW_NIOL_asic_ctrl_pll_config1_pll_oe_n;   /* PLL output-enable signal (d_pll_oe_n).                                              */
                                                                       /* 0: normal operation                                                                 */
                                                                       /* 1: d_pll_fout output is disabled / no toggle, but internal PLL loop is unaffected   */
  unsigned int pll_pd     : BFW_NIOL_asic_ctrl_pll_config1_pll_pd;     /* PLL power-down/reset signal (active high, d_pll_pd).                                */
                                                                       /* 0: PLL powered up. Normal operation                                                 */
                                                                       /* 1: VCO is powered down and in reset. Also asserts reset of pll logic.               */
                                                                       /* The PLL must not receive an input clock while the XTAL is not stable and the PLL    */
                                                                       /* is in power-down mode (enable = 0).                                                 */
  unsigned int pll_rd     : BFW_NIOL_asic_ctrl_pll_config1_pll_rd;     /* PLL reference divider (d_pll_rd)                                                    */
                                                                       /*   fin/fref = (d_rd + 2) * 2                                                         */
                                                                       /* fref = frequency of reference clock clock to phase detector = CLKREF pin            */
                                                                       /* fin = frequency of d_pll_fin)                                                       */
  unsigned int pll_od     : BFW_NIOL_asic_ctrl_pll_config1_pll_od;     /* PLL output divider (d_pll_od)                                                       */
                                                                       /*   fvco/fout = 1, if d_od = 0                                                        */
                                                                       /*   fvco/fout = 2, if d_od = 1 or d_od = 2                                            */
                                                                       /*   fvco/fout = 4, if d_od = 3                                                        */
                                                                       /* fout = frequency of d_pll_fout                                                      */
                                                                       /* fvco = freqeuncy of vco                                                             */
  unsigned int pll_bypass : BFW_NIOL_asic_ctrl_pll_config1_pll_bypass; /* PLL internal bypass (d_pll_bypass)                                                  */
                                                                       /* 0: normal PLL operation.                                                            */
                                                                       /* 1: fout is is by-passed directly from fin.  For test only.                          */
                                                                       /* Warning: This bit should not be set when PLL output is used by IC                   */
                                                                       /* as it can cause timing errors!                                                      */
  unsigned int pw         : BFW_NIOL_asic_ctrl_pll_config1_pw;         /* Password: pw=0x1a must be written here to validate a write access to this register. */
  unsigned int reserved1  : BFW_NIOL_asic_ctrl_pll_config1_reserved1;  /* reserved                                                                            */
} NIOL_ASIC_CTRL_PLL_CONFIG1_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_ASIC_CTRL_PLL_CONFIG1_BIT_T bf;
} NIOL_ASIC_CTRL_PLL_CONFIG1_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk_sys_config */
/* => System clock divider configuration register */
/*    Procedure to program the system clock divider: Program the register step-by-step: */
/*      1. select XTAL as source (clear the src-bit) */
/*      2. program the desired div-value */
/*      3. select the PLL (set the src-bit) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_clk_sys_config       0x00000034U
#define Adr_NIOL_asic_ctrl_asic_ctrl_clk_sys_config 0x000003B4U
#define Adr_NIOL_asic_ctrl_clk_sys_config           0x000003B4U
#define DFLT_VAL_NIOL_asic_ctrl_clk_sys_config      0x00000002U
#define PW_VAL_NIOL_asic_ctrl_clk_sys_config        0x0000ad80U
#define PW_BF_VAL_NIOL_asic_ctrl_clk_sys_config     0x0000056cU

#define MSK_NIOL_asic_ctrl_clk_sys_config_src         0x00000001U
#define SRT_NIOL_asic_ctrl_clk_sys_config_src         0
#define DFLT_VAL_NIOL_asic_ctrl_clk_sys_config_src    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_sys_config_src 0x00000000U
#define MSK_NIOL_asic_ctrl_clk_sys_config_div         0x0000000eU
#define SRT_NIOL_asic_ctrl_clk_sys_config_div         1
#define DFLT_VAL_NIOL_asic_ctrl_clk_sys_config_div    0x00000002U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_sys_config_div 0x00000001U
#define MSK_NIOL_asic_ctrl_clk_sys_config_pw          0x0000ffe0U
#define SRT_NIOL_asic_ctrl_clk_sys_config_pw          5
#define DFLT_VAL_NIOL_asic_ctrl_clk_sys_config_pw     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_sys_config_pw  0x00000000U

/* all used bits of 'NIOL_asic_ctrl_clk_sys_config': */
#define MSK_USED_BITS_NIOL_asic_ctrl_clk_sys_config 0x0000ffefU

enum {
  BFW_NIOL_asic_ctrl_clk_sys_config_src       = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_clk_sys_config_div       = 3,  /* [3:1] */
  BFW_NIOL_asic_ctrl_clk_sys_config_reserved1 = 1,  /* [4] */
  BFW_NIOL_asic_ctrl_clk_sys_config_pw        = 11, /* [15:5] */
  BFW_NIOL_asic_ctrl_clk_sys_config_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_CLK_SYS_CONFIG_BIT_Ttag {
  unsigned int src       : BFW_NIOL_asic_ctrl_clk_sys_config_src;       /* 0: clk <= XTAL                                                                          */
                                                                        /* 1: clk <= PLL divider (s. bits 'div')                                                   */
  unsigned int div       : BFW_NIOL_asic_ctrl_clk_sys_config_div;       /* Divider reload value for system clock.                                                  */
                                                                        /* 0:      clk <= PLL out                                                                  */
                                                                        /* 1..MAX: clk <= PLL out / (2*(div+1))                                                    */
                                                                        /* Note: This setting only takes effect after one generated clock of the previous setting. */
                                                                        /* Note: This setting only takes effect when src is set to 1.                              */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_clk_sys_config_reserved1; /* reserved                                                                                */
  unsigned int pw        : BFW_NIOL_asic_ctrl_clk_sys_config_pw;        /* Password: pw=0x56c must be written here to validate a write access to this register.    */
  unsigned int reserved2 : BFW_NIOL_asic_ctrl_clk_sys_config_reserved2; /* reserved                                                                                */
} NIOL_ASIC_CTRL_CLK_SYS_CONFIG_BIT_T;

typedef union {
  uint32_t                            val;
  NIOL_ASIC_CTRL_CLK_SYS_CONFIG_BIT_T bf;
} NIOL_ASIC_CTRL_CLK_SYS_CONFIG_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk_uart_a_config */
/* => IOL_UART A clock divider configuration register */
/*    Procedure to program the UART clocks: Program the register step-by-step: */
/*      1. disable the clock if it is running (clear the en-bit but don't change the div-bits) */
/*      2. program the desired div-value */
/*      3. enable the clock (set the en-bit) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_clk_uart_a_config       0x00000038U
#define Adr_NIOL_asic_ctrl_asic_ctrl_clk_uart_a_config 0x000003B8U
#define Adr_NIOL_asic_ctrl_clk_uart_a_config           0x000003B8U
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_a_config      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_clk_uart_a_config        0x0000c1c0U
#define PW_BF_VAL_NIOL_asic_ctrl_clk_uart_a_config     0x00000307U

#define MSK_NIOL_asic_ctrl_clk_uart_a_config_en          0x00000001U
#define SRT_NIOL_asic_ctrl_clk_uart_a_config_en          0
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_a_config_en     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_a_config_en  0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_a_config_div         0x0000003eU
#define SRT_NIOL_asic_ctrl_clk_uart_a_config_div         1
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_a_config_div    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_a_config_div 0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_a_config_pw          0x0000ffc0U
#define SRT_NIOL_asic_ctrl_clk_uart_a_config_pw          6
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_a_config_pw     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_a_config_pw  0x00000000U

/* all used bits of 'NIOL_asic_ctrl_clk_uart_a_config': */
#define MSK_USED_BITS_NIOL_asic_ctrl_clk_uart_a_config 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_clk_uart_a_config_en        = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_clk_uart_a_config_div       = 5,  /* [5:1] */
  BFW_NIOL_asic_ctrl_clk_uart_a_config_pw        = 10, /* [15:6] */
  BFW_NIOL_asic_ctrl_clk_uart_a_config_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_CLK_UART_A_CONFIG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_asic_ctrl_clk_uart_a_config_en;        /* Clock enable                                                                                    */
                                                                           /* 0: uart_a_tx_clk <= disabled                                                                    */
                                                                           /* 1: uart_a_tx_clk <= enabled                                                                     */
  unsigned int div       : BFW_NIOL_asic_ctrl_clk_uart_a_config_div;       /* Clock divider and selection value.                                                              */
                                                                           /* 0:      uart_a_tx_clk <= XTAL                                                                   */
                                                                           /* 1:      uart_a_tx_clk <= PLL out                                                                */
                                                                           /* 2..30:  uart_a_tx_clk <= PLL out / div                                                          */
                                                                           /* 31:     (illegal, not supported)                                                                */
                                                                           /* Note: This setting only takes effect after one generated clock of the previous setting.         */
                                                                           /* Note: The src-bit from the MPW is dropped and replaced by the values 0 and 1.                   */
                                                                           /* Note: For the MPW the PLL clock devision was PLL/(div*2), i.e. only even division possible.     */
                                                                           /*       For the final NETIOL the PLL clock devision was PLL/div, i.e. also odd division possible. */
                                                                           /*       Therefore the div values must be changed when migrating to the final NETIOL.              */
  unsigned int pw        : BFW_NIOL_asic_ctrl_clk_uart_a_config_pw;        /* Password: pw=0x307 must be written here to validate a write access to this register.            */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_clk_uart_a_config_reserved1; /* reserved                                                                                        */
} NIOL_ASIC_CTRL_CLK_UART_A_CONFIG_BIT_T;

typedef union {
  uint32_t                               val;
  NIOL_ASIC_CTRL_CLK_UART_A_CONFIG_BIT_T bf;
} NIOL_ASIC_CTRL_CLK_UART_A_CONFIG_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk_uart_b_config */
/* => IOL_UART B clock divider configuration register */
/*    For details see the IOL_UART A clock divider configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_clk_uart_b_config       0x0000003CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_clk_uart_b_config 0x000003BCU
#define Adr_NIOL_asic_ctrl_clk_uart_b_config           0x000003BCU
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_b_config      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_clk_uart_b_config        0x00002f40U
#define PW_BF_VAL_NIOL_asic_ctrl_clk_uart_b_config     0x000000bdU

#define MSK_NIOL_asic_ctrl_clk_uart_b_config_en          0x00000001U
#define SRT_NIOL_asic_ctrl_clk_uart_b_config_en          0
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_b_config_en     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_b_config_en  0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_b_config_div         0x0000003eU
#define SRT_NIOL_asic_ctrl_clk_uart_b_config_div         1
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_b_config_div    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_b_config_div 0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_b_config_pw          0x0000ffc0U
#define SRT_NIOL_asic_ctrl_clk_uart_b_config_pw          6
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_b_config_pw     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_b_config_pw  0x00000000U

/* all used bits of 'NIOL_asic_ctrl_clk_uart_b_config': */
#define MSK_USED_BITS_NIOL_asic_ctrl_clk_uart_b_config 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_clk_uart_b_config_en        = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_clk_uart_b_config_div       = 5,  /* [5:1] */
  BFW_NIOL_asic_ctrl_clk_uart_b_config_pw        = 10, /* [15:6] */
  BFW_NIOL_asic_ctrl_clk_uart_b_config_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_CLK_UART_B_CONFIG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_asic_ctrl_clk_uart_b_config_en;        /* Clock enable                                                                         */
  unsigned int div       : BFW_NIOL_asic_ctrl_clk_uart_b_config_div;       /* Divider reload value for system clock.                                               */
  unsigned int pw        : BFW_NIOL_asic_ctrl_clk_uart_b_config_pw;        /* Password: pw=0x0bd must be written here to validate a write access to this register. */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_clk_uart_b_config_reserved1; /* reserved                                                                             */
} NIOL_ASIC_CTRL_CLK_UART_B_CONFIG_BIT_T;

typedef union {
  uint32_t                               val;
  NIOL_ASIC_CTRL_CLK_UART_B_CONFIG_BIT_T bf;
} NIOL_ASIC_CTRL_CLK_UART_B_CONFIG_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk_uart_c_config */
/* => IOL_UART C clock divider configuration register */
/*    For details see the IOL_UART A clock divider configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_clk_uart_c_config       0x00000040U
#define Adr_NIOL_asic_ctrl_asic_ctrl_clk_uart_c_config 0x000003C0U
#define Adr_NIOL_asic_ctrl_clk_uart_c_config           0x000003C0U
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_c_config      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_clk_uart_c_config        0x0000a240U
#define PW_BF_VAL_NIOL_asic_ctrl_clk_uart_c_config     0x00000289U

#define MSK_NIOL_asic_ctrl_clk_uart_c_config_en          0x00000001U
#define SRT_NIOL_asic_ctrl_clk_uart_c_config_en          0
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_c_config_en     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_c_config_en  0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_c_config_div         0x0000003eU
#define SRT_NIOL_asic_ctrl_clk_uart_c_config_div         1
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_c_config_div    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_c_config_div 0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_c_config_pw          0x0000ffc0U
#define SRT_NIOL_asic_ctrl_clk_uart_c_config_pw          6
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_c_config_pw     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_c_config_pw  0x00000000U

/* all used bits of 'NIOL_asic_ctrl_clk_uart_c_config': */
#define MSK_USED_BITS_NIOL_asic_ctrl_clk_uart_c_config 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_clk_uart_c_config_en        = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_clk_uart_c_config_div       = 5,  /* [5:1] */
  BFW_NIOL_asic_ctrl_clk_uart_c_config_pw        = 10, /* [15:6] */
  BFW_NIOL_asic_ctrl_clk_uart_c_config_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_CLK_UART_C_CONFIG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_asic_ctrl_clk_uart_c_config_en;        /* Clock enable                                                                         */
  unsigned int div       : BFW_NIOL_asic_ctrl_clk_uart_c_config_div;       /* Divider reload value for system clock.                                               */
  unsigned int pw        : BFW_NIOL_asic_ctrl_clk_uart_c_config_pw;        /* Password: pw=0x289 must be written here to validate a write access to this register. */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_clk_uart_c_config_reserved1; /* reserved                                                                             */
} NIOL_ASIC_CTRL_CLK_UART_C_CONFIG_BIT_T;

typedef union {
  uint32_t                               val;
  NIOL_ASIC_CTRL_CLK_UART_C_CONFIG_BIT_T bf;
} NIOL_ASIC_CTRL_CLK_UART_C_CONFIG_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk_uart_d_config */
/* => IOL_UART D clock divider configuration register */
/*    For details see the IOL_UART A clock divider configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_clk_uart_d_config       0x00000044U
#define Adr_NIOL_asic_ctrl_asic_ctrl_clk_uart_d_config 0x000003C4U
#define Adr_NIOL_asic_ctrl_clk_uart_d_config           0x000003C4U
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_d_config      0x00000000U
#define PW_VAL_NIOL_asic_ctrl_clk_uart_d_config        0x00008c40U
#define PW_BF_VAL_NIOL_asic_ctrl_clk_uart_d_config     0x00000231U

#define MSK_NIOL_asic_ctrl_clk_uart_d_config_en          0x00000001U
#define SRT_NIOL_asic_ctrl_clk_uart_d_config_en          0
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_d_config_en     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_d_config_en  0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_d_config_div         0x0000003eU
#define SRT_NIOL_asic_ctrl_clk_uart_d_config_div         1
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_d_config_div    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_d_config_div 0x00000000U
#define MSK_NIOL_asic_ctrl_clk_uart_d_config_pw          0x0000ffc0U
#define SRT_NIOL_asic_ctrl_clk_uart_d_config_pw          6
#define DFLT_VAL_NIOL_asic_ctrl_clk_uart_d_config_pw     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_clk_uart_d_config_pw  0x00000000U

/* all used bits of 'NIOL_asic_ctrl_clk_uart_d_config': */
#define MSK_USED_BITS_NIOL_asic_ctrl_clk_uart_d_config 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_clk_uart_d_config_en        = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_clk_uart_d_config_div       = 5,  /* [5:1] */
  BFW_NIOL_asic_ctrl_clk_uart_d_config_pw        = 10, /* [15:6] */
  BFW_NIOL_asic_ctrl_clk_uart_d_config_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_CLK_UART_D_CONFIG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_asic_ctrl_clk_uart_d_config_en;        /* Clock enable                                                                         */
  unsigned int div       : BFW_NIOL_asic_ctrl_clk_uart_d_config_div;       /* Divider reload value for system clock.                                               */
  unsigned int pw        : BFW_NIOL_asic_ctrl_clk_uart_d_config_pw;        /* Password: pw=0x231 must be written here to validate a write access to this register. */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_clk_uart_d_config_reserved1; /* reserved                                                                             */
} NIOL_ASIC_CTRL_CLK_UART_D_CONFIG_BIT_T;

typedef union {
  uint32_t                               val;
  NIOL_ASIC_CTRL_CLK_UART_D_CONFIG_BIT_T bf;
} NIOL_ASIC_CTRL_CLK_UART_D_CONFIG_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_system_calibration0 */
/* => System calibration register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_system_calibration0       0x00000048U
#define Adr_NIOL_asic_ctrl_asic_ctrl_system_calibration0 0x000003C8U
#define Adr_NIOL_asic_ctrl_system_calibration0           0x000003C8U
#define DFLT_VAL_NIOL_asic_ctrl_system_calibration0      0x00008080U

#define MSK_NIOL_asic_ctrl_system_calibration0_cal_bg           0x000000ffU
#define SRT_NIOL_asic_ctrl_system_calibration0_cal_bg           0
#define DFLT_VAL_NIOL_asic_ctrl_system_calibration0_cal_bg      0x00000080U
#define DFLT_BF_VAL_NIOL_asic_ctrl_system_calibration0_cal_bg   0x00000080U
#define MSK_NIOL_asic_ctrl_system_calibration0_cal_vref         0x0000ff00U
#define SRT_NIOL_asic_ctrl_system_calibration0_cal_vref         8
#define DFLT_VAL_NIOL_asic_ctrl_system_calibration0_cal_vref    0x00008000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_system_calibration0_cal_vref 0x00000080U

/* all used bits of 'NIOL_asic_ctrl_system_calibration0': */
#define MSK_USED_BITS_NIOL_asic_ctrl_system_calibration0 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_system_calibration0_cal_bg    = 8,  /* [7:0] */
  BFW_NIOL_asic_ctrl_system_calibration0_cal_vref  = 8,  /* [15:8] */
  BFW_NIOL_asic_ctrl_system_calibration0_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_SYSTEM_CALIBRATION0_BIT_Ttag {
  unsigned int cal_bg    : BFW_NIOL_asic_ctrl_system_calibration0_cal_bg;    /* Bandgap calibration, 1st order TC       */
                                                                             /* 0: most negative                        */
                                                                             /* 255: most positive                      */
  unsigned int cal_vref  : BFW_NIOL_asic_ctrl_system_calibration0_cal_vref;  /* Voltage reference calibration, absolute */
                                                                             /* 0: most negative                        */
                                                                             /* 255: most positive                      */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_system_calibration0_reserved1; /* reserved                                */
} NIOL_ASIC_CTRL_SYSTEM_CALIBRATION0_BIT_T;

typedef union {
  uint32_t                                 val;
  NIOL_ASIC_CTRL_SYSTEM_CALIBRATION0_BIT_T bf;
} NIOL_ASIC_CTRL_SYSTEM_CALIBRATION0_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_system_calibration1 */
/* => System calibration register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_system_calibration1       0x0000004CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_system_calibration1 0x000003CCU
#define Adr_NIOL_asic_ctrl_system_calibration1           0x000003CCU
#define DFLT_VAL_NIOL_asic_ctrl_system_calibration1      0x00000008U

#define MSK_NIOL_asic_ctrl_system_calibration1_cal_iref         0x0000000fU
#define SRT_NIOL_asic_ctrl_system_calibration1_cal_iref         0
#define DFLT_VAL_NIOL_asic_ctrl_system_calibration1_cal_iref    0x00000008U
#define DFLT_BF_VAL_NIOL_asic_ctrl_system_calibration1_cal_iref 0x00000008U

/* all used bits of 'NIOL_asic_ctrl_system_calibration1': */
#define MSK_USED_BITS_NIOL_asic_ctrl_system_calibration1 0x0000000fU

enum {
  BFW_NIOL_asic_ctrl_system_calibration1_cal_iref  = 4,  /* [3:0] */
  BFW_NIOL_asic_ctrl_system_calibration1_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_ASIC_CTRL_SYSTEM_CALIBRATION1_BIT_Ttag {
  unsigned int cal_iref  : BFW_NIOL_asic_ctrl_system_calibration1_cal_iref;  /* Bias current calibration */
                                                                             /* 0: lowest                */
                                                                             /* 15: highest              */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_system_calibration1_reserved1; /* reserved                 */
} NIOL_ASIC_CTRL_SYSTEM_CALIBRATION1_BIT_T;

typedef union {
  uint32_t                                 val;
  NIOL_ASIC_CTRL_SYSTEM_CALIBRATION1_BIT_T bf;
} NIOL_ASIC_CTRL_SYSTEM_CALIBRATION1_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_vdd_iol_uv_prescaler */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_vdd_iol_uv_prescaler       0x00000050U
#define Adr_NIOL_asic_ctrl_asic_ctrl_vdd_iol_uv_prescaler 0x000003D0U
#define Adr_NIOL_asic_ctrl_vdd_iol_uv_prescaler           0x000003D0U
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_prescaler      0x00000000U

#define MSK_NIOL_asic_ctrl_vdd_iol_uv_prescaler_ifilter         0x00003fffU
#define SRT_NIOL_asic_ctrl_vdd_iol_uv_prescaler_ifilter         0
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_prescaler_ifilter    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_vdd_iol_uv_prescaler_ifilter 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_vdd_iol_uv_prescaler': */
#define MSK_USED_BITS_NIOL_asic_ctrl_vdd_iol_uv_prescaler 0x00003fffU

enum {
  BFW_NIOL_asic_ctrl_vdd_iol_uv_prescaler_ifilter   = 14, /* [13:0] */
  BFW_NIOL_asic_ctrl_vdd_iol_uv_prescaler_reserved1 = 18  /* [31:14] */
};

typedef struct NIOL_ASIC_CTRL_VDD_IOL_UV_PRESCALER_BIT_Ttag {
  unsigned int ifilter   : BFW_NIOL_asic_ctrl_vdd_iol_uv_prescaler_ifilter;   /* Prescaler for integration filter of vdd_iol under voltage comparator. */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_vdd_iol_uv_prescaler_reserved1; /* reserved                                                              */
} NIOL_ASIC_CTRL_VDD_IOL_UV_PRESCALER_BIT_T;

typedef union {
  uint32_t                                  val;
  NIOL_ASIC_CTRL_VDD_IOL_UV_PRESCALER_BIT_T bf;
} NIOL_ASIC_CTRL_VDD_IOL_UV_PRESCALER_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_vdd_iol_uv_ctrl */
/* => D2A signals for vdd_io_uv receiver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_vdd_iol_uv_ctrl       0x00000054U
#define Adr_NIOL_asic_ctrl_asic_ctrl_vdd_iol_uv_ctrl 0x000003D4U
#define Adr_NIOL_asic_ctrl_vdd_iol_uv_ctrl           0x000003D4U
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl      0x00000000U

#define MSK_NIOL_asic_ctrl_vdd_iol_uv_ctrl_on           0x00000001U
#define SRT_NIOL_asic_ctrl_vdd_iol_uv_ctrl_on           0
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl_on      0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl_on   0x00000000U
#define MSK_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_h         0x0000007eU
#define SRT_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_h         1
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_h    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_h 0x00000000U
#define MSK_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_l         0x00001f80U
#define SRT_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_l         7
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_l    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_l 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_vdd_iol_uv_ctrl': */
#define MSK_USED_BITS_NIOL_asic_ctrl_vdd_iol_uv_ctrl 0x00001fffU

enum {
  BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_on        = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_h      = 6,  /* [6:1] */
  BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_l      = 6,  /* [12:7] */
  BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_reserved1 = 19  /* [31:13] */
};

typedef struct NIOL_ASIC_CTRL_VDD_IOL_UV_CTRL_BIT_Ttag {
  unsigned int on        : BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_on;        /* Write '1' to enable vdd_iol under voltage comparator.               */
  unsigned int vt_h      : BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_h;      /* vdd_iol under voltage comparator high threshold                     */
                                                                         /* Note: vt_h must be set to a higher value than vt_l for proper       */
                                                                         /* operation. Otherwise the output of the comparator is unpredictable. */
  unsigned int vt_l      : BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_vt_l;      /* vdd_iol under voltage comparator low threshold                      */
                                                                         /* Note: vt_l must be set > 0 for proper operation. Otherwise          */
                                                                         /* the output of the comparator is unpredictable.                      */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_vdd_iol_uv_ctrl_reserved1; /* reserved                                                            */
} NIOL_ASIC_CTRL_VDD_IOL_UV_CTRL_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_ASIC_CTRL_VDD_IOL_UV_CTRL_BIT_T bf;
} NIOL_ASIC_CTRL_VDD_IOL_UV_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_vdd_iol_uv */
/* => The analog A2D signal d_vdd_io_uv is filtered and evaluated to generate the IRQ signal vdd_iol_uv. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_vdd_iol_uv       0x00000058U
#define Adr_NIOL_asic_ctrl_asic_ctrl_vdd_iol_uv 0x000003D8U
#define Adr_NIOL_asic_ctrl_vdd_iol_uv           0x000003D8U
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv      0x00000000U

#define MSK_NIOL_asic_ctrl_vdd_iol_uv_ifilter_threshold         0x000000ffU
#define SRT_NIOL_asic_ctrl_vdd_iol_uv_ifilter_threshold         0
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_vdd_iol_uv_ifilter_threshold 0x00000000U
#define MSK_NIOL_asic_ctrl_vdd_iol_uv_irq_mode                  0x00000700U
#define SRT_NIOL_asic_ctrl_vdd_iol_uv_irq_mode                  8
#define DFLT_VAL_NIOL_asic_ctrl_vdd_iol_uv_irq_mode             0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_vdd_iol_uv_irq_mode          0x00000000U

/* all used bits of 'NIOL_asic_ctrl_vdd_iol_uv': */
#define MSK_USED_BITS_NIOL_asic_ctrl_vdd_iol_uv 0x000007ffU

enum {
  BFW_NIOL_asic_ctrl_vdd_iol_uv_ifilter_threshold = 8,  /* [7:0] */
  BFW_NIOL_asic_ctrl_vdd_iol_uv_irq_mode          = 3,  /* [10:8] */
  BFW_NIOL_asic_ctrl_vdd_iol_uv_reserved1         = 21  /* [31:11] */
};

typedef struct NIOL_ASIC_CTRL_VDD_IOL_UV_BIT_Ttag {
  unsigned int ifilter_threshold : BFW_NIOL_asic_ctrl_vdd_iol_uv_ifilter_threshold; /* 0: integral filter disabled                                     */
                                                                                    /* 1..MAX: integral filter threshold                               */
                                                                                    /* Note: The integral filter has a prescaler, which is configured  */
                                                                                    /* in the vdd_iol_uv_prescaler register.                           */
  unsigned int irq_mode          : BFW_NIOL_asic_ctrl_vdd_iol_uv_irq_mode;          /* 0: IRQ disabled                                                 */
                                                                                    /* 1: level IRQ, asserted when receiver signal is 0                */
                                                                                    /* 2: level IRQ, asserted when receiver signal is 1                */
                                                                                    /* 3: event IRQ, set on rising edge                                */
                                                                                    /* 4: event IRQ, set on falling edge                               */
                                                                                    /* 5: event IRQ, set on any edge                                   */
  unsigned int reserved1         : BFW_NIOL_asic_ctrl_vdd_iol_uv_reserved1;         /* reserved                                                        */
} NIOL_ASIC_CTRL_VDD_IOL_UV_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_VDD_IOL_UV_BIT_T bf;
} NIOL_ASIC_CTRL_VDD_IOL_UV_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_d2a_ofc_ovg */
/* => D2A signals for OFC and OVG */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_d2a_ofc_ovg       0x0000005CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_d2a_ofc_ovg 0x000003DCU
#define Adr_NIOL_asic_ctrl_d2a_ofc_ovg           0x000003DCU
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg      0x00000000U

#define MSK_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_bg           0x00000001U
#define SRT_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_bg           0
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_bg      0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_bg   0x00000000U
#define MSK_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_vref         0x00000002U
#define SRT_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_vref         1
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_vref    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_vref 0x00000000U
#define MSK_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_on           0x00000004U
#define SRT_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_on           2
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_on      0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_on   0x00000000U
#define MSK_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_clk          0x00000008U
#define SRT_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_clk          3
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_clk     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_clk  0x00000000U
#define MSK_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_on           0x00000010U
#define SRT_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_on           4
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_on      0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_on   0x00000000U
#define MSK_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_clk          0x00000020U
#define SRT_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_clk          5
#define DFLT_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_clk     0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_clk  0x00000000U

/* all used bits of 'NIOL_asic_ctrl_d2a_ofc_ovg': */
#define MSK_USED_BITS_NIOL_asic_ctrl_d2a_ofc_ovg 0x0000003fU

enum {
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_bg   = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_vref = 1,  /* [1] */
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_on   = 1,  /* [2] */
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_clk  = 1,  /* [3] */
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_on   = 1,  /* [4] */
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_clk  = 1,  /* [5] */
  BFW_NIOL_asic_ctrl_d2a_ofc_ovg_reserved1      = 26  /* [31:6] */
};

typedef struct NIOL_ASIC_CTRL_D2A_OFC_OVG_BIT_Ttag {
  unsigned int d_ofc_clk_bg   : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_bg;   /* default 0 */
  unsigned int d_ofc_clk_vref : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ofc_clk_vref; /* default 0 */
  unsigned int d_ovg_iol_on   : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_on;   /* default 0 */
  unsigned int d_ovg_iol_clk  : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_iol_clk;  /* default 0 */
  unsigned int d_ovg_act_on   : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_on;   /* default 0 */
  unsigned int d_ovg_act_clk  : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_d_ovg_act_clk;  /* default 0 */
  unsigned int reserved1      : BFW_NIOL_asic_ctrl_d2a_ofc_ovg_reserved1;      /* reserved  */
} NIOL_ASIC_CTRL_D2A_OFC_OVG_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_ASIC_CTRL_D2A_OFC_OVG_BIT_T bf;
} NIOL_ASIC_CTRL_D2A_OFC_OVG_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_ofc_clk */
/* => Offset compensation clocks for bandgap reference (d_ofc_clk_bg) and voltage reference buffer (d_ofc_clk_vref) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_ofc_clk       0x00000060U
#define Adr_NIOL_asic_ctrl_asic_ctrl_ofc_clk 0x000003E0U
#define Adr_NIOL_asic_ctrl_ofc_clk           0x000003E0U
#define DFLT_VAL_NIOL_asic_ctrl_ofc_clk      0x00000000U

#define MSK_NIOL_asic_ctrl_ofc_clk_bg_div_rld           0x000000ffU
#define SRT_NIOL_asic_ctrl_ofc_clk_bg_div_rld           0
#define DFLT_VAL_NIOL_asic_ctrl_ofc_clk_bg_div_rld      0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_ofc_clk_bg_div_rld   0x00000000U
#define MSK_NIOL_asic_ctrl_ofc_clk_vref_div_rld         0x0000ff00U
#define SRT_NIOL_asic_ctrl_ofc_clk_vref_div_rld         8
#define DFLT_VAL_NIOL_asic_ctrl_ofc_clk_vref_div_rld    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_ofc_clk_vref_div_rld 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_ofc_clk': */
#define MSK_USED_BITS_NIOL_asic_ctrl_ofc_clk 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_ofc_clk_bg_div_rld   = 8,  /* [7:0] */
  BFW_NIOL_asic_ctrl_ofc_clk_vref_div_rld = 8,  /* [15:8] */
  BFW_NIOL_asic_ctrl_ofc_clk_reserved1    = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_OFC_CLK_BIT_Ttag {
  unsigned int bg_div_rld   : BFW_NIOL_asic_ctrl_ofc_clk_bg_div_rld;   /* 0: clock generation disabled. Output set by ASIC_CTRL_D2A_OFC_OVG.d_ofc_clk_bg */
                                                                       /* 1..MAX:  Output toggled after (clk+1) * bg_div_rld clock cycles                */
  unsigned int vref_div_rld : BFW_NIOL_asic_ctrl_ofc_clk_vref_div_rld; /* see bg_div_rld                                                                 */
  unsigned int reserved1    : BFW_NIOL_asic_ctrl_ofc_clk_reserved1;    /* reserved                                                                       */
} NIOL_ASIC_CTRL_OFC_CLK_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_ASIC_CTRL_OFC_CLK_BIT_T bf;
} NIOL_ASIC_CTRL_OFC_CLK_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_ovg_clk */
/* => Charge pump clocks for overvoltage gate protection for vdd_iol (d_ovg_iol_clk) and vdd_act (d_ovg_act_clk). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_ovg_clk       0x00000064U
#define Adr_NIOL_asic_ctrl_asic_ctrl_ovg_clk 0x000003E4U
#define Adr_NIOL_asic_ctrl_ovg_clk           0x000003E4U
#define DFLT_VAL_NIOL_asic_ctrl_ovg_clk      0x00000000U

#define MSK_NIOL_asic_ctrl_ovg_clk_iol_div_rld         0x000000ffU
#define SRT_NIOL_asic_ctrl_ovg_clk_iol_div_rld         0
#define DFLT_VAL_NIOL_asic_ctrl_ovg_clk_iol_div_rld    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_ovg_clk_iol_div_rld 0x00000000U
#define MSK_NIOL_asic_ctrl_ovg_clk_act_div_rld         0x0000ff00U
#define SRT_NIOL_asic_ctrl_ovg_clk_act_div_rld         8
#define DFLT_VAL_NIOL_asic_ctrl_ovg_clk_act_div_rld    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_ovg_clk_act_div_rld 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_ovg_clk': */
#define MSK_USED_BITS_NIOL_asic_ctrl_ovg_clk 0x0000ffffU

enum {
  BFW_NIOL_asic_ctrl_ovg_clk_iol_div_rld = 8,  /* [7:0] */
  BFW_NIOL_asic_ctrl_ovg_clk_act_div_rld = 8,  /* [15:8] */
  BFW_NIOL_asic_ctrl_ovg_clk_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_ASIC_CTRL_OVG_CLK_BIT_Ttag {
  unsigned int iol_div_rld : BFW_NIOL_asic_ctrl_ovg_clk_iol_div_rld; /* see register ofc_clk, bitfield bg_div_rld */
  unsigned int act_div_rld : BFW_NIOL_asic_ctrl_ovg_clk_act_div_rld; /* see register ofc_clk, bitfield bg_div_rld */
  unsigned int reserved1   : BFW_NIOL_asic_ctrl_ovg_clk_reserved1;   /* reserved                                  */
} NIOL_ASIC_CTRL_OVG_CLK_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_ASIC_CTRL_OVG_CLK_BIT_T bf;
} NIOL_ASIC_CTRL_OVG_CLK_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_raw */
/* => Raw IRQs: */
/*    Read access shows status of unmasked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_irq_raw       0x00000068U
#define Adr_NIOL_asic_ctrl_asic_ctrl_irq_raw 0x000003E8U
#define Adr_NIOL_asic_ctrl_irq_raw           0x000003E8U

#define MSK_NIOL_asic_ctrl_irq_raw_vdd_iol_uv 0x00000001U
#define SRT_NIOL_asic_ctrl_irq_raw_vdd_iol_uv 0

/* all used bits of 'NIOL_asic_ctrl_irq_raw': */
#define MSK_USED_BITS_NIOL_asic_ctrl_irq_raw 0x00000001U

enum {
  BFW_NIOL_asic_ctrl_irq_raw_vdd_iol_uv = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_irq_raw_reserved1  = 31  /* [31:1] */
};

typedef struct NIOL_ASIC_CTRL_IRQ_RAW_BIT_Ttag {
  unsigned int vdd_iol_uv : BFW_NIOL_asic_ctrl_irq_raw_vdd_iol_uv; /* STATUS / EVENT type and functionality depending on ASIC_CTRL_VDD_IOL_UV.irq_mode */
  unsigned int reserved1  : BFW_NIOL_asic_ctrl_irq_raw_reserved1;  /* reserved                                                                         */
} NIOL_ASIC_CTRL_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_ASIC_CTRL_IRQ_RAW_BIT_T bf;
} NIOL_ASIC_CTRL_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_mask_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_irq_mask_set       0x0000006CU
#define Adr_NIOL_asic_ctrl_asic_ctrl_irq_mask_set 0x000003ECU
#define Adr_NIOL_asic_ctrl_irq_mask_set           0x000003ECU
#define DFLT_VAL_NIOL_asic_ctrl_irq_mask_set      0x00000000U

#define MSK_NIOL_asic_ctrl_irq_mask_set_vdd_iol_uv         0x00000001U
#define SRT_NIOL_asic_ctrl_irq_mask_set_vdd_iol_uv         0
#define DFLT_VAL_NIOL_asic_ctrl_irq_mask_set_vdd_iol_uv    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_irq_mask_set_vdd_iol_uv 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_irq_mask_set': */
#define MSK_USED_BITS_NIOL_asic_ctrl_irq_mask_set 0x00000001U

enum {
  BFW_NIOL_asic_ctrl_irq_mask_set_vdd_iol_uv = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_irq_mask_set_reserved1  = 31  /* [31:1] */
};

typedef struct NIOL_ASIC_CTRL_IRQ_MASK_SET_BIT_Ttag {
  unsigned int vdd_iol_uv : BFW_NIOL_asic_ctrl_irq_mask_set_vdd_iol_uv; /* STATUS / EVENT type and functionality depending on ASIC_CTRL_VDD_IOL_UV.irq_mode */
  unsigned int reserved1  : BFW_NIOL_asic_ctrl_irq_mask_set_reserved1;  /* reserved                                                                         */
} NIOL_ASIC_CTRL_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_ASIC_CTRL_IRQ_MASK_SET_BIT_T bf;
} NIOL_ASIC_CTRL_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_mask_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_irq_mask_reset       0x00000070U
#define Adr_NIOL_asic_ctrl_asic_ctrl_irq_mask_reset 0x000003F0U
#define Adr_NIOL_asic_ctrl_irq_mask_reset           0x000003F0U
#define DFLT_VAL_NIOL_asic_ctrl_irq_mask_reset      0x00000000U

#define MSK_NIOL_asic_ctrl_irq_mask_reset_vdd_iol_uv         0x00000001U
#define SRT_NIOL_asic_ctrl_irq_mask_reset_vdd_iol_uv         0
#define DFLT_VAL_NIOL_asic_ctrl_irq_mask_reset_vdd_iol_uv    0x00000000U
#define DFLT_BF_VAL_NIOL_asic_ctrl_irq_mask_reset_vdd_iol_uv 0x00000000U

/* all used bits of 'NIOL_asic_ctrl_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_asic_ctrl_irq_mask_reset 0x00000001U

enum {
  BFW_NIOL_asic_ctrl_irq_mask_reset_vdd_iol_uv = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_irq_mask_reset_reserved1  = 31  /* [31:1] */
};

typedef struct NIOL_ASIC_CTRL_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int vdd_iol_uv : BFW_NIOL_asic_ctrl_irq_mask_reset_vdd_iol_uv; /* STATUS / EVENT type and functionality depending on ASIC_CTRL_VDD_IOL_UV.irq_mode */
  unsigned int reserved1  : BFW_NIOL_asic_ctrl_irq_mask_reset_reserved1;  /* reserved                                                                         */
} NIOL_ASIC_CTRL_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                            val;
  NIOL_ASIC_CTRL_IRQ_MASK_RESET_BIT_T bf;
} NIOL_ASIC_CTRL_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_masked */
/* => Masked IRQs: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_irq_masked       0x00000074U
#define Adr_NIOL_asic_ctrl_asic_ctrl_irq_masked 0x000003F4U
#define Adr_NIOL_asic_ctrl_irq_masked           0x000003F4U

#define MSK_NIOL_asic_ctrl_irq_masked_vdd_iol_uv 0x00000001U
#define SRT_NIOL_asic_ctrl_irq_masked_vdd_iol_uv 0

/* all used bits of 'NIOL_asic_ctrl_irq_masked': */
#define MSK_USED_BITS_NIOL_asic_ctrl_irq_masked 0x00000001U

enum {
  BFW_NIOL_asic_ctrl_irq_masked_vdd_iol_uv = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_irq_masked_reserved1  = 31  /* [31:1] */
};

typedef struct NIOL_ASIC_CTRL_IRQ_MASKED_BIT_Ttag {
  unsigned int vdd_iol_uv : BFW_NIOL_asic_ctrl_irq_masked_vdd_iol_uv; /* STATUS / EVENT type and functionality depending on ASIC_CTRL_VDD_IOL_UV.irq_mode */
  unsigned int reserved1  : BFW_NIOL_asic_ctrl_irq_masked_reserved1;  /* reserved                                                                         */
} NIOL_ASIC_CTRL_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_ASIC_CTRL_IRQ_MASKED_BIT_T bf;
} NIOL_ASIC_CTRL_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_no */
/* => Lowest active interrupt: */
/*    Shows the highest prior active IRQ (= lowest IRQ number). */
/*    When no IRQ is pending the number of the highest IRQ plus one is returned. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_asic_ctrl_irq_no       0x00000078U
#define Adr_NIOL_asic_ctrl_asic_ctrl_irq_no 0x000003F8U
#define Adr_NIOL_asic_ctrl_irq_no           0x000003F8U

#define MSK_NIOL_asic_ctrl_irq_no_val 0x00000001U
#define SRT_NIOL_asic_ctrl_irq_no_val 0

/* all used bits of 'NIOL_asic_ctrl_irq_no': */
#define MSK_USED_BITS_NIOL_asic_ctrl_irq_no 0x00000001U

enum {
  BFW_NIOL_asic_ctrl_irq_no_val       = 1,  /* [0] */
  BFW_NIOL_asic_ctrl_irq_no_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_ASIC_CTRL_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_asic_ctrl_irq_no_val;       /* Number of the pending IRQ */
  unsigned int reserved1 : BFW_NIOL_asic_ctrl_irq_no_reserved1; /* reserved                  */
} NIOL_ASIC_CTRL_IRQ_NO_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_ASIC_CTRL_IRQ_NO_BIT_T bf;
} NIOL_ASIC_CTRL_IRQ_NO_T;


/* ===================================================================== */

/* Area of pad_ctrl */

/* ===================================================================== */

#define Addr_NIOL_pad_ctrl 0x00000400U

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_ai_a */
/* => Pad configuration register of port ai_a (password protected). */
/*    Pad type: DIO_AI */
/*    Programmable pad functions are: */
/*       ds:   Driving strength: 0: low driving strength (default), 1: high driving strength. */
/*       pe:   Pull enable: 0: No resistor is applied, 1: resistor is enabled. */
/*             The pull-direction (up or down) is determined by the pad-type or by the ps-function. */
/*       ps:   Pull select: 0: select pull-down, 1: select pull-up (only for pads supporting both */
/*             pull-directions in combination with pe). */
/*       ie:   Input enable: 0: Digital pad input function disabled, 1: input is enabled. */
/*    Note: */
/*       Not all functions are available for all pads, it depends on the pad type. */
/*       Functions not found as programmable bit in the register of a pad are not supported by the pad. */
/*    Note: */
/*       The default states are already applied during reset. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_ai_a      0x00000000U
#define Adr_NIOL_pad_ctrl_pad_ctrl_ai_a 0x00000400U
#define Adr_NIOL_pad_ctrl_ai_a          0x00000400U
#define DFLT_VAL_NIOL_pad_ctrl_ai_a     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_ai_a       0x0000fc00U
#define PW_BF_VAL_NIOL_pad_ctrl_ai_a    0x000000fcU

#define MSK_NIOL_pad_ctrl_ai_a_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_ai_a_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_ai_a_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_a_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_a_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_ai_a_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_ai_a_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_a_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_a_ps         0x00000020U
#define SRT_NIOL_pad_ctrl_ai_a_ps         5
#define DFLT_VAL_NIOL_pad_ctrl_ai_a_ps    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_a_ps 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_a_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_ai_a_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_ai_a_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_a_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_ai_a_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_ai_a_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_ai_a_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_a_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_ai_a': */
#define MSK_USED_BITS_NIOL_pad_ctrl_ai_a 0x0000ff71U

enum {
  BFW_NIOL_pad_ctrl_ai_a_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_ai_a_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_ai_a_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_ai_a_ps        = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_ai_a_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_ai_a_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_ai_a_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_ai_a_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_AI_A_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_ai_a_ds;        /* driving strength (low by default)                                                   */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_ai_a_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_ai_a_pe;        /* pull enable (pull-up/down pad, disabled by default)                                 */
  unsigned int ps        : BFW_NIOL_pad_ctrl_ai_a_ps;        /* pull select: 1: pull-up, 0: down if pull is enabled by pe, disabled by default)     */
  unsigned int ie        : BFW_NIOL_pad_ctrl_ai_a_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_ai_a_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_ai_a_pw;        /* Password: pw=0xfc must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_ai_a_reserved3; /* reserved                                                                            */
} NIOL_PAD_CTRL_AI_A_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_PAD_CTRL_AI_A_BIT_T bf;
} NIOL_PAD_CTRL_AI_A_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_ai_b */
/* => Pad configuration register of port ai_b (password protected). */
/*    Pad type: DIO_AI */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_ai_b      0x00000004U
#define Adr_NIOL_pad_ctrl_pad_ctrl_ai_b 0x00000404U
#define Adr_NIOL_pad_ctrl_ai_b          0x00000404U
#define DFLT_VAL_NIOL_pad_ctrl_ai_b     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_ai_b       0x0000e700U
#define PW_BF_VAL_NIOL_pad_ctrl_ai_b    0x000000e7U

#define MSK_NIOL_pad_ctrl_ai_b_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_ai_b_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_ai_b_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_b_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_b_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_ai_b_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_ai_b_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_b_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_b_ps         0x00000020U
#define SRT_NIOL_pad_ctrl_ai_b_ps         5
#define DFLT_VAL_NIOL_pad_ctrl_ai_b_ps    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_b_ps 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_b_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_ai_b_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_ai_b_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_b_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_ai_b_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_ai_b_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_ai_b_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_b_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_ai_b': */
#define MSK_USED_BITS_NIOL_pad_ctrl_ai_b 0x0000ff71U

enum {
  BFW_NIOL_pad_ctrl_ai_b_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_ai_b_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_ai_b_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_ai_b_ps        = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_ai_b_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_ai_b_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_ai_b_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_ai_b_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_AI_B_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_ai_b_ds;        /* driving strength (low by default)                                                   */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_ai_b_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_ai_b_pe;        /* pull enable (pull-up/down pad, disabled by default)                                 */
  unsigned int ps        : BFW_NIOL_pad_ctrl_ai_b_ps;        /* pull select: 1: pull-up, 0: down if pull is enabled by pe, disabled by default)     */
  unsigned int ie        : BFW_NIOL_pad_ctrl_ai_b_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_ai_b_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_ai_b_pw;        /* Password: pw=0xe7 must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_ai_b_reserved3; /* reserved                                                                            */
} NIOL_PAD_CTRL_AI_B_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_PAD_CTRL_AI_B_BIT_T bf;
} NIOL_PAD_CTRL_AI_B_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_ai_c */
/* => Pad configuration register of port ai_c (password protected). */
/*    Pad type: DIO_AI */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_ai_c      0x00000008U
#define Adr_NIOL_pad_ctrl_pad_ctrl_ai_c 0x00000408U
#define Adr_NIOL_pad_ctrl_ai_c          0x00000408U
#define DFLT_VAL_NIOL_pad_ctrl_ai_c     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_ai_c       0x0000ee00U
#define PW_BF_VAL_NIOL_pad_ctrl_ai_c    0x000000eeU

#define MSK_NIOL_pad_ctrl_ai_c_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_ai_c_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_ai_c_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_c_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_c_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_ai_c_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_ai_c_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_c_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_c_ps         0x00000020U
#define SRT_NIOL_pad_ctrl_ai_c_ps         5
#define DFLT_VAL_NIOL_pad_ctrl_ai_c_ps    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_c_ps 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_c_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_ai_c_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_ai_c_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_c_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_ai_c_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_ai_c_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_ai_c_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_c_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_ai_c': */
#define MSK_USED_BITS_NIOL_pad_ctrl_ai_c 0x0000ff71U

enum {
  BFW_NIOL_pad_ctrl_ai_c_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_ai_c_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_ai_c_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_ai_c_ps        = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_ai_c_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_ai_c_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_ai_c_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_ai_c_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_AI_C_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_ai_c_ds;        /* driving strength (low by default)                                                   */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_ai_c_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_ai_c_pe;        /* pull enable (pull-up/down pad, disabled by default)                                 */
  unsigned int ps        : BFW_NIOL_pad_ctrl_ai_c_ps;        /* pull select: 1: pull-up, 0: down if pull is enabled by pe, disabled by default)     */
  unsigned int ie        : BFW_NIOL_pad_ctrl_ai_c_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_ai_c_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_ai_c_pw;        /* Password: pw=0xee must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_ai_c_reserved3; /* reserved                                                                            */
} NIOL_PAD_CTRL_AI_C_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_PAD_CTRL_AI_C_BIT_T bf;
} NIOL_PAD_CTRL_AI_C_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_ai_d */
/* => Pad configuration register of port ai_d (password protected). */
/*    Pad type: DIO_AI */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_ai_d      0x0000000CU
#define Adr_NIOL_pad_ctrl_pad_ctrl_ai_d 0x0000040CU
#define Adr_NIOL_pad_ctrl_ai_d          0x0000040CU
#define DFLT_VAL_NIOL_pad_ctrl_ai_d     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_ai_d       0x0000d100U
#define PW_BF_VAL_NIOL_pad_ctrl_ai_d    0x000000d1U

#define MSK_NIOL_pad_ctrl_ai_d_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_ai_d_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_ai_d_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_d_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_d_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_ai_d_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_ai_d_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_d_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_d_ps         0x00000020U
#define SRT_NIOL_pad_ctrl_ai_d_ps         5
#define DFLT_VAL_NIOL_pad_ctrl_ai_d_ps    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_d_ps 0x00000000U
#define MSK_NIOL_pad_ctrl_ai_d_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_ai_d_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_ai_d_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_d_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_ai_d_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_ai_d_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_ai_d_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_ai_d_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_ai_d': */
#define MSK_USED_BITS_NIOL_pad_ctrl_ai_d 0x0000ff71U

enum {
  BFW_NIOL_pad_ctrl_ai_d_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_ai_d_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_ai_d_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_ai_d_ps        = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_ai_d_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_ai_d_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_ai_d_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_ai_d_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_AI_D_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_ai_d_ds;        /* driving strength (low by default)                                                   */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_ai_d_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_ai_d_pe;        /* pull enable (pull-up/down pad, disabled by default)                                 */
  unsigned int ps        : BFW_NIOL_pad_ctrl_ai_d_ps;        /* pull select: 1: pull-up, 0: down if pull is enabled by pe, disabled by default)     */
  unsigned int ie        : BFW_NIOL_pad_ctrl_ai_d_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_ai_d_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_ai_d_pw;        /* Password: pw=0xd1 must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_ai_d_reserved3; /* reserved                                                                            */
} NIOL_PAD_CTRL_AI_D_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_PAD_CTRL_AI_D_BIT_T bf;
} NIOL_PAD_CTRL_AI_D_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_r0 */
/* => Pad configuration register of port led_r0 (password protected). */
/*    Pad type: DIO_R */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_r0      0x00000010U
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_r0 0x00000410U
#define Adr_NIOL_pad_ctrl_led_r0          0x00000410U
#define DFLT_VAL_NIOL_pad_ctrl_led_r0     0x00000050U
#define PW_VAL_NIOL_pad_ctrl_led_r0       0x00001f00U
#define PW_BF_VAL_NIOL_pad_ctrl_led_r0    0x0000001fU

#define MSK_NIOL_pad_ctrl_led_r0_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_led_r0_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_led_r0_pe    0x00000010U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r0_pe 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r0_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_r0_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_r0_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r0_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r0_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_r0_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_r0_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r0_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_r0': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_r0 0x0000ff50U

enum {
  BFW_NIOL_pad_ctrl_led_r0_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_pad_ctrl_led_r0_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_led_r0_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_led_r0_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_r0_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_r0_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_r0_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_R0_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_r0_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_led_r0_pe;        /* pull enable (pull-up pad, enabled by default)                                       */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_r0_reserved2; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_r0_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_r0_reserved3; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_r0_pw;        /* Password: pw=0x1f must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_led_r0_reserved4; /* reserved                                                                            */
} NIOL_PAD_CTRL_LED_R0_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_R0_BIT_T bf;
} NIOL_PAD_CTRL_LED_R0_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_r1 */
/* => Pad configuration register of port led_r1 (password protected). */
/*    Pad type: DIO_R */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_r1      0x00000014U
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_r1 0x00000414U
#define Adr_NIOL_pad_ctrl_led_r1          0x00000414U
#define DFLT_VAL_NIOL_pad_ctrl_led_r1     0x00000050U
#define PW_VAL_NIOL_pad_ctrl_led_r1       0x00006b00U
#define PW_BF_VAL_NIOL_pad_ctrl_led_r1    0x0000006bU

#define MSK_NIOL_pad_ctrl_led_r1_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_led_r1_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_led_r1_pe    0x00000010U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r1_pe 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r1_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_r1_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_r1_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r1_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r1_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_r1_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_r1_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r1_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_r1': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_r1 0x0000ff50U

enum {
  BFW_NIOL_pad_ctrl_led_r1_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_pad_ctrl_led_r1_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_led_r1_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_led_r1_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_r1_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_r1_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_r1_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_R1_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_r1_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_led_r1_pe;        /* pull enable (pull-up pad, enabled by default)                                       */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_r1_reserved2; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_r1_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_r1_reserved3; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_r1_pw;        /* Password: pw=0x6b must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_led_r1_reserved4; /* reserved                                                                            */
} NIOL_PAD_CTRL_LED_R1_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_R1_BIT_T bf;
} NIOL_PAD_CTRL_LED_R1_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_r2 */
/* => Pad configuration register of port led_r2 (password protected). */
/*    Pad type: DIO_R */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_r2      0x00000018U
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_r2 0x00000418U
#define Adr_NIOL_pad_ctrl_led_r2          0x00000418U
#define DFLT_VAL_NIOL_pad_ctrl_led_r2     0x00000050U
#define PW_VAL_NIOL_pad_ctrl_led_r2       0x0000f700U
#define PW_BF_VAL_NIOL_pad_ctrl_led_r2    0x000000f7U

#define MSK_NIOL_pad_ctrl_led_r2_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_led_r2_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_led_r2_pe    0x00000010U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r2_pe 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r2_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_r2_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_r2_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r2_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r2_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_r2_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_r2_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r2_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_r2': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_r2 0x0000ff50U

enum {
  BFW_NIOL_pad_ctrl_led_r2_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_pad_ctrl_led_r2_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_led_r2_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_led_r2_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_r2_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_r2_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_r2_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_R2_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_r2_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_led_r2_pe;        /* pull enable (pull-up pad, enabled by default)                                       */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_r2_reserved2; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_r2_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_r2_reserved3; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_r2_pw;        /* Password: pw=0xf7 must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_led_r2_reserved4; /* reserved                                                                            */
} NIOL_PAD_CTRL_LED_R2_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_R2_BIT_T bf;
} NIOL_PAD_CTRL_LED_R2_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_r3 */
/* => Pad configuration register of port led_r3 (password protected). */
/*    Pad type: DIO_R */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_r3      0x0000001CU
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_r3 0x0000041CU
#define Adr_NIOL_pad_ctrl_led_r3          0x0000041CU
#define DFLT_VAL_NIOL_pad_ctrl_led_r3     0x00000050U
#define PW_VAL_NIOL_pad_ctrl_led_r3       0x00008300U
#define PW_BF_VAL_NIOL_pad_ctrl_led_r3    0x00000083U

#define MSK_NIOL_pad_ctrl_led_r3_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_led_r3_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_led_r3_pe    0x00000010U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r3_pe 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r3_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_r3_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_r3_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r3_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_r3_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_r3_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_r3_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_r3_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_r3': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_r3 0x0000ff50U

enum {
  BFW_NIOL_pad_ctrl_led_r3_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_pad_ctrl_led_r3_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_led_r3_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_led_r3_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_r3_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_r3_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_r3_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_R3_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_r3_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_led_r3_pe;        /* pull enable (pull-up pad, enabled by default)                                       */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_r3_reserved2; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_r3_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_r3_reserved3; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_r3_pw;        /* Password: pw=0x83 must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_led_r3_reserved4; /* reserved                                                                            */
} NIOL_PAD_CTRL_LED_R3_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_R3_BIT_T bf;
} NIOL_PAD_CTRL_LED_R3_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_c0 */
/* => Pad configuration register of port led_c0 (password protected). */
/*    Pad type: DIO_C */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_c0      0x00000020U
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_c0 0x00000420U
#define Adr_NIOL_pad_ctrl_led_c0          0x00000420U
#define DFLT_VAL_NIOL_pad_ctrl_led_c0     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_led_c0       0x00000f00U
#define PW_BF_VAL_NIOL_pad_ctrl_led_c0    0x0000000fU

#define MSK_NIOL_pad_ctrl_led_c0_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_c0_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_c0_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_c0_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_c0_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_c0_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_c0_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_c0_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_c0': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_c0 0x0000ff40U

enum {
  BFW_NIOL_pad_ctrl_led_c0_reserved1 = 6,  /* [5:0] */
  BFW_NIOL_pad_ctrl_led_c0_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_c0_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_c0_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_c0_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_C0_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_c0_reserved1; /* reserved                                                                           */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_c0_ie;        /* input enable (enabled by default)                                                  */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_c0_reserved2; /* reserved                                                                           */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_c0_pw;        /* Password: pw=0xf must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_c0_reserved3; /* reserved                                                                           */
} NIOL_PAD_CTRL_LED_C0_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_C0_BIT_T bf;
} NIOL_PAD_CTRL_LED_C0_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_c1 */
/* => Pad configuration register of port led_c1 (password protected). */
/*    Pad type: DIO_C */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_c1      0x00000024U
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_c1 0x00000424U
#define Adr_NIOL_pad_ctrl_led_c1          0x00000424U
#define DFLT_VAL_NIOL_pad_ctrl_led_c1     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_led_c1       0x00007b00U
#define PW_BF_VAL_NIOL_pad_ctrl_led_c1    0x0000007bU

#define MSK_NIOL_pad_ctrl_led_c1_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_c1_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_c1_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_c1_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_c1_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_c1_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_c1_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_c1_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_c1': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_c1 0x0000ff40U

enum {
  BFW_NIOL_pad_ctrl_led_c1_reserved1 = 6,  /* [5:0] */
  BFW_NIOL_pad_ctrl_led_c1_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_c1_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_c1_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_c1_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_C1_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_c1_reserved1; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_c1_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_c1_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_c1_pw;        /* Password: pw=0x7b must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_c1_reserved3; /* reserved                                                                            */
} NIOL_PAD_CTRL_LED_C1_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_C1_BIT_T bf;
} NIOL_PAD_CTRL_LED_C1_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_led_c2 */
/* => Pad configuration register of port led_c2 (password protected). */
/*    Pad type: DIO_C */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_led_c2      0x00000028U
#define Adr_NIOL_pad_ctrl_pad_ctrl_led_c2 0x00000428U
#define Adr_NIOL_pad_ctrl_led_c2          0x00000428U
#define DFLT_VAL_NIOL_pad_ctrl_led_c2     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_led_c2       0x0000e700U
#define PW_BF_VAL_NIOL_pad_ctrl_led_c2    0x000000e7U

#define MSK_NIOL_pad_ctrl_led_c2_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_led_c2_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_led_c2_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_c2_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_led_c2_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_led_c2_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_led_c2_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_led_c2_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_led_c2': */
#define MSK_USED_BITS_NIOL_pad_ctrl_led_c2 0x0000ff40U

enum {
  BFW_NIOL_pad_ctrl_led_c2_reserved1 = 6,  /* [5:0] */
  BFW_NIOL_pad_ctrl_led_c2_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_led_c2_reserved2 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_led_c2_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_led_c2_reserved3 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_LED_C2_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_led_c2_reserved1; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_led_c2_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_led_c2_reserved2; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_led_c2_pw;        /* Password: pw=0xe7 must be written here to validate a write access to this register. */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_led_c2_reserved3; /* reserved                                                                            */
} NIOL_PAD_CTRL_LED_C2_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_PAD_CTRL_LED_C2_BIT_T bf;
} NIOL_PAD_CTRL_LED_C2_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sck */
/* => Pad configuration register of port sck (password protected). */
/*    Pad type: DIO */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_sck      0x0000002CU
#define Adr_NIOL_pad_ctrl_pad_ctrl_sck 0x0000042CU
#define Adr_NIOL_pad_ctrl_sck          0x0000042CU
#define DFLT_VAL_NIOL_pad_ctrl_sck     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_sck       0x00000b00U
#define PW_BF_VAL_NIOL_pad_ctrl_sck    0x0000000bU

#define MSK_NIOL_pad_ctrl_sck_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_sck_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_sck_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_sck_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_sck_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_sck_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_sck_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_sck_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_sck_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_sck_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_sck_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_sck_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_sck_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_sck_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_sck_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_sck_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_sck': */
#define MSK_USED_BITS_NIOL_pad_ctrl_sck 0x0000ff51U

enum {
  BFW_NIOL_pad_ctrl_sck_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_sck_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_sck_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_sck_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_sck_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_sck_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_sck_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_sck_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_SCK_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_sck_ds;        /* driving strength (low by default)                                                  */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_sck_reserved1; /* reserved                                                                           */
  unsigned int pe        : BFW_NIOL_pad_ctrl_sck_pe;        /* pull enable (pull-down pad, disabled by default)                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_sck_reserved2; /* reserved                                                                           */
  unsigned int ie        : BFW_NIOL_pad_ctrl_sck_ie;        /* input enable (enabled by default)                                                  */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_sck_reserved3; /* reserved                                                                           */
  unsigned int pw        : BFW_NIOL_pad_ctrl_sck_pw;        /* Password: pw=0xb must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_sck_reserved4; /* reserved                                                                           */
} NIOL_PAD_CTRL_SCK_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_PAD_CTRL_SCK_BIT_T bf;
} NIOL_PAD_CTRL_SCK_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_miso */
/* => Pad configuration register of port miso (password protected). */
/*    Pad type: DIO_8_16 */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_miso      0x00000030U
#define Adr_NIOL_pad_ctrl_pad_ctrl_miso 0x00000430U
#define Adr_NIOL_pad_ctrl_miso          0x00000430U
#define DFLT_VAL_NIOL_pad_ctrl_miso     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_miso       0x00000700U
#define PW_BF_VAL_NIOL_pad_ctrl_miso    0x00000007U

#define MSK_NIOL_pad_ctrl_miso_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_miso_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_miso_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_miso_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_miso_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_miso_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_miso_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_miso_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_miso_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_miso_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_miso_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_miso_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_miso_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_miso_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_miso_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_miso_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_miso': */
#define MSK_USED_BITS_NIOL_pad_ctrl_miso 0x0000ff51U

enum {
  BFW_NIOL_pad_ctrl_miso_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_miso_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_miso_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_miso_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_miso_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_miso_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_miso_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_miso_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_MISO_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_miso_ds;        /* driving strength (low by default)                                                  */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_miso_reserved1; /* reserved                                                                           */
  unsigned int pe        : BFW_NIOL_pad_ctrl_miso_pe;        /* pull enable (pull-down pad, disabled by default)                                   */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_miso_reserved2; /* reserved                                                                           */
  unsigned int ie        : BFW_NIOL_pad_ctrl_miso_ie;        /* input enable (enabled by default)                                                  */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_miso_reserved3; /* reserved                                                                           */
  unsigned int pw        : BFW_NIOL_pad_ctrl_miso_pw;        /* Password: pw=0x7 must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_miso_reserved4; /* reserved                                                                           */
} NIOL_PAD_CTRL_MISO_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_PAD_CTRL_MISO_BIT_T bf;
} NIOL_PAD_CTRL_MISO_T;

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mosi */
/* => Pad configuration register of port mosi (password protected). */
/*    Pad type: DIO */
/*    For details refer to description of register pad_ctrl_ai_a. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pad_ctrl_mosi      0x00000034U
#define Adr_NIOL_pad_ctrl_pad_ctrl_mosi 0x00000434U
#define Adr_NIOL_pad_ctrl_mosi          0x00000434U
#define DFLT_VAL_NIOL_pad_ctrl_mosi     0x00000040U
#define PW_VAL_NIOL_pad_ctrl_mosi       0x00002500U
#define PW_BF_VAL_NIOL_pad_ctrl_mosi    0x00000025U

#define MSK_NIOL_pad_ctrl_mosi_ds         0x00000001U
#define SRT_NIOL_pad_ctrl_mosi_ds         0
#define DFLT_VAL_NIOL_pad_ctrl_mosi_ds    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_mosi_ds 0x00000000U
#define MSK_NIOL_pad_ctrl_mosi_pe         0x00000010U
#define SRT_NIOL_pad_ctrl_mosi_pe         4
#define DFLT_VAL_NIOL_pad_ctrl_mosi_pe    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_mosi_pe 0x00000000U
#define MSK_NIOL_pad_ctrl_mosi_ie         0x00000040U
#define SRT_NIOL_pad_ctrl_mosi_ie         6
#define DFLT_VAL_NIOL_pad_ctrl_mosi_ie    0x00000040U
#define DFLT_BF_VAL_NIOL_pad_ctrl_mosi_ie 0x00000001U
#define MSK_NIOL_pad_ctrl_mosi_pw         0x0000ff00U
#define SRT_NIOL_pad_ctrl_mosi_pw         8
#define DFLT_VAL_NIOL_pad_ctrl_mosi_pw    0x00000000U
#define DFLT_BF_VAL_NIOL_pad_ctrl_mosi_pw 0x00000000U

/* all used bits of 'NIOL_pad_ctrl_mosi': */
#define MSK_USED_BITS_NIOL_pad_ctrl_mosi 0x0000ff51U

enum {
  BFW_NIOL_pad_ctrl_mosi_ds        = 1,  /* [0] */
  BFW_NIOL_pad_ctrl_mosi_reserved1 = 3,  /* [3:1] */
  BFW_NIOL_pad_ctrl_mosi_pe        = 1,  /* [4] */
  BFW_NIOL_pad_ctrl_mosi_reserved2 = 1,  /* [5] */
  BFW_NIOL_pad_ctrl_mosi_ie        = 1,  /* [6] */
  BFW_NIOL_pad_ctrl_mosi_reserved3 = 1,  /* [7] */
  BFW_NIOL_pad_ctrl_mosi_pw        = 8,  /* [15:8] */
  BFW_NIOL_pad_ctrl_mosi_reserved4 = 16  /* [31:16] */
};

typedef struct NIOL_PAD_CTRL_MOSI_BIT_Ttag {
  unsigned int ds        : BFW_NIOL_pad_ctrl_mosi_ds;        /* driving strength (low by default)                                                   */
  unsigned int reserved1 : BFW_NIOL_pad_ctrl_mosi_reserved1; /* reserved                                                                            */
  unsigned int pe        : BFW_NIOL_pad_ctrl_mosi_pe;        /* pull enable (pull-down pad, disabled by default)                                    */
  unsigned int reserved2 : BFW_NIOL_pad_ctrl_mosi_reserved2; /* reserved                                                                            */
  unsigned int ie        : BFW_NIOL_pad_ctrl_mosi_ie;        /* input enable (enabled by default)                                                   */
  unsigned int reserved3 : BFW_NIOL_pad_ctrl_mosi_reserved3; /* reserved                                                                            */
  unsigned int pw        : BFW_NIOL_pad_ctrl_mosi_pw;        /* Password: pw=0x25 must be written here to validate a write access to this register. */
  unsigned int reserved4 : BFW_NIOL_pad_ctrl_mosi_reserved4; /* reserved                                                                            */
} NIOL_PAD_CTRL_MOSI_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_PAD_CTRL_MOSI_BIT_T bf;
} NIOL_PAD_CTRL_MOSI_T;


/* ===================================================================== */

/* Area of spi */

/* ===================================================================== */

#define Addr_NIOL_spi 0x00000440U

/* --------------------------------------------------------------------- */
/* Register spi_cr0 */
/* => SPI control register 0 */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_cr0  0x00000000U
#define Adr_NIOL_spi_spi_cr0  0x00000440U
#define Adr_NIOL_spi_cr0      0x00000440U
#define DFLT_VAL_NIOL_spi_cr0 0x80080007U

#define MSK_NIOL_spi_cr0_datasize                0x0000000fU
#define SRT_NIOL_spi_cr0_datasize                0
#define DFLT_VAL_NIOL_spi_cr0_datasize           0x00000007U
#define DFLT_BF_VAL_NIOL_spi_cr0_datasize        0x00000007U
#define MSK_NIOL_spi_cr0_SPO                     0x00000040U
#define SRT_NIOL_spi_cr0_SPO                     6
#define DFLT_VAL_NIOL_spi_cr0_SPO                0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr0_SPO             0x00000000U
#define MSK_NIOL_spi_cr0_SPH                     0x00000080U
#define SRT_NIOL_spi_cr0_SPH                     7
#define DFLT_VAL_NIOL_spi_cr0_SPH                0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr0_SPH             0x00000000U
#define MSK_NIOL_spi_cr0_sck_muladd              0x000fff00U
#define SRT_NIOL_spi_cr0_sck_muladd              8
#define DFLT_VAL_NIOL_spi_cr0_sck_muladd         0x00080000U
#define DFLT_BF_VAL_NIOL_spi_cr0_sck_muladd      0x00000800U
#define MSK_NIOL_spi_cr0_format                  0x03000000U
#define SRT_NIOL_spi_cr0_format                  24
#define DFLT_VAL_NIOL_spi_cr0_format             0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr0_format          0x00000000U
#define MSK_NIOL_spi_cr0_filter_in               0x08000000U
#define SRT_NIOL_spi_cr0_filter_in               27
#define DFLT_VAL_NIOL_spi_cr0_filter_in          0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr0_filter_in       0x00000000U
#define MSK_NIOL_spi_cr0_slave_sig_early         0x10000000U
#define SRT_NIOL_spi_cr0_slave_sig_early         28
#define DFLT_VAL_NIOL_spi_cr0_slave_sig_early    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr0_slave_sig_early 0x00000000U
#define MSK_NIOL_spi_cr0_netx100_comp            0x80000000U
#define SRT_NIOL_spi_cr0_netx100_comp            31
#define DFLT_VAL_NIOL_spi_cr0_netx100_comp       0x80000000U
#define DFLT_BF_VAL_NIOL_spi_cr0_netx100_comp    0x00000001U

/* all used bits of 'NIOL_spi_cr0': */
#define MSK_USED_BITS_NIOL_spi_cr0 0x9b0fffcfU

enum {
  BFW_NIOL_spi_cr0_datasize        = 4,  /* [3:0] */
  BFW_NIOL_spi_cr0_reserved1       = 2,  /* [5:4] */
  BFW_NIOL_spi_cr0_SPO             = 1,  /* [6] */
  BFW_NIOL_spi_cr0_SPH             = 1,  /* [7] */
  BFW_NIOL_spi_cr0_sck_muladd      = 12, /* [19:8] */
  BFW_NIOL_spi_cr0_reserved2       = 4,  /* [23:20] */
  BFW_NIOL_spi_cr0_format          = 2,  /* [25:24] */
  BFW_NIOL_spi_cr0_reserved3       = 1,  /* [26] */
  BFW_NIOL_spi_cr0_filter_in       = 1,  /* [27] */
  BFW_NIOL_spi_cr0_slave_sig_early = 1,  /* [28] */
  BFW_NIOL_spi_cr0_reserved4       = 2,  /* [30:29] */
  BFW_NIOL_spi_cr0_netx100_comp    = 1   /* [31] */
};

typedef struct NIOL_SPI_CR0_BIT_Ttag {
  unsigned int datasize        : BFW_NIOL_spi_cr0_datasize;        /* DSS: data size select (transfer size = datasize + 1 bits):                                                              */
                                                                   /* {            |                                                                                                          */
                                                                   /* 0000...0010: reserved                                                                                                   */
                                                                   /* 0011:        4 bit                                                                                                      */
                                                                   /* 0100:        5 bit                                                                                                      */
                                                                   /* ...                                                                                                                     */
                                                                   /* 0111:        8 bit                                                                                                      */
                                                                   /* ...                                                                                                                     */
                                                                   /* 1111:        16 bit }                                                                                                   */
                                                                   /* Note: 16 bit TX-data-loss bug of netX50/netX5 is fixed since netX10.                                                    */
  unsigned int reserved1       : BFW_NIOL_spi_cr0_reserved1;       /* reserved                                                                                                                */
  unsigned int SPO             : BFW_NIOL_spi_cr0_SPO;             /* Serial clock polarity (netx500: CR_cpol):                                                                               */
                                                                   /* 0: idle: clock is low, first edge is rising                                                                             */
                                                                   /* 1: idle: clock is high, first edge is falling                                                                           */
  unsigned int SPH             : BFW_NIOL_spi_cr0_SPH;             /* Serial clock phase (netx500: CR_ncpha):                                                                                 */
                                                                   /* 1: sample data at second clock edge, data is generated half a clock phase before sampling                               */
                                                                   /* 0: sample data at first clock edge, data is generated half a clock phase before sampling                                */
  unsigned int sck_muladd      : BFW_NIOL_spi_cr0_sck_muladd;      /* Serial clock rate multiply add value for master SCK generation.                                                         */
                                                                   /* The SPI clock frequency is: f_spi_sck = (sck_muladd * 100)/4096 [MHz].                                                  */
                                                                   /* Default value 0x800 equals 50MHz SPI clock rate.                                                                        */
                                                                   /* All serial clock rates are derived from 100MHz netX system clock. Hence, all serial clock phases are multiples          */
                                                                   /* of 10ns. This leads to non-constant serial clock phases when a clock rate is programmed which cannot be generated       */
                                                                   /* by 100MHz/(2*n) without remainder. E.g. programming 0x4CC here will lead to a mean clock-rate of 30MHz. However,        */
                                                                   /* single clock high and low phases of 10ns and clock periods of 30ns will occur. This must be considered for              */
                                                                   /* serial device selection. E.g. using a 30MHz device which requires 33ns minimum clock period and a duty cycle            */
                                                                   /* of 50% will fail.                                                                                                       */
                                                                   /* Note: If sck_muladd is set to zero, SPI transfer will freeze.                                                           */
                                                                   /* The SPI clock must not exceed (system frequency/4) in slave mode, if correct data sampling should always be guaranteed. */
                                                                   /* Note: The value programmed here has no impact in slave mode.                                                            */
  unsigned int reserved2       : BFW_NIOL_spi_cr0_reserved2;       /* reserved                                                                                                                */
  unsigned int format          : BFW_NIOL_spi_cr0_format;          /* Frame format:                                                                                                           */
                                                                   /* 00:     Motorola SPI frame format                                                                                       */
                                                                   /* 01..11: reserved                                                                                                        */
  unsigned int reserved3       : BFW_NIOL_spi_cr0_reserved3;       /* reserved                                                                                                                */
  unsigned int filter_in       : BFW_NIOL_spi_cr0_filter_in;       /* Receive data is sampled every 10ns (100MHz system clock). If this bit is set, the                                       */
                                                                   /* stored receive value will be the result of a majority decision of the three sampling points                             */
                                                                   /* around a SPI-clock edge (if two or more '1s! were sampled a '1' will be stored, else a '0' will                         */
                                                                   /* be stored. In slave mode chip-select and SCK edges will also be detected by oversampling if this bit is set:            */
                                                                   /* An edge will be detected if the majority-result of 3 subsequent sampled values toggles.                                 */
                                                                   /* Input filtering should be used for sck_muladd<=0x200 (i.e. below 12.5MHz). Stable signal phases are too                 */
                                                                   /* short with higher frequencies and input filtering cannot be used.                                                       */
  unsigned int slave_sig_early : BFW_NIOL_spi_cr0_slave_sig_early; /* Generate MISO in slave mode 1 SCK clock edge earlier than defined in the SPI specification.                             */
                                                                   /* This is to compensate pad or sampling delays on fast data rates. However, hold timing problems could                    */
                                                                   /* come up as MISO is generated very fast after the sampling SPI clock edge.                                               */
                                                                   /* If filter_in is enabled, it takes at least 3 system clocks to generate MISO after SCK.                                  */
                                                                   /* If filter_in is disabled, it takes at least 2 system clocks to generate MISO after SCK.                                 */
  unsigned int reserved4       : BFW_NIOL_spi_cr0_reserved4;       /* reserved                                                                                                                */
  unsigned int netx100_comp    : BFW_NIOL_spi_cr0_netx100_comp;    /* Use netx100/500-compatible SPI mode:                                                                                    */
                                                                   /* 0: start transfer after writing data                                                                                    */
                                                                   /* 1: start transfer after setting CR_write or CR_read                                                                     */
} NIOL_SPI_CR0_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_SPI_CR0_BIT_T bf;
} NIOL_SPI_CR0_T;

/* --------------------------------------------------------------------- */
/* Register spi_cr1 */
/* => SPI control register 1 */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_cr1  0x00000004U
#define Adr_NIOL_spi_spi_cr1  0x00000444U
#define Adr_NIOL_spi_cr1      0x00000444U
#define DFLT_VAL_NIOL_spi_cr1 0x08080000U

#define MSK_NIOL_spi_cr1_LBM                 0x00000001U
#define SRT_NIOL_spi_cr1_LBM                 0
#define DFLT_VAL_NIOL_spi_cr1_LBM            0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_LBM         0x00000000U
#define MSK_NIOL_spi_cr1_SSE                 0x00000002U
#define SRT_NIOL_spi_cr1_SSE                 1
#define DFLT_VAL_NIOL_spi_cr1_SSE            0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_SSE         0x00000000U
#define MSK_NIOL_spi_cr1_MS                  0x00000004U
#define SRT_NIOL_spi_cr1_MS                  2
#define DFLT_VAL_NIOL_spi_cr1_MS             0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_MS          0x00000000U
#define MSK_NIOL_spi_cr1_SOD                 0x00000008U
#define SRT_NIOL_spi_cr1_SOD                 3
#define DFLT_VAL_NIOL_spi_cr1_SOD            0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_SOD         0x00000000U
#define MSK_NIOL_spi_cr1_fss                 0x00000700U
#define SRT_NIOL_spi_cr1_fss                 8
#define DFLT_VAL_NIOL_spi_cr1_fss            0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_fss         0x00000000U
#define MSK_NIOL_spi_cr1_fss_static          0x00000800U
#define SRT_NIOL_spi_cr1_fss_static          11
#define DFLT_VAL_NIOL_spi_cr1_fss_static     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_fss_static  0x00000000U
#define MSK_NIOL_spi_cr1_tx_fifo_wm          0x000f0000U
#define SRT_NIOL_spi_cr1_tx_fifo_wm          16
#define DFLT_VAL_NIOL_spi_cr1_tx_fifo_wm     0x00080000U
#define DFLT_BF_VAL_NIOL_spi_cr1_tx_fifo_wm  0x00000008U
#define MSK_NIOL_spi_cr1_tx_fifo_clr         0x00100000U
#define SRT_NIOL_spi_cr1_tx_fifo_clr         20
#define DFLT_VAL_NIOL_spi_cr1_tx_fifo_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_tx_fifo_clr 0x00000000U
#define MSK_NIOL_spi_cr1_rx_fifo_wm          0x0f000000U
#define SRT_NIOL_spi_cr1_rx_fifo_wm          24
#define DFLT_VAL_NIOL_spi_cr1_rx_fifo_wm     0x08000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_rx_fifo_wm  0x00000008U
#define MSK_NIOL_spi_cr1_rx_fifo_clr         0x10000000U
#define SRT_NIOL_spi_cr1_rx_fifo_clr         28
#define DFLT_VAL_NIOL_spi_cr1_rx_fifo_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_cr1_rx_fifo_clr 0x00000000U

/* all used bits of 'NIOL_spi_cr1': */
#define MSK_USED_BITS_NIOL_spi_cr1 0x1f1f0f0fU

enum {
  BFW_NIOL_spi_cr1_LBM         = 1, /* [0] */
  BFW_NIOL_spi_cr1_SSE         = 1, /* [1] */
  BFW_NIOL_spi_cr1_MS          = 1, /* [2] */
  BFW_NIOL_spi_cr1_SOD         = 1, /* [3] */
  BFW_NIOL_spi_cr1_reserved1   = 4, /* [7:4] */
  BFW_NIOL_spi_cr1_fss         = 3, /* [10:8] */
  BFW_NIOL_spi_cr1_fss_static  = 1, /* [11] */
  BFW_NIOL_spi_cr1_reserved2   = 4, /* [15:12] */
  BFW_NIOL_spi_cr1_tx_fifo_wm  = 4, /* [19:16] */
  BFW_NIOL_spi_cr1_tx_fifo_clr = 1, /* [20] */
  BFW_NIOL_spi_cr1_reserved3   = 3, /* [23:21] */
  BFW_NIOL_spi_cr1_rx_fifo_wm  = 4, /* [27:24] */
  BFW_NIOL_spi_cr1_rx_fifo_clr = 1, /* [28] */
  BFW_NIOL_spi_cr1_reserved4   = 3  /* [31:29] */
};

typedef struct NIOL_SPI_CR1_BIT_Ttag {
  unsigned int LBM         : BFW_NIOL_spi_cr1_LBM;         /* Loop back mode:                                                                                         */
                                                           /* 0: Internal loop back disabled                                                                          */
                                                           /* 1: Internal loop back enabled, spi_cr0.filter_in must be set for loopback function                      */
  unsigned int SSE         : BFW_NIOL_spi_cr1_SSE;         /* SPI enable:                                                                                             */
                                                           /* 0: Module disabled                                                                                      */
                                                           /* 1: Module enabled                                                                                       */
  unsigned int MS          : BFW_NIOL_spi_cr1_MS;          /* Mode select:                                                                                            */
                                                           /* 0: Module is configured as master                                                                       */
                                                           /* 1: Module is configured as slave                                                                        */
  unsigned int SOD         : BFW_NIOL_spi_cr1_SOD;         /* Slave mode output disable (to connect multiple slaves to one master):                                   */
                                                           /* 0: MISO can be driven in slave mode                                                                     */
                                                           /* 1: MISO is not driven in slave mode                                                                     */
  unsigned int reserved1   : BFW_NIOL_spi_cr1_reserved1;   /* reserved                                                                                                */
  unsigned int fss         : BFW_NIOL_spi_cr1_fss;         /* Frame or slave select.                                                                                  */
                                                           /* There are up to 3 external SPI chip-select signals.                                                     */
                                                           /* In master mode, the fss bits define the states of the chip-select signals.                              */
                                                           /* The inversion for low-active chip-selects (e.g. for Motorola SPI frame format) is done automatically    */
                                                           /* depending on the value programmed to the 'format' bits.                                                 */
                                                           /* Example: To use the netX IO CS1 as chip-select, program '010' here, regardless whether the external     */
                                                           /* chip-select is low or high active.                                                                      */
                                                           /* In slave mode, the fss bits are a mask to select which netX input should be used as chip-select.        */
                                                           /* Example: To use the netX IO CS0 as chip-select, program '001' here.                                     */
  unsigned int fss_static  : BFW_NIOL_spi_cr1_fss_static;  /* SPI static chip-select:                                                                                 */
                                                           /* {  |                                                                                                    */
                                                           /* 0: SPI chip-select will be toggled automatically before and after each transferred word                 */
                                                           /*     according to fss and datasize.                                                                      */
                                                           /* 1: SPI chip-select will be set statically according to the fss bits. }                                  */
  unsigned int reserved2   : BFW_NIOL_spi_cr1_reserved2;   /* reserved                                                                                                */
  unsigned int tx_fifo_wm  : BFW_NIOL_spi_cr1_tx_fifo_wm;  /* Transmit FIFO watermark for IRQ generation                                                              */
  unsigned int tx_fifo_clr : BFW_NIOL_spi_cr1_tx_fifo_clr; /* Writing "1" to this bit will clear the transmit FIFOs.                                                  */
                                                           /* Note: There must be at least 1 system clock idle after clear before writing new data to the             */
                                                           /* FIFO. This is guaranteed by the netX internal bus structure and needs not being considered by software. */
  unsigned int reserved3   : BFW_NIOL_spi_cr1_reserved3;   /* reserved                                                                                                */
  unsigned int rx_fifo_wm  : BFW_NIOL_spi_cr1_rx_fifo_wm;  /* Receive FIFO watermark for IRQ generation                                                               */
  unsigned int rx_fifo_clr : BFW_NIOL_spi_cr1_rx_fifo_clr; /* Writing "1" to this bit will clear the receive FIFOs.                                                   */
  unsigned int reserved4   : BFW_NIOL_spi_cr1_reserved4;   /* reserved                                                                                                */
} NIOL_SPI_CR1_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_SPI_CR1_BIT_T bf;
} NIOL_SPI_CR1_T;

/* --------------------------------------------------------------------- */
/* Register spi_dr */
/* => SPI data register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    The SPI module has 2 FIFOs: One for transmit data and one for receive data. */
/*    Read access: Received data byte is delivered from receive FIFO. */
/*    Write access: Transmit data byte is written to send FIFO. */
/*    Both FIFOs (receive and transmit) have a depth of 16. */
/*    SPI master mode: MISO input data will be stored in the receive FIFO; transmit FIFO generates MOSI output data. */
/*    SPI slave mode: MOSI input data will be stored in the receive FIFO; transmit FIFO generates MISO output data. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_dr  0x00000008U
#define Adr_NIOL_spi_spi_dr  0x00000448U
#define Adr_NIOL_spi_dr      0x00000448U
#define DFLT_VAL_NIOL_spi_dr 0x00000000U

#define MSK_NIOL_spi_dr_data         0x0001ffffU
#define SRT_NIOL_spi_dr_data         0
#define DFLT_VAL_NIOL_spi_dr_data    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_dr_data 0x00000000U

/* all used bits of 'NIOL_spi_dr': */
#define MSK_USED_BITS_NIOL_spi_dr 0x0001ffffU

enum {
  BFW_NIOL_spi_dr_data      = 17, /* [16:0] */
  BFW_NIOL_spi_dr_reserved1 = 15  /* [31:17] */
};

typedef struct NIOL_SPI_DR_BIT_Ttag {
  unsigned int data      : BFW_NIOL_spi_dr_data;      /* Transmit data: Only lowest bits according to spi_cr0.datasize will be sent.                             */
                                                      /* Receive data will be delivered on the lowest bits, unused bits (above spi_cr0.datasize) will be "0".    */
                                                      /* In slave mode transmit data is requested from the FIFO when the last bit of the currently               */
                                                      /* transferred word is set to the MISO signal.                                                             */
                                                      /* If no next transmit data can be read from the FIFO until the current word's last bit was transferred, a */
                                                      /* FIFO underrun will occur in case chip-select does not go inactive at the next detected SCK edge.        */
  unsigned int reserved1 : BFW_NIOL_spi_dr_reserved1; /* reserved                                                                                                */
} NIOL_SPI_DR_BIT_T;

typedef union {
  uint32_t          val;
  NIOL_SPI_DR_BIT_T bf;
} NIOL_SPI_DR_T;

/* --------------------------------------------------------------------- */
/* Register spi_sr */
/* => SPI status register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_sr 0x0000000CU
#define Adr_NIOL_spi_spi_sr 0x0000044CU
#define Adr_NIOL_spi_sr     0x0000044CU

#define MSK_NIOL_spi_sr_TFE              0x00000001U
#define SRT_NIOL_spi_sr_TFE              0
#define MSK_NIOL_spi_sr_TNF              0x00000002U
#define SRT_NIOL_spi_sr_TNF              1
#define MSK_NIOL_spi_sr_RNE              0x00000004U
#define SRT_NIOL_spi_sr_RNE              2
#define MSK_NIOL_spi_sr_RFF              0x00000008U
#define SRT_NIOL_spi_sr_RFF              3
#define MSK_NIOL_spi_sr_BSY              0x00000010U
#define SRT_NIOL_spi_sr_BSY              4
#define MSK_NIOL_spi_sr_tx_fifo_level    0x001f0000U
#define SRT_NIOL_spi_sr_tx_fifo_level    16
#define MSK_NIOL_spi_sr_tx_fifo_err_ovfl 0x00400000U
#define SRT_NIOL_spi_sr_tx_fifo_err_ovfl 22
#define MSK_NIOL_spi_sr_tx_fifo_err_undr 0x00800000U
#define SRT_NIOL_spi_sr_tx_fifo_err_undr 23
#define MSK_NIOL_spi_sr_rx_fifo_level    0x1f000000U
#define SRT_NIOL_spi_sr_rx_fifo_level    24
#define MSK_NIOL_spi_sr_rx_fifo_err_ovfl 0x40000000U
#define SRT_NIOL_spi_sr_rx_fifo_err_ovfl 30
#define MSK_NIOL_spi_sr_rx_fifo_err_undr 0x80000000U
#define SRT_NIOL_spi_sr_rx_fifo_err_undr 31

/* all used bits of 'NIOL_spi_sr': */
#define MSK_USED_BITS_NIOL_spi_sr 0xdfdf001fU

enum {
  BFW_NIOL_spi_sr_TFE              = 1,  /* [0] */
  BFW_NIOL_spi_sr_TNF              = 1,  /* [1] */
  BFW_NIOL_spi_sr_RNE              = 1,  /* [2] */
  BFW_NIOL_spi_sr_RFF              = 1,  /* [3] */
  BFW_NIOL_spi_sr_BSY              = 1,  /* [4] */
  BFW_NIOL_spi_sr_reserved1        = 11, /* [15:5] */
  BFW_NIOL_spi_sr_tx_fifo_level    = 5,  /* [20:16] */
  BFW_NIOL_spi_sr_reserved2        = 1,  /* [21] */
  BFW_NIOL_spi_sr_tx_fifo_err_ovfl = 1,  /* [22] */
  BFW_NIOL_spi_sr_tx_fifo_err_undr = 1,  /* [23] */
  BFW_NIOL_spi_sr_rx_fifo_level    = 5,  /* [28:24] */
  BFW_NIOL_spi_sr_reserved3        = 1,  /* [29] */
  BFW_NIOL_spi_sr_rx_fifo_err_ovfl = 1,  /* [30] */
  BFW_NIOL_spi_sr_rx_fifo_err_undr = 1   /* [31] */
};

typedef struct NIOL_SPI_SR_BIT_Ttag {
  unsigned int TFE              : BFW_NIOL_spi_sr_TFE;              /* Transmit FIFO is empty (1 if empty)                                                         */
  unsigned int TNF              : BFW_NIOL_spi_sr_TNF;              /* Transmit FIFO is not full (0 if full)                                                       */
  unsigned int RNE              : BFW_NIOL_spi_sr_RNE;              /* Receive FIFO is not empty (0 if empty)                                                      */
  unsigned int RFF              : BFW_NIOL_spi_sr_RFF;              /* Receive FIFO is full (1 if full)                                                            */
  unsigned int BSY              : BFW_NIOL_spi_sr_BSY;              /* Device busy (1 if data is currently transmitted/received or the transmit FIFO is not empty) */
  unsigned int reserved1        : BFW_NIOL_spi_sr_reserved1;        /* reserved                                                                                    */
  unsigned int tx_fifo_level    : BFW_NIOL_spi_sr_tx_fifo_level;    /* Transmit FIFO level (number of words to transmit are left in FIFO)                          */
  unsigned int reserved2        : BFW_NIOL_spi_sr_reserved2;        /* reserved                                                                                    */
  unsigned int tx_fifo_err_ovfl : BFW_NIOL_spi_sr_tx_fifo_err_ovfl; /* Transmit FIFO overflow error occurred, data is lost                                         */
  unsigned int tx_fifo_err_undr : BFW_NIOL_spi_sr_tx_fifo_err_undr; /* Transmit FIFO underrun error occurred, data is lost                                         */
  unsigned int rx_fifo_level    : BFW_NIOL_spi_sr_rx_fifo_level;    /* Receive FIFO level (number of received words to read out are left in FIFO)                  */
  unsigned int reserved3        : BFW_NIOL_spi_sr_reserved3;        /* reserved                                                                                    */
  unsigned int rx_fifo_err_ovfl : BFW_NIOL_spi_sr_rx_fifo_err_ovfl; /* Receive FIFO overflow error occurred, data is lost                                          */
  unsigned int rx_fifo_err_undr : BFW_NIOL_spi_sr_rx_fifo_err_undr; /* Receive FIFO underrun error occurred, data is lost                                          */
} NIOL_SPI_SR_BIT_T;

typedef union {
  uint32_t          val;
  NIOL_SPI_SR_BIT_T bf;
} NIOL_SPI_SR_T;

/* --------------------------------------------------------------------- */
/* Register spi_imsc */
/* => SPI Interrupt Mask Set and Clear register: */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    IRQ mask is an AND-mask: only raw interrupts with mask bit set can generate a module IRQ. */
/*    When writing this register, the corresponding interrupt is cleared similar to writing the register spi_icr. */
/*     */
/*    Note: The functionality of this register is similar to the corresponding SQI register sqi_irq_mask. */
/*          However, in contrast to this register, setting bits in sqi_irq_mask does not clear the corresponding interrupts. */
/*     */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_imsc  0x00000014U
#define Adr_NIOL_spi_spi_imsc  0x00000454U
#define Adr_NIOL_spi_imsc      0x00000454U
#define DFLT_VAL_NIOL_spi_imsc 0x00000000U

#define MSK_NIOL_spi_imsc_RORIM          0x00000001U
#define SRT_NIOL_spi_imsc_RORIM          0
#define DFLT_VAL_NIOL_spi_imsc_RORIM     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_RORIM  0x00000000U
#define MSK_NIOL_spi_imsc_RTIM           0x00000002U
#define SRT_NIOL_spi_imsc_RTIM           1
#define DFLT_VAL_NIOL_spi_imsc_RTIM      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_RTIM   0x00000000U
#define MSK_NIOL_spi_imsc_RXIM           0x00000004U
#define SRT_NIOL_spi_imsc_RXIM           2
#define DFLT_VAL_NIOL_spi_imsc_RXIM      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_RXIM   0x00000000U
#define MSK_NIOL_spi_imsc_TXIM           0x00000008U
#define SRT_NIOL_spi_imsc_TXIM           3
#define DFLT_VAL_NIOL_spi_imsc_TXIM      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_TXIM   0x00000000U
#define MSK_NIOL_spi_imsc_rxneim         0x00000010U
#define SRT_NIOL_spi_imsc_rxneim         4
#define DFLT_VAL_NIOL_spi_imsc_rxneim    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_rxneim 0x00000000U
#define MSK_NIOL_spi_imsc_rxfim          0x00000020U
#define SRT_NIOL_spi_imsc_rxfim          5
#define DFLT_VAL_NIOL_spi_imsc_rxfim     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_rxfim  0x00000000U
#define MSK_NIOL_spi_imsc_txeim          0x00000040U
#define SRT_NIOL_spi_imsc_txeim          6
#define DFLT_VAL_NIOL_spi_imsc_txeim     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_imsc_txeim  0x00000000U

/* all used bits of 'NIOL_spi_imsc': */
#define MSK_USED_BITS_NIOL_spi_imsc 0x0000007fU

enum {
  BFW_NIOL_spi_imsc_RORIM     = 1,  /* [0] */
  BFW_NIOL_spi_imsc_RTIM      = 1,  /* [1] */
  BFW_NIOL_spi_imsc_RXIM      = 1,  /* [2] */
  BFW_NIOL_spi_imsc_TXIM      = 1,  /* [3] */
  BFW_NIOL_spi_imsc_rxneim    = 1,  /* [4] */
  BFW_NIOL_spi_imsc_rxfim     = 1,  /* [5] */
  BFW_NIOL_spi_imsc_txeim     = 1,  /* [6] */
  BFW_NIOL_spi_imsc_reserved1 = 25  /* [31:7] */
};

typedef struct NIOL_SPI_IMSC_BIT_Ttag {
  unsigned int RORIM     : BFW_NIOL_spi_imsc_RORIM;     /* Receive FIFO overrun interrupt mask                                */
  unsigned int RTIM      : BFW_NIOL_spi_imsc_RTIM;      /* Receive timeout interrupt mask                                     */
  unsigned int RXIM      : BFW_NIOL_spi_imsc_RXIM;      /* Receive FIFO interrupt mask                                        */
  unsigned int TXIM      : BFW_NIOL_spi_imsc_TXIM;      /* Transmit FIFO interrupt mask                                       */
  unsigned int rxneim    : BFW_NIOL_spi_imsc_rxneim;    /* Receive FIFO not empty interrupt mask (for netx100/500 compliance) */
  unsigned int rxfim     : BFW_NIOL_spi_imsc_rxfim;     /* Receive FIFO full interrupt mask (for netx100/500 compliance)      */
  unsigned int txeim     : BFW_NIOL_spi_imsc_txeim;     /* Transmit FIFO empty interrupt mask (for netx100/500 compliance)    */
  unsigned int reserved1 : BFW_NIOL_spi_imsc_reserved1; /* reserved                                                           */
} NIOL_SPI_IMSC_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_SPI_IMSC_BIT_T bf;
} NIOL_SPI_IMSC_T;

/* --------------------------------------------------------------------- */
/* Register spi_ris */
/* => SPI interrupt state before masking register (raw interrupt) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_ris 0x00000018U
#define Adr_NIOL_spi_spi_ris 0x00000458U
#define Adr_NIOL_spi_ris     0x00000458U

#define MSK_NIOL_spi_ris_RORRIS  0x00000001U
#define SRT_NIOL_spi_ris_RORRIS  0
#define MSK_NIOL_spi_ris_RTRIS   0x00000002U
#define SRT_NIOL_spi_ris_RTRIS   1
#define MSK_NIOL_spi_ris_RXRIS   0x00000004U
#define SRT_NIOL_spi_ris_RXRIS   2
#define MSK_NIOL_spi_ris_TXRIS   0x00000008U
#define SRT_NIOL_spi_ris_TXRIS   3
#define MSK_NIOL_spi_ris_rxneris 0x00000010U
#define SRT_NIOL_spi_ris_rxneris 4
#define MSK_NIOL_spi_ris_rxfris  0x00000020U
#define SRT_NIOL_spi_ris_rxfris  5
#define MSK_NIOL_spi_ris_txeris  0x00000040U
#define SRT_NIOL_spi_ris_txeris  6

/* all used bits of 'NIOL_spi_ris': */
#define MSK_USED_BITS_NIOL_spi_ris 0x0000007fU

enum {
  BFW_NIOL_spi_ris_RORRIS    = 1,  /* [0] */
  BFW_NIOL_spi_ris_RTRIS     = 1,  /* [1] */
  BFW_NIOL_spi_ris_RXRIS     = 1,  /* [2] */
  BFW_NIOL_spi_ris_TXRIS     = 1,  /* [3] */
  BFW_NIOL_spi_ris_rxneris   = 1,  /* [4] */
  BFW_NIOL_spi_ris_rxfris    = 1,  /* [5] */
  BFW_NIOL_spi_ris_txeris    = 1,  /* [6] */
  BFW_NIOL_spi_ris_reserved1 = 25  /* [31:7] */
};

typedef struct NIOL_SPI_RIS_BIT_Ttag {
  unsigned int RORRIS    : BFW_NIOL_spi_ris_RORRIS;    /* Unmasked receive FIFO overrun interrupt state                                */
                                                       /* 1: receive FIFO overrun error occurred                                       */
                                                       /* 0: no receive FIFO overrun error occurred                                    */
  unsigned int RTRIS     : BFW_NIOL_spi_ris_RTRIS;     /* Unmasked receive timeout interrupt state                                     */
                                                       /* Timeout period are 32 SPI clock periods depending on adr_spi_cr0.sck_muladd  */
                                                       /* 1: receive FIFO is not empty and not read out in the passed timeout period   */
                                                       /* 0: receive FIFO is empty or read during the last timeout period              */
  unsigned int RXRIS     : BFW_NIOL_spi_ris_RXRIS;     /* Unmasked receive FIFO interrupt state                                        */
                                                       /* 1: receive FIFO is higher than spi_cr1.rx_fifo_wm                            */
                                                       /* 0: receive FIFO is equals or is below spi_cr1.rx_fifo_wm                     */
  unsigned int TXRIS     : BFW_NIOL_spi_ris_TXRIS;     /* Unmasked transmit FIFO interrupt state                                       */
                                                       /* 1: transmit FIFO level is below spi_cr1.tx_fifo_wm                           */
                                                       /* 0: transmit FIFO equals or is higher than spi_cr1.tx_fifo_wm                 */
  unsigned int rxneris   : BFW_NIOL_spi_ris_rxneris;   /* Unmasked receive FIFO not empty interrupt state (for netx100/500 compliance) */
                                                       /* 1: receive FIFO is not empty                                                 */
                                                       /* 0: receive FIFO is empty                                                     */
  unsigned int rxfris    : BFW_NIOL_spi_ris_rxfris;    /* Unmasked receive FIFO full interrupt state (for netx100/500 compliance)      */
                                                       /* 1: receive FIFO is full                                                      */
                                                       /* 0: receive FIFO is not full                                                  */
  unsigned int txeris    : BFW_NIOL_spi_ris_txeris;    /* Unmasked transmit FIFO empty interrupt state (for netx100/500 compliance)    */
                                                       /* 1: transmit FIFO is empty                                                    */
                                                       /* 0: transmit FIFO is not empty                                                */
  unsigned int reserved1 : BFW_NIOL_spi_ris_reserved1; /* reserved                                                                     */
} NIOL_SPI_RIS_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_SPI_RIS_BIT_T bf;
} NIOL_SPI_RIS_T;

/* --------------------------------------------------------------------- */
/* Register spi_mis */
/* => SPI interrupt status register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_mis 0x0000001CU
#define Adr_NIOL_spi_spi_mis 0x0000045CU
#define Adr_NIOL_spi_mis     0x0000045CU

#define MSK_NIOL_spi_mis_RORMIS  0x00000001U
#define SRT_NIOL_spi_mis_RORMIS  0
#define MSK_NIOL_spi_mis_RTMIS   0x00000002U
#define SRT_NIOL_spi_mis_RTMIS   1
#define MSK_NIOL_spi_mis_RXMIS   0x00000004U
#define SRT_NIOL_spi_mis_RXMIS   2
#define MSK_NIOL_spi_mis_TXMIS   0x00000008U
#define SRT_NIOL_spi_mis_TXMIS   3
#define MSK_NIOL_spi_mis_rxnemis 0x00000010U
#define SRT_NIOL_spi_mis_rxnemis 4
#define MSK_NIOL_spi_mis_rxfmis  0x00000020U
#define SRT_NIOL_spi_mis_rxfmis  5
#define MSK_NIOL_spi_mis_txemis  0x00000040U
#define SRT_NIOL_spi_mis_txemis  6

/* all used bits of 'NIOL_spi_mis': */
#define MSK_USED_BITS_NIOL_spi_mis 0x0000007fU

enum {
  BFW_NIOL_spi_mis_RORMIS    = 1,  /* [0] */
  BFW_NIOL_spi_mis_RTMIS     = 1,  /* [1] */
  BFW_NIOL_spi_mis_RXMIS     = 1,  /* [2] */
  BFW_NIOL_spi_mis_TXMIS     = 1,  /* [3] */
  BFW_NIOL_spi_mis_rxnemis   = 1,  /* [4] */
  BFW_NIOL_spi_mis_rxfmis    = 1,  /* [5] */
  BFW_NIOL_spi_mis_txemis    = 1,  /* [6] */
  BFW_NIOL_spi_mis_reserved1 = 25  /* [31:7] */
};

typedef struct NIOL_SPI_MIS_BIT_Ttag {
  unsigned int RORMIS    : BFW_NIOL_spi_mis_RORMIS;    /* Masked receive FIFO overrun interrupt state                                */
  unsigned int RTMIS     : BFW_NIOL_spi_mis_RTMIS;     /* Masked receive timeout interrupt state                                     */
  unsigned int RXMIS     : BFW_NIOL_spi_mis_RXMIS;     /* Masked receive FIFO interrupt state                                        */
  unsigned int TXMIS     : BFW_NIOL_spi_mis_TXMIS;     /* Masked transmit FIFO interrupt state                                       */
  unsigned int rxnemis   : BFW_NIOL_spi_mis_rxnemis;   /* Masked receive FIFO not empty interrupt state (for netx100/500 compliance) */
  unsigned int rxfmis    : BFW_NIOL_spi_mis_rxfmis;    /* Masked receive FIFO full interrupt state (for netx100/500 compliance)      */
  unsigned int txemis    : BFW_NIOL_spi_mis_txemis;    /* Masked transmit FIFO empty interrupt state (for netx100/500 compliance)    */
  unsigned int reserved1 : BFW_NIOL_spi_mis_reserved1; /* reserved                                                                   */
} NIOL_SPI_MIS_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_SPI_MIS_BIT_T bf;
} NIOL_SPI_MIS_T;

/* --------------------------------------------------------------------- */
/* Register spi_icr */
/* => SPI interrupt clear register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    An interrupt is cleared by writing "1" to the according bit. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_icr  0x00000020U
#define Adr_NIOL_spi_spi_icr  0x00000460U
#define Adr_NIOL_spi_icr      0x00000460U
#define DFLT_VAL_NIOL_spi_icr 0x00000000U

#define MSK_NIOL_spi_icr_RORIC          0x00000001U
#define SRT_NIOL_spi_icr_RORIC          0
#define DFLT_VAL_NIOL_spi_icr_RORIC     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_RORIC  0x00000000U
#define MSK_NIOL_spi_icr_RTIC           0x00000002U
#define SRT_NIOL_spi_icr_RTIC           1
#define DFLT_VAL_NIOL_spi_icr_RTIC      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_RTIC   0x00000000U
#define MSK_NIOL_spi_icr_RXIC           0x00000004U
#define SRT_NIOL_spi_icr_RXIC           2
#define DFLT_VAL_NIOL_spi_icr_RXIC      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_RXIC   0x00000000U
#define MSK_NIOL_spi_icr_TXIC           0x00000008U
#define SRT_NIOL_spi_icr_TXIC           3
#define DFLT_VAL_NIOL_spi_icr_TXIC      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_TXIC   0x00000000U
#define MSK_NIOL_spi_icr_rxneic         0x00000010U
#define SRT_NIOL_spi_icr_rxneic         4
#define DFLT_VAL_NIOL_spi_icr_rxneic    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_rxneic 0x00000000U
#define MSK_NIOL_spi_icr_rxfic          0x00000020U
#define SRT_NIOL_spi_icr_rxfic          5
#define DFLT_VAL_NIOL_spi_icr_rxfic     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_rxfic  0x00000000U
#define MSK_NIOL_spi_icr_txeic          0x00000040U
#define SRT_NIOL_spi_icr_txeic          6
#define DFLT_VAL_NIOL_spi_icr_txeic     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_icr_txeic  0x00000000U

/* all used bits of 'NIOL_spi_icr': */
#define MSK_USED_BITS_NIOL_spi_icr 0x0000007fU

enum {
  BFW_NIOL_spi_icr_RORIC     = 1,  /* [0] */
  BFW_NIOL_spi_icr_RTIC      = 1,  /* [1] */
  BFW_NIOL_spi_icr_RXIC      = 1,  /* [2] */
  BFW_NIOL_spi_icr_TXIC      = 1,  /* [3] */
  BFW_NIOL_spi_icr_rxneic    = 1,  /* [4] */
  BFW_NIOL_spi_icr_rxfic     = 1,  /* [5] */
  BFW_NIOL_spi_icr_txeic     = 1,  /* [6] */
  BFW_NIOL_spi_icr_reserved1 = 25  /* [31:7] */
};

typedef struct NIOL_SPI_ICR_BIT_Ttag {
  unsigned int RORIC     : BFW_NIOL_spi_icr_RORIC;     /* Clear receive FIFO overrun interrupt                                */
                                                       /* Writing '1' here will clear the receive FIFO                        */
  unsigned int RTIC      : BFW_NIOL_spi_icr_RTIC;      /* Clear receive FIFO overrun interrupt                                */
  unsigned int RXIC      : BFW_NIOL_spi_icr_RXIC;      /* PL022 extension: clear receive FIFO interrupt                       */
  unsigned int TXIC      : BFW_NIOL_spi_icr_TXIC;      /* PL022 extension: clear transmit FIFO interrupt                      */
  unsigned int rxneic    : BFW_NIOL_spi_icr_rxneic;    /* Clear receive FIFO not empty interrupt (for netx100/500 compliance) */
  unsigned int rxfic     : BFW_NIOL_spi_icr_rxfic;     /* Clear receive FIFO full interrupt (for netx100/500 compliance)      */
  unsigned int txeic     : BFW_NIOL_spi_icr_txeic;     /* Clear transmit FIFO empty interrupt (for netx100/500 compliance)    */
  unsigned int reserved1 : BFW_NIOL_spi_icr_reserved1; /* reserved                                                            */
} NIOL_SPI_ICR_BIT_T;

typedef union {
  uint32_t           val;
  NIOL_SPI_ICR_BIT_T bf;
} NIOL_SPI_ICR_T;

/* --------------------------------------------------------------------- */
/* Register spi_dmacr */
/* => SPI DMA control register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_dmacr  0x00000028U
#define Adr_NIOL_spi_spi_dmacr  0x00000468U
#define Adr_NIOL_spi_dmacr      0x00000468U
#define DFLT_VAL_NIOL_spi_dmacr 0x00000000U

#define MSK_NIOL_spi_dmacr_RXDMAE         0x00000001U
#define SRT_NIOL_spi_dmacr_RXDMAE         0
#define DFLT_VAL_NIOL_spi_dmacr_RXDMAE    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_dmacr_RXDMAE 0x00000000U
#define MSK_NIOL_spi_dmacr_TXDMAE         0x00000002U
#define SRT_NIOL_spi_dmacr_TXDMAE         1
#define DFLT_VAL_NIOL_spi_dmacr_TXDMAE    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_dmacr_TXDMAE 0x00000000U

/* all used bits of 'NIOL_spi_dmacr': */
#define MSK_USED_BITS_NIOL_spi_dmacr 0x00000003U

enum {
  BFW_NIOL_spi_dmacr_RXDMAE    = 1,  /* [0] */
  BFW_NIOL_spi_dmacr_TXDMAE    = 1,  /* [1] */
  BFW_NIOL_spi_dmacr_reserved1 = 30  /* [31:2] */
};

typedef struct NIOL_SPI_DMACR_BIT_Ttag {
  unsigned int RXDMAE    : BFW_NIOL_spi_dmacr_RXDMAE;    /* Enable DMA for SPI receive data.                                                            */
                                                         /* A single request will be generated if the receive FIFO is not empty and spi_cr1.SSE (module */
                                                         /* enable) is set. Burst request to the DMA controller will be generated if the receive FIFO   */
                                                         /* contains at least 4 words (set DMA burst size to 4).                                        */
                                                         /* If this bit is reset or the module is disabled, the DMA request signals will also be reset. */
                                                         /* Note: set dmac_chctrl.SBSize = 1 (i.e. burst size: 4) in the DMA controller.                */
  unsigned int TXDMAE    : BFW_NIOL_spi_dmacr_TXDMAE;    /* Enable DMA for SPI transmit data.                                                           */
                                                         /* A single request will be generated if the transmit FIFO is not full and spi_cr1.SSE (module */
                                                         /* enable) is set. Burst requests to the DMA controller will be generated if at least 4 words  */
                                                         /* are writable to the transmit FIFO (set DMA burst size to 4).                                */
                                                         /* If this bit is reset or the module is disabled, the DMA request signals will also be reset. */
                                                         /* Note: set dmac_chctrl.SBSize = 1 (i.e. burst size: 4) in the DMA controller.                */
  unsigned int reserved1 : BFW_NIOL_spi_dmacr_reserved1; /* reserved                                                                                    */
} NIOL_SPI_DMACR_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_SPI_DMACR_BIT_T bf;
} NIOL_SPI_DMACR_T;

/* --------------------------------------------------------------------- */
/* Register spi_data_register */
/* => netx100/500 compliant SPI data register (DR) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    2 data bytes with valid bits. */
/*    During a write access data_byte_1 and dr_valid1 must not be used. dr_valid0 must be set. */
/*    In netx50 and later versions both FIFOs (receive and transmit) have a depth of 16, fill values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500 FIFOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_data_register  0x00000030U
#define Adr_NIOL_spi_spi_data_register  0x00000470U
#define Adr_NIOL_spi_data_register      0x00000470U
#define DFLT_VAL_NIOL_spi_data_register 0x00000000U

#define MSK_NIOL_spi_data_register_data_byte_0         0x000000ffU
#define SRT_NIOL_spi_data_register_data_byte_0         0
#define DFLT_VAL_NIOL_spi_data_register_data_byte_0    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_data_register_data_byte_0 0x00000000U
#define MSK_NIOL_spi_data_register_data_byte_1         0x0000ff00U
#define SRT_NIOL_spi_data_register_data_byte_1         8
#define DFLT_VAL_NIOL_spi_data_register_data_byte_1    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_data_register_data_byte_1 0x00000000U
#define MSK_NIOL_spi_data_register_dr_valid0           0x00010000U
#define SRT_NIOL_spi_data_register_dr_valid0           16
#define DFLT_VAL_NIOL_spi_data_register_dr_valid0      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_data_register_dr_valid0   0x00000000U
#define MSK_NIOL_spi_data_register_dr_valid1           0x00020000U
#define SRT_NIOL_spi_data_register_dr_valid1           17
#define DFLT_VAL_NIOL_spi_data_register_dr_valid1      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_data_register_dr_valid1   0x00000000U

/* all used bits of 'NIOL_spi_data_register': */
#define MSK_USED_BITS_NIOL_spi_data_register 0x0003ffffU

enum {
  BFW_NIOL_spi_data_register_data_byte_0 = 8,  /* [7:0] */
  BFW_NIOL_spi_data_register_data_byte_1 = 8,  /* [15:8] */
  BFW_NIOL_spi_data_register_dr_valid0   = 1,  /* [16] */
  BFW_NIOL_spi_data_register_dr_valid1   = 1,  /* [17] */
  BFW_NIOL_spi_data_register_reserved1   = 14  /* [31:18] */
};

typedef struct NIOL_SPI_DATA_REGISTER_BIT_Ttag {
  unsigned int data_byte_0 : BFW_NIOL_spi_data_register_data_byte_0; /* Data byte 0                                                                        */
  unsigned int data_byte_1 : BFW_NIOL_spi_data_register_data_byte_1; /* Obsolete, don't use                                                                */
  unsigned int dr_valid0   : BFW_NIOL_spi_data_register_dr_valid0;   /* Valid bit for data_byte_0                                                          */
                                                                     /* This bit shows if data_byte_0 is valid and must be set during a FIFO write access. */
  unsigned int dr_valid1   : BFW_NIOL_spi_data_register_dr_valid1;   /* Obsolete, always 0                                                                 */
  unsigned int reserved1   : BFW_NIOL_spi_data_register_reserved1;   /* reserved                                                                           */
} NIOL_SPI_DATA_REGISTER_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_SPI_DATA_REGISTER_BIT_T bf;
} NIOL_SPI_DATA_REGISTER_T;

/* --------------------------------------------------------------------- */
/* Register spi_status_register */
/* => netx100/500 compliant SPI status register (SR): */
/*    Shows the actual status of the SPI interface. */
/*    Bits 24..18 show occurred interrupts; writing ones into these bits clears the interrupts. */
/*    Writing into other bits has no effect. */
/*    In netx50 and later versions both FIFOs (receive and transmit) have a depth of 16, fill values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500 FIFOs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_status_register 0x00000034U
#define Adr_NIOL_spi_spi_status_register 0x00000474U
#define Adr_NIOL_spi_status_register     0x00000474U

#define MSK_NIOL_spi_status_register_SR_in_fuel_val  0x000001ffU
#define SRT_NIOL_spi_status_register_SR_in_fuel_val  0
#define MSK_NIOL_spi_status_register_SR_out_fuel_val 0x0003fe00U
#define SRT_NIOL_spi_status_register_SR_out_fuel_val 9
#define MSK_NIOL_spi_status_register_SR_in_fuel      0x00040000U
#define SRT_NIOL_spi_status_register_SR_in_fuel      18
#define MSK_NIOL_spi_status_register_SR_in_recdata   0x00080000U
#define SRT_NIOL_spi_status_register_SR_in_recdata   19
#define MSK_NIOL_spi_status_register_SR_in_full      0x00100000U
#define SRT_NIOL_spi_status_register_SR_in_full      20
#define MSK_NIOL_spi_status_register_SR_out_fuel     0x00200000U
#define SRT_NIOL_spi_status_register_SR_out_fuel     21
#define MSK_NIOL_spi_status_register_SR_out_fw       0x00400000U
#define SRT_NIOL_spi_status_register_SR_out_fw       22
#define MSK_NIOL_spi_status_register_SR_out_empty    0x00800000U
#define SRT_NIOL_spi_status_register_SR_out_empty    23
#define MSK_NIOL_spi_status_register_SR_out_full     0x01000000U
#define SRT_NIOL_spi_status_register_SR_out_full     24
#define MSK_NIOL_spi_status_register_SR_selected     0x02000000U
#define SRT_NIOL_spi_status_register_SR_selected     25

/* all used bits of 'NIOL_spi_status_register': */
#define MSK_USED_BITS_NIOL_spi_status_register 0x03ffffffU

enum {
  BFW_NIOL_spi_status_register_SR_in_fuel_val  = 9, /* [8:0] */
  BFW_NIOL_spi_status_register_SR_out_fuel_val = 9, /* [17:9] */
  BFW_NIOL_spi_status_register_SR_in_fuel      = 1, /* [18] */
  BFW_NIOL_spi_status_register_SR_in_recdata   = 1, /* [19] */
  BFW_NIOL_spi_status_register_SR_in_full      = 1, /* [20] */
  BFW_NIOL_spi_status_register_SR_out_fuel     = 1, /* [21] */
  BFW_NIOL_spi_status_register_SR_out_fw       = 1, /* [22] */
  BFW_NIOL_spi_status_register_SR_out_empty    = 1, /* [23] */
  BFW_NIOL_spi_status_register_SR_out_full     = 1, /* [24] */
  BFW_NIOL_spi_status_register_SR_selected     = 1, /* [25] */
  BFW_NIOL_spi_status_register_reserved1       = 6  /* [31:26] */
};

typedef struct NIOL_SPI_STATUS_REGISTER_BIT_Ttag {
  unsigned int SR_in_fuel_val  : BFW_NIOL_spi_status_register_SR_in_fuel_val;  /* Input FIFO fill value (number of bytes)                                                          */
  unsigned int SR_out_fuel_val : BFW_NIOL_spi_status_register_SR_out_fuel_val; /* Output FIFO fill value (number of bytes)                                                         */
  unsigned int SR_in_fuel      : BFW_NIOL_spi_status_register_SR_in_fuel;      /* Adjustable fill value of input FIFO reached (equals spi_ris.RXRIS in netx50 and later versions)  */
  unsigned int SR_in_recdata   : BFW_NIOL_spi_status_register_SR_in_recdata;   /* Valid data bytes in input FIFO (equals spi_ris.rxneris in netx50 and later versions)             */
  unsigned int SR_in_full      : BFW_NIOL_spi_status_register_SR_in_full;      /* Input FIFO is full (equals spi_ris.rxfris in netx50 and later versions)                          */
  unsigned int SR_out_fuel     : BFW_NIOL_spi_status_register_SR_out_fuel;     /* Adjustable fill value of output FIFO reached (equals spi_ris.TXRIS in netx50 and later versions) */
  unsigned int SR_out_fw       : BFW_NIOL_spi_status_register_SR_out_fw;       /* netX is writing data too fast into output FIFO. Available as an IRQ only on netx100/500          */
                                                                               /* (equals spi_sr.tx_fifo_err_ovfl in netx50 and later versions).                                   */
  unsigned int SR_out_empty    : BFW_NIOL_spi_status_register_SR_out_empty;    /* Output FIFO is empty in slave mode (equals spi_ris.txeris in netx50 and later versions)          */
  unsigned int SR_out_full     : BFW_NIOL_spi_status_register_SR_out_full;     /* Output FIFO is full. This is only with netx100/500 an IRQ.                                       */
  unsigned int SR_selected     : BFW_NIOL_spi_status_register_SR_selected;     /* External master has access to SPI interface                                                      */
  unsigned int reserved1       : BFW_NIOL_spi_status_register_reserved1;       /* reserved                                                                                         */
} NIOL_SPI_STATUS_REGISTER_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SPI_STATUS_REGISTER_BIT_T bf;
} NIOL_SPI_STATUS_REGISTER_T;

/* --------------------------------------------------------------------- */
/* Register spi_control_register */
/* => netx100/500 compliant SPI control register (CR) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_control_register  0x00000038U
#define Adr_NIOL_spi_spi_control_register  0x00000478U
#define Adr_NIOL_spi_control_register      0x00000478U
#define DFLT_VAL_NIOL_spi_control_register 0x00000000U

#define MSK_NIOL_spi_control_register_CR_softreset           0x00000001U
#define SRT_NIOL_spi_control_register_CR_softreset           0
#define DFLT_VAL_NIOL_spi_control_register_CR_softreset      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_softreset   0x00000000U
#define MSK_NIOL_spi_control_register_CR_speed               0x0000001eU
#define SRT_NIOL_spi_control_register_CR_speed               1
#define DFLT_VAL_NIOL_spi_control_register_CR_speed          0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_speed       0x00000000U
#define MSK_NIOL_spi_control_register_CR_read                0x00000040U
#define SRT_NIOL_spi_control_register_CR_read                6
#define DFLT_VAL_NIOL_spi_control_register_CR_read           0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_read        0x00000000U
#define MSK_NIOL_spi_control_register_CR_write               0x00000080U
#define SRT_NIOL_spi_control_register_CR_write               7
#define DFLT_VAL_NIOL_spi_control_register_CR_write          0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_write       0x00000000U
#define MSK_NIOL_spi_control_register_CR_ss                  0x00000700U
#define SRT_NIOL_spi_control_register_CR_ss                  8
#define DFLT_VAL_NIOL_spi_control_register_CR_ss             0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_ss          0x00000000U
#define MSK_NIOL_spi_control_register_CS_mode                0x00000800U
#define SRT_NIOL_spi_control_register_CS_mode                11
#define DFLT_VAL_NIOL_spi_control_register_CS_mode           0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CS_mode        0x00000000U
#define MSK_NIOL_spi_control_register_CR_clr_infifo          0x00100000U
#define SRT_NIOL_spi_control_register_CR_clr_infifo          20
#define DFLT_VAL_NIOL_spi_control_register_CR_clr_infifo     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_clr_infifo  0x00000000U
#define MSK_NIOL_spi_control_register_CR_clr_outfifo         0x00200000U
#define SRT_NIOL_spi_control_register_CR_clr_outfifo         21
#define DFLT_VAL_NIOL_spi_control_register_CR_clr_outfifo    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_clr_outfifo 0x00000000U
#define MSK_NIOL_spi_control_register_CR_burstdelay          0x01c00000U
#define SRT_NIOL_spi_control_register_CR_burstdelay          22
#define DFLT_VAL_NIOL_spi_control_register_CR_burstdelay     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_burstdelay  0x00000000U
#define MSK_NIOL_spi_control_register_CR_burst               0x0e000000U
#define SRT_NIOL_spi_control_register_CR_burst               25
#define DFLT_VAL_NIOL_spi_control_register_CR_burst          0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_burst       0x00000000U
#define MSK_NIOL_spi_control_register_CR_ncpha               0x10000000U
#define SRT_NIOL_spi_control_register_CR_ncpha               28
#define DFLT_VAL_NIOL_spi_control_register_CR_ncpha          0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_ncpha       0x00000000U
#define MSK_NIOL_spi_control_register_CR_cpol                0x20000000U
#define SRT_NIOL_spi_control_register_CR_cpol                29
#define DFLT_VAL_NIOL_spi_control_register_CR_cpol           0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_cpol        0x00000000U
#define MSK_NIOL_spi_control_register_CR_ms                  0x40000000U
#define SRT_NIOL_spi_control_register_CR_ms                  30
#define DFLT_VAL_NIOL_spi_control_register_CR_ms             0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_ms          0x00000000U
#define MSK_NIOL_spi_control_register_CR_en                  0x80000000U
#define SRT_NIOL_spi_control_register_CR_en                  31
#define DFLT_VAL_NIOL_spi_control_register_CR_en             0x00000000U
#define DFLT_BF_VAL_NIOL_spi_control_register_CR_en          0x00000000U

/* all used bits of 'NIOL_spi_control_register': */
#define MSK_USED_BITS_NIOL_spi_control_register 0xfff00fdfU

enum {
  BFW_NIOL_spi_control_register_CR_softreset   = 1, /* [0] */
  BFW_NIOL_spi_control_register_CR_speed       = 4, /* [4:1] */
  BFW_NIOL_spi_control_register_reserved1      = 1, /* [5] */
  BFW_NIOL_spi_control_register_CR_read        = 1, /* [6] */
  BFW_NIOL_spi_control_register_CR_write       = 1, /* [7] */
  BFW_NIOL_spi_control_register_CR_ss          = 3, /* [10:8] */
  BFW_NIOL_spi_control_register_CS_mode        = 1, /* [11] */
  BFW_NIOL_spi_control_register_reserved2      = 8, /* [19:12] */
  BFW_NIOL_spi_control_register_CR_clr_infifo  = 1, /* [20] */
  BFW_NIOL_spi_control_register_CR_clr_outfifo = 1, /* [21] */
  BFW_NIOL_spi_control_register_CR_burstdelay  = 3, /* [24:22] */
  BFW_NIOL_spi_control_register_CR_burst       = 3, /* [27:25] */
  BFW_NIOL_spi_control_register_CR_ncpha       = 1, /* [28] */
  BFW_NIOL_spi_control_register_CR_cpol        = 1, /* [29] */
  BFW_NIOL_spi_control_register_CR_ms          = 1, /* [30] */
  BFW_NIOL_spi_control_register_CR_en          = 1  /* [31] */
};

typedef struct NIOL_SPI_CONTROL_REGISTER_BIT_Ttag {
  unsigned int CR_softreset   : BFW_NIOL_spi_control_register_CR_softreset;   /* write only: no function in netx100/netx500; later versions: clears IRQs and FIFOs                          */
  unsigned int CR_speed       : BFW_NIOL_spi_control_register_CR_speed;       /* Clock divider for SPI clock (2 - 2^16)                                                                     */
                                                                              /* If SPI clock rate is changed using spi_cr0.sck_muladd, this value will not be updated and may be incorrect */
                                                                              /* There are 16 different SPI clocks frequencies to choose:                                                   */
                                                                              /* 0000: 0.025 MHz (Note: Not compatible to netx100/500. "0000" freezes SCK in netx100/500.)                  */
                                                                              /* 0001: 0.05 MHz                                                                                             */
                                                                              /* 0010: 0.1 MHz                                                                                              */
                                                                              /* 0011: 0.2 MHz                                                                                              */
                                                                              /* 0100: 0.5 MHz                                                                                              */
                                                                              /* 0101: 1 MHz                                                                                                */
                                                                              /* 0110: 1.25 MHz                                                                                             */
                                                                              /* 0111: 2 MHz                                                                                                */
                                                                              /* 1000: 2.5 MHz                                                                                              */
                                                                              /* 1001: 3.3333 MHz                                                                                           */
                                                                              /* 1010: 5 MHz                                                                                                */
                                                                              /* 1011: 10 MHz                                                                                               */
                                                                              /* 1100: 12.5 MHz                                                                                             */
                                                                              /* 1101: 16.6666 MHz                                                                                          */
                                                                              /* 1110: 25 MHz                                                                                               */
                                                                              /* 1111: 50 MHz                                                                                               */
  unsigned int reserved1      : BFW_NIOL_spi_control_register_reserved1;      /* reserved                                                                                                   */
  unsigned int CR_read        : BFW_NIOL_spi_control_register_CR_read;        /* netx100/netx500 only, in later versions always "1":  1: enable SPI interface read data                     */
  unsigned int CR_write       : BFW_NIOL_spi_control_register_CR_write;       /* netx100/netx500 only, in later versions always "1":  1: enable SPI interface write data                    */
  unsigned int CR_ss          : BFW_NIOL_spi_control_register_CR_ss;          /* External slave select                                                                                      */
  unsigned int CS_mode        : BFW_NIOL_spi_control_register_CS_mode;        /* 1: chip select is generated automatically by the internal state machine                                    */
                                                                              /* 0: chip select is directly controlled by software (see bits CR_ss).                                        */
  unsigned int reserved2      : BFW_NIOL_spi_control_register_reserved2;      /* reserved                                                                                                   */
  unsigned int CR_clr_infifo  : BFW_NIOL_spi_control_register_CR_clr_infifo;  /* Clear input FIFO                                                                                           */
  unsigned int CR_clr_outfifo : BFW_NIOL_spi_control_register_CR_clr_outfifo; /* Clear output FIFO                                                                                          */
  unsigned int CR_burstdelay  : BFW_NIOL_spi_control_register_CR_burstdelay;  /* netx100/netx500 only, obsolete in later versions: delay between transmission of 2 data bytes               */
                                                                              /* (0 to 7 SCK cycles)                                                                                        */
  unsigned int CR_burst       : BFW_NIOL_spi_control_register_CR_burst;       /* netx100/netx500 only, obsolete in later versions: burst length = 2^CR_burst                                */
  unsigned int CR_ncpha       : BFW_NIOL_spi_control_register_CR_ncpha;       /* SPI clock phase mode (Note: meaning of this bit is inverted to functionality of bit spi_cr0.SPH):          */
                                                                              /* {  |                                                                                                       */
                                                                              /* 0: change data on secondary SCK edge                                                                       */
                                                                              /*     data is active on primary SCK edge                                                                     */
                                                                              /* 1: change data on primary SCK edge                                                                         */
                                                                              /*     data is active on secondary SCK edge }                                                                 */
  unsigned int CR_cpol        : BFW_NIOL_spi_control_register_CR_cpol;        /* 1: falling edge of SCK is primary                                                                          */
                                                                              /* 0: rising edge of SCK is primary                                                                           */
  unsigned int CR_ms          : BFW_NIOL_spi_control_register_CR_ms;          /* 1: master mode                                                                                             */
                                                                              /* 0:slave mode                                                                                               */
  unsigned int CR_en          : BFW_NIOL_spi_control_register_CR_en;          /* 1: enable                                                                                                  */
                                                                              /* 0: disable SPI interface                                                                                   */
} NIOL_SPI_CONTROL_REGISTER_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SPI_CONTROL_REGISTER_BIT_T bf;
} NIOL_SPI_CONTROL_REGISTER_T;

/* --------------------------------------------------------------------- */
/* Register spi_interrupt_control_register */
/* => netx100/500 compliant SPI interrupt control register (IR) */
/*    In netx50 and later versions both FIFOs (receive and transmit) have a depth of 16, fill values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500 FIFOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_spi_interrupt_control_register  0x0000003CU
#define Adr_NIOL_spi_spi_interrupt_control_register  0x0000047CU
#define Adr_NIOL_spi_interrupt_control_register      0x0000047CU
#define DFLT_VAL_NIOL_spi_interrupt_control_register 0x00000000U

#define MSK_NIOL_spi_interrupt_control_register_IR_in_fuel               0x000001ffU
#define SRT_NIOL_spi_interrupt_control_register_IR_in_fuel               0
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_in_fuel          0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_in_fuel       0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_out_fuel              0x0003fe00U
#define SRT_NIOL_spi_interrupt_control_register_IR_out_fuel              9
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_out_fuel         0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_out_fuel      0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_in_fuel_en            0x00040000U
#define SRT_NIOL_spi_interrupt_control_register_IR_in_fuel_en            18
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_in_fuel_en       0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_in_fuel_en    0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_in_recdata_en         0x00080000U
#define SRT_NIOL_spi_interrupt_control_register_IR_in_recdata_en         19
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_in_recdata_en    0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_in_recdata_en 0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_in_full_en            0x00100000U
#define SRT_NIOL_spi_interrupt_control_register_IR_in_full_en            20
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_in_full_en       0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_in_full_en    0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_out_fuel_en           0x00200000U
#define SRT_NIOL_spi_interrupt_control_register_IR_out_fuel_en           21
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_out_fuel_en      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_out_fuel_en   0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_out_fw_en             0x00400000U
#define SRT_NIOL_spi_interrupt_control_register_IR_out_fw_en             22
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_out_fw_en        0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_out_fw_en     0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_out_empty_en          0x00800000U
#define SRT_NIOL_spi_interrupt_control_register_IR_out_empty_en          23
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_out_empty_en     0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_out_empty_en  0x00000000U
#define MSK_NIOL_spi_interrupt_control_register_IR_out_full_en           0x01000000U
#define SRT_NIOL_spi_interrupt_control_register_IR_out_full_en           24
#define DFLT_VAL_NIOL_spi_interrupt_control_register_IR_out_full_en      0x00000000U
#define DFLT_BF_VAL_NIOL_spi_interrupt_control_register_IR_out_full_en   0x00000000U

/* all used bits of 'NIOL_spi_interrupt_control_register': */
#define MSK_USED_BITS_NIOL_spi_interrupt_control_register 0x01ffffffU

enum {
  BFW_NIOL_spi_interrupt_control_register_IR_in_fuel       = 9, /* [8:0] */
  BFW_NIOL_spi_interrupt_control_register_IR_out_fuel      = 9, /* [17:9] */
  BFW_NIOL_spi_interrupt_control_register_IR_in_fuel_en    = 1, /* [18] */
  BFW_NIOL_spi_interrupt_control_register_IR_in_recdata_en = 1, /* [19] */
  BFW_NIOL_spi_interrupt_control_register_IR_in_full_en    = 1, /* [20] */
  BFW_NIOL_spi_interrupt_control_register_IR_out_fuel_en   = 1, /* [21] */
  BFW_NIOL_spi_interrupt_control_register_IR_out_fw_en     = 1, /* [22] */
  BFW_NIOL_spi_interrupt_control_register_IR_out_empty_en  = 1, /* [23] */
  BFW_NIOL_spi_interrupt_control_register_IR_out_full_en   = 1, /* [24] */
  BFW_NIOL_spi_interrupt_control_register_reserved1        = 7  /* [31:25] */
};

typedef struct NIOL_SPI_INTERRUPT_CONTROL_REGISTER_BIT_Ttag {
  unsigned int IR_in_fuel       : BFW_NIOL_spi_interrupt_control_register_IR_in_fuel;       /* Adjustable watermark level of input FIFO                                         */
  unsigned int IR_out_fuel      : BFW_NIOL_spi_interrupt_control_register_IR_out_fuel;      /* Adjustable watermark level of output FIFO                                        */
  unsigned int IR_in_fuel_en    : BFW_NIOL_spi_interrupt_control_register_IR_in_fuel_en;    /* IRQ enable for irq_spi(0)  (equals spi_imsc.RXIM in netx50 and later versions)   */
  unsigned int IR_in_recdata_en : BFW_NIOL_spi_interrupt_control_register_IR_in_recdata_en; /* IRQ enable for irq_spi(1)  (equals spi_imsc.txneim in netx50 and later versions) */
  unsigned int IR_in_full_en    : BFW_NIOL_spi_interrupt_control_register_IR_in_full_en;    /* IRQ enable for irq_spi(2)  (equals spi_imsc.txfim in netx50 and later versions)  */
  unsigned int IR_out_fuel_en   : BFW_NIOL_spi_interrupt_control_register_IR_out_fuel_en;   /* IRQ enable for irq_spi(3)  (equals spi_imsc.TXIM in netx50 and later versions)   */
  unsigned int IR_out_fw_en     : BFW_NIOL_spi_interrupt_control_register_IR_out_fw_en;     /* IRQ enable for irq_spi(4), netx100/netx500 only, always "0" in later versions    */
  unsigned int IR_out_empty_en  : BFW_NIOL_spi_interrupt_control_register_IR_out_empty_en;  /* IRQ enable for irq_spi(5)  (equals spi_imsc.rxeim in netx50 and later versions)  */
  unsigned int IR_out_full_en   : BFW_NIOL_spi_interrupt_control_register_IR_out_full_en;   /* IRQ enable for irq_spi(6), netx100/netx500 only, always "0" in later versions    */
  unsigned int reserved1        : BFW_NIOL_spi_interrupt_control_register_reserved1;        /* reserved                                                                         */
} NIOL_SPI_INTERRUPT_CONTROL_REGISTER_BIT_T;

typedef union {
  uint32_t                                  val;
  NIOL_SPI_INTERRUPT_CONTROL_REGISTER_BIT_T bf;
} NIOL_SPI_INTERRUPT_CONTROL_REGISTER_T;


/* ===================================================================== */

/* Area of test_ctrl */

/* ===================================================================== */

#define Addr_NIOL_test_ctrl 0x00000480U

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_iol_a */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_iol_a       0x00000000U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_iol_a 0x00000480U
#define Adr_NIOL_test_ctrl_tmr_iol_a           0x00000480U
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vdac         0x00000001U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vdac         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vfb          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vfb          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vdac         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vdac         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vfb          0x00000008U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vfb          3
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_ls_vshunt_sense          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_ls_vshunt_sense          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_vshunt_sense     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_vshunt_sense  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_ls_vrm_sense             0x00000020U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_ls_vrm_sense             5
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_vrm_sense        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_ls_vrm_sense     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vin            0x00000040U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vin            6
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vt             0x00000080U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vt             7
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vt     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vin            0x00000100U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vin            8
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vt             0x00000200U
#define SRT_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vt             9
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vt     0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_iol_a': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_iol_a 0x000003ffU

enum {
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vdac = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vfb  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vdac = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vfb  = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_vshunt_sense  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_vrm_sense     = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vin    = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vt     = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vin    = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vt     = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_iol_a_reserved1            = 22  /* [31:10] */
};

typedef struct NIOL_TEST_CTRL_TMR_IOL_A_BIT_Ttag {
  unsigned int iol_hs_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vdac; /* Iolink TX highside IDAC u2i DAC output -> atbus5[0]       */
  unsigned int iol_hs_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_a_iol_hs_idac_u2i_vfb;  /* Iolink TX highside IDAC u2i OP feedback -> atbus5[1]      */
  unsigned int iol_ls_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vdac; /* Iolink TX lowside IDAC u2i DAC output -> atbus5[0]        */
  unsigned int iol_ls_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_idac_u2i_vfb;  /* Iolink TX lowside IDAC u2i OP feedback -> atbus5[1]       */
  unsigned int iol_ls_vshunt_sense  : BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_vshunt_sense;  /* Iolink TX lowside shunt sense voltage -> atbus5[0]        */
  unsigned int iol_ls_vrm_sense     : BFW_NIOL_test_ctrl_tmr_iol_a_iol_ls_vrm_sense;     /* Iolink TX lowside shunt mirror voltage -> atbus5[1]       */
  unsigned int iol_rx_cq_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vin;    /* Iolink RX c/q comparator input voltage -> atbus1v8[0]     */
  unsigned int iol_rx_cq_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_cq_cmp_vt;     /* Iolink RX c/q comparator threshold voltage -> atbus1v8[1] */
  unsigned int iol_rx_di_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vin;    /* Iolink RX DI comparator input voltage -> atbus1v8[0]      */
  unsigned int iol_rx_di_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_a_iol_rx_di_cmp_vt;     /* Iolink RX DI comparator threshold voltage -> atbus1v8[1]  */
  unsigned int reserved1            : BFW_NIOL_test_ctrl_tmr_iol_a_reserved1;            /* reserved                                                  */
} NIOL_TEST_CTRL_TMR_IOL_A_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_TEST_CTRL_TMR_IOL_A_BIT_T bf;
} NIOL_TEST_CTRL_TMR_IOL_A_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_iol_b */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_iol_b       0x00000004U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_iol_b 0x00000484U
#define Adr_NIOL_test_ctrl_tmr_iol_b           0x00000484U
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vdac         0x00000001U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vdac         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vfb          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vfb          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vdac         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vdac         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vfb          0x00000008U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vfb          3
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_ls_vshunt_sense          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_ls_vshunt_sense          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_vshunt_sense     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_vshunt_sense  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_ls_vrm_sense             0x00000020U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_ls_vrm_sense             5
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_vrm_sense        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_ls_vrm_sense     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vin            0x00000040U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vin            6
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vt             0x00000080U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vt             7
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vt     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vin            0x00000100U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vin            8
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vt             0x00000200U
#define SRT_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vt             9
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vt     0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_iol_b': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_iol_b 0x000003ffU

enum {
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vdac = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vfb  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vdac = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vfb  = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_vshunt_sense  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_vrm_sense     = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vin    = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vt     = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vin    = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vt     = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_iol_b_reserved1            = 22  /* [31:10] */
};

typedef struct NIOL_TEST_CTRL_TMR_IOL_B_BIT_Ttag {
  unsigned int iol_hs_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vdac; /* Iolink TX highside IDAC u2i DAC output -> atbus5[0]       */
  unsigned int iol_hs_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_b_iol_hs_idac_u2i_vfb;  /* Iolink TX highside IDAC u2i OP feedback -> atbus5[1]      */
  unsigned int iol_ls_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vdac; /* Iolink TX lowside IDAC u2i DAC output -> atbus5[0]        */
  unsigned int iol_ls_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_idac_u2i_vfb;  /* Iolink TX lowside IDAC u2i OP feedback -> atbus5[1]       */
  unsigned int iol_ls_vshunt_sense  : BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_vshunt_sense;  /* Iolink TX lowside shunt sense voltage -> atbus5[0]        */
  unsigned int iol_ls_vrm_sense     : BFW_NIOL_test_ctrl_tmr_iol_b_iol_ls_vrm_sense;     /* Iolink TX lowside shunt mirror voltage -> atbus5[1]       */
  unsigned int iol_rx_cq_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vin;    /* Iolink RX c/q comparator input voltage -> atbus1v8[0]     */
  unsigned int iol_rx_cq_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_cq_cmp_vt;     /* Iolink RX c/q comparator threshold voltage -> atbus1v8[1] */
  unsigned int iol_rx_di_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vin;    /* Iolink RX DI comparator input voltage -> atbus1v8[0]      */
  unsigned int iol_rx_di_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_b_iol_rx_di_cmp_vt;     /* Iolink RX DI comparator threshold voltage -> atbus1v8[1]  */
  unsigned int reserved1            : BFW_NIOL_test_ctrl_tmr_iol_b_reserved1;            /* reserved                                                  */
} NIOL_TEST_CTRL_TMR_IOL_B_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_TEST_CTRL_TMR_IOL_B_BIT_T bf;
} NIOL_TEST_CTRL_TMR_IOL_B_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_iol_c */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_iol_c       0x00000008U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_iol_c 0x00000488U
#define Adr_NIOL_test_ctrl_tmr_iol_c           0x00000488U
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vdac         0x00000001U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vdac         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vfb          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vfb          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vdac         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vdac         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vfb          0x00000008U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vfb          3
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_ls_vshunt_sense          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_ls_vshunt_sense          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_vshunt_sense     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_vshunt_sense  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_ls_vrm_sense             0x00000020U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_ls_vrm_sense             5
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_vrm_sense        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_ls_vrm_sense     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vin            0x00000040U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vin            6
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vt             0x00000080U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vt             7
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vt     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vin            0x00000100U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vin            8
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vt             0x00000200U
#define SRT_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vt             9
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vt     0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_iol_c': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_iol_c 0x000003ffU

enum {
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vdac = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vfb  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vdac = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vfb  = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_vshunt_sense  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_vrm_sense     = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vin    = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vt     = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vin    = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vt     = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_iol_c_reserved1            = 22  /* [31:10] */
};

typedef struct NIOL_TEST_CTRL_TMR_IOL_C_BIT_Ttag {
  unsigned int iol_hs_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vdac; /* Iolink TX highside IDAC u2i DAC output -> atbus5[0]       */
  unsigned int iol_hs_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_c_iol_hs_idac_u2i_vfb;  /* Iolink TX highside IDAC u2i OP feedback -> atbus5[1]      */
  unsigned int iol_ls_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vdac; /* Iolink TX lowside IDAC u2i DAC output -> atbus5[0]        */
  unsigned int iol_ls_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_idac_u2i_vfb;  /* Iolink TX lowside IDAC u2i OP feedback -> atbus5[1]       */
  unsigned int iol_ls_vshunt_sense  : BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_vshunt_sense;  /* Iolink TX lowside shunt sense voltage -> atbus5[0]        */
  unsigned int iol_ls_vrm_sense     : BFW_NIOL_test_ctrl_tmr_iol_c_iol_ls_vrm_sense;     /* Iolink TX lowside shunt mirror voltage -> atbus5[1]       */
  unsigned int iol_rx_cq_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vin;    /* Iolink RX c/q comparator input voltage -> atbus1v8[0]     */
  unsigned int iol_rx_cq_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_cq_cmp_vt;     /* Iolink RX c/q comparator threshold voltage -> atbus1v8[1] */
  unsigned int iol_rx_di_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vin;    /* Iolink RX DI comparator input voltage -> atbus1v8[0]      */
  unsigned int iol_rx_di_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_c_iol_rx_di_cmp_vt;     /* Iolink RX DI comparator threshold voltage -> atbus1v8[1]  */
  unsigned int reserved1            : BFW_NIOL_test_ctrl_tmr_iol_c_reserved1;            /* reserved                                                  */
} NIOL_TEST_CTRL_TMR_IOL_C_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_TEST_CTRL_TMR_IOL_C_BIT_T bf;
} NIOL_TEST_CTRL_TMR_IOL_C_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_iol_d */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_iol_d       0x0000000CU
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_iol_d 0x0000048CU
#define Adr_NIOL_test_ctrl_tmr_iol_d           0x0000048CU
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vdac         0x00000001U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vdac         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vfb          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vfb          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vdac         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vdac         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vdac    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vdac 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vfb          0x00000008U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vfb          3
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vfb     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vfb  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_ls_vshunt_sense          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_ls_vshunt_sense          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_vshunt_sense     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_vshunt_sense  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_ls_vrm_sense             0x00000020U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_ls_vrm_sense             5
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_vrm_sense        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_ls_vrm_sense     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vin            0x00000040U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vin            6
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vt             0x00000080U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vt             7
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vt     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vin            0x00000100U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vin            8
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vin       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vin    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vt             0x00000200U
#define SRT_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vt             9
#define DFLT_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vt        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vt     0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_iol_d': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_iol_d 0x000003ffU

enum {
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vdac = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vfb  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vdac = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vfb  = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_vshunt_sense  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_vrm_sense     = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vin    = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vt     = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vin    = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vt     = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_iol_d_reserved1            = 22  /* [31:10] */
};

typedef struct NIOL_TEST_CTRL_TMR_IOL_D_BIT_Ttag {
  unsigned int iol_hs_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vdac; /* Iolink TX highside IDAC u2i DAC output -> atbus5[0]       */
  unsigned int iol_hs_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_d_iol_hs_idac_u2i_vfb;  /* Iolink TX highside IDAC u2i OP feedback -> atbus5[1]      */
  unsigned int iol_ls_idac_u2i_vdac : BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vdac; /* Iolink TX lowside IDAC u2i DAC output -> atbus5[0]        */
  unsigned int iol_ls_idac_u2i_vfb  : BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_idac_u2i_vfb;  /* Iolink TX lowside IDAC u2i OP feedback -> atbus5[1]       */
  unsigned int iol_ls_vshunt_sense  : BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_vshunt_sense;  /* Iolink TX lowside shunt sense voltage -> atbus5[0]        */
  unsigned int iol_ls_vrm_sense     : BFW_NIOL_test_ctrl_tmr_iol_d_iol_ls_vrm_sense;     /* Iolink TX lowside shunt mirror voltage -> atbus5[1]       */
  unsigned int iol_rx_cq_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vin;    /* Iolink RX c/q comparator input voltage -> atbus1v8[0]     */
  unsigned int iol_rx_cq_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_cq_cmp_vt;     /* Iolink RX c/q comparator threshold voltage -> atbus1v8[1] */
  unsigned int iol_rx_di_cmp_vin    : BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vin;    /* Iolink RX DI comparator input voltage -> atbus1v8[0]      */
  unsigned int iol_rx_di_cmp_vt     : BFW_NIOL_test_ctrl_tmr_iol_d_iol_rx_di_cmp_vt;     /* Iolink RX DI comparator threshold voltage -> atbus1v8[1]  */
  unsigned int reserved1            : BFW_NIOL_test_ctrl_tmr_iol_d_reserved1;            /* reserved                                                  */
} NIOL_TEST_CTRL_TMR_IOL_D_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_TEST_CTRL_TMR_IOL_D_BIT_T bf;
} NIOL_TEST_CTRL_TMR_IOL_D_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_gate_a */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_gate_a       0x00000010U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_gate_a 0x00000490U
#define Adr_NIOL_test_ctrl_tmr_gate_a           0x00000490U
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vfb           0x00000001U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vfb           0
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vdac          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vdac          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_0_reg_itest         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_0_reg_itest         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_0_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_0_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vfb           0x00000008U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vfb           3
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vdac          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vdac          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_1_reg_itest         0x00000020U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_1_reg_itest         5
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_1_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_1_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vfb           0x00000040U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vfb           6
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vdac          0x00000080U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vdac          7
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_a_gate_2_reg_itest         0x00000100U
#define SRT_NIOL_test_ctrl_tmr_gate_a_gate_2_reg_itest         8
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_a_gate_2_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_a_gate_2_reg_itest 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_gate_a': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_gate_a 0x000001ffU

enum {
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vfb   = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vdac  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_0_reg_itest = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vfb   = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vdac  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_1_reg_itest = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vfb   = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vdac  = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_gate_a_gate_2_reg_itest = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_gate_a_reserved1        = 23  /* [31:9] */
};

typedef struct NIOL_TEST_CTRL_TMR_GATE_A_BIT_Ttag {
  unsigned int gate_0_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vfb;   /* Gate 0 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_0_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_a_gate_0_u2i_vdac;  /* Gate 0 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_0_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_a_gate_0_reg_itest; /* Gate 0 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_1_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vfb;   /* Gate 1 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_1_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_a_gate_1_u2i_vdac;  /* Gate 1 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_1_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_a_gate_1_reg_itest; /* Gate 1 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_2_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vfb;   /* Gate 2 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_2_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_a_gate_2_u2i_vdac;  /* Gate 2 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_2_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_a_gate_2_reg_itest; /* Gate 2 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int reserved1        : BFW_NIOL_test_ctrl_tmr_gate_a_reserved1;        /* reserved                                                                */
} NIOL_TEST_CTRL_TMR_GATE_A_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_GATE_A_BIT_T bf;
} NIOL_TEST_CTRL_TMR_GATE_A_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_gate_b */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_gate_b       0x00000014U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_gate_b 0x00000494U
#define Adr_NIOL_test_ctrl_tmr_gate_b           0x00000494U
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vfb           0x00000001U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vfb           0
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vdac          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vdac          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_0_reg_itest         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_0_reg_itest         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_0_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_0_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vfb           0x00000008U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vfb           3
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vdac          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vdac          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_1_reg_itest         0x00000020U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_1_reg_itest         5
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_1_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_1_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vfb           0x00000040U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vfb           6
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vdac          0x00000080U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vdac          7
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_b_gate_2_reg_itest         0x00000100U
#define SRT_NIOL_test_ctrl_tmr_gate_b_gate_2_reg_itest         8
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_b_gate_2_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_b_gate_2_reg_itest 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_gate_b': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_gate_b 0x000001ffU

enum {
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vfb   = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vdac  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_0_reg_itest = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vfb   = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vdac  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_1_reg_itest = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vfb   = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vdac  = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_gate_b_gate_2_reg_itest = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_gate_b_reserved1        = 23  /* [31:9] */
};

typedef struct NIOL_TEST_CTRL_TMR_GATE_B_BIT_Ttag {
  unsigned int gate_0_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vfb;   /* Gate 0 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_0_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_b_gate_0_u2i_vdac;  /* Gate 0 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_0_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_b_gate_0_reg_itest; /* Gate 0 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_1_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vfb;   /* Gate 1 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_1_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_b_gate_1_u2i_vdac;  /* Gate 1 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_1_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_b_gate_1_reg_itest; /* Gate 1 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_2_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vfb;   /* Gate 2 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_2_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_b_gate_2_u2i_vdac;  /* Gate 2 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_2_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_b_gate_2_reg_itest; /* Gate 2 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int reserved1        : BFW_NIOL_test_ctrl_tmr_gate_b_reserved1;        /* reserved                                                                */
} NIOL_TEST_CTRL_TMR_GATE_B_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_GATE_B_BIT_T bf;
} NIOL_TEST_CTRL_TMR_GATE_B_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_gate_c */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_gate_c       0x00000018U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_gate_c 0x00000498U
#define Adr_NIOL_test_ctrl_tmr_gate_c           0x00000498U
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vfb           0x00000001U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vfb           0
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vdac          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vdac          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_0_reg_itest         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_0_reg_itest         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_0_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_0_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vfb           0x00000008U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vfb           3
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vdac          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vdac          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_1_reg_itest         0x00000020U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_1_reg_itest         5
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_1_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_1_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vfb           0x00000040U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vfb           6
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vdac          0x00000080U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vdac          7
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_c_gate_2_reg_itest         0x00000100U
#define SRT_NIOL_test_ctrl_tmr_gate_c_gate_2_reg_itest         8
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_c_gate_2_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_c_gate_2_reg_itest 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_gate_c': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_gate_c 0x000001ffU

enum {
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vfb   = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vdac  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_0_reg_itest = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vfb   = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vdac  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_1_reg_itest = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vfb   = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vdac  = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_gate_c_gate_2_reg_itest = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_gate_c_reserved1        = 23  /* [31:9] */
};

typedef struct NIOL_TEST_CTRL_TMR_GATE_C_BIT_Ttag {
  unsigned int gate_0_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vfb;   /* Gate 0 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_0_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_c_gate_0_u2i_vdac;  /* Gate 0 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_0_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_c_gate_0_reg_itest; /* Gate 0 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_1_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vfb;   /* Gate 1 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_1_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_c_gate_1_u2i_vdac;  /* Gate 1 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_1_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_c_gate_1_reg_itest; /* Gate 1 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_2_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vfb;   /* Gate 2 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_2_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_c_gate_2_u2i_vdac;  /* Gate 2 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_2_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_c_gate_2_reg_itest; /* Gate 2 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int reserved1        : BFW_NIOL_test_ctrl_tmr_gate_c_reserved1;        /* reserved                                                                */
} NIOL_TEST_CTRL_TMR_GATE_C_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_GATE_C_BIT_T bf;
} NIOL_TEST_CTRL_TMR_GATE_C_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_gate_d */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_gate_d       0x0000001CU
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_gate_d 0x0000049CU
#define Adr_NIOL_test_ctrl_tmr_gate_d           0x0000049CU
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vfb           0x00000001U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vfb           0
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vdac          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vdac          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_0_reg_itest         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_0_reg_itest         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_0_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_0_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vfb           0x00000008U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vfb           3
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vdac          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vdac          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_1_reg_itest         0x00000020U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_1_reg_itest         5
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_1_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_1_reg_itest 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vfb           0x00000040U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vfb           6
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vfb      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vfb   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vdac          0x00000080U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vdac          7
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vdac     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vdac  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_gate_d_gate_2_reg_itest         0x00000100U
#define SRT_NIOL_test_ctrl_tmr_gate_d_gate_2_reg_itest         8
#define DFLT_VAL_NIOL_test_ctrl_tmr_gate_d_gate_2_reg_itest    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_gate_d_gate_2_reg_itest 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_gate_d': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_gate_d 0x000001ffU

enum {
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vfb   = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vdac  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_0_reg_itest = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vfb   = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vdac  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_1_reg_itest = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vfb   = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vdac  = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_gate_d_gate_2_reg_itest = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_gate_d_reserved1        = 23  /* [31:9] */
};

typedef struct NIOL_TEST_CTRL_TMR_GATE_D_BIT_Ttag {
  unsigned int gate_0_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vfb;   /* Gate 0 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_0_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_d_gate_0_u2i_vdac;  /* Gate 0 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_0_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_d_gate_0_reg_itest; /* Gate 0 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_1_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vfb;   /* Gate 1 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_1_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_d_gate_1_u2i_vdac;  /* Gate 1 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_1_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_d_gate_1_reg_itest; /* Gate 1 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int gate_2_u2i_vfb   : BFW_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vfb;   /* Gate 2 u2i OP feedback -> atbus5[0]                                     */
  unsigned int gate_2_u2i_vdac  : BFW_NIOL_test_ctrl_tmr_gate_d_gate_2_u2i_vdac;  /* Gate 2 u2i DAC output -> atbus5[1]                                      */
  unsigned int gate_2_reg_itest : BFW_NIOL_test_ctrl_tmr_gate_d_gate_2_reg_itest; /* Gate 2 ILIM regulator n output current mirror test current -> atbus5[0] */
  unsigned int reserved1        : BFW_NIOL_test_ctrl_tmr_gate_d_reserved1;        /* reserved                                                                */
} NIOL_TEST_CTRL_TMR_GATE_D_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_GATE_D_BIT_T bf;
} NIOL_TEST_CTRL_TMR_GATE_D_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_adc_lw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_adc_lw       0x00000020U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_adc_lw 0x000004A0U
#define Adr_NIOL_test_ctrl_tmr_adc_lw           0x000004A0U
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp_buf          0x00000001U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp_buf          0
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp_buf     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp_buf  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp              0x00000002U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp              1
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefp_buf         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefp_buf         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefp_buf    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefp_buf 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_flt           0x00000008U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_flt           3
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_flt      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_flt   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn_buf          0x00000010U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn_buf          4
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn_buf     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn_buf  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn              0x00000020U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn              5
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefn_buf         0x00000040U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefn_buf         6
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefn_buf    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefn_buf 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_buf           0x00000080U
#define SRT_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_buf           7
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_buf      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_buf   0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_adc_lw': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_adc_lw 0x000000ffU

enum {
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp_buf  = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp      = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefp_buf = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_flt   = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn_buf  = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn      = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefn_buf = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_buf   = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_adc_lw_reserved1         = 24  /* [31:8] */
};

typedef struct NIOL_TEST_CTRL_TMR_ADC_LW_BIT_Ttag {
  unsigned int adc_sdm_vinp_buf  : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp_buf;  /* ADC SDM vinp_buf -> atbus1v8[0]  */
  unsigned int adc_sdm_vinp      : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinp;      /* ADC SDM vinp -> atbus1v8[0]      */
  unsigned int adc_sdm_vrefp_buf : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefp_buf; /* ADC SDM vrefp_buf -> atbus1v8[0] */
  unsigned int adc_sdm_vcm_flt   : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_flt;   /* ADC SDM vcm_flt -> atbus1v8[0]   */
  unsigned int adc_sdm_vinn_buf  : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn_buf;  /* ADC SDM vinn_buf -> atbus1v8[1]  */
  unsigned int adc_sdm_vinn      : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vinn;      /* ADC SDM vinn -> atbus1v8[1]      */
  unsigned int adc_sdm_vrefn_buf : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vrefn_buf; /* ADC SDM vrefp_buf -> atbus1v8[1] */
  unsigned int adc_sdm_vcm_buf   : BFW_NIOL_test_ctrl_tmr_adc_lw_adc_sdm_vcm_buf;   /* ADC SDM vcm_buf -> atbus1v8[1]   */
  unsigned int reserved1         : BFW_NIOL_test_ctrl_tmr_adc_lw_reserved1;         /* reserved                         */
} NIOL_TEST_CTRL_TMR_ADC_LW_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_ADC_LW_BIT_T bf;
} NIOL_TEST_CTRL_TMR_ADC_LW_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_adc_hw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_adc_hw       0x00000024U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_adc_hw 0x000004A4U
#define Adr_NIOL_test_ctrl_tmr_adc_hw           0x000004A4U
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopn             0x00000001U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopn             0
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopn        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopn     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n               0x00000002U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n               1
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n       0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_0         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_0         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_0    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_0 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_0         0x00000008U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_0         3
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_0    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_0 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopp             0x00000010U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopp             4
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopp        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopp     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_p               0x00000020U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_p               5
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_p          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_p       0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_1         0x00000040U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_1         6
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_1    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_1 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_1         0x00000080U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_1         7
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_1    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_1 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n_unbuf         0x00000100U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n_unbuf         8
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n_unbuf    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n_unbuf 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_pga_debug                0x00000200U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_pga_debug                9
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_debug           0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_pga_debug        0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_vmux_disable_pd          0x00000400U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_vmux_disable_pd          10
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_vmux_disable_pd     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_vmux_disable_pd  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vin          0x00000800U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vin          11
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vin     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vin  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vt           0x00001000U
#define SRT_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vt           12
#define DFLT_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vt      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vt   0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_adc_hw': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_adc_hw 0x00001fffU

enum {
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopn     = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n       = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_0 = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_0 = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopp     = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_p       = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_1 = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_1 = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n_unbuf = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_debug        = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_vmux_disable_pd  = 1,  /* [10] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vin  = 1,  /* [11] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vt   = 1,  /* [12] */
  BFW_NIOL_test_ctrl_tmr_adc_hw_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_TEST_CTRL_TMR_ADC_HW_BIT_Ttag {
  unsigned int adc_pga_pga_vopn     : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopn;     /* ADC PGA pga_vopn -> atbus1v8[0]                             */
  unsigned int adc_pga_vmid_n       : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n;       /* ADC PGA vmid_n -> atbus1v8[0]                               */
  unsigned int adc_pga_instr_vinp_0 : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_0; /* ADC PGA instr_vinp -> atbus1v8[0]                           */
  unsigned int adc_pga_instr_vinn_0 : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_0; /* ADC PGA instr_vinn -> atbus1v8[0]                           */
  unsigned int adc_pga_pga_vopp     : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_pga_vopp;     /* ADC PGA pga_vopp -> atbus1v8[1]                             */
  unsigned int adc_pga_vmid_p       : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_p;       /* ADC PGA vmid_p -> atbus1v8[1]                               */
  unsigned int adc_pga_instr_vinn_1 : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinn_1; /* ADC PGA instr_vinn -> atbus1v8[1]                           */
  unsigned int adc_pga_instr_vinp_1 : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_instr_vinp_1; /* ADC PGA instr_vinp -> atbus1v8[1]                           */
  unsigned int adc_pga_vmid_n_unbuf : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_vmid_n_unbuf; /* ADC PGA vmid_n_unbuf -> atbus1v8[1]                         */
  unsigned int adc_pga_debug        : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_pga_debug;        /* ADC PGA make vmid_n_unbuf high_z, disable clamp vmid to vss */
                                                                                          /* (only if d_on = 1)                                          */
  unsigned int adc_vmux_disable_pd  : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_vmux_disable_pd;  /* ADC vmux disable output clampdown (even if oe=0)            */
  unsigned int adc_vdd_iol_cmp_vin  : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vin;  /* vdd_iol_a comparator input voltage -> atbus1v8[0]           */
  unsigned int adc_vdd_iol_cmp_vt   : BFW_NIOL_test_ctrl_tmr_adc_hw_adc_vdd_iol_cmp_vt;   /* vdd_iol_a comparator threshold voltage -> atbus1v8[1]       */
  unsigned int reserved1            : BFW_NIOL_test_ctrl_tmr_adc_hw_reserved1;            /* reserved                                                    */
} NIOL_TEST_CTRL_TMR_ADC_HW_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_ADC_HW_BIT_T bf;
} NIOL_TEST_CTRL_TMR_ADC_HW_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_ref_lw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_ref_lw       0x00000028U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_ref_lw 0x000004A8U
#define Adr_NIOL_test_ctrl_tmr_ref_lw           0x000004A8U
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg                 0x00000001U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg                 0
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg            0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg         0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg_unfilt          0x00000002U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg_unfilt          1
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg_unfilt     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg_unfilt  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vout_op             0x00000004U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vout_op             2
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vout_op        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vout_op     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_iptat_test          0x00000008U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_iptat_test          3
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_iptat_test     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_iptat_test  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vcomp               0x00000010U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vcomp               4
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vcomp          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vcomp       0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vptat               0x00000020U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vptat               5
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vptat          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vptat       0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_1               0x00000040U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_1               6
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_1          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_1       0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n               0x00000080U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n               7
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n       0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n_ptat          0x00000100U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n_ptat          8
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n_ptat     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n_ptat  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_iref_vrsense           0x00000200U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_iref_vrsense           9
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_iref_vrsense      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_iref_vrsense   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_iref_itest             0x00000400U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_iref_itest             10
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_iref_itest        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_iref_itest     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vtop              0x00000800U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vtop              11
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vtop         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vtop      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_1         0x00001000U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_1         12
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_1    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_1 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_0         0x00002000U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_0         13
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_0    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_0 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vfb               0x00004000U
#define SRT_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vfb               14
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vfb          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vfb       0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_ref_lw': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_ref_lw 0x00007fffU

enum {
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg         = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg_unfilt  = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vout_op     = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_iptat_test  = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vcomp       = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vptat       = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_1       = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n       = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n_ptat  = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_iref_vrsense   = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_iref_itest     = 1,  /* [10] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vtop      = 1,  /* [11] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_1 = 1,  /* [12] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_0 = 1,  /* [13] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vfb       = 1,  /* [14] */
  BFW_NIOL_test_ctrl_tmr_ref_lw_reserved1          = 17  /* [31:15] */
};

typedef struct NIOL_TEST_CTRL_TMR_REF_LW_BIT_Ttag {
  unsigned int ref_bg_vbg         : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg;         /* Bandgap final output voltage -> atbus1v8[0]                  */
  unsigned int ref_bg_vbg_unfilt  : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbg_unfilt;  /* Bandgap final unfiltered output voltage -> atbus1v8[1]       */
  unsigned int ref_bg_vout_op     : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vout_op;     /* Bandgap OP output voltage -> atbus1v8[0]                     */
  unsigned int ref_bg_iptat_test  : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_iptat_test;  /* Bandgap PTAT test current (p) -> atbus1v8[1]                 */
  unsigned int ref_bg_vcomp       : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vcomp;       /* Bandgap compensation voltage -> atbus1v8[0]                  */
  unsigned int ref_bg_vptat       : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vptat;       /* Bandgap PTAT voltage -> atbus1v8[1]                          */
  unsigned int ref_bg_vbe_1       : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_1;       /* Bandgap VBE of small BIP -> atbus1v8[0]                      */
  unsigned int ref_bg_vbe_n       : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n;       /* Bandgap VBE of large BIP -> atbus1v8[1]                      */
  unsigned int ref_bg_vbe_n_ptat  : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_bg_vbe_n_ptat;  /* Bandgap VBE + PTAT resistor of large BIP -> atbus1v8[0]      */
  unsigned int ref_iref_vrsense   : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_iref_vrsense;   /* Iref feedback voltage -> atbus1v8[0]                         */
  unsigned int ref_iref_itest     : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_iref_itest;     /* Iref test current (ibp) -> atbus1v8[1]                       */
  unsigned int ref_vref_vtop      : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vtop;      /* Vref resistor chain top voltage (1.3V nominal)-> atbus1v8[0] */
  unsigned int ref_vref_vss_ref_1 : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_1; /* Vref local ground reference -> atbus1v8[1]                   */
  unsigned int ref_vref_vss_ref_0 : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vss_ref_0; /* Vref local ground reference -> atbus1v8[0]                   */
  unsigned int ref_vref_vfb       : BFW_NIOL_test_ctrl_tmr_ref_lw_ref_vref_vfb;       /* Vref OP feedback voltage -> atbus1v8[1]                      */
  unsigned int reserved1          : BFW_NIOL_test_ctrl_tmr_ref_lw_reserved1;          /* reserved                                                     */
} NIOL_TEST_CTRL_TMR_REF_LW_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_REF_LW_BIT_T bf;
} NIOL_TEST_CTRL_TMR_REF_LW_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_ref_hw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_ref_hw       0x0000002CU
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_ref_hw 0x000004ACU
#define Adr_NIOL_test_ctrl_tmr_ref_hw           0x000004ACU
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_hw      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_start         0x00000001U
#define SRT_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_start         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_start    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_start 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_pre           0x00000002U
#define SRT_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_pre           1
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_pre      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_pre   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_ref_hw_ref_irefdac_vfb               0x00000004U
#define SRT_NIOL_test_ctrl_tmr_ref_hw_ref_irefdac_vfb               2
#define DFLT_VAL_NIOL_test_ctrl_tmr_ref_hw_ref_irefdac_vfb          0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_ref_hw_ref_irefdac_vfb       0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_ref_hw': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_ref_hw 0x00000007U

enum {
  BFW_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_start = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_pre   = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_ref_hw_ref_irefdac_vfb       = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_ref_hw_reserved1             = 29  /* [31:3] */
};

typedef struct NIOL_TEST_CTRL_TMR_REF_HW_BIT_Ttag {
  unsigned int ref_maxref_vref_start : BFW_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_start; /* reference voltage for startable voltage regulator -> atbus5[0] */
  unsigned int ref_maxref_vref_pre   : BFW_NIOL_test_ctrl_tmr_ref_hw_ref_maxref_vref_pre;   /* pre-reference voltage for voltage regulator -> atbus5[1]       */
  unsigned int ref_irefdac_vfb       : BFW_NIOL_test_ctrl_tmr_ref_hw_ref_irefdac_vfb;       /* DAC reference current generator OP feedback -> atbus1v8[0]     */
  unsigned int reserved1             : BFW_NIOL_test_ctrl_tmr_ref_hw_reserved1;             /* reserved                                                       */
} NIOL_TEST_CTRL_TMR_REF_HW_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_REF_HW_BIT_T bf;
} NIOL_TEST_CTRL_TMR_REF_HW_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_atbmux */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_atbmux       0x00000030U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_atbmux 0x000004B0U
#define Adr_NIOL_test_ctrl_tmr_atbmux           0x000004B0U
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_disable_pd          0x00000001U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_disable_pd          0
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_disable_pd     0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_disable_pd  0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_5_disable_pd            0x00000002U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_5_disable_pd            1
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_disable_pd       0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_disable_pd    0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_0         0x00000004U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_0         2
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_0    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_0 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_1         0x00000008U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_1         3
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_1    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_1 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_a              0x00000010U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_a              4
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_a         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_a      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_a              0x00000020U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_a              5
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_a         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_a      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_a                0x00000040U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_a                6
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_a           0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_a        0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_a                0x00000080U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_a                7
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_a           0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_a        0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_b              0x00000100U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_b              8
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_b         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_b      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_b              0x00000200U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_b              9
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_b         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_b      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_b                0x00000400U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_b                10
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_b           0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_b        0x00000000U
#define MSK_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_b                0x00000800U
#define SRT_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_b                11
#define DFLT_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_b           0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_b        0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_atbmux': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_atbmux 0x00000fffU

enum {
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_disable_pd  = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_disable_pd    = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_0 = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_1 = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_a      = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_a      = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_a        = 1,  /* [6] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_a        = 1,  /* [7] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_b      = 1,  /* [8] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_b      = 1,  /* [9] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_b        = 1,  /* [10] */
  BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_b        = 1,  /* [11] */
  BFW_NIOL_test_ctrl_tmr_atbmux_reserved1              = 20  /* [31:12] */
};

typedef struct NIOL_TEST_CTRL_TMR_ATBMUX_BIT_Ttag {
  unsigned int atbmux_1v8_disable_pd  : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_disable_pd;  /* disable clamp down of atbus1v8[1:0] */
  unsigned int atbmux_5_disable_pd    : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_disable_pd;    /* disable clamp down of atbus5[1:0]   */
  unsigned int atbmux_connect_5_1v8_0 : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_0; /* connect atbus5[0] to atbus1v8[0]    */
  unsigned int atbmux_connect_5_1v8_1 : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_connect_5_1v8_1; /* connect atbus5[1] to atbus1v8[1]    */
  unsigned int atbmux_1v8_0_ai_a      : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_a;      /* atbus1v8[0] ->PAD ai_a              */
  unsigned int atbmux_1v8_1_ai_a      : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_a;      /* atbus1v8[1] ->PAD ai_a              */
  unsigned int atbmux_5_0_ai_a        : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_a;        /* atbus5[0] -> PAD ai_a               */
  unsigned int atbmux_5_1_ai_a        : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_a;        /* atbus5[1] -> PAD ai_a               */
  unsigned int atbmux_1v8_0_ai_b      : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_0_ai_b;      /* atbus1v8[0] ->PAD ai_b              */
  unsigned int atbmux_1v8_1_ai_b      : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_1v8_1_ai_b;      /* atbus1v8[1] ->PAD ai_b              */
  unsigned int atbmux_5_0_ai_b        : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_0_ai_b;        /* atbus5[0] -> PAD ai_b               */
  unsigned int atbmux_5_1_ai_b        : BFW_NIOL_test_ctrl_tmr_atbmux_atbmux_5_1_ai_b;        /* atbus5[1] -> PAD ai_b               */
  unsigned int reserved1              : BFW_NIOL_test_ctrl_tmr_atbmux_reserved1;              /* reserved                            */
} NIOL_TEST_CTRL_TMR_ATBMUX_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_TEST_CTRL_TMR_ATBMUX_BIT_T bf;
} NIOL_TEST_CTRL_TMR_ATBMUX_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_various */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_various       0x00000034U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_various 0x000004B4U
#define Adr_NIOL_test_ctrl_tmr_various           0x000004B4U
#define DFLT_VAL_NIOL_test_ctrl_tmr_various      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_various_di_x_vin             0x00000001U
#define SRT_NIOL_test_ctrl_tmr_various_di_x_vin             0
#define DFLT_VAL_NIOL_test_ctrl_tmr_various_di_x_vin        0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_various_di_x_vin     0x00000000U
#define MSK_NIOL_test_ctrl_tmr_various_di_x_vt              0x00000002U
#define SRT_NIOL_test_ctrl_tmr_various_di_x_vt              1
#define DFLT_VAL_NIOL_test_ctrl_tmr_various_di_x_vt         0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_various_di_x_vt      0x00000000U
#define MSK_NIOL_test_ctrl_tmr_various_pll                  0x00000004U
#define SRT_NIOL_test_ctrl_tmr_various_pll                  2
#define DFLT_VAL_NIOL_test_ctrl_tmr_various_pll             0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_various_pll          0x00000000U
#define MSK_NIOL_test_ctrl_tmr_various_res_unlock           0x00000008U
#define SRT_NIOL_test_ctrl_tmr_various_res_unlock           3
#define DFLT_VAL_NIOL_test_ctrl_tmr_various_res_unlock      0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_various_res_unlock   0x00000000U
#define MSK_NIOL_test_ctrl_tmr_various_d_tmr_iddq_0         0x00000010U
#define SRT_NIOL_test_ctrl_tmr_various_d_tmr_iddq_0         4
#define DFLT_VAL_NIOL_test_ctrl_tmr_various_d_tmr_iddq_0    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_various_d_tmr_iddq_0 0x00000000U
#define MSK_NIOL_test_ctrl_tmr_various_d_tmr_iddq_1         0x00000020U
#define SRT_NIOL_test_ctrl_tmr_various_d_tmr_iddq_1         5
#define DFLT_VAL_NIOL_test_ctrl_tmr_various_d_tmr_iddq_1    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_various_d_tmr_iddq_1 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_various': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_various 0x0000003fU

enum {
  BFW_NIOL_test_ctrl_tmr_various_di_x_vin     = 1,  /* [0] */
  BFW_NIOL_test_ctrl_tmr_various_di_x_vt      = 1,  /* [1] */
  BFW_NIOL_test_ctrl_tmr_various_pll          = 1,  /* [2] */
  BFW_NIOL_test_ctrl_tmr_various_res_unlock   = 1,  /* [3] */
  BFW_NIOL_test_ctrl_tmr_various_d_tmr_iddq_0 = 1,  /* [4] */
  BFW_NIOL_test_ctrl_tmr_various_d_tmr_iddq_1 = 1,  /* [5] */
  BFW_NIOL_test_ctrl_tmr_various_reserved1    = 26  /* [31:6] */
};

typedef struct NIOL_TEST_CTRL_TMR_VARIOUS_BIT_Ttag {
  unsigned int di_x_vin     : BFW_NIOL_test_ctrl_tmr_various_di_x_vin;     /* DI_X RX comparator input voltage -> atbus1v8[0]                                                             */
  unsigned int di_x_vt      : BFW_NIOL_test_ctrl_tmr_various_di_x_vt;      /* DI_X RX comparator threshold voltage -> atbus1v8[1]                                                         */
  unsigned int pll          : BFW_NIOL_test_ctrl_tmr_various_pll;          /* PLL vco_ctrl -> atbus1v8[0]                                                                                 */
  unsigned int res_unlock   : BFW_NIOL_test_ctrl_tmr_various_res_unlock;   /* set da_res of analog core level shifters to 0                                                               */
  unsigned int d_tmr_iddq_0 : BFW_NIOL_test_ctrl_tmr_various_d_tmr_iddq_0; /* disconnect resistor chain of vreg_vddd.(vddd will fall to 0.9V, has to be supplied externally in this case) */
  unsigned int d_tmr_iddq_1 : BFW_NIOL_test_ctrl_tmr_various_d_tmr_iddq_1; /* disconnect resistor chain of vddd voltage sense.                                                            */
  unsigned int reserved1    : BFW_NIOL_test_ctrl_tmr_various_reserved1;    /* reserved                                                                                                    */
} NIOL_TEST_CTRL_TMR_VARIOUS_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_TEST_CTRL_TMR_VARIOUS_BIT_T bf;
} NIOL_TEST_CTRL_TMR_VARIOUS_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_spare */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_spare       0x00000038U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_spare 0x000004B8U
#define Adr_NIOL_test_ctrl_tmr_spare           0x000004B8U
#define DFLT_VAL_NIOL_test_ctrl_tmr_spare      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_spare_spare         0x0000ffffU
#define SRT_NIOL_test_ctrl_tmr_spare_spare         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_spare_spare    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_spare_spare 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_spare': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_spare 0x0000ffffU

enum {
  BFW_NIOL_test_ctrl_tmr_spare_spare     = 16, /* [15:0] */
  BFW_NIOL_test_ctrl_tmr_spare_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_TEST_CTRL_TMR_SPARE_BIT_Ttag {
  unsigned int spare     : BFW_NIOL_test_ctrl_tmr_spare_spare;     /* Spare TMR bits for metal fix */
  unsigned int reserved1 : BFW_NIOL_test_ctrl_tmr_spare_reserved1; /* reserved                     */
} NIOL_TEST_CTRL_TMR_SPARE_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_TEST_CTRL_TMR_SPARE_BIT_T bf;
} NIOL_TEST_CTRL_TMR_SPARE_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_extra_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_extra_0       0x0000003CU
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_extra_0 0x000004BCU
#define Adr_NIOL_test_ctrl_tmr_extra_0           0x000004BCU
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_0      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_extra_0_extra         0x0000ffffU
#define SRT_NIOL_test_ctrl_tmr_extra_0_extra         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_0_extra    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_extra_0_extra 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_extra_0': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_extra_0 0x0000ffffU

enum {
  BFW_NIOL_test_ctrl_tmr_extra_0_extra     = 16, /* [15:0] */
  BFW_NIOL_test_ctrl_tmr_extra_0_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_TEST_CTRL_TMR_EXTRA_0_BIT_Ttag {
  unsigned int extra     : BFW_NIOL_test_ctrl_tmr_extra_0_extra;     /* (not documented) */
  unsigned int reserved1 : BFW_NIOL_test_ctrl_tmr_extra_0_reserved1; /* reserved         */
} NIOL_TEST_CTRL_TMR_EXTRA_0_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_TEST_CTRL_TMR_EXTRA_0_BIT_T bf;
} NIOL_TEST_CTRL_TMR_EXTRA_0_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_extra_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_extra_1       0x00000040U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_extra_1 0x000004C0U
#define Adr_NIOL_test_ctrl_tmr_extra_1           0x000004C0U
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_1      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_extra_1_extra         0x0000ffffU
#define SRT_NIOL_test_ctrl_tmr_extra_1_extra         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_1_extra    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_extra_1_extra 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_extra_1': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_extra_1 0x0000ffffU

enum {
  BFW_NIOL_test_ctrl_tmr_extra_1_extra     = 16, /* [15:0] */
  BFW_NIOL_test_ctrl_tmr_extra_1_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_TEST_CTRL_TMR_EXTRA_1_BIT_Ttag {
  unsigned int extra     : BFW_NIOL_test_ctrl_tmr_extra_1_extra;     /* (not documented) */
  unsigned int reserved1 : BFW_NIOL_test_ctrl_tmr_extra_1_reserved1; /* reserved         */
} NIOL_TEST_CTRL_TMR_EXTRA_1_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_TEST_CTRL_TMR_EXTRA_1_BIT_T bf;
} NIOL_TEST_CTRL_TMR_EXTRA_1_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_extra_2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_extra_2       0x00000044U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_extra_2 0x000004C4U
#define Adr_NIOL_test_ctrl_tmr_extra_2           0x000004C4U
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_2      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_extra_2_extra         0x0000ffffU
#define SRT_NIOL_test_ctrl_tmr_extra_2_extra         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_2_extra    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_extra_2_extra 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_extra_2': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_extra_2 0x0000ffffU

enum {
  BFW_NIOL_test_ctrl_tmr_extra_2_extra     = 16, /* [15:0] */
  BFW_NIOL_test_ctrl_tmr_extra_2_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_TEST_CTRL_TMR_EXTRA_2_BIT_Ttag {
  unsigned int extra     : BFW_NIOL_test_ctrl_tmr_extra_2_extra;     /* (not documented) */
  unsigned int reserved1 : BFW_NIOL_test_ctrl_tmr_extra_2_reserved1; /* reserved         */
} NIOL_TEST_CTRL_TMR_EXTRA_2_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_TEST_CTRL_TMR_EXTRA_2_BIT_T bf;
} NIOL_TEST_CTRL_TMR_EXTRA_2_T;

/* --------------------------------------------------------------------- */
/* Register test_ctrl_tmr_extra_3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_test_ctrl_tmr_extra_3       0x00000048U
#define Adr_NIOL_test_ctrl_test_ctrl_tmr_extra_3 0x000004C8U
#define Adr_NIOL_test_ctrl_tmr_extra_3           0x000004C8U
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_3      0x00000000U

#define MSK_NIOL_test_ctrl_tmr_extra_3_extra         0x0000ffffU
#define SRT_NIOL_test_ctrl_tmr_extra_3_extra         0
#define DFLT_VAL_NIOL_test_ctrl_tmr_extra_3_extra    0x00000000U
#define DFLT_BF_VAL_NIOL_test_ctrl_tmr_extra_3_extra 0x00000000U

/* all used bits of 'NIOL_test_ctrl_tmr_extra_3': */
#define MSK_USED_BITS_NIOL_test_ctrl_tmr_extra_3 0x0000ffffU

enum {
  BFW_NIOL_test_ctrl_tmr_extra_3_extra     = 16, /* [15:0] */
  BFW_NIOL_test_ctrl_tmr_extra_3_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_TEST_CTRL_TMR_EXTRA_3_BIT_Ttag {
  unsigned int extra     : BFW_NIOL_test_ctrl_tmr_extra_3_extra;     /* (not documented) */
  unsigned int reserved1 : BFW_NIOL_test_ctrl_tmr_extra_3_reserved1; /* reserved         */
} NIOL_TEST_CTRL_TMR_EXTRA_3_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_TEST_CTRL_TMR_EXTRA_3_BIT_T bf;
} NIOL_TEST_CTRL_TMR_EXTRA_3_T;

/* --------------------------------------------------------------------- */
/* Register padtest_ctrl */
/* => PAD test I2O control register */
/*     */
/*    Running PADTEST: */
/*    If the global TESTMODE works fine (normal behavior: TESTMODE can be enabled and disabled): */
/*    1. Disable TESTMODE. */
/*    2. Setup pad configuration and mode in this register as required for your test.. */
/*    3. Enable PADTEST for all IOs: I.e. set bits en_tm and en_ntm. The Design switches to PADTEST with the internal system */
/*    4. Perform the PADTEST. */
/*    5. Activate the TESTMODE. The IOs of the PADTEST-group 'ntm' are released and available for other functions. */
/*    6. Run a power-on-reset by the bypass provided in TESTMODE (por_n_testmode function on LED_C0, drive it low). */
/*    7. The design is reset and PADTEST is deactivated. */
/*     */
/*    If global TESTMODE does not works fine and the DESIGN is permanently in TESTMODE: */
/*    Test procedure like above, however the IOs of the group 'ntm' cannot be tested. The por_n_testmode function must */
/*    be held inactive (high) during PADTEST. */
/*     */
/*    If global TESTMODE does not works fine and the DESIGN cannot enter TESTMODE: */
/*    Test procedure like above, however the IOs of the group 'ntm' either must be skipped (do not set the 'en_ntm' bit and the */
/*    por_n_testmode function must be held inactive (high) during PADTEST. Or all IOs can be tested and a power-cycle is required */
/*    to leave the PADTEST. */
/*     */
/*    Additionally documentation: */
/*    file padtest_i2o.info: IO-buffer properties and testability */
/*    file padtest_i2o.dat:  IO-buffer pairing for each mode */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_padtest_ctrl       0x0000004CU
#define Adr_NIOL_test_ctrl_padtest_ctrl 0x000004CCU
#define Adr_NIOL_padtest_ctrl           0x000004CCU
#define DFLT_VAL_NIOL_padtest_ctrl      0x00000000U

#define MSK_NIOL_padtest_ctrl_oe             0x00000001U
#define SRT_NIOL_padtest_ctrl_oe             0
#define DFLT_VAL_NIOL_padtest_ctrl_oe        0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_oe     0x00000000U
#define MSK_NIOL_padtest_ctrl_ie             0x00000002U
#define SRT_NIOL_padtest_ctrl_ie             1
#define DFLT_VAL_NIOL_padtest_ctrl_ie        0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_ie     0x00000000U
#define MSK_NIOL_padtest_ctrl_pue            0x00000004U
#define SRT_NIOL_padtest_ctrl_pue            2
#define DFLT_VAL_NIOL_padtest_ctrl_pue       0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_pue    0x00000000U
#define MSK_NIOL_padtest_ctrl_pde            0x00000008U
#define SRT_NIOL_padtest_ctrl_pde            3
#define DFLT_VAL_NIOL_padtest_ctrl_pde       0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_pde    0x00000000U
#define MSK_NIOL_padtest_ctrl_ds             0x00000010U
#define SRT_NIOL_padtest_ctrl_ds             4
#define DFLT_VAL_NIOL_padtest_ctrl_ds        0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_ds     0x00000000U
#define MSK_NIOL_padtest_ctrl_mode           0x00000060U
#define SRT_NIOL_padtest_ctrl_mode           5
#define DFLT_VAL_NIOL_padtest_ctrl_mode      0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_mode   0x00000000U
#define MSK_NIOL_padtest_ctrl_en_tm          0x00000080U
#define SRT_NIOL_padtest_ctrl_en_tm          7
#define DFLT_VAL_NIOL_padtest_ctrl_en_tm     0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_en_tm  0x00000000U
#define MSK_NIOL_padtest_ctrl_en_ntm         0x00000100U
#define SRT_NIOL_padtest_ctrl_en_ntm         8
#define DFLT_VAL_NIOL_padtest_ctrl_en_ntm    0x00000000U
#define DFLT_BF_VAL_NIOL_padtest_ctrl_en_ntm 0x00000000U

/* all used bits of 'NIOL_padtest_ctrl': */
#define MSK_USED_BITS_NIOL_padtest_ctrl 0x000001ffU

enum {
  BFW_NIOL_padtest_ctrl_oe        = 1,  /* [0] */
  BFW_NIOL_padtest_ctrl_ie        = 1,  /* [1] */
  BFW_NIOL_padtest_ctrl_pue       = 1,  /* [2] */
  BFW_NIOL_padtest_ctrl_pde       = 1,  /* [3] */
  BFW_NIOL_padtest_ctrl_ds        = 1,  /* [4] */
  BFW_NIOL_padtest_ctrl_mode      = 2,  /* [6:5] */
  BFW_NIOL_padtest_ctrl_en_tm     = 1,  /* [7] */
  BFW_NIOL_padtest_ctrl_en_ntm    = 1,  /* [8] */
  BFW_NIOL_padtest_ctrl_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_PADTEST_CTRL_BIT_Ttag {
  unsigned int oe        : BFW_NIOL_padtest_ctrl_oe;        /* output-enable for IOs used as outputs in the programmed mode.                                                   */
                                                            /* OEs of IOs used as inputs and IOs not used in the programmed mode are disabled.                                 */
  unsigned int ie        : BFW_NIOL_padtest_ctrl_ie;        /* input-enable,                                                                                                   */
  unsigned int pue       : BFW_NIOL_padtest_ctrl_pue;       /* pull-up-enable,                                                                                                 */
  unsigned int pde       : BFW_NIOL_padtest_ctrl_pde;       /* pull-down-enable,                                                                                               */
  unsigned int ds        : BFW_NIOL_padtest_ctrl_ds;        /* drive strength,                                                                                                 */
  unsigned int mode      : BFW_NIOL_padtest_ctrl_mode;      /* mode select 0 for padtest_i2o_mode0, 1 for padtest_i2o_mode1,...                                                */
  unsigned int en_tm     : BFW_NIOL_padtest_ctrl_en_tm;     /* Enable for IOs not used for testmode purpose (i.e. all but por_n_testmode-bypass and scan_testmode_clr)         */
  unsigned int en_ntm    : BFW_NIOL_padtest_ctrl_en_ntm;    /* Enable for IOs used for testmode purpose (i.e. only for por_n_testmode-bypass and scan_testmode_clr)            */
                                                            /* The programmed value is ignored when the global testmode is active. PAD test for these signal is disabled then. */
  unsigned int reserved1 : BFW_NIOL_padtest_ctrl_reserved1; /* reserved                                                                                                        */
} NIOL_PADTEST_CTRL_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_PADTEST_CTRL_BIT_T bf;
} NIOL_PADTEST_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register clk_test_ctrl */
/* => Clock test control register: The UART_A TX-clock can be divided mapped to an output (view pinning sheet). */
/*    The UART_A TX-clock can be driven by the XTAL or the divided or undivided PLL (view asic_ctrl_clk_uart_a_config). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_clk_test_ctrl       0x00000050U
#define Adr_NIOL_test_ctrl_clk_test_ctrl 0x000004D0U
#define Adr_NIOL_clk_test_ctrl           0x000004D0U
#define DFLT_VAL_NIOL_clk_test_ctrl      0x00000000U

#define MSK_NIOL_clk_test_ctrl_div         0x000000ffU
#define SRT_NIOL_clk_test_ctrl_div         0
#define DFLT_VAL_NIOL_clk_test_ctrl_div    0x00000000U
#define DFLT_BF_VAL_NIOL_clk_test_ctrl_div 0x00000000U
#define MSK_NIOL_clk_test_ctrl_en          0x00000100U
#define SRT_NIOL_clk_test_ctrl_en          8
#define DFLT_VAL_NIOL_clk_test_ctrl_en     0x00000000U
#define DFLT_BF_VAL_NIOL_clk_test_ctrl_en  0x00000000U

/* all used bits of 'NIOL_clk_test_ctrl': */
#define MSK_USED_BITS_NIOL_clk_test_ctrl 0x000001ffU

enum {
  BFW_NIOL_clk_test_ctrl_div       = 8,  /* [7:0] */
  BFW_NIOL_clk_test_ctrl_en        = 1,  /* [8] */
  BFW_NIOL_clk_test_ctrl_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_CLK_TEST_CTRL_BIT_Ttag {
  unsigned int div       : BFW_NIOL_clk_test_ctrl_div;       /* Clock divider value:                                */
                                                             /*  0:      UART_A TX clock is not divided             */
                                                             /*  1..255: UART_A TX clock divided by div*2           */
  unsigned int en        : BFW_NIOL_clk_test_ctrl_en;        /* Enable: Select test-clock output in IO multiplexing */
  unsigned int reserved1 : BFW_NIOL_clk_test_ctrl_reserved1; /* reserved                                            */
} NIOL_CLK_TEST_CTRL_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_CLK_TEST_CTRL_BIT_T bf;
} NIOL_CLK_TEST_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register d_testbus_ctrl */
/* => d_testbus control register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_d_testbus_ctrl       0x00000054U
#define Adr_NIOL_test_ctrl_d_testbus_ctrl 0x000004D4U
#define Adr_NIOL_d_testbus_ctrl           0x000004D4U
#define DFLT_VAL_NIOL_d_testbus_ctrl      0x00000001U

#define MSK_NIOL_d_testbus_ctrl_force_func         0x00000001U
#define SRT_NIOL_d_testbus_ctrl_force_func         0
#define DFLT_VAL_NIOL_d_testbus_ctrl_force_func    0x00000001U
#define DFLT_BF_VAL_NIOL_d_testbus_ctrl_force_func 0x00000001U

/* all used bits of 'NIOL_d_testbus_ctrl': */
#define MSK_USED_BITS_NIOL_d_testbus_ctrl 0x00000001U

enum {
  BFW_NIOL_d_testbus_ctrl_force_func = 1,  /* [0] */
  BFW_NIOL_d_testbus_ctrl_reserved1  = 31  /* [31:1] */
};

typedef struct NIOL_D_TESTBUS_CTRL_BIT_Ttag {
  unsigned int force_func : BFW_NIOL_d_testbus_ctrl_force_func; /* Force all digital outputs to analog-top to the functional mode (the core-outputs) instead of d_testbus values.       */
                                                                /* This bit has higher priority than the selection by the d_testbus*_cfg registers. It is dedicated to change the       */
                                                                /* d_testbus*_cfg-registers without producing hazards on the signals to analog-top. So the recommended way for          */
                                                                /* programming the d_testbus*_cfg-registers is:                                                                         */
                                                                /* 1. program the 'force_func' to 1 (all outputs to analog-top are driven by the functional core signals).              */
                                                                /* 2. program the d_testbus*_cfg-registers to assign certain analog-top signals to be driven from the d_testbus inputs. */
                                                                /* 3. program the 'force_func' to 0 (the d_testbus-signals are applied to the analog_top now).                          */
  unsigned int reserved1  : BFW_NIOL_d_testbus_ctrl_reserved1;  /* reserved                                                                                                             */
} NIOL_D_TESTBUS_CTRL_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_D_TESTBUS_CTRL_BIT_T bf;
} NIOL_D_TESTBUS_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register d_testbus0_cfg */
/* => d_testbus configuration register, cookie protected. */
/*    Use C header file './top_testlogic_consts.h' for signal selection. */
/*        {      |                      | border=1 */
/*        Coding d_-top-signal          d_testbus[0] */
/*        0x00   non                    d_testbus[0] disabled */
/*        0x01   d_adc_sdm_clk          output */
/*        0x02   d_gate_a_oe[0]         output */
/*        0x03   d_gate_a_oe[1]         output */
/*        0x04   d_gate_a_oe[2]         output */
/*        0x05   d_gate_b_oe[0]         output */
/*        0x06   d_gate_b_oe[1]         output */
/*        0x07   d_gate_b_oe[2]         output */
/*        0x08   d_gate_c_oe[0]         output */
/*        0x09   d_gate_c_oe[1]         output */
/*        0x0a   d_gate_c_oe[2]         output */
/*        0x0b   d_gate_d_oe[0]         output */
/*        0x0c   d_gate_d_oe[1]         output */
/*        0x0d   d_gate_d_oe[2]         output */
/*        0x0e   d_gate_a_on[0]         output */
/*        0x0f   d_gate_a_on[1]         output */
/*        0x10   d_gate_a_on[2]         output */
/*        0x11   d_gate_b_on[0]         output */
/*        0x12   d_gate_b_on[1]         output */
/*        0x13   d_gate_b_on[2]         output */
/*        0x14   d_gate_c_on[0]         output */
/*        0x15   d_gate_c_on[1]         output */
/*        0x16   d_gate_c_on[2]         output */
/*        0x17   d_gate_d_on[0]         output */
/*        0x18   d_gate_d_on[1]         output */
/*        0x19   d_gate_d_on[2]         output */
/*        0x1a   d_gate_a_sense_swap[0] output */
/*        0x1b   d_gate_a_sense_swap[1] output */
/*        0x1c   d_gate_a_sense_swap[2] output */
/*        0x1d   d_gate_b_sense_swap[0] output */
/*        0x1e   d_gate_b_sense_swap[1] output */
/*        0x1f   d_gate_b_sense_swap[2] output */
/*        0x20   d_gate_c_sense_swap[0] output */
/*        0x21   d_gate_c_sense_swap[1] output */
/*        0x22   d_gate_c_sense_swap[2] output */
/*        0x23   d_gate_d_sense_swap[0] output */
/*        0x24   d_gate_d_sense_swap[1] output */
/*        0x25   d_gate_d_sense_swap[2] output */
/*        0x26   d_iol_a_cq_isink_on    output */
/*        0x27   d_iol_a_di_isink_on    output */
/*        0x28   d_iol_b_cq_isink_on    output */
/*        0x29   d_iol_b_di_isink_on    output */
/*        0x2a   d_iol_c_cq_isink_on    output */
/*        0x2b   d_iol_c_di_isink_on    output */
/*        0x2c   d_iol_d_cq_isink_on    output */
/*        0x2d   d_iol_d_di_isink_on    output */
/*        0x2e   d_di_x_isink_on        output */
/*        0x2f   d_iol_a_tx_hs_oe       output */
/*        0x30   d_iol_b_tx_hs_oe       output */
/*        0x31   d_iol_c_tx_hs_oe       output */
/*        0x32   d_iol_d_tx_hs_oe       output */
/*        0x33   d_iol_a_tx_hs_slew_on  output */
/*        0x34   d_iol_b_tx_hs_slew_on  output */
/*        0x35   d_iol_c_tx_hs_slew_on  output */
/*        0x36   d_iol_d_tx_hs_slew_on  output */
/*        0x37   d_iol_a_tx_ls_oe       output */
/*        0x38   d_iol_b_tx_ls_oe       output */
/*        0x39   d_iol_c_tx_ls_oe       output */
/*        0x3a   d_iol_d_tx_ls_oe       output */
/*        0x3b   d_iol_a_tx_ls_slew_on  output */
/*        0x3c   d_iol_b_tx_ls_slew_on  output */
/*        0x3d   d_iol_c_tx_ls_slew_on  output */
/*        0x3e   d_iol_d_tx_ls_slew_on  output */
/*        0x3f   d_nres_por             input */
/*        0x40   d_nres_pw1v8a          input */
/*        0x41   d_nres_pw1v8d          input */
/*        0x42   d_pll_fout             input */
/*        0x43   d_adc_sdm_data         input */
/*        0x44   d_vdd_iol_uv           input */
/*        0x45   d_gate_a_clamp[0]      input */
/*        0x46   d_gate_a_clamp[1]      input */
/*        0x47   d_gate_a_clamp[2]      input */
/*        0x48   d_gate_b_clamp[0]      input */
/*        0x49   d_gate_b_clamp[1]      input */
/*        0x4a   d_gate_b_clamp[2]      input */
/*        0x4b   d_gate_c_clamp[0]      input */
/*        0x4c   d_gate_c_clamp[1]      input */
/*        0x4d   d_gate_c_clamp[2]      input */
/*        0x4e   d_gate_d_clamp[0]      input */
/*        0x4f   d_gate_d_clamp[1]      input */
/*        0x50   d_gate_d_clamp[2]      input */
/*        0x51   d_gate_a_revpol[0]     input */
/*        0x52   d_gate_a_revpol[1]     input */
/*        0x53   d_gate_a_revpol[2]     input */
/*        0x54   d_gate_b_revpol[0]     input */
/*        0x55   d_gate_b_revpol[1]     input */
/*        0x56   d_gate_b_revpol[2]     input */
/*        0x57   d_gate_c_revpol[0]     input */
/*        0x58   d_gate_c_revpol[1]     input */
/*        0x59   d_gate_c_revpol[2]     input */
/*        0x5a   d_gate_d_revpol[0]     input */
/*        0x5b   d_gate_d_revpol[1]     input */
/*        0x5c   d_gate_d_revpol[2]     input */
/*        0x5d   d_gate_a_uv[0]         input */
/*        0x5e   d_gate_a_uv[1]         input */
/*        0x5f   d_gate_a_uv[2]         input */
/*        0x60   d_gate_b_uv[0]         input */
/*        0x61   d_gate_b_uv[1]         input */
/*        0x62   d_gate_b_uv[2]         input */
/*        0x63   d_gate_c_uv[0]         input */
/*        0x64   d_gate_c_uv[1]         input */
/*        0x65   d_gate_c_uv[2]         input */
/*        0x66   d_gate_d_uv[0]         input */
/*        0x67   d_gate_d_uv[1]         input */
/*        0x68   d_gate_d_uv[2]         input */
/*        0x69   d_iol_a_cq_rx          input */
/*        0x6a   d_iol_a_di_rx          input */
/*        0x6b   d_iol_b_cq_rx          input */
/*        0x6c   d_iol_b_di_rx          input */
/*        0x6d   d_iol_c_cq_rx          input */
/*        0x6e   d_iol_c_di_rx          input */
/*        0x6f   d_iol_d_cq_rx          input */
/*        0x70   d_iol_d_di_rx          input */
/*        0x71   d_di_x_rx              input */
/*        0x72   d_iol_a_tx_hs_oe_ok    input */
/*        0x73   d_iol_b_tx_hs_oe_ok    input */
/*        0x74   d_iol_c_tx_hs_oe_ok    input */
/*        0x75   d_iol_d_tx_hs_oe_ok    input */
/*        0x76   d_iol_a_tx_ls_oe_ok    input */
/*        0x77   d_iol_b_tx_ls_oe_ok    input */
/*        0x78   d_iol_c_tx_ls_oe_ok    input */
/*        0x79   d_iol_d_tx_ls_oe_ok    input */
/*        ...    reserved               reserved } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_d_testbus0_cfg       0x00000058U
#define Adr_NIOL_test_ctrl_d_testbus0_cfg 0x000004D8U
#define Adr_NIOL_d_testbus0_cfg           0x000004D8U
#define DFLT_VAL_NIOL_d_testbus0_cfg      0x00000000U

#define MSK_NIOL_d_testbus0_cfg_d_testbus_sel         0x0000007fU
#define SRT_NIOL_d_testbus0_cfg_d_testbus_sel         0
#define DFLT_VAL_NIOL_d_testbus0_cfg_d_testbus_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_d_testbus0_cfg_d_testbus_sel 0x00000000U

/* all used bits of 'NIOL_d_testbus0_cfg': */
#define MSK_USED_BITS_NIOL_d_testbus0_cfg 0x0000007fU

enum {
  BFW_NIOL_d_testbus0_cfg_d_testbus_sel = 7,  /* [6:0] */
  BFW_NIOL_d_testbus0_cfg_reserved1     = 25  /* [31:7] */
};

typedef struct NIOL_D_TESTBUS0_CFG_BIT_Ttag {
  unsigned int d_testbus_sel : BFW_NIOL_d_testbus0_cfg_d_testbus_sel; /* Select for d_testbus[0] signal.                                                                                     */
                                                                      /* To avoid hazards when programming this register, disable the d_testbus first by register d_testbus_ctrl.force_func. */
  unsigned int reserved1     : BFW_NIOL_d_testbus0_cfg_reserved1;     /* reserved                                                                                                            */
} NIOL_D_TESTBUS0_CFG_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_D_TESTBUS0_CFG_BIT_T bf;
} NIOL_D_TESTBUS0_CFG_T;

/* --------------------------------------------------------------------- */
/* Register d_testbus1_cfg */
/* => d_testbus configuration register, cookie protected. */
/*    For signal selection coding (bits d_testbus_sel) look at header of register 'd_testbus0_cfg'. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_d_testbus1_cfg       0x0000005CU
#define Adr_NIOL_test_ctrl_d_testbus1_cfg 0x000004DCU
#define Adr_NIOL_d_testbus1_cfg           0x000004DCU
#define DFLT_VAL_NIOL_d_testbus1_cfg      0x00000000U

#define MSK_NIOL_d_testbus1_cfg_d_testbus_sel         0x0000007fU
#define SRT_NIOL_d_testbus1_cfg_d_testbus_sel         0
#define DFLT_VAL_NIOL_d_testbus1_cfg_d_testbus_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_d_testbus1_cfg_d_testbus_sel 0x00000000U

/* all used bits of 'NIOL_d_testbus1_cfg': */
#define MSK_USED_BITS_NIOL_d_testbus1_cfg 0x0000007fU

enum {
  BFW_NIOL_d_testbus1_cfg_d_testbus_sel = 7,  /* [6:0] */
  BFW_NIOL_d_testbus1_cfg_reserved1     = 25  /* [31:7] */
};

typedef struct NIOL_D_TESTBUS1_CFG_BIT_Ttag {
  unsigned int d_testbus_sel : BFW_NIOL_d_testbus1_cfg_d_testbus_sel; /* Select for d_testbus[1] signal.                                                                                     */
                                                                      /* To avoid hazards when programming this register, disable the d_testbus first by register d_testbus_ctrl.force_func. */
  unsigned int reserved1     : BFW_NIOL_d_testbus1_cfg_reserved1;     /* reserved                                                                                                            */
} NIOL_D_TESTBUS1_CFG_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_D_TESTBUS1_CFG_BIT_T bf;
} NIOL_D_TESTBUS1_CFG_T;

/* --------------------------------------------------------------------- */
/* Register d_testbus2_cfg */
/* => d_testbus configuration register, cookie protected. */
/*    For signal selection coding (bits d_testbus_sel) look at header of register 'd_testbus0_cfg'. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_d_testbus2_cfg       0x00000060U
#define Adr_NIOL_test_ctrl_d_testbus2_cfg 0x000004E0U
#define Adr_NIOL_d_testbus2_cfg           0x000004E0U
#define DFLT_VAL_NIOL_d_testbus2_cfg      0x00000000U

#define MSK_NIOL_d_testbus2_cfg_d_testbus_sel         0x0000007fU
#define SRT_NIOL_d_testbus2_cfg_d_testbus_sel         0
#define DFLT_VAL_NIOL_d_testbus2_cfg_d_testbus_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_d_testbus2_cfg_d_testbus_sel 0x00000000U

/* all used bits of 'NIOL_d_testbus2_cfg': */
#define MSK_USED_BITS_NIOL_d_testbus2_cfg 0x0000007fU

enum {
  BFW_NIOL_d_testbus2_cfg_d_testbus_sel = 7,  /* [6:0] */
  BFW_NIOL_d_testbus2_cfg_reserved1     = 25  /* [31:7] */
};

typedef struct NIOL_D_TESTBUS2_CFG_BIT_Ttag {
  unsigned int d_testbus_sel : BFW_NIOL_d_testbus2_cfg_d_testbus_sel; /* Select for d_testbus[2] signal.                                                                                     */
                                                                      /* To avoid hazards when programming this register, disable the d_testbus first by register d_testbus_ctrl.force_func. */
  unsigned int reserved1     : BFW_NIOL_d_testbus2_cfg_reserved1;     /* reserved                                                                                                            */
} NIOL_D_TESTBUS2_CFG_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_D_TESTBUS2_CFG_BIT_T bf;
} NIOL_D_TESTBUS2_CFG_T;

/* --------------------------------------------------------------------- */
/* Register d_testbus3_cfg */
/* => d_testbus configuration register, cookie protected. */
/*    For signal selection coding (bits d_testbus_sel) look at header of register 'd_testbus0_cfg'. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_d_testbus3_cfg       0x00000064U
#define Adr_NIOL_test_ctrl_d_testbus3_cfg 0x000004E4U
#define Adr_NIOL_d_testbus3_cfg           0x000004E4U
#define DFLT_VAL_NIOL_d_testbus3_cfg      0x00000000U

#define MSK_NIOL_d_testbus3_cfg_d_testbus_sel         0x0000007fU
#define SRT_NIOL_d_testbus3_cfg_d_testbus_sel         0
#define DFLT_VAL_NIOL_d_testbus3_cfg_d_testbus_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_d_testbus3_cfg_d_testbus_sel 0x00000000U

/* all used bits of 'NIOL_d_testbus3_cfg': */
#define MSK_USED_BITS_NIOL_d_testbus3_cfg 0x0000007fU

enum {
  BFW_NIOL_d_testbus3_cfg_d_testbus_sel = 7,  /* [6:0] */
  BFW_NIOL_d_testbus3_cfg_reserved1     = 25  /* [31:7] */
};

typedef struct NIOL_D_TESTBUS3_CFG_BIT_Ttag {
  unsigned int d_testbus_sel : BFW_NIOL_d_testbus3_cfg_d_testbus_sel; /* Select for d_testbus[3] signal.                                                                                     */
                                                                      /* To avoid hazards when programming this register, disable the d_testbus first by register d_testbus_ctrl.force_func. */
  unsigned int reserved1     : BFW_NIOL_d_testbus3_cfg_reserved1;     /* reserved                                                                                                            */
} NIOL_D_TESTBUS3_CFG_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_D_TESTBUS3_CFG_BIT_T bf;
} NIOL_D_TESTBUS3_CFG_T;


/* ===================================================================== */

/* Area of wdg_sys */

/* ===================================================================== */

#define Addr_NIOL_wdg_sys 0x00000500U

/* --------------------------------------------------------------------- */
/* Register wdg_sys_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_wdg_sys_cfg     0x00000000U
#define Adr_NIOL_wdg_sys_wdg_sys_cfg 0x00000500U
#define Adr_NIOL_wdg_sys_cfg         0x00000500U
#define DFLT_VAL_NIOL_wdg_sys_cfg    0x00000000U

#define MSK_NIOL_wdg_sys_cfg_mode               0x00000001U
#define SRT_NIOL_wdg_sys_cfg_mode               0
#define DFLT_VAL_NIOL_wdg_sys_cfg_mode          0x00000000U
#define DFLT_BF_VAL_NIOL_wdg_sys_cfg_mode       0x00000000U
#define MSK_NIOL_wdg_sys_cfg_mode1_lock         0x00000002U
#define SRT_NIOL_wdg_sys_cfg_mode1_lock         1
#define DFLT_VAL_NIOL_wdg_sys_cfg_mode1_lock    0x00000000U
#define DFLT_BF_VAL_NIOL_wdg_sys_cfg_mode1_lock 0x00000000U
#define MSK_NIOL_wdg_sys_cfg_pwd                0x0000fffcU
#define SRT_NIOL_wdg_sys_cfg_pwd                2
#define DFLT_VAL_NIOL_wdg_sys_cfg_pwd           0x00000000U
#define DFLT_BF_VAL_NIOL_wdg_sys_cfg_pwd        0x00000000U

/* all used bits of 'NIOL_wdg_sys_cfg': */
#define MSK_USED_BITS_NIOL_wdg_sys_cfg 0x0000ffffU

enum {
  BFW_NIOL_wdg_sys_cfg_mode       = 1,  /* [0] */
  BFW_NIOL_wdg_sys_cfg_mode1_lock = 1,  /* [1] */
  BFW_NIOL_wdg_sys_cfg_pwd        = 14, /* [15:2] */
  BFW_NIOL_wdg_sys_cfg_reserved1  = 16  /* [31:16] */
};

typedef struct NIOL_WDG_SYS_CFG_BIT_Ttag {
  unsigned int mode       : BFW_NIOL_wdg_sys_cfg_mode;       /* 0: disabled 1: enabled.                                                      */
  unsigned int mode1_lock : BFW_NIOL_wdg_sys_cfg_mode1_lock; /* 1: set mode (bit0) to 1 and register cannot be set changed until system rest */
  unsigned int pwd        : BFW_NIOL_wdg_sys_cfg_pwd;        /* must be 0x3FA for write to be effective                                      */
  unsigned int reserved1  : BFW_NIOL_wdg_sys_cfg_reserved1;  /* reserved                                                                     */
} NIOL_WDG_SYS_CFG_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_WDG_SYS_CFG_BIT_T bf;
} NIOL_WDG_SYS_CFG_T;

/* --------------------------------------------------------------------- */
/* Register wdg_sys_cmd */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_wdg_sys_cmd     0x00000004U
#define Adr_NIOL_wdg_sys_wdg_sys_cmd 0x00000504U
#define Adr_NIOL_wdg_sys_cmd         0x00000504U
#define DFLT_VAL_NIOL_wdg_sys_cmd    0x00000000U

#define MSK_NIOL_wdg_sys_cmd_val         0x0000ffffU
#define SRT_NIOL_wdg_sys_cmd_val         0
#define DFLT_VAL_NIOL_wdg_sys_cmd_val    0x00000000U
#define DFLT_BF_VAL_NIOL_wdg_sys_cmd_val 0x00000000U

/* all used bits of 'NIOL_wdg_sys_cmd': */
#define MSK_USED_BITS_NIOL_wdg_sys_cmd 0x0000ffffU

enum {
  BFW_NIOL_wdg_sys_cmd_val       = 16, /* [15:0] */
  BFW_NIOL_wdg_sys_cmd_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_WDG_SYS_CMD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_wdg_sys_cmd_val;       /* When the sequence 0x72B4 0xDE80 0xD281 is written to this register */
                                                           /* then the watchdog is restarted (WDOG_CNT is set to WDOG_CNT_RLD).  */
                                                           /* and (WDOG_PS is set to WDOG_PS_RLD)                                */
                                                           /* When the value 0xDEAD is written a system reset is asserted.       */
  unsigned int reserved1 : BFW_NIOL_wdg_sys_cmd_reserved1; /* reserved                                                           */
} NIOL_WDG_SYS_CMD_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_WDG_SYS_CMD_BIT_T bf;
} NIOL_WDG_SYS_CMD_T;

/* --------------------------------------------------------------------- */
/* Register wdg_sys_cnt_upper_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_wdg_sys_cnt_upper_rld     0x00000008U
#define Adr_NIOL_wdg_sys_wdg_sys_cnt_upper_rld 0x00000508U
#define Adr_NIOL_wdg_sys_cnt_upper_rld         0x00000508U
#define DFLT_VAL_NIOL_wdg_sys_cnt_upper_rld    0x000007ffU

#define MSK_NIOL_wdg_sys_cnt_upper_rld_val         0x000007ffU
#define SRT_NIOL_wdg_sys_cnt_upper_rld_val         0
#define DFLT_VAL_NIOL_wdg_sys_cnt_upper_rld_val    0x000007ffU
#define DFLT_BF_VAL_NIOL_wdg_sys_cnt_upper_rld_val 0x000007ffU

/* all used bits of 'NIOL_wdg_sys_cnt_upper_rld': */
#define MSK_USED_BITS_NIOL_wdg_sys_cnt_upper_rld 0x000007ffU

enum {
  BFW_NIOL_wdg_sys_cnt_upper_rld_val       = 11, /* [10:0] */
  BFW_NIOL_wdg_sys_cnt_upper_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_WDG_SYS_CNT_UPPER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_wdg_sys_cnt_upper_rld_val;       /* Reload value for watchdog prescaler.   */
                                                                     /* Can only be written when WDOG_CFG.en=0 */
  unsigned int reserved1 : BFW_NIOL_wdg_sys_cnt_upper_rld_reserved1; /* reserved                               */
} NIOL_WDG_SYS_CNT_UPPER_RLD_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_WDG_SYS_CNT_UPPER_RLD_BIT_T bf;
} NIOL_WDG_SYS_CNT_UPPER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register wdg_sys_cnt_lower_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_wdg_sys_cnt_lower_rld     0x0000000CU
#define Adr_NIOL_wdg_sys_wdg_sys_cnt_lower_rld 0x0000050CU
#define Adr_NIOL_wdg_sys_cnt_lower_rld         0x0000050CU
#define DFLT_VAL_NIOL_wdg_sys_cnt_lower_rld    0x0000ffffU

#define MSK_NIOL_wdg_sys_cnt_lower_rld_val         0x0000ffffU
#define SRT_NIOL_wdg_sys_cnt_lower_rld_val         0
#define DFLT_VAL_NIOL_wdg_sys_cnt_lower_rld_val    0x0000ffffU
#define DFLT_BF_VAL_NIOL_wdg_sys_cnt_lower_rld_val 0x0000ffffU

/* all used bits of 'NIOL_wdg_sys_cnt_lower_rld': */
#define MSK_USED_BITS_NIOL_wdg_sys_cnt_lower_rld 0x0000ffffU

enum {
  BFW_NIOL_wdg_sys_cnt_lower_rld_val       = 16, /* [15:0] */
  BFW_NIOL_wdg_sys_cnt_lower_rld_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_WDG_SYS_CNT_LOWER_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_wdg_sys_cnt_lower_rld_val;       /* Reload value for watchdog counter.     */
                                                                     /* Can only be written when WDOG_CFG.en=0 */
  unsigned int reserved1 : BFW_NIOL_wdg_sys_cnt_lower_rld_reserved1; /* reserved                               */
} NIOL_WDG_SYS_CNT_LOWER_RLD_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_WDG_SYS_CNT_LOWER_RLD_BIT_T bf;
} NIOL_WDG_SYS_CNT_LOWER_RLD_T;

/* --------------------------------------------------------------------- */
/* Register wdg_sys_cnt_upper */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_wdg_sys_cnt_upper     0x00000010U
#define Adr_NIOL_wdg_sys_wdg_sys_cnt_upper 0x00000510U
#define Adr_NIOL_wdg_sys_cnt_upper         0x00000510U

#define MSK_NIOL_wdg_sys_cnt_upper_val 0x000007ffU
#define SRT_NIOL_wdg_sys_cnt_upper_val 0

/* all used bits of 'NIOL_wdg_sys_cnt_upper': */
#define MSK_USED_BITS_NIOL_wdg_sys_cnt_upper 0x000007ffU

enum {
  BFW_NIOL_wdg_sys_cnt_upper_val       = 11, /* [10:0] */
  BFW_NIOL_wdg_sys_cnt_upper_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_WDG_SYS_CNT_UPPER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_wdg_sys_cnt_upper_val;       /* Prescaler for watchdog counter. */
  unsigned int reserved1 : BFW_NIOL_wdg_sys_cnt_upper_reserved1; /* reserved                        */
} NIOL_WDG_SYS_CNT_UPPER_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_WDG_SYS_CNT_UPPER_BIT_T bf;
} NIOL_WDG_SYS_CNT_UPPER_T;

/* --------------------------------------------------------------------- */
/* Register wdg_sys_cnt_lower */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_wdg_sys_cnt_lower     0x00000014U
#define Adr_NIOL_wdg_sys_wdg_sys_cnt_lower 0x00000514U
#define Adr_NIOL_wdg_sys_cnt_lower         0x00000514U

#define MSK_NIOL_wdg_sys_cnt_lower_val 0x0000ffffU
#define SRT_NIOL_wdg_sys_cnt_lower_val 0

/* all used bits of 'NIOL_wdg_sys_cnt_lower': */
#define MSK_USED_BITS_NIOL_wdg_sys_cnt_lower 0x0000ffffU

enum {
  BFW_NIOL_wdg_sys_cnt_lower_val       = 16, /* [15:0] */
  BFW_NIOL_wdg_sys_cnt_lower_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_WDG_SYS_CNT_LOWER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_wdg_sys_cnt_lower_val;       /* Watchdog counter.                                                                              */
                                                                 /* When WDOG_CFG.mode is set from 0 to 1 or when correct sequence is written to WDOG_CMD:         */
                                                                 /* WDOG <= WDOG_RLD                                                                               */
                                                                 /* Decremented every WDOG_PS_RLD clock cycles when WDOG_CFG.mode is 1. and debug out form CPU = 0 */
                                                                 /* Upon reaching 0 a system reset is triggered.                                                   */
  unsigned int reserved1 : BFW_NIOL_wdg_sys_cnt_lower_reserved1; /* reserved                                                                                       */
} NIOL_WDG_SYS_CNT_LOWER_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_WDG_SYS_CNT_LOWER_BIT_T bf;
} NIOL_WDG_SYS_CNT_LOWER_T;


/* ===================================================================== */

/* Area of iol_gd */

/* ===================================================================== */

#define Addr_NIOL_iol_gd 0x00000600U

/* --------------------------------------------------------------------- */
/* Register iol_gd_blank_time */
/* => Gate driver blank time global configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_blank_time    0x00000000U
#define Adr_NIOL_iol_gd_iol_gd_blank_time 0x00000600U
#define Adr_NIOL_iol_gd_blank_time        0x00000600U
#define DFLT_VAL_NIOL_iol_gd_blank_time   0x00000000U

#define MSK_NIOL_iol_gd_blank_time_prescaler         0x000003ffU
#define SRT_NIOL_iol_gd_blank_time_prescaler         0
#define DFLT_VAL_NIOL_iol_gd_blank_time_prescaler    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_blank_time_prescaler 0x00000000U

/* all used bits of 'NIOL_iol_gd_blank_time': */
#define MSK_USED_BITS_NIOL_iol_gd_blank_time 0x000003ffU

enum {
  BFW_NIOL_iol_gd_blank_time_prescaler = 10, /* [9:0] */
  BFW_NIOL_iol_gd_blank_time_reserved1 = 22  /* [31:10] */
};

typedef struct NIOL_IOL_GD_BLANK_TIME_BIT_Ttag {
  unsigned int prescaler : BFW_NIOL_iol_gd_blank_time_prescaler; /* Prescaler value +1 for the blank time of all gate drivers */
                                                                 /* (1: system clock by 2, 2: system clock by 3 ...)          */
  unsigned int reserved1 : BFW_NIOL_iol_gd_blank_time_reserved1; /* reserved                                                  */
} NIOL_IOL_GD_BLANK_TIME_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_GD_BLANK_TIME_BIT_T bf;
} NIOL_IOL_GD_BLANK_TIME_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_oc_ifilter */
/* => Gate driver over current global configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_oc_ifilter    0x00000004U
#define Adr_NIOL_iol_gd_iol_gd_oc_ifilter 0x00000604U
#define Adr_NIOL_iol_gd_oc_ifilter        0x00000604U
#define DFLT_VAL_NIOL_iol_gd_oc_ifilter   0x00000000U

#define MSK_NIOL_iol_gd_oc_ifilter_prescaler         0x000000ffU
#define SRT_NIOL_iol_gd_oc_ifilter_prescaler         0
#define DFLT_VAL_NIOL_iol_gd_oc_ifilter_prescaler    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_oc_ifilter_prescaler 0x00000000U

/* all used bits of 'NIOL_iol_gd_oc_ifilter': */
#define MSK_USED_BITS_NIOL_iol_gd_oc_ifilter 0x000000ffU

enum {
  BFW_NIOL_iol_gd_oc_ifilter_prescaler = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_oc_ifilter_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_OC_IFILTER_BIT_Ttag {
  unsigned int prescaler : BFW_NIOL_iol_gd_oc_ifilter_prescaler; /* Prescaler value +1 for the over current filter of all gate drivers */
                                                                 /* (1: system clock by 2, 2: system clock by 3 ...)                   */
  unsigned int reserved1 : BFW_NIOL_iol_gd_oc_ifilter_reserved1; /* reserved                                                           */
} NIOL_IOL_GD_OC_IFILTER_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_GD_OC_IFILTER_BIT_T bf;
} NIOL_IOL_GD_OC_IFILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_uv_ifilter */
/* => Gate driver under voltage global configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_uv_ifilter    0x00000008U
#define Adr_NIOL_iol_gd_iol_gd_uv_ifilter 0x00000608U
#define Adr_NIOL_iol_gd_uv_ifilter        0x00000608U
#define DFLT_VAL_NIOL_iol_gd_uv_ifilter   0x00000000U

#define MSK_NIOL_iol_gd_uv_ifilter_prescaler         0x000000ffU
#define SRT_NIOL_iol_gd_uv_ifilter_prescaler         0
#define DFLT_VAL_NIOL_iol_gd_uv_ifilter_prescaler    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_uv_ifilter_prescaler 0x00000000U
#define MSK_NIOL_iol_gd_uv_ifilter_threshold         0x00000f00U
#define SRT_NIOL_iol_gd_uv_ifilter_threshold         8
#define DFLT_VAL_NIOL_iol_gd_uv_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_uv_ifilter_threshold 0x00000000U

/* all used bits of 'NIOL_iol_gd_uv_ifilter': */
#define MSK_USED_BITS_NIOL_iol_gd_uv_ifilter 0x00000fffU

enum {
  BFW_NIOL_iol_gd_uv_ifilter_prescaler = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_uv_ifilter_threshold = 4,  /* [11:8] */
  BFW_NIOL_iol_gd_uv_ifilter_reserved1 = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_UV_IFILTER_BIT_Ttag {
  unsigned int prescaler : BFW_NIOL_iol_gd_uv_ifilter_prescaler; /* Prescaler value +1 for the under voltage integral filter of all gate drivers                                   */
                                                                 /* (1: system clock by 2, 2: system clock by 3 ...)                                                               */
  unsigned int threshold : BFW_NIOL_iol_gd_uv_ifilter_threshold; /* Common threshold for the under voltage integral filter of all gate drivers                                     */
                                                                 /* Value 0 leads to no filtering of under voltage signal.                                                         */
                                                                 /* Other values define the integral filter threshold in prescaled clock cycles + 1. Due to one central prescaler  */
                                                                 /* the exact integral filter threshold varies between this value and value+1.                                     */
                                                                 /* Change this value only, if all DO from SIO module are zero.                                                    */
  unsigned int reserved1 : BFW_NIOL_iol_gd_uv_ifilter_reserved1; /* reserved                                                                                                       */
} NIOL_IOL_GD_UV_IFILTER_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_GD_UV_IFILTER_BIT_T bf;
} NIOL_IOL_GD_UV_IFILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a0 */
/* => Gate driver configuration for port a0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a0    0x0000000CU
#define Adr_NIOL_iol_gd_iol_gd_a0 0x0000060CU
#define Adr_NIOL_iol_gd_a0        0x0000060CU
#define DFLT_VAL_NIOL_iol_gd_a0   0x00000000U

#define MSK_NIOL_iol_gd_a0_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_a0_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_a0_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a0_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_a0_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_a0_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_a0_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a0_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_a0_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_a0_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_a0_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a0_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_a0': */
#define MSK_USED_BITS_NIOL_iol_gd_a0 0x00001fffU

enum {
  BFW_NIOL_iol_gd_a0_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_a0_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_a0_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_a0_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_A0_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_a0_bt_threshold;         /* Blank time for gate driver a0:                                                                                 */
                                                                               /* Value 0 leads to no blanking time.                                                                             */
                                                                               /* Other values define the blanking time in prescaled clock cycles. Due to one central prescaler                  */
                                                                               /* the exact length of the blanking time varies between this value and value+1.                                   */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_a0_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver a0                                                      */
                                                                               /* Value 0 leads to no filtering of over current signal.                                                          */
                                                                               /* Other values define the integral filter threshold in prescaled clock cycles + 1. Due to one central prescaler  */
                                                                               /* the exact integral filter threshold varies between this value and value+1.                                     */
                                                                               /* Change this value only, if DO from SIO module is zero.                                                         */
  unsigned int oc_action            : BFW_NIOL_iol_gd_a0_oc_action;            /* Action when an over current event occurs                                                                       */
                                                                               /* 0: IRQ is asserted                                                                                             */
                                                                               /* 1: IRQ asserted and the gate is turned off as long as the irq event bit is set                                 */
  unsigned int reserved1            : BFW_NIOL_iol_gd_a0_reserved1;            /* reserved                                                                                                       */
} NIOL_IOL_GD_A0_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_A0_BIT_T bf;
} NIOL_IOL_GD_A0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a1 */
/* => Gate driver configuration for port a1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a1    0x00000010U
#define Adr_NIOL_iol_gd_iol_gd_a1 0x00000610U
#define Adr_NIOL_iol_gd_a1        0x00000610U
#define DFLT_VAL_NIOL_iol_gd_a1   0x00000000U

#define MSK_NIOL_iol_gd_a1_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_a1_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_a1_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a1_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_a1_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_a1_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_a1_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a1_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_a1_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_a1_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_a1_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a1_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_a1': */
#define MSK_USED_BITS_NIOL_iol_gd_a1 0x00001fffU

enum {
  BFW_NIOL_iol_gd_a1_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_a1_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_a1_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_a1_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_A1_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_a1_bt_threshold;         /* Blank time for gate driver a1                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_a1_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver a1 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_a1_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_a1_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_A1_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_A1_BIT_T bf;
} NIOL_IOL_GD_A1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a2 */
/* => Gate driver configuration for port a2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a2    0x00000014U
#define Adr_NIOL_iol_gd_iol_gd_a2 0x00000614U
#define Adr_NIOL_iol_gd_a2        0x00000614U
#define DFLT_VAL_NIOL_iol_gd_a2   0x00000000U

#define MSK_NIOL_iol_gd_a2_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_a2_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_a2_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a2_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_a2_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_a2_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_a2_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a2_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_a2_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_a2_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_a2_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_a2_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_a2': */
#define MSK_USED_BITS_NIOL_iol_gd_a2 0x00001fffU

enum {
  BFW_NIOL_iol_gd_a2_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_a2_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_a2_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_a2_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_A2_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_a2_bt_threshold;         /* Blank time for gate driver a2                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_a2_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver a2 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_a2_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_a2_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_A2_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_A2_BIT_T bf;
} NIOL_IOL_GD_A2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_b0 */
/* => Gate driver configuration for port b0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_b0    0x00000018U
#define Adr_NIOL_iol_gd_iol_gd_b0 0x00000618U
#define Adr_NIOL_iol_gd_b0        0x00000618U
#define DFLT_VAL_NIOL_iol_gd_b0   0x00000000U

#define MSK_NIOL_iol_gd_b0_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_b0_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_b0_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b0_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_b0_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_b0_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_b0_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b0_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_b0_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_b0_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_b0_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b0_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_b0': */
#define MSK_USED_BITS_NIOL_iol_gd_b0 0x00001fffU

enum {
  BFW_NIOL_iol_gd_b0_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_b0_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_b0_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_b0_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_B0_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_b0_bt_threshold;         /* Blank time for gate driver b0                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_b0_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver b0 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_b0_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_b0_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_B0_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_B0_BIT_T bf;
} NIOL_IOL_GD_B0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_b1 */
/* => Gate driver configuration for port b1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_b1    0x0000001CU
#define Adr_NIOL_iol_gd_iol_gd_b1 0x0000061CU
#define Adr_NIOL_iol_gd_b1        0x0000061CU
#define DFLT_VAL_NIOL_iol_gd_b1   0x00000000U

#define MSK_NIOL_iol_gd_b1_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_b1_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_b1_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b1_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_b1_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_b1_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_b1_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b1_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_b1_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_b1_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_b1_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b1_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_b1': */
#define MSK_USED_BITS_NIOL_iol_gd_b1 0x00001fffU

enum {
  BFW_NIOL_iol_gd_b1_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_b1_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_b1_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_b1_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_B1_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_b1_bt_threshold;         /* Blank time for gate driver b1                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_b1_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver b1 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_b1_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_b1_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_B1_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_B1_BIT_T bf;
} NIOL_IOL_GD_B1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_b2 */
/* => Gate driver configuration for port b2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_b2    0x00000020U
#define Adr_NIOL_iol_gd_iol_gd_b2 0x00000620U
#define Adr_NIOL_iol_gd_b2        0x00000620U
#define DFLT_VAL_NIOL_iol_gd_b2   0x00000000U

#define MSK_NIOL_iol_gd_b2_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_b2_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_b2_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b2_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_b2_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_b2_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_b2_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b2_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_b2_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_b2_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_b2_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_b2_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_b2': */
#define MSK_USED_BITS_NIOL_iol_gd_b2 0x00001fffU

enum {
  BFW_NIOL_iol_gd_b2_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_b2_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_b2_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_b2_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_B2_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_b2_bt_threshold;         /* Blank time for gate driver b2                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_b2_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver b2 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_b2_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_b2_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_B2_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_B2_BIT_T bf;
} NIOL_IOL_GD_B2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_c0 */
/* => Gate driver configuration for port c0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_c0    0x00000024U
#define Adr_NIOL_iol_gd_iol_gd_c0 0x00000624U
#define Adr_NIOL_iol_gd_c0        0x00000624U
#define DFLT_VAL_NIOL_iol_gd_c0   0x00000000U

#define MSK_NIOL_iol_gd_c0_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_c0_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_c0_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c0_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_c0_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_c0_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_c0_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c0_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_c0_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_c0_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_c0_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c0_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_c0': */
#define MSK_USED_BITS_NIOL_iol_gd_c0 0x00001fffU

enum {
  BFW_NIOL_iol_gd_c0_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_c0_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_c0_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_c0_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_C0_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_c0_bt_threshold;         /* Blank time for gate driver c0                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_c0_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver c0 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_c0_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_c0_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_C0_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_C0_BIT_T bf;
} NIOL_IOL_GD_C0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_c1 */
/* => Gate driver configuration for port c1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_c1    0x00000028U
#define Adr_NIOL_iol_gd_iol_gd_c1 0x00000628U
#define Adr_NIOL_iol_gd_c1        0x00000628U
#define DFLT_VAL_NIOL_iol_gd_c1   0x00000000U

#define MSK_NIOL_iol_gd_c1_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_c1_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_c1_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c1_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_c1_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_c1_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_c1_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c1_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_c1_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_c1_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_c1_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c1_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_c1': */
#define MSK_USED_BITS_NIOL_iol_gd_c1 0x00001fffU

enum {
  BFW_NIOL_iol_gd_c1_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_c1_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_c1_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_c1_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_C1_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_c1_bt_threshold;         /* Blank time for gate driver c1                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_c1_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver c1 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_c1_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_c1_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_C1_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_C1_BIT_T bf;
} NIOL_IOL_GD_C1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_c2 */
/* => Gate driver configuration for port c2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_c2    0x0000002CU
#define Adr_NIOL_iol_gd_iol_gd_c2 0x0000062CU
#define Adr_NIOL_iol_gd_c2        0x0000062CU
#define DFLT_VAL_NIOL_iol_gd_c2   0x00000000U

#define MSK_NIOL_iol_gd_c2_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_c2_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_c2_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c2_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_c2_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_c2_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_c2_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c2_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_c2_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_c2_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_c2_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_c2_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_c2': */
#define MSK_USED_BITS_NIOL_iol_gd_c2 0x00001fffU

enum {
  BFW_NIOL_iol_gd_c2_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_c2_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_c2_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_c2_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_C2_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_c2_bt_threshold;         /* Blank time for gate driver c2                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_c2_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver c2 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_c2_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_c2_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_C2_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_C2_BIT_T bf;
} NIOL_IOL_GD_C2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d0 */
/* => Gate driver configuration for port d0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d0    0x00000030U
#define Adr_NIOL_iol_gd_iol_gd_d0 0x00000630U
#define Adr_NIOL_iol_gd_d0        0x00000630U
#define DFLT_VAL_NIOL_iol_gd_d0   0x00000000U

#define MSK_NIOL_iol_gd_d0_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_d0_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_d0_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d0_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_d0_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_d0_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_d0_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d0_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_d0_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_d0_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_d0_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d0_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_d0': */
#define MSK_USED_BITS_NIOL_iol_gd_d0 0x00001fffU

enum {
  BFW_NIOL_iol_gd_d0_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_d0_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_d0_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_d0_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_D0_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_d0_bt_threshold;         /* Blank time for gate driver a0                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_d0_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver a0 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_d0_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_d0_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_D0_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_D0_BIT_T bf;
} NIOL_IOL_GD_D0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d1 */
/* => Gate driver configuration for port d1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d1    0x00000034U
#define Adr_NIOL_iol_gd_iol_gd_d1 0x00000634U
#define Adr_NIOL_iol_gd_d1        0x00000634U
#define DFLT_VAL_NIOL_iol_gd_d1   0x00000000U

#define MSK_NIOL_iol_gd_d1_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_d1_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_d1_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d1_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_d1_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_d1_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_d1_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d1_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_d1_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_d1_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_d1_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d1_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_d1': */
#define MSK_USED_BITS_NIOL_iol_gd_d1 0x00001fffU

enum {
  BFW_NIOL_iol_gd_d1_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_d1_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_d1_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_d1_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_D1_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_d1_bt_threshold;         /* Blank time for gate driver a0                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_d1_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver a0 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_d1_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_d1_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_D1_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_D1_BIT_T bf;
} NIOL_IOL_GD_D1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2 */
/* => Gate driver configuration for port d2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2    0x00000038U
#define Adr_NIOL_iol_gd_iol_gd_d2 0x00000638U
#define Adr_NIOL_iol_gd_d2        0x00000638U
#define DFLT_VAL_NIOL_iol_gd_d2   0x00000000U

#define MSK_NIOL_iol_gd_d2_bt_threshold                 0x0000003fU
#define SRT_NIOL_iol_gd_d2_bt_threshold                 0
#define DFLT_VAL_NIOL_iol_gd_d2_bt_threshold            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2_bt_threshold         0x00000000U
#define MSK_NIOL_iol_gd_d2_oc_ifilter_threshold         0x00000fc0U
#define SRT_NIOL_iol_gd_d2_oc_ifilter_threshold         6
#define DFLT_VAL_NIOL_iol_gd_d2_oc_ifilter_threshold    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2_oc_ifilter_threshold 0x00000000U
#define MSK_NIOL_iol_gd_d2_oc_action                    0x00001000U
#define SRT_NIOL_iol_gd_d2_oc_action                    12
#define DFLT_VAL_NIOL_iol_gd_d2_oc_action               0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2_oc_action            0x00000000U

/* all used bits of 'NIOL_iol_gd_d2': */
#define MSK_USED_BITS_NIOL_iol_gd_d2 0x00001fffU

enum {
  BFW_NIOL_iol_gd_d2_bt_threshold         = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_d2_oc_ifilter_threshold = 6,  /* [11:6] */
  BFW_NIOL_iol_gd_d2_oc_action            = 1,  /* [12] */
  BFW_NIOL_iol_gd_d2_reserved1            = 19  /* [31:13] */
};

typedef struct NIOL_IOL_GD_D2_BIT_Ttag {
  unsigned int bt_threshold         : BFW_NIOL_iol_gd_d2_bt_threshold;         /* Blank time for gate driver a0                             */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_ifilter_threshold : BFW_NIOL_iol_gd_d2_oc_ifilter_threshold; /* Over current integral filter threshold for gate driver a0 */
                                                                               /* s. gd_a0                                                  */
  unsigned int oc_action            : BFW_NIOL_iol_gd_d2_oc_action;            /* Action when an over current event occurs                  */
                                                                               /* s. gd_a0                                                  */
  unsigned int reserved1            : BFW_NIOL_iol_gd_d2_reserved1;            /* reserved                                                  */
} NIOL_IOL_GD_D2_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_GD_D2_BIT_T bf;
} NIOL_IOL_GD_D2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_oc_fil */
/* => Gate driver filtered over current signals */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_oc_fil    0x0000003CU
#define Adr_NIOL_iol_gd_iol_gd_oc_fil 0x0000063CU
#define Adr_NIOL_iol_gd_oc_fil        0x0000063CU

#define MSK_NIOL_iol_gd_oc_fil_a0 0x00000001U
#define SRT_NIOL_iol_gd_oc_fil_a0 0
#define MSK_NIOL_iol_gd_oc_fil_a1 0x00000002U
#define SRT_NIOL_iol_gd_oc_fil_a1 1
#define MSK_NIOL_iol_gd_oc_fil_a2 0x00000004U
#define SRT_NIOL_iol_gd_oc_fil_a2 2
#define MSK_NIOL_iol_gd_oc_fil_b0 0x00000008U
#define SRT_NIOL_iol_gd_oc_fil_b0 3
#define MSK_NIOL_iol_gd_oc_fil_b1 0x00000010U
#define SRT_NIOL_iol_gd_oc_fil_b1 4
#define MSK_NIOL_iol_gd_oc_fil_b2 0x00000020U
#define SRT_NIOL_iol_gd_oc_fil_b2 5
#define MSK_NIOL_iol_gd_oc_fil_c0 0x00000040U
#define SRT_NIOL_iol_gd_oc_fil_c0 6
#define MSK_NIOL_iol_gd_oc_fil_c1 0x00000080U
#define SRT_NIOL_iol_gd_oc_fil_c1 7
#define MSK_NIOL_iol_gd_oc_fil_c2 0x00000100U
#define SRT_NIOL_iol_gd_oc_fil_c2 8
#define MSK_NIOL_iol_gd_oc_fil_d0 0x00000200U
#define SRT_NIOL_iol_gd_oc_fil_d0 9
#define MSK_NIOL_iol_gd_oc_fil_d1 0x00000400U
#define SRT_NIOL_iol_gd_oc_fil_d1 10
#define MSK_NIOL_iol_gd_oc_fil_d2 0x00000800U
#define SRT_NIOL_iol_gd_oc_fil_d2 11

/* all used bits of 'NIOL_iol_gd_oc_fil': */
#define MSK_USED_BITS_NIOL_iol_gd_oc_fil 0x00000fffU

enum {
  BFW_NIOL_iol_gd_oc_fil_a0        = 1,  /* [0] */
  BFW_NIOL_iol_gd_oc_fil_a1        = 1,  /* [1] */
  BFW_NIOL_iol_gd_oc_fil_a2        = 1,  /* [2] */
  BFW_NIOL_iol_gd_oc_fil_b0        = 1,  /* [3] */
  BFW_NIOL_iol_gd_oc_fil_b1        = 1,  /* [4] */
  BFW_NIOL_iol_gd_oc_fil_b2        = 1,  /* [5] */
  BFW_NIOL_iol_gd_oc_fil_c0        = 1,  /* [6] */
  BFW_NIOL_iol_gd_oc_fil_c1        = 1,  /* [7] */
  BFW_NIOL_iol_gd_oc_fil_c2        = 1,  /* [8] */
  BFW_NIOL_iol_gd_oc_fil_d0        = 1,  /* [9] */
  BFW_NIOL_iol_gd_oc_fil_d1        = 1,  /* [10] */
  BFW_NIOL_iol_gd_oc_fil_d2        = 1,  /* [11] */
  BFW_NIOL_iol_gd_oc_fil_reserved1 = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_OC_FIL_BIT_Ttag {
  unsigned int a0        : BFW_NIOL_iol_gd_oc_fil_a0;        /* filtered d_gate_a_oc[0] signal */
  unsigned int a1        : BFW_NIOL_iol_gd_oc_fil_a1;        /* filtered d_gate_a_oc[1] signal */
  unsigned int a2        : BFW_NIOL_iol_gd_oc_fil_a2;        /* filtered d_gate_a_oc[2] signal */
  unsigned int b0        : BFW_NIOL_iol_gd_oc_fil_b0;        /* filtered d_gate_b_oc[0] signal */
  unsigned int b1        : BFW_NIOL_iol_gd_oc_fil_b1;        /* filtered d_gate_b_oc[1] signal */
  unsigned int b2        : BFW_NIOL_iol_gd_oc_fil_b2;        /* filtered d_gate_b_oc[2] signal */
  unsigned int c0        : BFW_NIOL_iol_gd_oc_fil_c0;        /* filtered d_gate_c_oc[0] signal */
  unsigned int c1        : BFW_NIOL_iol_gd_oc_fil_c1;        /* filtered d_gate_c_oc[1] signal */
  unsigned int c2        : BFW_NIOL_iol_gd_oc_fil_c2;        /* filtered d_gate_c_oc[2] signal */
  unsigned int d0        : BFW_NIOL_iol_gd_oc_fil_d0;        /* filtered d_gate_d_oc[0] signal */
  unsigned int d1        : BFW_NIOL_iol_gd_oc_fil_d1;        /* filtered d_gate_d_oc[1] signal */
  unsigned int d2        : BFW_NIOL_iol_gd_oc_fil_d2;        /* filtered d_gate_d_oc[2] signal */
  unsigned int reserved1 : BFW_NIOL_iol_gd_oc_fil_reserved1; /* reserved                       */
} NIOL_IOL_GD_OC_FIL_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_GD_OC_FIL_BIT_T bf;
} NIOL_IOL_GD_OC_FIL_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_uv_fil */
/* => Gate driver filtered under voltage signals */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_uv_fil    0x00000040U
#define Adr_NIOL_iol_gd_iol_gd_uv_fil 0x00000640U
#define Adr_NIOL_iol_gd_uv_fil        0x00000640U

#define MSK_NIOL_iol_gd_uv_fil_a0 0x00000001U
#define SRT_NIOL_iol_gd_uv_fil_a0 0
#define MSK_NIOL_iol_gd_uv_fil_a1 0x00000002U
#define SRT_NIOL_iol_gd_uv_fil_a1 1
#define MSK_NIOL_iol_gd_uv_fil_a2 0x00000004U
#define SRT_NIOL_iol_gd_uv_fil_a2 2
#define MSK_NIOL_iol_gd_uv_fil_b0 0x00000008U
#define SRT_NIOL_iol_gd_uv_fil_b0 3
#define MSK_NIOL_iol_gd_uv_fil_b1 0x00000010U
#define SRT_NIOL_iol_gd_uv_fil_b1 4
#define MSK_NIOL_iol_gd_uv_fil_b2 0x00000020U
#define SRT_NIOL_iol_gd_uv_fil_b2 5
#define MSK_NIOL_iol_gd_uv_fil_c0 0x00000040U
#define SRT_NIOL_iol_gd_uv_fil_c0 6
#define MSK_NIOL_iol_gd_uv_fil_c1 0x00000080U
#define SRT_NIOL_iol_gd_uv_fil_c1 7
#define MSK_NIOL_iol_gd_uv_fil_c2 0x00000100U
#define SRT_NIOL_iol_gd_uv_fil_c2 8
#define MSK_NIOL_iol_gd_uv_fil_d0 0x00000200U
#define SRT_NIOL_iol_gd_uv_fil_d0 9
#define MSK_NIOL_iol_gd_uv_fil_d1 0x00000400U
#define SRT_NIOL_iol_gd_uv_fil_d1 10
#define MSK_NIOL_iol_gd_uv_fil_d2 0x00000800U
#define SRT_NIOL_iol_gd_uv_fil_d2 11

/* all used bits of 'NIOL_iol_gd_uv_fil': */
#define MSK_USED_BITS_NIOL_iol_gd_uv_fil 0x00000fffU

enum {
  BFW_NIOL_iol_gd_uv_fil_a0        = 1,  /* [0] */
  BFW_NIOL_iol_gd_uv_fil_a1        = 1,  /* [1] */
  BFW_NIOL_iol_gd_uv_fil_a2        = 1,  /* [2] */
  BFW_NIOL_iol_gd_uv_fil_b0        = 1,  /* [3] */
  BFW_NIOL_iol_gd_uv_fil_b1        = 1,  /* [4] */
  BFW_NIOL_iol_gd_uv_fil_b2        = 1,  /* [5] */
  BFW_NIOL_iol_gd_uv_fil_c0        = 1,  /* [6] */
  BFW_NIOL_iol_gd_uv_fil_c1        = 1,  /* [7] */
  BFW_NIOL_iol_gd_uv_fil_c2        = 1,  /* [8] */
  BFW_NIOL_iol_gd_uv_fil_d0        = 1,  /* [9] */
  BFW_NIOL_iol_gd_uv_fil_d1        = 1,  /* [10] */
  BFW_NIOL_iol_gd_uv_fil_d2        = 1,  /* [11] */
  BFW_NIOL_iol_gd_uv_fil_reserved1 = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_UV_FIL_BIT_Ttag {
  unsigned int a0        : BFW_NIOL_iol_gd_uv_fil_a0;        /* filtered d_gate_a_uv[0] signal */
  unsigned int a1        : BFW_NIOL_iol_gd_uv_fil_a1;        /* filtered d_gate_a_uv[1] signal */
  unsigned int a2        : BFW_NIOL_iol_gd_uv_fil_a2;        /* filtered d_gate_a_uv[2] signal */
  unsigned int b0        : BFW_NIOL_iol_gd_uv_fil_b0;        /* filtered d_gate_b_uv[0] signal */
  unsigned int b1        : BFW_NIOL_iol_gd_uv_fil_b1;        /* filtered d_gate_b_uv[1] signal */
  unsigned int b2        : BFW_NIOL_iol_gd_uv_fil_b2;        /* filtered d_gate_b_uv[2] signal */
  unsigned int c0        : BFW_NIOL_iol_gd_uv_fil_c0;        /* filtered d_gate_c_uv[0] signal */
  unsigned int c1        : BFW_NIOL_iol_gd_uv_fil_c1;        /* filtered d_gate_c_uv[1] signal */
  unsigned int c2        : BFW_NIOL_iol_gd_uv_fil_c2;        /* filtered d_gate_c_uv[2] signal */
  unsigned int d0        : BFW_NIOL_iol_gd_uv_fil_d0;        /* filtered d_gate_d_uv[0] signal */
  unsigned int d1        : BFW_NIOL_iol_gd_uv_fil_d1;        /* filtered d_gate_d_uv[1] signal */
  unsigned int d2        : BFW_NIOL_iol_gd_uv_fil_d2;        /* filtered d_gate_d_uv[2] signal */
  unsigned int reserved1 : BFW_NIOL_iol_gd_uv_fil_reserved1; /* reserved                       */
} NIOL_IOL_GD_UV_FIL_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_GD_UV_FIL_BIT_T bf;
} NIOL_IOL_GD_UV_FIL_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_a0 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_a0    0x00000044U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_a0 0x00000644U
#define Adr_NIOL_iol_gd_d2a_ilim_a0        0x00000644U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_a0   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_a0_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_a0_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_a0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_a0_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_a0': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_a0 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_a0_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_a0_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_A0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_a0_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_a0_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_A0_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_A0_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_A0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_a1 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_a1    0x00000048U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_a1 0x00000648U
#define Adr_NIOL_iol_gd_d2a_ilim_a1        0x00000648U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_a1   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_a1_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_a1_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_a1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_a1_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_a1': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_a1 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_a1_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_a1_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_A1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_a1_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_a1_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_A1_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_A1_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_A1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_a2 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_a2    0x0000004CU
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_a2 0x0000064CU
#define Adr_NIOL_iol_gd_d2a_ilim_a2        0x0000064CU
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_a2   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_a2_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_a2_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_a2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_a2_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_a2': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_a2 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_a2_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_a2_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_A2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_a2_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_a2_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_A2_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_A2_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_A2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_b0 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_b0    0x00000050U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_b0 0x00000650U
#define Adr_NIOL_iol_gd_d2a_ilim_b0        0x00000650U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_b0   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_b0_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_b0_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_b0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_b0_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_b0': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_b0 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_b0_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_b0_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_B0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_b0_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_b0_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_B0_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_B0_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_B0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_b1 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_b1    0x00000054U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_b1 0x00000654U
#define Adr_NIOL_iol_gd_d2a_ilim_b1        0x00000654U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_b1   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_b1_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_b1_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_b1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_b1_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_b1': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_b1 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_b1_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_b1_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_B1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_b1_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_b1_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_B1_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_B1_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_B1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_b2 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_b2    0x00000058U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_b2 0x00000658U
#define Adr_NIOL_iol_gd_d2a_ilim_b2        0x00000658U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_b2   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_b2_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_b2_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_b2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_b2_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_b2': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_b2 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_b2_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_b2_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_B2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_b2_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_b2_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_B2_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_B2_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_B2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_c0 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_c0    0x0000005CU
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_c0 0x0000065CU
#define Adr_NIOL_iol_gd_d2a_ilim_c0        0x0000065CU
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_c0   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_c0_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_c0_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_c0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_c0_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_c0': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_c0 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_c0_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_c0_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_C0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_c0_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_c0_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_C0_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_C0_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_C0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_c1 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_c1    0x00000060U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_c1 0x00000660U
#define Adr_NIOL_iol_gd_d2a_ilim_c1        0x00000660U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_c1   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_c1_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_c1_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_c1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_c1_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_c1': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_c1 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_c1_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_c1_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_C1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_c1_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_c1_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_C1_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_C1_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_C1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_c2 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_c2    0x00000064U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_c2 0x00000664U
#define Adr_NIOL_iol_gd_d2a_ilim_c2        0x00000664U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_c2   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_c2_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_c2_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_c2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_c2_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_c2': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_c2 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_c2_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_c2_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_C2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_c2_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_c2_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_C2_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_C2_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_C2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_d0 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_d0    0x00000068U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_d0 0x00000668U
#define Adr_NIOL_iol_gd_d2a_ilim_d0        0x00000668U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_d0   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_d0_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_d0_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_d0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_d0_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_d0': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_d0 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_d0_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_d0_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_D0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_d0_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_d0_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_D0_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_D0_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_D0_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_d1 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_d1    0x0000006CU
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_d1 0x0000066CU
#define Adr_NIOL_iol_gd_d2a_ilim_d1        0x0000066CU
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_d1   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_d1_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_d1_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_d1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_d1_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_d1': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_d1 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_d1_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_d1_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_D1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_d1_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_d1_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_D1_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_D1_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_D1_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_ilim_d2 */
/* => Gate driver 'ilim_set' values to analog gate driver */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_ilim_d2    0x00000070U
#define Adr_NIOL_iol_gd_iol_gd_d2a_ilim_d2 0x00000670U
#define Adr_NIOL_iol_gd_d2a_ilim_d2        0x00000670U
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_d2   0x00000000U

#define MSK_NIOL_iol_gd_d2a_ilim_d2_val         0x000000ffU
#define SRT_NIOL_iol_gd_d2a_ilim_d2_val         0
#define DFLT_VAL_NIOL_iol_gd_d2a_ilim_d2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_ilim_d2_val 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_ilim_d2': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_ilim_d2 0x000000ffU

enum {
  BFW_NIOL_iol_gd_d2a_ilim_d2_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_gd_d2a_ilim_d2_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_GD_D2A_ILIM_D2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_d2a_ilim_d2_val;       /* ilim_set value */
  unsigned int reserved1 : BFW_NIOL_iol_gd_d2a_ilim_d2_reserved1; /* reserved       */
} NIOL_IOL_GD_D2A_ILIM_D2_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_GD_D2A_ILIM_D2_BIT_T bf;
} NIOL_IOL_GD_D2A_ILIM_D2_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_d2a_on */
/* => Gate driver 'on' values to analog gate driver */
/*    On values need to be set to '1' by software before the gate driver is used */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_d2a_on    0x00000074U
#define Adr_NIOL_iol_gd_iol_gd_d2a_on 0x00000674U
#define Adr_NIOL_iol_gd_d2a_on        0x00000674U
#define DFLT_VAL_NIOL_iol_gd_d2a_on   0x00000000U

#define MSK_NIOL_iol_gd_d2a_on_d_gate_a_on         0x00000007U
#define SRT_NIOL_iol_gd_d2a_on_d_gate_a_on         0
#define DFLT_VAL_NIOL_iol_gd_d2a_on_d_gate_a_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_on_d_gate_a_on 0x00000000U
#define MSK_NIOL_iol_gd_d2a_on_d_gate_b_on         0x00000038U
#define SRT_NIOL_iol_gd_d2a_on_d_gate_b_on         3
#define DFLT_VAL_NIOL_iol_gd_d2a_on_d_gate_b_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_on_d_gate_b_on 0x00000000U
#define MSK_NIOL_iol_gd_d2a_on_d_gate_c_on         0x000001c0U
#define SRT_NIOL_iol_gd_d2a_on_d_gate_c_on         6
#define DFLT_VAL_NIOL_iol_gd_d2a_on_d_gate_c_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_on_d_gate_c_on 0x00000000U
#define MSK_NIOL_iol_gd_d2a_on_d_gate_d_on         0x00000e00U
#define SRT_NIOL_iol_gd_d2a_on_d_gate_d_on         9
#define DFLT_VAL_NIOL_iol_gd_d2a_on_d_gate_d_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_d2a_on_d_gate_d_on 0x00000000U

/* all used bits of 'NIOL_iol_gd_d2a_on': */
#define MSK_USED_BITS_NIOL_iol_gd_d2a_on 0x00000fffU

enum {
  BFW_NIOL_iol_gd_d2a_on_d_gate_a_on = 3,  /* [2:0] */
  BFW_NIOL_iol_gd_d2a_on_d_gate_b_on = 3,  /* [5:3] */
  BFW_NIOL_iol_gd_d2a_on_d_gate_c_on = 3,  /* [8:6] */
  BFW_NIOL_iol_gd_d2a_on_d_gate_d_on = 3,  /* [11:9] */
  BFW_NIOL_iol_gd_d2a_on_reserved1   = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_D2A_ON_BIT_Ttag {
  unsigned int d_gate_a_on : BFW_NIOL_iol_gd_d2a_on_d_gate_a_on; /* 'on' values of gate a */
  unsigned int d_gate_b_on : BFW_NIOL_iol_gd_d2a_on_d_gate_b_on; /* 'on' values of gate b */
  unsigned int d_gate_c_on : BFW_NIOL_iol_gd_d2a_on_d_gate_c_on; /* 'on' values of gate c */
  unsigned int d_gate_d_on : BFW_NIOL_iol_gd_d2a_on_d_gate_d_on; /* 'on' values of gate d */
  unsigned int reserved1   : BFW_NIOL_iol_gd_d2a_on_reserved1;   /* reserved              */
} NIOL_IOL_GD_D2A_ON_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_GD_D2A_ON_BIT_T bf;
} NIOL_IOL_GD_D2A_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a2d_a */
/* => Gate driver gate a signals from analog gate driver */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a2d_a    0x00000078U
#define Adr_NIOL_iol_gd_iol_gd_a2d_a 0x00000678U
#define Adr_NIOL_iol_gd_a2d_a        0x00000678U

#define MSK_NIOL_iol_gd_a2d_a_d_gate_a_revpol 0x00000007U
#define SRT_NIOL_iol_gd_a2d_a_d_gate_a_revpol 0
#define MSK_NIOL_iol_gd_a2d_a_d_gate_a_clamp  0x00000038U
#define SRT_NIOL_iol_gd_a2d_a_d_gate_a_clamp  3
#define MSK_NIOL_iol_gd_a2d_a_d_gate_a_uv     0x000001c0U
#define SRT_NIOL_iol_gd_a2d_a_d_gate_a_uv     6

/* all used bits of 'NIOL_iol_gd_a2d_a': */
#define MSK_USED_BITS_NIOL_iol_gd_a2d_a 0x000001ffU

enum {
  BFW_NIOL_iol_gd_a2d_a_d_gate_a_revpol = 3,  /* [2:0] */
  BFW_NIOL_iol_gd_a2d_a_d_gate_a_clamp  = 3,  /* [5:3] */
  BFW_NIOL_iol_gd_a2d_a_d_gate_a_uv     = 3,  /* [8:6] */
  BFW_NIOL_iol_gd_a2d_a_reserved1       = 23  /* [31:9] */
};

typedef struct NIOL_IOL_GD_A2D_A_BIT_Ttag {
  unsigned int d_gate_a_revpol : BFW_NIOL_iol_gd_a2d_a_d_gate_a_revpol; /* reverse polarity detected, same as adr_iol_gd_gate_ab_irq_raw.gd_a?_revpol */
  unsigned int d_gate_a_clamp  : BFW_NIOL_iol_gd_a2d_a_d_gate_a_clamp;  /* gate voltage is limited by maximum allowed gate voltage                    */
  unsigned int d_gate_a_uv     : BFW_NIOL_iol_gd_a2d_a_d_gate_a_uv;     /* gate voltage is limited by supply                                          */
  unsigned int reserved1       : BFW_NIOL_iol_gd_a2d_a_reserved1;       /* reserved                                                                   */
} NIOL_IOL_GD_A2D_A_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_GD_A2D_A_BIT_T bf;
} NIOL_IOL_GD_A2D_A_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a2d_b */
/* => Gate driver gate b signals from analog gate driver */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a2d_b    0x0000007CU
#define Adr_NIOL_iol_gd_iol_gd_a2d_b 0x0000067CU
#define Adr_NIOL_iol_gd_a2d_b        0x0000067CU

#define MSK_NIOL_iol_gd_a2d_b_d_gate_b_revpol 0x00000007U
#define SRT_NIOL_iol_gd_a2d_b_d_gate_b_revpol 0
#define MSK_NIOL_iol_gd_a2d_b_d_gate_b_clamp  0x00000038U
#define SRT_NIOL_iol_gd_a2d_b_d_gate_b_clamp  3
#define MSK_NIOL_iol_gd_a2d_b_d_gate_b_uv     0x000001c0U
#define SRT_NIOL_iol_gd_a2d_b_d_gate_b_uv     6

/* all used bits of 'NIOL_iol_gd_a2d_b': */
#define MSK_USED_BITS_NIOL_iol_gd_a2d_b 0x000001ffU

enum {
  BFW_NIOL_iol_gd_a2d_b_d_gate_b_revpol = 3,  /* [2:0] */
  BFW_NIOL_iol_gd_a2d_b_d_gate_b_clamp  = 3,  /* [5:3] */
  BFW_NIOL_iol_gd_a2d_b_d_gate_b_uv     = 3,  /* [8:6] */
  BFW_NIOL_iol_gd_a2d_b_reserved1       = 23  /* [31:9] */
};

typedef struct NIOL_IOL_GD_A2D_B_BIT_Ttag {
  unsigned int d_gate_b_revpol : BFW_NIOL_iol_gd_a2d_b_d_gate_b_revpol; /* reverse polarity detected, same as adr_iol_gd_gate_ab_irq_raw.gd_b?_revpol */
  unsigned int d_gate_b_clamp  : BFW_NIOL_iol_gd_a2d_b_d_gate_b_clamp;  /* gate voltage is limited by maximum allowed gate voltage                    */
  unsigned int d_gate_b_uv     : BFW_NIOL_iol_gd_a2d_b_d_gate_b_uv;     /* gate voltage is limited by supply                                          */
  unsigned int reserved1       : BFW_NIOL_iol_gd_a2d_b_reserved1;       /* reserved                                                                   */
} NIOL_IOL_GD_A2D_B_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_GD_A2D_B_BIT_T bf;
} NIOL_IOL_GD_A2D_B_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a2d_c */
/* => Gate driver gate c signals from analog gate driver */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a2d_c    0x00000080U
#define Adr_NIOL_iol_gd_iol_gd_a2d_c 0x00000680U
#define Adr_NIOL_iol_gd_a2d_c        0x00000680U

#define MSK_NIOL_iol_gd_a2d_c_d_gate_c_revpol 0x00000007U
#define SRT_NIOL_iol_gd_a2d_c_d_gate_c_revpol 0
#define MSK_NIOL_iol_gd_a2d_c_d_gate_c_clamp  0x00000038U
#define SRT_NIOL_iol_gd_a2d_c_d_gate_c_clamp  3
#define MSK_NIOL_iol_gd_a2d_c_d_gate_c_uv     0x000001c0U
#define SRT_NIOL_iol_gd_a2d_c_d_gate_c_uv     6

/* all used bits of 'NIOL_iol_gd_a2d_c': */
#define MSK_USED_BITS_NIOL_iol_gd_a2d_c 0x000001ffU

enum {
  BFW_NIOL_iol_gd_a2d_c_d_gate_c_revpol = 3,  /* [2:0] */
  BFW_NIOL_iol_gd_a2d_c_d_gate_c_clamp  = 3,  /* [5:3] */
  BFW_NIOL_iol_gd_a2d_c_d_gate_c_uv     = 3,  /* [8:6] */
  BFW_NIOL_iol_gd_a2d_c_reserved1       = 23  /* [31:9] */
};

typedef struct NIOL_IOL_GD_A2D_C_BIT_Ttag {
  unsigned int d_gate_c_revpol : BFW_NIOL_iol_gd_a2d_c_d_gate_c_revpol; /* reverse polarity detected, same as adr_iol_gd_gate_cd_irq_raw.gd_c?_revpol */
  unsigned int d_gate_c_clamp  : BFW_NIOL_iol_gd_a2d_c_d_gate_c_clamp;  /* gate voltage is limited by maximum allowed gate voltage                    */
  unsigned int d_gate_c_uv     : BFW_NIOL_iol_gd_a2d_c_d_gate_c_uv;     /* gate voltage is limited by supply                                          */
  unsigned int reserved1       : BFW_NIOL_iol_gd_a2d_c_reserved1;       /* reserved                                                                   */
} NIOL_IOL_GD_A2D_C_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_GD_A2D_C_BIT_T bf;
} NIOL_IOL_GD_A2D_C_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_a2d_d */
/* => Gate driver gate d signals from analog gate driver */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_a2d_d    0x00000084U
#define Adr_NIOL_iol_gd_iol_gd_a2d_d 0x00000684U
#define Adr_NIOL_iol_gd_a2d_d        0x00000684U

#define MSK_NIOL_iol_gd_a2d_d_d_gate_d_revpol 0x00000007U
#define SRT_NIOL_iol_gd_a2d_d_d_gate_d_revpol 0
#define MSK_NIOL_iol_gd_a2d_d_d_gate_d_clamp  0x00000038U
#define SRT_NIOL_iol_gd_a2d_d_d_gate_d_clamp  3
#define MSK_NIOL_iol_gd_a2d_d_d_gate_d_uv     0x000001c0U
#define SRT_NIOL_iol_gd_a2d_d_d_gate_d_uv     6

/* all used bits of 'NIOL_iol_gd_a2d_d': */
#define MSK_USED_BITS_NIOL_iol_gd_a2d_d 0x000001ffU

enum {
  BFW_NIOL_iol_gd_a2d_d_d_gate_d_revpol = 3,  /* [2:0] */
  BFW_NIOL_iol_gd_a2d_d_d_gate_d_clamp  = 3,  /* [5:3] */
  BFW_NIOL_iol_gd_a2d_d_d_gate_d_uv     = 3,  /* [8:6] */
  BFW_NIOL_iol_gd_a2d_d_reserved1       = 23  /* [31:9] */
};

typedef struct NIOL_IOL_GD_A2D_D_BIT_Ttag {
  unsigned int d_gate_d_revpol : BFW_NIOL_iol_gd_a2d_d_d_gate_d_revpol; /* reverse polarity detected, same as adr_iol_gd_gate_cd_irq_raw.gd_d?_revpol */
  unsigned int d_gate_d_clamp  : BFW_NIOL_iol_gd_a2d_d_d_gate_d_clamp;  /* gate voltage is limited by maximum allowed gate voltage                    */
  unsigned int d_gate_d_uv     : BFW_NIOL_iol_gd_a2d_d_d_gate_d_uv;     /* gate voltage is limited by supply                                          */
  unsigned int reserved1       : BFW_NIOL_iol_gd_a2d_d_reserved1;       /* reserved                                                                   */
} NIOL_IOL_GD_A2D_D_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_GD_A2D_D_BIT_T bf;
} NIOL_IOL_GD_A2D_D_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_over_current_irq_raw */
/* => Raw IRQs of over current detection: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event IRQ, status IRQs must be reset at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_over_current_irq_raw    0x00000088U
#define Adr_NIOL_iol_gd_iol_gd_over_current_irq_raw 0x00000688U
#define Adr_NIOL_iol_gd_over_current_irq_raw        0x00000688U
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw   0x00000000U

#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_a0_oc_evt         0x00000001U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_a0_oc_evt         0
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_a0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_a0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_a1_oc_evt         0x00000002U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_a1_oc_evt         1
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_a1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_a1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_a2_oc_evt         0x00000004U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_a2_oc_evt         2
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_a2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_a2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_b0_oc_evt         0x00000008U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_b0_oc_evt         3
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_b0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_b0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_b1_oc_evt         0x00000010U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_b1_oc_evt         4
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_b1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_b1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_b2_oc_evt         0x00000020U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_b2_oc_evt         5
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_b2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_b2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_c0_oc_evt         0x00000040U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_c0_oc_evt         6
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_c0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_c0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_c1_oc_evt         0x00000080U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_c1_oc_evt         7
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_c1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_c1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_c2_oc_evt         0x00000100U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_c2_oc_evt         8
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_c2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_c2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_d0_oc_evt         0x00000200U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_d0_oc_evt         9
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_d0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_d0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_d1_oc_evt         0x00000400U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_d1_oc_evt         10
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_d1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_d1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_raw_gd_d2_oc_evt         0x00000800U
#define SRT_NIOL_iol_gd_over_current_irq_raw_gd_d2_oc_evt         11
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_raw_gd_d2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_raw_gd_d2_oc_evt 0x00000000U

/* all used bits of 'NIOL_iol_gd_over_current_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_gd_over_current_irq_raw 0x00000fffU

enum {
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_a0_oc_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_a1_oc_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_a2_oc_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_b0_oc_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_b1_oc_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_b2_oc_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_c0_oc_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_c1_oc_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_c2_oc_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_d0_oc_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_d1_oc_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_over_current_irq_raw_gd_d2_oc_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_over_current_irq_raw_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_OVER_CURRENT_IRQ_RAW_BIT_Ttag {
  unsigned int gd_a0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_a0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_a1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_a2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_b0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_b1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_b2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_c0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_c1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_c2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_d0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_d1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_raw_gd_d2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_over_current_irq_raw_reserved1;    /* reserved                                                 */
} NIOL_IOL_GD_OVER_CURRENT_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                               val;
  NIOL_IOL_GD_OVER_CURRENT_IRQ_RAW_BIT_T bf;
} NIOL_IOL_GD_OVER_CURRENT_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_under_voltage_irq_raw */
/* => Raw IRQs of under voltage detection: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event IRQ, status IRQs must be reset at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_under_voltage_irq_raw    0x0000008CU
#define Adr_NIOL_iol_gd_iol_gd_under_voltage_irq_raw 0x0000068CU
#define Adr_NIOL_iol_gd_under_voltage_irq_raw        0x0000068CU
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw   0x00000000U

#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_a0_uv_evt         0x00000001U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_a0_uv_evt         0
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_a0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_a0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_a1_uv_evt         0x00000002U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_a1_uv_evt         1
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_a1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_a1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_a2_uv_evt         0x00000004U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_a2_uv_evt         2
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_a2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_a2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_b0_uv_evt         0x00000008U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_b0_uv_evt         3
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_b0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_b0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_b1_uv_evt         0x00000010U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_b1_uv_evt         4
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_b1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_b1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_b2_uv_evt         0x00000020U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_b2_uv_evt         5
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_b2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_b2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_c0_uv_evt         0x00000040U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_c0_uv_evt         6
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_c0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_c0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_c1_uv_evt         0x00000080U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_c1_uv_evt         7
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_c1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_c1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_c2_uv_evt         0x00000100U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_c2_uv_evt         8
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_c2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_c2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_d0_uv_evt         0x00000200U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_d0_uv_evt         9
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_d0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_d0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_d1_uv_evt         0x00000400U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_d1_uv_evt         10
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_d1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_d1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_raw_gd_d2_uv_evt         0x00000800U
#define SRT_NIOL_iol_gd_under_voltage_irq_raw_gd_d2_uv_evt         11
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_d2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_raw_gd_d2_uv_evt 0x00000000U

/* all used bits of 'NIOL_iol_gd_under_voltage_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_gd_under_voltage_irq_raw 0x00000fffU

enum {
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_a0_uv_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_a1_uv_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_a2_uv_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_b0_uv_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_b1_uv_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_b2_uv_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_c0_uv_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_c1_uv_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_c2_uv_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_d0_uv_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_d1_uv_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_d2_uv_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_under_voltage_irq_raw_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_RAW_BIT_Ttag {
  unsigned int gd_a0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_a0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_a1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_a2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_b0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_b1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_b2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_c0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_c1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_c2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_d0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_d1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_raw_gd_d2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_under_voltage_irq_raw_reserved1;    /* reserved                                                  */
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                                val;
  NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_RAW_BIT_T bf;
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_revpol_irq_raw */
/* => Raw IRQs of reverse polarity detection: */
/*    Read access shows status of unmasked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_revpol_irq_raw    0x00000090U
#define Adr_NIOL_iol_gd_iol_gd_revpol_irq_raw 0x00000690U
#define Adr_NIOL_iol_gd_revpol_irq_raw        0x00000690U

#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_a0_revpol 0x00000001U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_a0_revpol 0
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_a1_revpol 0x00000002U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_a1_revpol 1
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_a2_revpol 0x00000004U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_a2_revpol 2
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_b0_revpol 0x00000008U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_b0_revpol 3
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_b1_revpol 0x00000010U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_b1_revpol 4
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_b2_revpol 0x00000020U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_b2_revpol 5
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_c0_revpol 0x00000040U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_c0_revpol 6
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_c1_revpol 0x00000080U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_c1_revpol 7
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_c2_revpol 0x00000100U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_c2_revpol 8
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_d0_revpol 0x00000200U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_d0_revpol 9
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_d1_revpol 0x00000400U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_d1_revpol 10
#define MSK_NIOL_iol_gd_revpol_irq_raw_gd_d2_revpol 0x00000800U
#define SRT_NIOL_iol_gd_revpol_irq_raw_gd_d2_revpol 11

/* all used bits of 'NIOL_iol_gd_revpol_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_gd_revpol_irq_raw 0x00000fffU

enum {
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_a0_revpol = 1,  /* [0] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_a1_revpol = 1,  /* [1] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_a2_revpol = 1,  /* [2] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_b0_revpol = 1,  /* [3] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_b1_revpol = 1,  /* [4] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_b2_revpol = 1,  /* [5] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_c0_revpol = 1,  /* [6] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_c1_revpol = 1,  /* [7] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_c2_revpol = 1,  /* [8] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_d0_revpol = 1,  /* [9] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_d1_revpol = 1,  /* [10] */
  BFW_NIOL_iol_gd_revpol_irq_raw_gd_d2_revpol = 1,  /* [11] */
  BFW_NIOL_iol_gd_revpol_irq_raw_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_REVPOL_IRQ_RAW_BIT_Ttag {
  unsigned int gd_a0_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_a0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a1_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_a1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a2_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_a2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b0_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_b0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b1_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_b1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b2_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_b2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c0_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_c0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c1_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_c1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c2_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_c2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d0_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_d0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d1_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_d1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d2_revpol : BFW_NIOL_iol_gd_revpol_irq_raw_gd_d2_revpol; /* STATUS: reverse polarity detected */
  unsigned int reserved1    : BFW_NIOL_iol_gd_revpol_irq_raw_reserved1;    /* reserved                          */
} NIOL_IOL_GD_REVPOL_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_GD_REVPOL_IRQ_RAW_BIT_T bf;
} NIOL_IOL_GD_REVPOL_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_over_current_irq_mask_set */
/* => IRQ enable mask of over current detection: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing to adr_iol_gd_over_current_irq_raw */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_over_current_irq_mask_set    0x00000094U
#define Adr_NIOL_iol_gd_iol_gd_over_current_irq_mask_set 0x00000694U
#define Adr_NIOL_iol_gd_over_current_irq_mask_set        0x00000694U
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set   0x00000000U

#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_a0_oc_evt         0x00000001U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_a0_oc_evt         0
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_a0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_a0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_a1_oc_evt         0x00000002U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_a1_oc_evt         1
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_a1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_a1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_a2_oc_evt         0x00000004U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_a2_oc_evt         2
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_a2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_a2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_b0_oc_evt         0x00000008U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_b0_oc_evt         3
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_b0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_b0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_b1_oc_evt         0x00000010U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_b1_oc_evt         4
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_b1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_b1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_b2_oc_evt         0x00000020U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_b2_oc_evt         5
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_b2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_b2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_c0_oc_evt         0x00000040U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_c0_oc_evt         6
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_c0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_c0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_c1_oc_evt         0x00000080U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_c1_oc_evt         7
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_c1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_c1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_c2_oc_evt         0x00000100U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_c2_oc_evt         8
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_c2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_c2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_d0_oc_evt         0x00000200U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_d0_oc_evt         9
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_d0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_d0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_d1_oc_evt         0x00000400U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_d1_oc_evt         10
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_d1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_d1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_set_gd_d2_oc_evt         0x00000800U
#define SRT_NIOL_iol_gd_over_current_irq_mask_set_gd_d2_oc_evt         11
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_d2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_set_gd_d2_oc_evt 0x00000000U

/* all used bits of 'NIOL_iol_gd_over_current_irq_mask_set': */
#define MSK_USED_BITS_NIOL_iol_gd_over_current_irq_mask_set 0x00000fffU

enum {
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_a0_oc_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_a1_oc_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_a2_oc_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_b0_oc_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_b1_oc_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_b2_oc_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_c0_oc_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_c1_oc_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_c2_oc_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_d0_oc_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_d1_oc_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_d2_oc_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_over_current_irq_mask_set_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_SET_BIT_Ttag {
  unsigned int gd_a0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_a0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_a1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_a2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_b0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_b1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_b2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_c0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_c1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_c2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_d0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_d1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_set_gd_d2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_over_current_irq_mask_set_reserved1;    /* reserved                                                 */
} NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                                    val;
  NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_SET_BIT_T bf;
} NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_under_voltage_irq_mask_set */
/* => IRQ enable mask of under voltage detection: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing to adr_iol_gd_under_voltage_irq_raw */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_under_voltage_irq_mask_set    0x00000098U
#define Adr_NIOL_iol_gd_iol_gd_under_voltage_irq_mask_set 0x00000698U
#define Adr_NIOL_iol_gd_under_voltage_irq_mask_set        0x00000698U
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set   0x00000000U

#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a0_uv_evt         0x00000001U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a0_uv_evt         0
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a1_uv_evt         0x00000002U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a1_uv_evt         1
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a2_uv_evt         0x00000004U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a2_uv_evt         2
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b0_uv_evt         0x00000008U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b0_uv_evt         3
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b1_uv_evt         0x00000010U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b1_uv_evt         4
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b2_uv_evt         0x00000020U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b2_uv_evt         5
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c0_uv_evt         0x00000040U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c0_uv_evt         6
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c1_uv_evt         0x00000080U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c1_uv_evt         7
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c2_uv_evt         0x00000100U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c2_uv_evt         8
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d0_uv_evt         0x00000200U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d0_uv_evt         9
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d1_uv_evt         0x00000400U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d1_uv_evt         10
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d2_uv_evt         0x00000800U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d2_uv_evt         11
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d2_uv_evt 0x00000000U

/* all used bits of 'NIOL_iol_gd_under_voltage_irq_mask_set': */
#define MSK_USED_BITS_NIOL_iol_gd_under_voltage_irq_mask_set 0x00000fffU

enum {
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a0_uv_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a1_uv_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a2_uv_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b0_uv_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b1_uv_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b2_uv_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c0_uv_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c1_uv_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c2_uv_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d0_uv_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d1_uv_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d2_uv_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_set_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_SET_BIT_Ttag {
  unsigned int gd_a0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_a2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_b2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_c2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_gd_d2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_under_voltage_irq_mask_set_reserved1;    /* reserved                                                  */
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                                     val;
  NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_SET_BIT_T bf;
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_revpol_irq_mask_set */
/* => IRQ enable mask of reverse polarity detection: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_revpol_irq_mask_set    0x0000009CU
#define Adr_NIOL_iol_gd_iol_gd_revpol_irq_mask_set 0x0000069CU
#define Adr_NIOL_iol_gd_revpol_irq_mask_set        0x0000069CU
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set   0x00000000U

#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_a0_revpol         0x00000001U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_a0_revpol         0
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_a0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_a0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_a1_revpol         0x00000002U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_a1_revpol         1
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_a1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_a1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_a2_revpol         0x00000004U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_a2_revpol         2
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_a2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_a2_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_b0_revpol         0x00000008U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_b0_revpol         3
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_b0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_b0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_b1_revpol         0x00000010U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_b1_revpol         4
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_b1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_b1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_b2_revpol         0x00000020U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_b2_revpol         5
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_b2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_b2_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_c0_revpol         0x00000040U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_c0_revpol         6
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_c0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_c0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_c1_revpol         0x00000080U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_c1_revpol         7
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_c1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_c1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_c2_revpol         0x00000100U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_c2_revpol         8
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_c2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_c2_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_d0_revpol         0x00000200U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_d0_revpol         9
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_d0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_d0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_d1_revpol         0x00000400U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_d1_revpol         10
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_d1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_d1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_set_gd_d2_revpol         0x00000800U
#define SRT_NIOL_iol_gd_revpol_irq_mask_set_gd_d2_revpol         11
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_d2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_set_gd_d2_revpol 0x00000000U

/* all used bits of 'NIOL_iol_gd_revpol_irq_mask_set': */
#define MSK_USED_BITS_NIOL_iol_gd_revpol_irq_mask_set 0x00000fffU

enum {
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_a0_revpol = 1,  /* [0] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_a1_revpol = 1,  /* [1] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_a2_revpol = 1,  /* [2] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_b0_revpol = 1,  /* [3] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_b1_revpol = 1,  /* [4] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_b2_revpol = 1,  /* [5] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_c0_revpol = 1,  /* [6] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_c1_revpol = 1,  /* [7] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_c2_revpol = 1,  /* [8] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_d0_revpol = 1,  /* [9] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_d1_revpol = 1,  /* [10] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_d2_revpol = 1,  /* [11] */
  BFW_NIOL_iol_gd_revpol_irq_mask_set_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_REVPOL_IRQ_MASK_SET_BIT_Ttag {
  unsigned int gd_a0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_a0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_a1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_a2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_b0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_b1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_b2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_c0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_c1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_c2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_d0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_d1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_set_gd_d2_revpol; /* STATUS: reverse polarity detected */
  unsigned int reserved1    : BFW_NIOL_iol_gd_revpol_irq_mask_set_reserved1;    /* reserved                          */
} NIOL_IOL_GD_REVPOL_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_IOL_GD_REVPOL_IRQ_MASK_SET_BIT_T bf;
} NIOL_IOL_GD_REVPOL_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_over_current_irq_mask_reset */
/* => IRQ disable mask of over current detection: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_over_current_irq_mask_reset    0x000000A0U
#define Adr_NIOL_iol_gd_iol_gd_over_current_irq_mask_reset 0x000006A0U
#define Adr_NIOL_iol_gd_over_current_irq_mask_reset        0x000006A0U
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset   0x00000000U

#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_a0_oc_evt         0x00000001U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_a0_oc_evt         0
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_a0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_a0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_a1_oc_evt         0x00000002U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_a1_oc_evt         1
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_a1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_a1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_a2_oc_evt         0x00000004U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_a2_oc_evt         2
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_a2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_a2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_b0_oc_evt         0x00000008U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_b0_oc_evt         3
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_b0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_b0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_b1_oc_evt         0x00000010U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_b1_oc_evt         4
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_b1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_b1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_b2_oc_evt         0x00000020U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_b2_oc_evt         5
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_b2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_b2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_c0_oc_evt         0x00000040U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_c0_oc_evt         6
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_c0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_c0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_c1_oc_evt         0x00000080U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_c1_oc_evt         7
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_c1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_c1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_c2_oc_evt         0x00000100U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_c2_oc_evt         8
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_c2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_c2_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_d0_oc_evt         0x00000200U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_d0_oc_evt         9
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_d0_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_d0_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_d1_oc_evt         0x00000400U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_d1_oc_evt         10
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_d1_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_d1_oc_evt 0x00000000U
#define MSK_NIOL_iol_gd_over_current_irq_mask_reset_gd_d2_oc_evt         0x00000800U
#define SRT_NIOL_iol_gd_over_current_irq_mask_reset_gd_d2_oc_evt         11
#define DFLT_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_d2_oc_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_over_current_irq_mask_reset_gd_d2_oc_evt 0x00000000U

/* all used bits of 'NIOL_iol_gd_over_current_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_iol_gd_over_current_irq_mask_reset 0x00000fffU

enum {
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_a0_oc_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_a1_oc_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_a2_oc_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_b0_oc_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_b1_oc_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_b2_oc_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_c0_oc_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_c1_oc_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_c2_oc_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_d0_oc_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_d1_oc_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_d2_oc_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_over_current_irq_mask_reset_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int gd_a0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_a0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_a1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_a2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_b0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_b1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_b2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_c0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_c1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_c2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_d0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_d1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_mask_reset_gd_d2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_over_current_irq_mask_reset_reserved1;    /* reserved                                                 */
} NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                                      val;
  NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_RESET_BIT_T bf;
} NIOL_IOL_GD_OVER_CURRENT_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_under_voltage_irq_mask_reset */
/* => IRQ disable mask of under voltage detection: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_under_voltage_irq_mask_reset    0x000000A4U
#define Adr_NIOL_iol_gd_iol_gd_under_voltage_irq_mask_reset 0x000006A4U
#define Adr_NIOL_iol_gd_under_voltage_irq_mask_reset        0x000006A4U
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset   0x00000000U

#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a0_uv_evt         0x00000001U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a0_uv_evt         0
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a1_uv_evt         0x00000002U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a1_uv_evt         1
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a2_uv_evt         0x00000004U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a2_uv_evt         2
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b0_uv_evt         0x00000008U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b0_uv_evt         3
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b1_uv_evt         0x00000010U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b1_uv_evt         4
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b2_uv_evt         0x00000020U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b2_uv_evt         5
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c0_uv_evt         0x00000040U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c0_uv_evt         6
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c1_uv_evt         0x00000080U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c1_uv_evt         7
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c2_uv_evt         0x00000100U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c2_uv_evt         8
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c2_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d0_uv_evt         0x00000200U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d0_uv_evt         9
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d0_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d0_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d1_uv_evt         0x00000400U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d1_uv_evt         10
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d1_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d1_uv_evt 0x00000000U
#define MSK_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d2_uv_evt         0x00000800U
#define SRT_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d2_uv_evt         11
#define DFLT_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d2_uv_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d2_uv_evt 0x00000000U

/* all used bits of 'NIOL_iol_gd_under_voltage_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_iol_gd_under_voltage_irq_mask_reset 0x00000fffU

enum {
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a0_uv_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a1_uv_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a2_uv_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b0_uv_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b1_uv_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b2_uv_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c0_uv_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c1_uv_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c2_uv_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d0_uv_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d1_uv_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d2_uv_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int gd_a0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_a2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_b2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_c2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_gd_d2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_under_voltage_irq_mask_reset_reserved1;    /* reserved                                                  */
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                                       val;
  NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_RESET_BIT_T bf;
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_revpol_irq_mask_reset */
/* => IRQ disable mask of reverse polarity detection: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_revpol_irq_mask_reset    0x000000A8U
#define Adr_NIOL_iol_gd_iol_gd_revpol_irq_mask_reset 0x000006A8U
#define Adr_NIOL_iol_gd_revpol_irq_mask_reset        0x000006A8U
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset   0x00000000U

#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_a0_revpol         0x00000001U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_a0_revpol         0
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_a0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_a0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_a1_revpol         0x00000002U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_a1_revpol         1
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_a1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_a1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_a2_revpol         0x00000004U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_a2_revpol         2
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_a2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_a2_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_b0_revpol         0x00000008U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_b0_revpol         3
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_b0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_b0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_b1_revpol         0x00000010U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_b1_revpol         4
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_b1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_b1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_b2_revpol         0x00000020U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_b2_revpol         5
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_b2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_b2_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_c0_revpol         0x00000040U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_c0_revpol         6
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_c0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_c0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_c1_revpol         0x00000080U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_c1_revpol         7
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_c1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_c1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_c2_revpol         0x00000100U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_c2_revpol         8
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_c2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_c2_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_d0_revpol         0x00000200U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_d0_revpol         9
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_d0_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_d0_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_d1_revpol         0x00000400U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_d1_revpol         10
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_d1_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_d1_revpol 0x00000000U
#define MSK_NIOL_iol_gd_revpol_irq_mask_reset_gd_d2_revpol         0x00000800U
#define SRT_NIOL_iol_gd_revpol_irq_mask_reset_gd_d2_revpol         11
#define DFLT_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_d2_revpol    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_gd_revpol_irq_mask_reset_gd_d2_revpol 0x00000000U

/* all used bits of 'NIOL_iol_gd_revpol_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_iol_gd_revpol_irq_mask_reset 0x00000fffU

enum {
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_a0_revpol = 1,  /* [0] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_a1_revpol = 1,  /* [1] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_a2_revpol = 1,  /* [2] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_b0_revpol = 1,  /* [3] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_b1_revpol = 1,  /* [4] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_b2_revpol = 1,  /* [5] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_c0_revpol = 1,  /* [6] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_c1_revpol = 1,  /* [7] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_c2_revpol = 1,  /* [8] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_d0_revpol = 1,  /* [9] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_d1_revpol = 1,  /* [10] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_d2_revpol = 1,  /* [11] */
  BFW_NIOL_iol_gd_revpol_irq_mask_reset_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_REVPOL_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int gd_a0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_a0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_a1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_a2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_b0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_b1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_b2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_c0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_c1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_c2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d0_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_d0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d1_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_d1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d2_revpol : BFW_NIOL_iol_gd_revpol_irq_mask_reset_gd_d2_revpol; /* STATUS: reverse polarity detected */
  unsigned int reserved1    : BFW_NIOL_iol_gd_revpol_irq_mask_reset_reserved1;    /* reserved                          */
} NIOL_IOL_GD_REVPOL_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                                val;
  NIOL_IOL_GD_REVPOL_IRQ_MASK_RESET_BIT_T bf;
} NIOL_IOL_GD_REVPOL_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_over_current_irq_masked */
/* => Masked IRQs of over current detection: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_over_current_irq_masked    0x000000ACU
#define Adr_NIOL_iol_gd_iol_gd_over_current_irq_masked 0x000006ACU
#define Adr_NIOL_iol_gd_over_current_irq_masked        0x000006ACU

#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_a0_oc_evt 0x00000001U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_a0_oc_evt 0
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_a1_oc_evt 0x00000002U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_a1_oc_evt 1
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_a2_oc_evt 0x00000004U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_a2_oc_evt 2
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_b0_oc_evt 0x00000008U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_b0_oc_evt 3
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_b1_oc_evt 0x00000010U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_b1_oc_evt 4
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_b2_oc_evt 0x00000020U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_b2_oc_evt 5
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_c0_oc_evt 0x00000040U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_c0_oc_evt 6
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_c1_oc_evt 0x00000080U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_c1_oc_evt 7
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_c2_oc_evt 0x00000100U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_c2_oc_evt 8
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_d0_oc_evt 0x00000200U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_d0_oc_evt 9
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_d1_oc_evt 0x00000400U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_d1_oc_evt 10
#define MSK_NIOL_iol_gd_over_current_irq_masked_gd_d2_oc_evt 0x00000800U
#define SRT_NIOL_iol_gd_over_current_irq_masked_gd_d2_oc_evt 11

/* all used bits of 'NIOL_iol_gd_over_current_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_gd_over_current_irq_masked 0x00000fffU

enum {
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_a0_oc_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_a1_oc_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_a2_oc_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_b0_oc_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_b1_oc_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_b2_oc_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_c0_oc_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_c1_oc_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_c2_oc_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_d0_oc_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_d1_oc_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_over_current_irq_masked_gd_d2_oc_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_over_current_irq_masked_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_OVER_CURRENT_IRQ_MASKED_BIT_Ttag {
  unsigned int gd_a0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_a0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_a1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_a2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_a2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_b0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_b1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_b2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_b2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_c0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_c1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_c2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_c2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d0_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_d0_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d1_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_d1_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int gd_d2_oc_evt : BFW_NIOL_iol_gd_over_current_irq_masked_gd_d2_oc_evt; /* EVENT : the filtered over current signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_over_current_irq_masked_reserved1;    /* reserved                                                 */
} NIOL_IOL_GD_OVER_CURRENT_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                                  val;
  NIOL_IOL_GD_OVER_CURRENT_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_GD_OVER_CURRENT_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_under_voltage_irq_masked */
/* => Masked IRQs of under voltage detection: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_under_voltage_irq_masked    0x000000B0U
#define Adr_NIOL_iol_gd_iol_gd_under_voltage_irq_masked 0x000006B0U
#define Adr_NIOL_iol_gd_under_voltage_irq_masked        0x000006B0U

#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_a0_uv_evt 0x00000001U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_a0_uv_evt 0
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_a1_uv_evt 0x00000002U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_a1_uv_evt 1
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_a2_uv_evt 0x00000004U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_a2_uv_evt 2
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_b0_uv_evt 0x00000008U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_b0_uv_evt 3
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_b1_uv_evt 0x00000010U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_b1_uv_evt 4
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_b2_uv_evt 0x00000020U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_b2_uv_evt 5
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_c0_uv_evt 0x00000040U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_c0_uv_evt 6
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_c1_uv_evt 0x00000080U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_c1_uv_evt 7
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_c2_uv_evt 0x00000100U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_c2_uv_evt 8
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_d0_uv_evt 0x00000200U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_d0_uv_evt 9
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_d1_uv_evt 0x00000400U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_d1_uv_evt 10
#define MSK_NIOL_iol_gd_under_voltage_irq_masked_gd_d2_uv_evt 0x00000800U
#define SRT_NIOL_iol_gd_under_voltage_irq_masked_gd_d2_uv_evt 11

/* all used bits of 'NIOL_iol_gd_under_voltage_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_gd_under_voltage_irq_masked 0x00000fffU

enum {
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_a0_uv_evt = 1,  /* [0] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_a1_uv_evt = 1,  /* [1] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_a2_uv_evt = 1,  /* [2] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_b0_uv_evt = 1,  /* [3] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_b1_uv_evt = 1,  /* [4] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_b2_uv_evt = 1,  /* [5] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_c0_uv_evt = 1,  /* [6] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_c1_uv_evt = 1,  /* [7] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_c2_uv_evt = 1,  /* [8] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_d0_uv_evt = 1,  /* [9] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_d1_uv_evt = 1,  /* [10] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_d2_uv_evt = 1,  /* [11] */
  BFW_NIOL_iol_gd_under_voltage_irq_masked_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASKED_BIT_Ttag {
  unsigned int gd_a0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_a0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_a1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_a2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_a2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_b0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_b1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_b2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_b2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_c0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_c1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_c2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_c2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d0_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_d0_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d1_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_d1_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int gd_d2_uv_evt : BFW_NIOL_iol_gd_under_voltage_irq_masked_gd_d2_uv_evt; /* EVENT : the filtered under voltage signal has been active */
  unsigned int reserved1    : BFW_NIOL_iol_gd_under_voltage_irq_masked_reserved1;    /* reserved                                                  */
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                                   val;
  NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_GD_UNDER_VOLTAGE_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_revpol_irq_masked */
/* => Masked IRQs of reverse polarity detection: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_revpol_irq_masked    0x000000B4U
#define Adr_NIOL_iol_gd_iol_gd_revpol_irq_masked 0x000006B4U
#define Adr_NIOL_iol_gd_revpol_irq_masked        0x000006B4U

#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_a0_revpol 0x00000001U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_a0_revpol 0
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_a1_revpol 0x00000002U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_a1_revpol 1
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_a2_revpol 0x00000004U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_a2_revpol 2
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_b0_revpol 0x00000008U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_b0_revpol 3
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_b1_revpol 0x00000010U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_b1_revpol 4
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_b2_revpol 0x00000020U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_b2_revpol 5
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_c0_revpol 0x00000040U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_c0_revpol 6
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_c1_revpol 0x00000080U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_c1_revpol 7
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_c2_revpol 0x00000100U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_c2_revpol 8
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_d0_revpol 0x00000200U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_d0_revpol 9
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_d1_revpol 0x00000400U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_d1_revpol 10
#define MSK_NIOL_iol_gd_revpol_irq_masked_gd_d2_revpol 0x00000800U
#define SRT_NIOL_iol_gd_revpol_irq_masked_gd_d2_revpol 11

/* all used bits of 'NIOL_iol_gd_revpol_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_gd_revpol_irq_masked 0x00000fffU

enum {
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_a0_revpol = 1,  /* [0] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_a1_revpol = 1,  /* [1] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_a2_revpol = 1,  /* [2] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_b0_revpol = 1,  /* [3] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_b1_revpol = 1,  /* [4] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_b2_revpol = 1,  /* [5] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_c0_revpol = 1,  /* [6] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_c1_revpol = 1,  /* [7] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_c2_revpol = 1,  /* [8] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_d0_revpol = 1,  /* [9] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_d1_revpol = 1,  /* [10] */
  BFW_NIOL_iol_gd_revpol_irq_masked_gd_d2_revpol = 1,  /* [11] */
  BFW_NIOL_iol_gd_revpol_irq_masked_reserved1    = 20  /* [31:12] */
};

typedef struct NIOL_IOL_GD_REVPOL_IRQ_MASKED_BIT_Ttag {
  unsigned int gd_a0_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_a0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a1_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_a1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_a2_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_a2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b0_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_b0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b1_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_b1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_b2_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_b2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c0_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_c0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c1_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_c1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_c2_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_c2_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d0_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_d0_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d1_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_d1_revpol; /* STATUS: reverse polarity detected */
  unsigned int gd_d2_revpol : BFW_NIOL_iol_gd_revpol_irq_masked_gd_d2_revpol; /* STATUS: reverse polarity detected */
  unsigned int reserved1    : BFW_NIOL_iol_gd_revpol_irq_masked_reserved1;    /* reserved                          */
} NIOL_IOL_GD_REVPOL_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                            val;
  NIOL_IOL_GD_REVPOL_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_GD_REVPOL_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_gd_irq_no */
/* => Lowest active interrupt: */
/*    Shows the highest prior active IRQ (= lowest IRQ number). */
/*    As this value references to 3 registers, the returned irq_no is generated as follows: */
/*    0:  gd_a0_oc_evt */
/*    11: gd_d2_oc_evt */
/*    12: gd_a0_uv_evt */
/*    23: gd_d2_uv_evt */
/*    24: gd_a0_revpol */
/*    35: gd_d2_revpol */
/*    36: no pending IRQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_gd_irq_no    0x000000B8U
#define Adr_NIOL_iol_gd_iol_gd_irq_no 0x000006B8U
#define Adr_NIOL_iol_gd_irq_no        0x000006B8U

#define MSK_NIOL_iol_gd_irq_no_val 0x0000003fU
#define SRT_NIOL_iol_gd_irq_no_val 0

/* all used bits of 'NIOL_iol_gd_irq_no': */
#define MSK_USED_BITS_NIOL_iol_gd_irq_no 0x0000003fU

enum {
  BFW_NIOL_iol_gd_irq_no_val       = 6,  /* [5:0] */
  BFW_NIOL_iol_gd_irq_no_reserved1 = 26  /* [31:6] */
};

typedef struct NIOL_IOL_GD_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_gd_irq_no_val;       /* Number of the pending IRQ */
  unsigned int reserved1 : BFW_NIOL_iol_gd_irq_no_reserved1; /* reserved                  */
} NIOL_IOL_GD_IRQ_NO_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_GD_IRQ_NO_BIT_T bf;
} NIOL_IOL_GD_IRQ_NO_T;


/* ===================================================================== */

/* Area of iol_tx */

/* ===================================================================== */

#define Addr_NIOL_iol_tx 0x00000700U

/* --------------------------------------------------------------------- */
/* Register iol_tx_blank_time */
/* => Global prescaler for blank time */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_blank_time    0x00000000U
#define Adr_NIOL_iol_tx_iol_tx_blank_time 0x00000700U
#define Adr_NIOL_iol_tx_blank_time        0x00000700U
#define DFLT_VAL_NIOL_iol_tx_blank_time   0x00000000U

#define MSK_NIOL_iol_tx_blank_time_prescaler         0x0000000fU
#define SRT_NIOL_iol_tx_blank_time_prescaler         0
#define DFLT_VAL_NIOL_iol_tx_blank_time_prescaler    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_blank_time_prescaler 0x00000000U

/* all used bits of 'NIOL_iol_tx_blank_time': */
#define MSK_USED_BITS_NIOL_iol_tx_blank_time 0x0000000fU

enum {
  BFW_NIOL_iol_tx_blank_time_prescaler = 4,  /* [3:0] */
  BFW_NIOL_iol_tx_blank_time_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_IOL_TX_BLANK_TIME_BIT_Ttag {
  unsigned int prescaler : BFW_NIOL_iol_tx_blank_time_prescaler; /* Prescaler value +1 for the blank time of all IOL drivers. */
                                                                 /* (1: system clock by 2, 2: system clock by 3 ...)          */
  unsigned int reserved1 : BFW_NIOL_iol_tx_blank_time_reserved1; /* reserved                                                  */
} NIOL_IOL_TX_BLANK_TIME_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_TX_BLANK_TIME_BIT_T bf;
} NIOL_IOL_TX_BLANK_TIME_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_ok_ifilter */
/* => Global prescaler for OK filter */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_ok_ifilter    0x00000004U
#define Adr_NIOL_iol_tx_iol_tx_ok_ifilter 0x00000704U
#define Adr_NIOL_iol_tx_ok_ifilter        0x00000704U
#define DFLT_VAL_NIOL_iol_tx_ok_ifilter   0x00000000U

#define MSK_NIOL_iol_tx_ok_ifilter_prescaler0         0x0000000fU
#define SRT_NIOL_iol_tx_ok_ifilter_prescaler0         0
#define DFLT_VAL_NIOL_iol_tx_ok_ifilter_prescaler0    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_ok_ifilter_prescaler0 0x00000000U
#define MSK_NIOL_iol_tx_ok_ifilter_prescaler1         0x0000fff0U
#define SRT_NIOL_iol_tx_ok_ifilter_prescaler1         4
#define DFLT_VAL_NIOL_iol_tx_ok_ifilter_prescaler1    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_ok_ifilter_prescaler1 0x00000000U

/* all used bits of 'NIOL_iol_tx_ok_ifilter': */
#define MSK_USED_BITS_NIOL_iol_tx_ok_ifilter 0x0000ffffU

enum {
  BFW_NIOL_iol_tx_ok_ifilter_prescaler0 = 4,  /* [3:0] */
  BFW_NIOL_iol_tx_ok_ifilter_prescaler1 = 12, /* [15:4] */
  BFW_NIOL_iol_tx_ok_ifilter_reserved1  = 16  /* [31:16] */
};

typedef struct NIOL_IOL_TX_OK_IFILTER_BIT_Ttag {
  unsigned int prescaler0 : BFW_NIOL_iol_tx_ok_ifilter_prescaler0; /* Prescaler alternative 0 for the OK filter for all gate drivers */
                                                                   /* Using value+1 (1: system clock by 2, 2: system clock by 3 ...) */
  unsigned int prescaler1 : BFW_NIOL_iol_tx_ok_ifilter_prescaler1; /* Prescaler alternative 1 for the OK filter for all gate drivers */
                                                                   /* Using value+1 (1: system clock by 2, 2: system clock by 3 ...) */
  unsigned int reserved1  : BFW_NIOL_iol_tx_ok_ifilter_reserved1;  /* reserved                                                       */
} NIOL_IOL_TX_OK_IFILTER_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_TX_OK_IFILTER_BIT_T bf;
} NIOL_IOL_TX_OK_IFILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_a */
/* => Port A configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_a    0x00000008U
#define Adr_NIOL_iol_tx_iol_tx_a 0x00000708U
#define Adr_NIOL_iol_tx_a        0x00000708U
#define DFLT_VAL_NIOL_iol_tx_a   0x00000000U

#define MSK_NIOL_iol_tx_a_src                   0x00000001U
#define SRT_NIOL_iol_tx_a_src                   0
#define DFLT_VAL_NIOL_iol_tx_a_src              0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_src           0x00000000U
#define MSK_NIOL_iol_tx_a_hs_en1d1              0x00000002U
#define SRT_NIOL_iol_tx_a_hs_en1d1              1
#define DFLT_VAL_NIOL_iol_tx_a_hs_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_hs_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_a_hs_en0d1              0x00000004U
#define SRT_NIOL_iol_tx_a_hs_en0d1              2
#define DFLT_VAL_NIOL_iol_tx_a_hs_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_hs_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_a_hs_en1d0              0x00000008U
#define SRT_NIOL_iol_tx_a_hs_en1d0              3
#define DFLT_VAL_NIOL_iol_tx_a_hs_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_hs_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_a_hs_en0d0              0x00000010U
#define SRT_NIOL_iol_tx_a_hs_en0d0              4
#define DFLT_VAL_NIOL_iol_tx_a_hs_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_hs_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_a_hs_nok_action         0x00000020U
#define SRT_NIOL_iol_tx_a_hs_nok_action         5
#define DFLT_VAL_NIOL_iol_tx_a_hs_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_hs_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_a_ls_en1d1              0x00000040U
#define SRT_NIOL_iol_tx_a_ls_en1d1              6
#define DFLT_VAL_NIOL_iol_tx_a_ls_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ls_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_a_ls_en0d1              0x00000080U
#define SRT_NIOL_iol_tx_a_ls_en0d1              7
#define DFLT_VAL_NIOL_iol_tx_a_ls_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ls_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_a_ls_en1d0              0x00000100U
#define SRT_NIOL_iol_tx_a_ls_en1d0              8
#define DFLT_VAL_NIOL_iol_tx_a_ls_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ls_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_a_ls_en0d0              0x00000200U
#define SRT_NIOL_iol_tx_a_ls_en0d0              9
#define DFLT_VAL_NIOL_iol_tx_a_ls_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ls_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_a_ls_nok_action         0x00000400U
#define SRT_NIOL_iol_tx_a_ls_nok_action         10
#define DFLT_VAL_NIOL_iol_tx_a_ls_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ls_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_a_no_inhibit            0x00000800U
#define SRT_NIOL_iol_tx_a_no_inhibit            11
#define DFLT_VAL_NIOL_iol_tx_a_no_inhibit       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_no_inhibit    0x00000000U

/* all used bits of 'NIOL_iol_tx_a': */
#define MSK_USED_BITS_NIOL_iol_tx_a 0x00000fffU

enum {
  BFW_NIOL_iol_tx_a_src           = 1,  /* [0] */
  BFW_NIOL_iol_tx_a_hs_en1d1      = 1,  /* [1] */
  BFW_NIOL_iol_tx_a_hs_en0d1      = 1,  /* [2] */
  BFW_NIOL_iol_tx_a_hs_en1d0      = 1,  /* [3] */
  BFW_NIOL_iol_tx_a_hs_en0d0      = 1,  /* [4] */
  BFW_NIOL_iol_tx_a_hs_nok_action = 1,  /* [5] */
  BFW_NIOL_iol_tx_a_ls_en1d1      = 1,  /* [6] */
  BFW_NIOL_iol_tx_a_ls_en0d1      = 1,  /* [7] */
  BFW_NIOL_iol_tx_a_ls_en1d0      = 1,  /* [8] */
  BFW_NIOL_iol_tx_a_ls_en0d0      = 1,  /* [9] */
  BFW_NIOL_iol_tx_a_ls_nok_action = 1,  /* [10] */
  BFW_NIOL_iol_tx_a_no_inhibit    = 1,  /* [11] */
  BFW_NIOL_iol_tx_a_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_IOL_TX_A_BIT_Ttag {
  unsigned int src           : BFW_NIOL_iol_tx_a_src;           /* 0: port a driver controlled by tx[0] and tx_en[0]                                                       */
                                                                /* 1: port a driver controlled by do[12] and do_en[12]                                                     */
  unsigned int hs_en1d1      : BFW_NIOL_iol_tx_a_hs_en1d1;      /* High side output value for tx/do=1 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d1      : BFW_NIOL_iol_tx_a_hs_en0d1;      /* High side output value for tx/do=1 and tx_en/do_en=0                                                    */
  unsigned int hs_en1d0      : BFW_NIOL_iol_tx_a_hs_en1d0;      /* High side output value for tx/do=0 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d0      : BFW_NIOL_iol_tx_a_hs_en0d0;      /* High side output value for tx/do=0 and tx_en/do_en=0                                                    */
  unsigned int hs_nok_action : BFW_NIOL_iol_tx_a_hs_nok_action; /* High side action when an over current is detected by the filtered oe_ok signals                         */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int ls_en1d1      : BFW_NIOL_iol_tx_a_ls_en1d1;      /* Low side output value for tx/do=1 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d1      : BFW_NIOL_iol_tx_a_ls_en0d1;      /* Low side output value for tx/do=1 and tx_en/do_en=0                                                     */
  unsigned int ls_en1d0      : BFW_NIOL_iol_tx_a_ls_en1d0;      /* Low side output value for tx/do=0 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d0      : BFW_NIOL_iol_tx_a_ls_en0d0;      /* Low side output value for tx/do=0 and tx_en/do_en=0                                                     */
  unsigned int ls_nok_action : BFW_NIOL_iol_tx_a_ls_nok_action; /* Low side action when an over current is detected by the filtered oe_ok signals                          */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int no_inhibit    : BFW_NIOL_iol_tx_a_no_inhibit;    /* Allow independent use of high side and low side:                                                        */
                                                                /* 0: when HS is turned on, LW is always turned off                                                        */
                                                                /* 1: HS and LS can be turned on simultaneously (the corresponding pins must not be connected on the PCB!) */
  unsigned int reserved1     : BFW_NIOL_iol_tx_a_reserved1;     /* reserved                                                                                                */
} NIOL_IOL_TX_A_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_IOL_TX_A_BIT_T bf;
} NIOL_IOL_TX_A_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_a_ok_filter */
/* => Port A OK filter configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_a_ok_filter    0x0000000CU
#define Adr_NIOL_iol_tx_iol_tx_a_ok_filter 0x0000070CU
#define Adr_NIOL_iol_tx_a_ok_filter        0x0000070CU
#define DFLT_VAL_NIOL_iol_tx_a_ok_filter   0x00000000U

#define MSK_NIOL_iol_tx_a_ok_filter_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_a_ok_filter_threshold             0
#define DFLT_VAL_NIOL_iol_tx_a_ok_filter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ok_filter_threshold     0x00000000U
#define MSK_NIOL_iol_tx_a_ok_filter_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_a_ok_filter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_a_ok_filter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_ok_filter_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_a_ok_filter': */
#define MSK_USED_BITS_NIOL_iol_tx_a_ok_filter 0x000001ffU

enum {
  BFW_NIOL_iol_tx_a_ok_filter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_a_ok_filter_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_a_ok_filter_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_A_OK_FILTER_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_a_ok_filter_threshold;     /* OK filter threshold                                                                                            */
                                                                          /* Value 0 leads to no filtering of OK signal.                                                                    */
                                                                          /* Other values define the integral filter threshold in prescaled clock cycles + 1. Due to one central prescaler  */
                                                                          /* the exact integral filter threshold varies between this value and value+1.                                     */
                                                                          /* Change this value only, if driver is in OFF state.                                                             */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_a_ok_filter_prescaler_sel; /* 0: OK_IFILTER.prescaler0                                                                                       */
                                                                          /* 1: OK_IFILTER.prescaler1                                                                                       */
  unsigned int reserved1     : BFW_NIOL_iol_tx_a_ok_filter_reserved1;     /* reserved                                                                                                       */
} NIOL_IOL_TX_A_OK_FILTER_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_TX_A_OK_FILTER_BIT_T bf;
} NIOL_IOL_TX_A_OK_FILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_a_blank_time */
/* => Port A blank time configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_a_blank_time    0x00000010U
#define Adr_NIOL_iol_tx_iol_tx_a_blank_time 0x00000710U
#define Adr_NIOL_iol_tx_a_blank_time        0x00000710U
#define DFLT_VAL_NIOL_iol_tx_a_blank_time   0x00000000U

#define MSK_NIOL_iol_tx_a_blank_time_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_a_blank_time_threshold             0
#define DFLT_VAL_NIOL_iol_tx_a_blank_time_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_blank_time_threshold     0x00000000U
#define MSK_NIOL_iol_tx_a_blank_time_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_a_blank_time_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_a_blank_time_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_blank_time_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_a_blank_time': */
#define MSK_USED_BITS_NIOL_iol_tx_a_blank_time 0x000001ffU

enum {
  BFW_NIOL_iol_tx_a_blank_time_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_a_blank_time_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_a_blank_time_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_A_BLANK_TIME_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_a_blank_time_threshold;     /* blank time                  */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_a_blank_time_prescaler_sel; /* 0: no prescaler             */
                                                                           /* 1: use BLANK_TIME.prescaler */
  unsigned int reserved1     : BFW_NIOL_iol_tx_a_blank_time_reserved1;     /* reserved                    */
} NIOL_IOL_TX_A_BLANK_TIME_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_TX_A_BLANK_TIME_BIT_T bf;
} NIOL_IOL_TX_A_BLANK_TIME_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_a_tran */
/* => Port A TRAN(off) state configuration: */
/*    D2A values applied during TRAN (off and slew) states. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_a_tran    0x00000014U
#define Adr_NIOL_iol_tx_iol_tx_a_tran 0x00000714U
#define Adr_NIOL_iol_tx_a_tran        0x00000714U
#define DFLT_VAL_NIOL_iol_tx_a_tran   0x00000000U

#define MSK_NIOL_iol_tx_a_tran_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_a_tran_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_a_tran_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_tran_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_a_tran_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_a_tran_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_a_tran_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_tran_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_a_tran_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_a_tran_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_a_tran_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_tran_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_a_tran_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_a_tran_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_a_tran_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_tran_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_a_tran': */
#define MSK_USED_BITS_NIOL_iol_tx_a_tran 0x00003fffU

enum {
  BFW_NIOL_iol_tx_a_tran_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_a_tran_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_a_tran_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_a_tran_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_a_tran_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_A_TRAN_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_a_tran_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_a_tran_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_a_tran_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_a_tran_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_a_tran_reserved1;   /* reserved                */
} NIOL_IOL_TX_A_TRAN_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_TX_A_TRAN_BIT_T bf;
} NIOL_IOL_TX_A_TRAN_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_a_on */
/* => Port A ON state configuration: */
/*    D2A values applied during ON state. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_a_on    0x00000018U
#define Adr_NIOL_iol_tx_iol_tx_a_on 0x00000718U
#define Adr_NIOL_iol_tx_a_on        0x00000718U
#define DFLT_VAL_NIOL_iol_tx_a_on   0x00000000U

#define MSK_NIOL_iol_tx_a_on_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_a_on_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_a_on_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_on_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_a_on_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_a_on_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_a_on_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_on_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_a_on_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_a_on_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_a_on_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_on_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_a_on_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_a_on_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_a_on_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_a_on_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_a_on': */
#define MSK_USED_BITS_NIOL_iol_tx_a_on 0x00003fffU

enum {
  BFW_NIOL_iol_tx_a_on_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_a_on_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_a_on_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_a_on_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_a_on_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_A_ON_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_a_on_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_a_on_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_a_on_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_a_on_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_a_on_reserved1;   /* reserved                */
} NIOL_IOL_TX_A_ON_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_IOL_TX_A_ON_BIT_T bf;
} NIOL_IOL_TX_A_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_b */
/* => Port B configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_b    0x0000001CU
#define Adr_NIOL_iol_tx_iol_tx_b 0x0000071CU
#define Adr_NIOL_iol_tx_b        0x0000071CU
#define DFLT_VAL_NIOL_iol_tx_b   0x00000000U

#define MSK_NIOL_iol_tx_b_src                   0x00000001U
#define SRT_NIOL_iol_tx_b_src                   0
#define DFLT_VAL_NIOL_iol_tx_b_src              0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_src           0x00000000U
#define MSK_NIOL_iol_tx_b_hs_en1d1              0x00000002U
#define SRT_NIOL_iol_tx_b_hs_en1d1              1
#define DFLT_VAL_NIOL_iol_tx_b_hs_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_hs_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_b_hs_en0d1              0x00000004U
#define SRT_NIOL_iol_tx_b_hs_en0d1              2
#define DFLT_VAL_NIOL_iol_tx_b_hs_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_hs_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_b_hs_en1d0              0x00000008U
#define SRT_NIOL_iol_tx_b_hs_en1d0              3
#define DFLT_VAL_NIOL_iol_tx_b_hs_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_hs_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_b_hs_en0d0              0x00000010U
#define SRT_NIOL_iol_tx_b_hs_en0d0              4
#define DFLT_VAL_NIOL_iol_tx_b_hs_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_hs_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_b_hs_nok_action         0x00000020U
#define SRT_NIOL_iol_tx_b_hs_nok_action         5
#define DFLT_VAL_NIOL_iol_tx_b_hs_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_hs_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_b_ls_en1d1              0x00000040U
#define SRT_NIOL_iol_tx_b_ls_en1d1              6
#define DFLT_VAL_NIOL_iol_tx_b_ls_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ls_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_b_ls_en0d1              0x00000080U
#define SRT_NIOL_iol_tx_b_ls_en0d1              7
#define DFLT_VAL_NIOL_iol_tx_b_ls_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ls_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_b_ls_en1d0              0x00000100U
#define SRT_NIOL_iol_tx_b_ls_en1d0              8
#define DFLT_VAL_NIOL_iol_tx_b_ls_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ls_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_b_ls_en0d0              0x00000200U
#define SRT_NIOL_iol_tx_b_ls_en0d0              9
#define DFLT_VAL_NIOL_iol_tx_b_ls_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ls_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_b_ls_nok_action         0x00000400U
#define SRT_NIOL_iol_tx_b_ls_nok_action         10
#define DFLT_VAL_NIOL_iol_tx_b_ls_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ls_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_b_no_inhibit            0x00000800U
#define SRT_NIOL_iol_tx_b_no_inhibit            11
#define DFLT_VAL_NIOL_iol_tx_b_no_inhibit       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_no_inhibit    0x00000000U

/* all used bits of 'NIOL_iol_tx_b': */
#define MSK_USED_BITS_NIOL_iol_tx_b 0x00000fffU

enum {
  BFW_NIOL_iol_tx_b_src           = 1,  /* [0] */
  BFW_NIOL_iol_tx_b_hs_en1d1      = 1,  /* [1] */
  BFW_NIOL_iol_tx_b_hs_en0d1      = 1,  /* [2] */
  BFW_NIOL_iol_tx_b_hs_en1d0      = 1,  /* [3] */
  BFW_NIOL_iol_tx_b_hs_en0d0      = 1,  /* [4] */
  BFW_NIOL_iol_tx_b_hs_nok_action = 1,  /* [5] */
  BFW_NIOL_iol_tx_b_ls_en1d1      = 1,  /* [6] */
  BFW_NIOL_iol_tx_b_ls_en0d1      = 1,  /* [7] */
  BFW_NIOL_iol_tx_b_ls_en1d0      = 1,  /* [8] */
  BFW_NIOL_iol_tx_b_ls_en0d0      = 1,  /* [9] */
  BFW_NIOL_iol_tx_b_ls_nok_action = 1,  /* [10] */
  BFW_NIOL_iol_tx_b_no_inhibit    = 1,  /* [11] */
  BFW_NIOL_iol_tx_b_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_IOL_TX_B_BIT_Ttag {
  unsigned int src           : BFW_NIOL_iol_tx_b_src;           /* 0: port b driver controlled by tx[1] and tx_en[1]                                                       */
                                                                /* 1: port b driver controlled by do[13] and do_en[13]                                                     */
  unsigned int hs_en1d1      : BFW_NIOL_iol_tx_b_hs_en1d1;      /* High side output value for tx/do=1 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d1      : BFW_NIOL_iol_tx_b_hs_en0d1;      /* High side output value for tx/do=1 and tx_en/do_en=0                                                    */
  unsigned int hs_en1d0      : BFW_NIOL_iol_tx_b_hs_en1d0;      /* High side output value for tx/do=0 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d0      : BFW_NIOL_iol_tx_b_hs_en0d0;      /* High side output value for tx/do=0 and tx_en/do_en=0                                                    */
  unsigned int hs_nok_action : BFW_NIOL_iol_tx_b_hs_nok_action; /* High side action when an over current is detected by the filtered oe_ok signals                         */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int ls_en1d1      : BFW_NIOL_iol_tx_b_ls_en1d1;      /* Low side output value for tx/do=1 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d1      : BFW_NIOL_iol_tx_b_ls_en0d1;      /* Low side output value for tx/do=1 and tx_en/do_en=0                                                     */
  unsigned int ls_en1d0      : BFW_NIOL_iol_tx_b_ls_en1d0;      /* Low side output value for tx/do=0 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d0      : BFW_NIOL_iol_tx_b_ls_en0d0;      /* Low side output value for tx/do=0 and tx_en/do_en=0                                                     */
  unsigned int ls_nok_action : BFW_NIOL_iol_tx_b_ls_nok_action; /* Low side action when an over current is detected by the filtered oe_ok signals                          */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int no_inhibit    : BFW_NIOL_iol_tx_b_no_inhibit;    /* Allow independent use of high side and low side:                                                        */
                                                                /* 0: when HS is turned on, LW is always turned off                                                        */
                                                                /* 1: HS and LS can be turned on simultaneously (the corresponding pins must not be connected on the PCB!) */
  unsigned int reserved1     : BFW_NIOL_iol_tx_b_reserved1;     /* reserved                                                                                                */
} NIOL_IOL_TX_B_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_IOL_TX_B_BIT_T bf;
} NIOL_IOL_TX_B_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_b_ok_filter */
/* => Port B OK filter configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_b_ok_filter    0x00000020U
#define Adr_NIOL_iol_tx_iol_tx_b_ok_filter 0x00000720U
#define Adr_NIOL_iol_tx_b_ok_filter        0x00000720U
#define DFLT_VAL_NIOL_iol_tx_b_ok_filter   0x00000000U

#define MSK_NIOL_iol_tx_b_ok_filter_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_b_ok_filter_threshold             0
#define DFLT_VAL_NIOL_iol_tx_b_ok_filter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ok_filter_threshold     0x00000000U
#define MSK_NIOL_iol_tx_b_ok_filter_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_b_ok_filter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_b_ok_filter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_ok_filter_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_b_ok_filter': */
#define MSK_USED_BITS_NIOL_iol_tx_b_ok_filter 0x000001ffU

enum {
  BFW_NIOL_iol_tx_b_ok_filter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_b_ok_filter_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_b_ok_filter_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_B_OK_FILTER_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_b_ok_filter_threshold;     /* OK filter threshold                                                                                        */
                                                                          /* Value 0 leads to no filtering of OK signal.                                                                */
                                                                          /* Other values define the integral filter threshold in prescaled clock cycles. Due to one central prescaler  */
                                                                          /* the exact integral filter threshold varies between this value and value+1.                                 */
                                                                          /* Change this value only, if driver is in OFF state.                                                         */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_b_ok_filter_prescaler_sel; /* 0: OK_IFILTER.prescaler0                                                                                   */
                                                                          /* 1: OK_IFILTER.prescaler1                                                                                   */
  unsigned int reserved1     : BFW_NIOL_iol_tx_b_ok_filter_reserved1;     /* reserved                                                                                                   */
} NIOL_IOL_TX_B_OK_FILTER_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_TX_B_OK_FILTER_BIT_T bf;
} NIOL_IOL_TX_B_OK_FILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_b_blank_time */
/* => Port B blank time configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_b_blank_time    0x00000024U
#define Adr_NIOL_iol_tx_iol_tx_b_blank_time 0x00000724U
#define Adr_NIOL_iol_tx_b_blank_time        0x00000724U
#define DFLT_VAL_NIOL_iol_tx_b_blank_time   0x00000000U

#define MSK_NIOL_iol_tx_b_blank_time_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_b_blank_time_threshold             0
#define DFLT_VAL_NIOL_iol_tx_b_blank_time_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_blank_time_threshold     0x00000000U
#define MSK_NIOL_iol_tx_b_blank_time_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_b_blank_time_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_b_blank_time_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_blank_time_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_b_blank_time': */
#define MSK_USED_BITS_NIOL_iol_tx_b_blank_time 0x000001ffU

enum {
  BFW_NIOL_iol_tx_b_blank_time_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_b_blank_time_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_b_blank_time_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_B_BLANK_TIME_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_b_blank_time_threshold;     /* blank time                  */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_b_blank_time_prescaler_sel; /* 0: no prescaler             */
                                                                           /* 1: use BLANK_TIME.prescaler */
  unsigned int reserved1     : BFW_NIOL_iol_tx_b_blank_time_reserved1;     /* reserved                    */
} NIOL_IOL_TX_B_BLANK_TIME_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_TX_B_BLANK_TIME_BIT_T bf;
} NIOL_IOL_TX_B_BLANK_TIME_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_b_tran */
/* => Port B TRAN(off) state configuration: */
/*    D2A values applied during TRAN (off and slew) states. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_b_tran    0x00000028U
#define Adr_NIOL_iol_tx_iol_tx_b_tran 0x00000728U
#define Adr_NIOL_iol_tx_b_tran        0x00000728U
#define DFLT_VAL_NIOL_iol_tx_b_tran   0x00000000U

#define MSK_NIOL_iol_tx_b_tran_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_b_tran_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_b_tran_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_tran_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_b_tran_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_b_tran_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_b_tran_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_tran_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_b_tran_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_b_tran_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_b_tran_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_tran_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_b_tran_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_b_tran_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_b_tran_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_tran_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_b_tran': */
#define MSK_USED_BITS_NIOL_iol_tx_b_tran 0x00003fffU

enum {
  BFW_NIOL_iol_tx_b_tran_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_b_tran_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_b_tran_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_b_tran_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_b_tran_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_B_TRAN_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_b_tran_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_b_tran_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_b_tran_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_b_tran_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_b_tran_reserved1;   /* reserved                */
} NIOL_IOL_TX_B_TRAN_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_TX_B_TRAN_BIT_T bf;
} NIOL_IOL_TX_B_TRAN_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_b_on */
/* => Port B ON state configuration: */
/*    D2A values applied during ON state. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_b_on    0x0000002CU
#define Adr_NIOL_iol_tx_iol_tx_b_on 0x0000072CU
#define Adr_NIOL_iol_tx_b_on        0x0000072CU
#define DFLT_VAL_NIOL_iol_tx_b_on   0x00000000U

#define MSK_NIOL_iol_tx_b_on_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_b_on_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_b_on_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_on_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_b_on_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_b_on_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_b_on_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_on_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_b_on_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_b_on_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_b_on_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_on_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_b_on_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_b_on_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_b_on_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_b_on_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_b_on': */
#define MSK_USED_BITS_NIOL_iol_tx_b_on 0x00003fffU

enum {
  BFW_NIOL_iol_tx_b_on_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_b_on_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_b_on_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_b_on_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_b_on_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_B_ON_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_b_on_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_b_on_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_b_on_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_b_on_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_b_on_reserved1;   /* reserved                */
} NIOL_IOL_TX_B_ON_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_IOL_TX_B_ON_BIT_T bf;
} NIOL_IOL_TX_B_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_c */
/* => Port C configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_c    0x00000030U
#define Adr_NIOL_iol_tx_iol_tx_c 0x00000730U
#define Adr_NIOL_iol_tx_c        0x00000730U
#define DFLT_VAL_NIOL_iol_tx_c   0x00000000U

#define MSK_NIOL_iol_tx_c_src                   0x00000001U
#define SRT_NIOL_iol_tx_c_src                   0
#define DFLT_VAL_NIOL_iol_tx_c_src              0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_src           0x00000000U
#define MSK_NIOL_iol_tx_c_hs_en1d1              0x00000002U
#define SRT_NIOL_iol_tx_c_hs_en1d1              1
#define DFLT_VAL_NIOL_iol_tx_c_hs_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_hs_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_c_hs_en0d1              0x00000004U
#define SRT_NIOL_iol_tx_c_hs_en0d1              2
#define DFLT_VAL_NIOL_iol_tx_c_hs_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_hs_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_c_hs_en1d0              0x00000008U
#define SRT_NIOL_iol_tx_c_hs_en1d0              3
#define DFLT_VAL_NIOL_iol_tx_c_hs_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_hs_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_c_hs_en0d0              0x00000010U
#define SRT_NIOL_iol_tx_c_hs_en0d0              4
#define DFLT_VAL_NIOL_iol_tx_c_hs_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_hs_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_c_hs_nok_action         0x00000020U
#define SRT_NIOL_iol_tx_c_hs_nok_action         5
#define DFLT_VAL_NIOL_iol_tx_c_hs_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_hs_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_c_ls_en1d1              0x00000040U
#define SRT_NIOL_iol_tx_c_ls_en1d1              6
#define DFLT_VAL_NIOL_iol_tx_c_ls_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ls_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_c_ls_en0d1              0x00000080U
#define SRT_NIOL_iol_tx_c_ls_en0d1              7
#define DFLT_VAL_NIOL_iol_tx_c_ls_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ls_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_c_ls_en1d0              0x00000100U
#define SRT_NIOL_iol_tx_c_ls_en1d0              8
#define DFLT_VAL_NIOL_iol_tx_c_ls_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ls_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_c_ls_en0d0              0x00000200U
#define SRT_NIOL_iol_tx_c_ls_en0d0              9
#define DFLT_VAL_NIOL_iol_tx_c_ls_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ls_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_c_ls_nok_action         0x00000400U
#define SRT_NIOL_iol_tx_c_ls_nok_action         10
#define DFLT_VAL_NIOL_iol_tx_c_ls_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ls_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_c_no_inhibit            0x00000800U
#define SRT_NIOL_iol_tx_c_no_inhibit            11
#define DFLT_VAL_NIOL_iol_tx_c_no_inhibit       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_no_inhibit    0x00000000U

/* all used bits of 'NIOL_iol_tx_c': */
#define MSK_USED_BITS_NIOL_iol_tx_c 0x00000fffU

enum {
  BFW_NIOL_iol_tx_c_src           = 1,  /* [0] */
  BFW_NIOL_iol_tx_c_hs_en1d1      = 1,  /* [1] */
  BFW_NIOL_iol_tx_c_hs_en0d1      = 1,  /* [2] */
  BFW_NIOL_iol_tx_c_hs_en1d0      = 1,  /* [3] */
  BFW_NIOL_iol_tx_c_hs_en0d0      = 1,  /* [4] */
  BFW_NIOL_iol_tx_c_hs_nok_action = 1,  /* [5] */
  BFW_NIOL_iol_tx_c_ls_en1d1      = 1,  /* [6] */
  BFW_NIOL_iol_tx_c_ls_en0d1      = 1,  /* [7] */
  BFW_NIOL_iol_tx_c_ls_en1d0      = 1,  /* [8] */
  BFW_NIOL_iol_tx_c_ls_en0d0      = 1,  /* [9] */
  BFW_NIOL_iol_tx_c_ls_nok_action = 1,  /* [10] */
  BFW_NIOL_iol_tx_c_no_inhibit    = 1,  /* [11] */
  BFW_NIOL_iol_tx_c_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_IOL_TX_C_BIT_Ttag {
  unsigned int src           : BFW_NIOL_iol_tx_c_src;           /* 0: port c driver controlled by tx[2] and tx_en[2]                                                       */
                                                                /* 1: port c driver controlled by do[14] and do_en[14]                                                     */
  unsigned int hs_en1d1      : BFW_NIOL_iol_tx_c_hs_en1d1;      /* High side output value for tx/do=1 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d1      : BFW_NIOL_iol_tx_c_hs_en0d1;      /* High side output value for tx/do=1 and tx_en/do_en=0                                                    */
  unsigned int hs_en1d0      : BFW_NIOL_iol_tx_c_hs_en1d0;      /* High side output value for tx/do=0 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d0      : BFW_NIOL_iol_tx_c_hs_en0d0;      /* High side output value for tx/do=0 and tx_en/do_en=0                                                    */
  unsigned int hs_nok_action : BFW_NIOL_iol_tx_c_hs_nok_action; /* High side action when an over current is detected by the filtered oe_ok signals                         */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int ls_en1d1      : BFW_NIOL_iol_tx_c_ls_en1d1;      /* Low side output value for tx/do=1 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d1      : BFW_NIOL_iol_tx_c_ls_en0d1;      /* Low side output value for tx/do=1 and tx_en/do_en=0                                                     */
  unsigned int ls_en1d0      : BFW_NIOL_iol_tx_c_ls_en1d0;      /* Low side output value for tx/do=0 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d0      : BFW_NIOL_iol_tx_c_ls_en0d0;      /* Low side output value for tx/do=0 and tx_en/do_en=0                                                     */
  unsigned int ls_nok_action : BFW_NIOL_iol_tx_c_ls_nok_action; /* Low side action when an over current is detected by the filtered oe_ok signals                          */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int no_inhibit    : BFW_NIOL_iol_tx_c_no_inhibit;    /* Allow independent use of high side and low side:                                                        */
                                                                /* 0: when HS is turned on, LW is always turned off                                                        */
                                                                /* 1: HS and LS can be turned on simultaneously (the corresponding pins must not be connected on the PCB!) */
  unsigned int reserved1     : BFW_NIOL_iol_tx_c_reserved1;     /* reserved                                                                                                */
} NIOL_IOL_TX_C_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_IOL_TX_C_BIT_T bf;
} NIOL_IOL_TX_C_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_c_ok_filter */
/* => Port C OK filter configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_c_ok_filter    0x00000034U
#define Adr_NIOL_iol_tx_iol_tx_c_ok_filter 0x00000734U
#define Adr_NIOL_iol_tx_c_ok_filter        0x00000734U
#define DFLT_VAL_NIOL_iol_tx_c_ok_filter   0x00000000U

#define MSK_NIOL_iol_tx_c_ok_filter_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_c_ok_filter_threshold             0
#define DFLT_VAL_NIOL_iol_tx_c_ok_filter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ok_filter_threshold     0x00000000U
#define MSK_NIOL_iol_tx_c_ok_filter_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_c_ok_filter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_c_ok_filter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_ok_filter_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_c_ok_filter': */
#define MSK_USED_BITS_NIOL_iol_tx_c_ok_filter 0x000001ffU

enum {
  BFW_NIOL_iol_tx_c_ok_filter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_c_ok_filter_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_c_ok_filter_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_C_OK_FILTER_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_c_ok_filter_threshold;     /* OK filter threshold                                                                                            */
                                                                          /* Value 0 leads to no filtering of OK signal.                                                                    */
                                                                          /* Other values define the integral filter threshold in prescaled clock cycles + 1. Due to one central prescaler  */
                                                                          /* the exact integral filter threshold varies between this value and value+1.                                     */
                                                                          /* Change this value only, if driver is in OFF state.                                                             */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_c_ok_filter_prescaler_sel; /* 0: OK_IFILTER.prescaler0                                                                                       */
                                                                          /* 1: OK_IFILTER.prescaler1                                                                                       */
  unsigned int reserved1     : BFW_NIOL_iol_tx_c_ok_filter_reserved1;     /* reserved                                                                                                       */
} NIOL_IOL_TX_C_OK_FILTER_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_TX_C_OK_FILTER_BIT_T bf;
} NIOL_IOL_TX_C_OK_FILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_c_blank_time */
/* => Port C blank time configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_c_blank_time    0x00000038U
#define Adr_NIOL_iol_tx_iol_tx_c_blank_time 0x00000738U
#define Adr_NIOL_iol_tx_c_blank_time        0x00000738U
#define DFLT_VAL_NIOL_iol_tx_c_blank_time   0x00000000U

#define MSK_NIOL_iol_tx_c_blank_time_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_c_blank_time_threshold             0
#define DFLT_VAL_NIOL_iol_tx_c_blank_time_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_blank_time_threshold     0x00000000U
#define MSK_NIOL_iol_tx_c_blank_time_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_c_blank_time_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_c_blank_time_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_blank_time_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_c_blank_time': */
#define MSK_USED_BITS_NIOL_iol_tx_c_blank_time 0x000001ffU

enum {
  BFW_NIOL_iol_tx_c_blank_time_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_c_blank_time_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_c_blank_time_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_C_BLANK_TIME_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_c_blank_time_threshold;     /* blank time                  */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_c_blank_time_prescaler_sel; /* 0: no prescaler             */
                                                                           /* 1: use BLANK_TIME.prescaler */
  unsigned int reserved1     : BFW_NIOL_iol_tx_c_blank_time_reserved1;     /* reserved                    */
} NIOL_IOL_TX_C_BLANK_TIME_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_TX_C_BLANK_TIME_BIT_T bf;
} NIOL_IOL_TX_C_BLANK_TIME_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_c_tran */
/* => Port C TRAN(off) state configuration: */
/*    D2A values applied during TRAN (off and slew) states. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_c_tran    0x0000003CU
#define Adr_NIOL_iol_tx_iol_tx_c_tran 0x0000073CU
#define Adr_NIOL_iol_tx_c_tran        0x0000073CU
#define DFLT_VAL_NIOL_iol_tx_c_tran   0x00000000U

#define MSK_NIOL_iol_tx_c_tran_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_c_tran_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_c_tran_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_tran_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_c_tran_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_c_tran_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_c_tran_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_tran_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_c_tran_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_c_tran_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_c_tran_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_tran_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_c_tran_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_c_tran_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_c_tran_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_tran_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_c_tran': */
#define MSK_USED_BITS_NIOL_iol_tx_c_tran 0x00003fffU

enum {
  BFW_NIOL_iol_tx_c_tran_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_c_tran_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_c_tran_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_c_tran_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_c_tran_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_C_TRAN_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_c_tran_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_c_tran_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_c_tran_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_c_tran_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_c_tran_reserved1;   /* reserved                */
} NIOL_IOL_TX_C_TRAN_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_TX_C_TRAN_BIT_T bf;
} NIOL_IOL_TX_C_TRAN_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_c_on */
/* => Port C ON state configuration: */
/*    D2A values applied during ON state. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_c_on    0x00000040U
#define Adr_NIOL_iol_tx_iol_tx_c_on 0x00000740U
#define Adr_NIOL_iol_tx_c_on        0x00000740U
#define DFLT_VAL_NIOL_iol_tx_c_on   0x00000000U

#define MSK_NIOL_iol_tx_c_on_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_c_on_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_c_on_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_on_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_c_on_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_c_on_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_c_on_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_on_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_c_on_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_c_on_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_c_on_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_on_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_c_on_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_c_on_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_c_on_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_c_on_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_c_on': */
#define MSK_USED_BITS_NIOL_iol_tx_c_on 0x00003fffU

enum {
  BFW_NIOL_iol_tx_c_on_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_c_on_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_c_on_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_c_on_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_c_on_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_C_ON_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_c_on_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_c_on_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_c_on_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_c_on_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_c_on_reserved1;   /* reserved                */
} NIOL_IOL_TX_C_ON_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_IOL_TX_C_ON_BIT_T bf;
} NIOL_IOL_TX_C_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d */
/* => Port D configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d    0x00000044U
#define Adr_NIOL_iol_tx_iol_tx_d 0x00000744U
#define Adr_NIOL_iol_tx_d        0x00000744U
#define DFLT_VAL_NIOL_iol_tx_d   0x00000000U

#define MSK_NIOL_iol_tx_d_src                   0x00000001U
#define SRT_NIOL_iol_tx_d_src                   0
#define DFLT_VAL_NIOL_iol_tx_d_src              0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_src           0x00000000U
#define MSK_NIOL_iol_tx_d_hs_en1d1              0x00000002U
#define SRT_NIOL_iol_tx_d_hs_en1d1              1
#define DFLT_VAL_NIOL_iol_tx_d_hs_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_hs_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_d_hs_en0d1              0x00000004U
#define SRT_NIOL_iol_tx_d_hs_en0d1              2
#define DFLT_VAL_NIOL_iol_tx_d_hs_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_hs_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_d_hs_en1d0              0x00000008U
#define SRT_NIOL_iol_tx_d_hs_en1d0              3
#define DFLT_VAL_NIOL_iol_tx_d_hs_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_hs_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_d_hs_en0d0              0x00000010U
#define SRT_NIOL_iol_tx_d_hs_en0d0              4
#define DFLT_VAL_NIOL_iol_tx_d_hs_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_hs_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_d_hs_nok_action         0x00000020U
#define SRT_NIOL_iol_tx_d_hs_nok_action         5
#define DFLT_VAL_NIOL_iol_tx_d_hs_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_hs_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_d_ls_en1d1              0x00000040U
#define SRT_NIOL_iol_tx_d_ls_en1d1              6
#define DFLT_VAL_NIOL_iol_tx_d_ls_en1d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ls_en1d1      0x00000000U
#define MSK_NIOL_iol_tx_d_ls_en0d1              0x00000080U
#define SRT_NIOL_iol_tx_d_ls_en0d1              7
#define DFLT_VAL_NIOL_iol_tx_d_ls_en0d1         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ls_en0d1      0x00000000U
#define MSK_NIOL_iol_tx_d_ls_en1d0              0x00000100U
#define SRT_NIOL_iol_tx_d_ls_en1d0              8
#define DFLT_VAL_NIOL_iol_tx_d_ls_en1d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ls_en1d0      0x00000000U
#define MSK_NIOL_iol_tx_d_ls_en0d0              0x00000200U
#define SRT_NIOL_iol_tx_d_ls_en0d0              9
#define DFLT_VAL_NIOL_iol_tx_d_ls_en0d0         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ls_en0d0      0x00000000U
#define MSK_NIOL_iol_tx_d_ls_nok_action         0x00000400U
#define SRT_NIOL_iol_tx_d_ls_nok_action         10
#define DFLT_VAL_NIOL_iol_tx_d_ls_nok_action    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ls_nok_action 0x00000000U
#define MSK_NIOL_iol_tx_d_no_inhibit            0x00000800U
#define SRT_NIOL_iol_tx_d_no_inhibit            11
#define DFLT_VAL_NIOL_iol_tx_d_no_inhibit       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_no_inhibit    0x00000000U

/* all used bits of 'NIOL_iol_tx_d': */
#define MSK_USED_BITS_NIOL_iol_tx_d 0x00000fffU

enum {
  BFW_NIOL_iol_tx_d_src           = 1,  /* [0] */
  BFW_NIOL_iol_tx_d_hs_en1d1      = 1,  /* [1] */
  BFW_NIOL_iol_tx_d_hs_en0d1      = 1,  /* [2] */
  BFW_NIOL_iol_tx_d_hs_en1d0      = 1,  /* [3] */
  BFW_NIOL_iol_tx_d_hs_en0d0      = 1,  /* [4] */
  BFW_NIOL_iol_tx_d_hs_nok_action = 1,  /* [5] */
  BFW_NIOL_iol_tx_d_ls_en1d1      = 1,  /* [6] */
  BFW_NIOL_iol_tx_d_ls_en0d1      = 1,  /* [7] */
  BFW_NIOL_iol_tx_d_ls_en1d0      = 1,  /* [8] */
  BFW_NIOL_iol_tx_d_ls_en0d0      = 1,  /* [9] */
  BFW_NIOL_iol_tx_d_ls_nok_action = 1,  /* [10] */
  BFW_NIOL_iol_tx_d_no_inhibit    = 1,  /* [11] */
  BFW_NIOL_iol_tx_d_reserved1     = 20  /* [31:12] */
};

typedef struct NIOL_IOL_TX_D_BIT_Ttag {
  unsigned int src           : BFW_NIOL_iol_tx_d_src;           /* 0: port d driver controlled by tx[3] and tx_en[3]                                                       */
                                                                /* 1: port d driver controlled by do[15] and do_en[15]                                                     */
  unsigned int hs_en1d1      : BFW_NIOL_iol_tx_d_hs_en1d1;      /* High side output value for tx/do=1 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d1      : BFW_NIOL_iol_tx_d_hs_en0d1;      /* High side output value for tx/do=1 and tx_en/do_en=0                                                    */
  unsigned int hs_en1d0      : BFW_NIOL_iol_tx_d_hs_en1d0;      /* High side output value for tx/do=0 and tx_en/do_en=1                                                    */
  unsigned int hs_en0d0      : BFW_NIOL_iol_tx_d_hs_en0d0;      /* High side output value for tx/do=0 and tx_en/do_en=0                                                    */
  unsigned int hs_nok_action : BFW_NIOL_iol_tx_d_hs_nok_action; /* High side action when an over current is detected by the filtered oe_ok signals                         */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int ls_en1d1      : BFW_NIOL_iol_tx_d_ls_en1d1;      /* Low side output value for tx/do=1 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d1      : BFW_NIOL_iol_tx_d_ls_en0d1;      /* Low side output value for tx/do=1 and tx_en/do_en=0                                                     */
  unsigned int ls_en1d0      : BFW_NIOL_iol_tx_d_ls_en1d0;      /* Low side output value for tx/do=0 and tx_en/do_en=1                                                     */
  unsigned int ls_en0d0      : BFW_NIOL_iol_tx_d_ls_en0d0;      /* Low side output value for tx/do=0 and tx_en/do_en=0                                                     */
  unsigned int ls_nok_action : BFW_NIOL_iol_tx_d_ls_nok_action; /* Low side action when an over current is detected by the filtered oe_ok signals                          */
                                                                /* 0: IRQ is asserted                                                                                      */
                                                                /* 1: IRQ asserted and driver is turned off as long as the IRQ event bit is set                            */
  unsigned int no_inhibit    : BFW_NIOL_iol_tx_d_no_inhibit;    /* Allow independent use of high side and low side:                                                        */
                                                                /* 0: when HS is turned on, LW is always turned off                                                        */
                                                                /* 1: HS and LS can be turned on simultaneously (the corresponding pins must not be connected on the PCB!) */
  unsigned int reserved1     : BFW_NIOL_iol_tx_d_reserved1;     /* reserved                                                                                                */
} NIOL_IOL_TX_D_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_IOL_TX_D_BIT_T bf;
} NIOL_IOL_TX_D_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d_ok_filter */
/* => Port D OK filter configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d_ok_filter    0x00000048U
#define Adr_NIOL_iol_tx_iol_tx_d_ok_filter 0x00000748U
#define Adr_NIOL_iol_tx_d_ok_filter        0x00000748U
#define DFLT_VAL_NIOL_iol_tx_d_ok_filter   0x00000000U

#define MSK_NIOL_iol_tx_d_ok_filter_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_d_ok_filter_threshold             0
#define DFLT_VAL_NIOL_iol_tx_d_ok_filter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ok_filter_threshold     0x00000000U
#define MSK_NIOL_iol_tx_d_ok_filter_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_d_ok_filter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_d_ok_filter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_ok_filter_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_d_ok_filter': */
#define MSK_USED_BITS_NIOL_iol_tx_d_ok_filter 0x000001ffU

enum {
  BFW_NIOL_iol_tx_d_ok_filter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_d_ok_filter_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_d_ok_filter_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_D_OK_FILTER_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_d_ok_filter_threshold;     /* OK filter threshold                                                                                            */
                                                                          /* Value 0 leads to no filtering of OK signal.                                                                    */
                                                                          /* Other values define the integral filter threshold in prescaled clock cycles + 1. Due to one central prescaler  */
                                                                          /* the exact integral filter threshold varies between this value and value+1.                                     */
                                                                          /* Change this value only, if driver is in OFF state.                                                             */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_d_ok_filter_prescaler_sel; /* 0: OK_IFILTER.prescaler0                                                                                       */
                                                                          /* 1: OK_IFILTER.prescaler1                                                                                       */
  unsigned int reserved1     : BFW_NIOL_iol_tx_d_ok_filter_reserved1;     /* reserved                                                                                                       */
} NIOL_IOL_TX_D_OK_FILTER_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_TX_D_OK_FILTER_BIT_T bf;
} NIOL_IOL_TX_D_OK_FILTER_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d_blank_time */
/* => Port D blank time configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d_blank_time    0x0000004CU
#define Adr_NIOL_iol_tx_iol_tx_d_blank_time 0x0000074CU
#define Adr_NIOL_iol_tx_d_blank_time        0x0000074CU
#define DFLT_VAL_NIOL_iol_tx_d_blank_time   0x00000000U

#define MSK_NIOL_iol_tx_d_blank_time_threshold             0x000000ffU
#define SRT_NIOL_iol_tx_d_blank_time_threshold             0
#define DFLT_VAL_NIOL_iol_tx_d_blank_time_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_blank_time_threshold     0x00000000U
#define MSK_NIOL_iol_tx_d_blank_time_prescaler_sel         0x00000100U
#define SRT_NIOL_iol_tx_d_blank_time_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_tx_d_blank_time_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_blank_time_prescaler_sel 0x00000000U

/* all used bits of 'NIOL_iol_tx_d_blank_time': */
#define MSK_USED_BITS_NIOL_iol_tx_d_blank_time 0x000001ffU

enum {
  BFW_NIOL_iol_tx_d_blank_time_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_tx_d_blank_time_prescaler_sel = 1,  /* [8] */
  BFW_NIOL_iol_tx_d_blank_time_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_TX_D_BLANK_TIME_BIT_Ttag {
  unsigned int threshold     : BFW_NIOL_iol_tx_d_blank_time_threshold;     /* blank time                  */
  unsigned int prescaler_sel : BFW_NIOL_iol_tx_d_blank_time_prescaler_sel; /* 0: no prescaler             */
                                                                           /* 1: use BLANK_TIME.prescaler */
  unsigned int reserved1     : BFW_NIOL_iol_tx_d_blank_time_reserved1;     /* reserved                    */
} NIOL_IOL_TX_D_BLANK_TIME_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_TX_D_BLANK_TIME_BIT_T bf;
} NIOL_IOL_TX_D_BLANK_TIME_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d_tran */
/* => Port D TRAN(off) state configuration: */
/*    D2A values applied during TRAN (off and slew) states. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d_tran    0x00000050U
#define Adr_NIOL_iol_tx_iol_tx_d_tran 0x00000750U
#define Adr_NIOL_iol_tx_d_tran        0x00000750U
#define DFLT_VAL_NIOL_iol_tx_d_tran   0x00000000U

#define MSK_NIOL_iol_tx_d_tran_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_d_tran_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_d_tran_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_tran_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_d_tran_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_d_tran_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_d_tran_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_tran_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_d_tran_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_d_tran_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_d_tran_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_tran_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_d_tran_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_d_tran_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_d_tran_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_tran_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_d_tran': */
#define MSK_USED_BITS_NIOL_iol_tx_d_tran 0x00003fffU

enum {
  BFW_NIOL_iol_tx_d_tran_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_d_tran_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_d_tran_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_d_tran_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_d_tran_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_D_TRAN_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_d_tran_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_d_tran_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_d_tran_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_d_tran_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_d_tran_reserved1;   /* reserved                */
} NIOL_IOL_TX_D_TRAN_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_TX_D_TRAN_BIT_T bf;
} NIOL_IOL_TX_D_TRAN_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d_on */
/* => Port D ON state configuration: */
/*    D2A values applied during ON state. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d_on    0x00000054U
#define Adr_NIOL_iol_tx_iol_tx_d_on 0x00000754U
#define Adr_NIOL_iol_tx_d_on        0x00000754U
#define DFLT_VAL_NIOL_iol_tx_d_on   0x00000000U

#define MSK_NIOL_iol_tx_d_on_hs_slew_on          0x00000001U
#define SRT_NIOL_iol_tx_d_on_hs_slew_on          0
#define DFLT_VAL_NIOL_iol_tx_d_on_hs_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_on_hs_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_d_on_hs_ilim_set         0x0000007eU
#define SRT_NIOL_iol_tx_d_on_hs_ilim_set         1
#define DFLT_VAL_NIOL_iol_tx_d_on_hs_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_on_hs_ilim_set 0x00000000U
#define MSK_NIOL_iol_tx_d_on_ls_slew_on          0x00000080U
#define SRT_NIOL_iol_tx_d_on_ls_slew_on          7
#define DFLT_VAL_NIOL_iol_tx_d_on_ls_slew_on     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_on_ls_slew_on  0x00000000U
#define MSK_NIOL_iol_tx_d_on_ls_ilim_set         0x00003f00U
#define SRT_NIOL_iol_tx_d_on_ls_ilim_set         8
#define DFLT_VAL_NIOL_iol_tx_d_on_ls_ilim_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d_on_ls_ilim_set 0x00000000U

/* all used bits of 'NIOL_iol_tx_d_on': */
#define MSK_USED_BITS_NIOL_iol_tx_d_on 0x00003fffU

enum {
  BFW_NIOL_iol_tx_d_on_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_d_on_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_d_on_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_d_on_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_d_on_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_D_ON_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_d_on_hs_slew_on;  /* High side slew          */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_d_on_hs_ilim_set; /* High side current limit */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_d_on_ls_slew_on;  /* Low side slew           */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_d_on_ls_ilim_set; /* Low side current limit  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_d_on_reserved1;   /* reserved                */
} NIOL_IOL_TX_D_ON_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_IOL_TX_D_ON_BIT_T bf;
} NIOL_IOL_TX_D_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d2a_on */
/* => All ports ON signals to analog part (d2a): */
/*    Activate these bits before using the corresponding gate driver. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d2a_on    0x00000058U
#define Adr_NIOL_iol_tx_iol_tx_d2a_on 0x00000758U
#define Adr_NIOL_iol_tx_d2a_on        0x00000758U
#define DFLT_VAL_NIOL_iol_tx_d2a_on   0x00000000U

#define MSK_NIOL_iol_tx_d2a_on_a_hs_on         0x00000001U
#define SRT_NIOL_iol_tx_d2a_on_a_hs_on         0
#define DFLT_VAL_NIOL_iol_tx_d2a_on_a_hs_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_a_hs_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_a_ls_on         0x00000002U
#define SRT_NIOL_iol_tx_d2a_on_a_ls_on         1
#define DFLT_VAL_NIOL_iol_tx_d2a_on_a_ls_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_a_ls_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_b_hs_on         0x00000004U
#define SRT_NIOL_iol_tx_d2a_on_b_hs_on         2
#define DFLT_VAL_NIOL_iol_tx_d2a_on_b_hs_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_b_hs_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_b_ls_on         0x00000008U
#define SRT_NIOL_iol_tx_d2a_on_b_ls_on         3
#define DFLT_VAL_NIOL_iol_tx_d2a_on_b_ls_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_b_ls_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_c_hs_on         0x00000010U
#define SRT_NIOL_iol_tx_d2a_on_c_hs_on         4
#define DFLT_VAL_NIOL_iol_tx_d2a_on_c_hs_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_c_hs_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_c_ls_on         0x00000020U
#define SRT_NIOL_iol_tx_d2a_on_c_ls_on         5
#define DFLT_VAL_NIOL_iol_tx_d2a_on_c_ls_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_c_ls_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_d_hs_on         0x00000040U
#define SRT_NIOL_iol_tx_d2a_on_d_hs_on         6
#define DFLT_VAL_NIOL_iol_tx_d2a_on_d_hs_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_d_hs_on 0x00000000U
#define MSK_NIOL_iol_tx_d2a_on_d_ls_on         0x00000080U
#define SRT_NIOL_iol_tx_d2a_on_d_ls_on         7
#define DFLT_VAL_NIOL_iol_tx_d2a_on_d_ls_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_d2a_on_d_ls_on 0x00000000U

/* all used bits of 'NIOL_iol_tx_d2a_on': */
#define MSK_USED_BITS_NIOL_iol_tx_d2a_on 0x000000ffU

enum {
  BFW_NIOL_iol_tx_d2a_on_a_hs_on   = 1,  /* [0] */
  BFW_NIOL_iol_tx_d2a_on_a_ls_on   = 1,  /* [1] */
  BFW_NIOL_iol_tx_d2a_on_b_hs_on   = 1,  /* [2] */
  BFW_NIOL_iol_tx_d2a_on_b_ls_on   = 1,  /* [3] */
  BFW_NIOL_iol_tx_d2a_on_c_hs_on   = 1,  /* [4] */
  BFW_NIOL_iol_tx_d2a_on_c_ls_on   = 1,  /* [5] */
  BFW_NIOL_iol_tx_d2a_on_d_hs_on   = 1,  /* [6] */
  BFW_NIOL_iol_tx_d2a_on_d_ls_on   = 1,  /* [7] */
  BFW_NIOL_iol_tx_d2a_on_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_TX_D2A_ON_BIT_Ttag {
  unsigned int a_hs_on   : BFW_NIOL_iol_tx_d2a_on_a_hs_on;   /* Port A ON value to high side gate driver */
  unsigned int a_ls_on   : BFW_NIOL_iol_tx_d2a_on_a_ls_on;   /* Port A ON value to low side gate driver  */
  unsigned int b_hs_on   : BFW_NIOL_iol_tx_d2a_on_b_hs_on;   /* Port B ON value to high side gate driver */
  unsigned int b_ls_on   : BFW_NIOL_iol_tx_d2a_on_b_ls_on;   /* Port B ON value to low side gate driver  */
  unsigned int c_hs_on   : BFW_NIOL_iol_tx_d2a_on_c_hs_on;   /* Port C ON value to high side gate driver */
  unsigned int c_ls_on   : BFW_NIOL_iol_tx_d2a_on_c_ls_on;   /* Port C ON value to low side gate driver  */
  unsigned int d_hs_on   : BFW_NIOL_iol_tx_d2a_on_d_hs_on;   /* Port D ON value to high side gate driver */
  unsigned int d_ls_on   : BFW_NIOL_iol_tx_d2a_on_d_ls_on;   /* Port D ON value to low side gate driver  */
  unsigned int reserved1 : BFW_NIOL_iol_tx_d2a_on_reserved1; /* reserved                                 */
} NIOL_IOL_TX_D2A_ON_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_TX_D2A_ON_BIT_T bf;
} NIOL_IOL_TX_D2A_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d2a_a */
/* => Port A signals to analog part (d2a): */
/*    This register is for debugging purposes only. */
/*    All values are set by hardware but can be overwritten here. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d2a_a    0x0000005CU
#define Adr_NIOL_iol_tx_iol_tx_d2a_a 0x0000075CU
#define Adr_NIOL_iol_tx_d2a_a        0x0000075CU

#define MSK_NIOL_iol_tx_d2a_a_hs_slew_on  0x00000001U
#define SRT_NIOL_iol_tx_d2a_a_hs_slew_on  0
#define MSK_NIOL_iol_tx_d2a_a_hs_ilim_set 0x0000007eU
#define SRT_NIOL_iol_tx_d2a_a_hs_ilim_set 1
#define MSK_NIOL_iol_tx_d2a_a_ls_slew_on  0x00000080U
#define SRT_NIOL_iol_tx_d2a_a_ls_slew_on  7
#define MSK_NIOL_iol_tx_d2a_a_ls_ilim_set 0x00003f00U
#define SRT_NIOL_iol_tx_d2a_a_ls_ilim_set 8

/* all used bits of 'NIOL_iol_tx_d2a_a': */
#define MSK_USED_BITS_NIOL_iol_tx_d2a_a 0x00003fffU

enum {
  BFW_NIOL_iol_tx_d2a_a_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_d2a_a_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_d2a_a_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_d2a_a_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_d2a_a_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_D2A_A_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_d2a_a_hs_slew_on;  /* SLEW_ON value to high side of gate driver              */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_d2a_a_hs_ilim_set; /* ILIM (current limit) value to high side of gate driver */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_d2a_a_ls_slew_on;  /* SLEW_ON value to low side of gate driver               */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_d2a_a_ls_ilim_set; /* ILIM (current limit) value to low side of gate driver  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_d2a_a_reserved1;   /* reserved                                               */
} NIOL_IOL_TX_D2A_A_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_TX_D2A_A_BIT_T bf;
} NIOL_IOL_TX_D2A_A_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d2a_b */
/* => Port B signals to analog part (d2a): */
/*    This register is for debugging purposes only. */
/*    All values are set by hardware but can be overwritten here. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d2a_b    0x00000060U
#define Adr_NIOL_iol_tx_iol_tx_d2a_b 0x00000760U
#define Adr_NIOL_iol_tx_d2a_b        0x00000760U

#define MSK_NIOL_iol_tx_d2a_b_hs_slew_on  0x00000001U
#define SRT_NIOL_iol_tx_d2a_b_hs_slew_on  0
#define MSK_NIOL_iol_tx_d2a_b_hs_ilim_set 0x0000007eU
#define SRT_NIOL_iol_tx_d2a_b_hs_ilim_set 1
#define MSK_NIOL_iol_tx_d2a_b_ls_slew_on  0x00000080U
#define SRT_NIOL_iol_tx_d2a_b_ls_slew_on  7
#define MSK_NIOL_iol_tx_d2a_b_ls_ilim_set 0x00003f00U
#define SRT_NIOL_iol_tx_d2a_b_ls_ilim_set 8

/* all used bits of 'NIOL_iol_tx_d2a_b': */
#define MSK_USED_BITS_NIOL_iol_tx_d2a_b 0x00003fffU

enum {
  BFW_NIOL_iol_tx_d2a_b_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_d2a_b_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_d2a_b_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_d2a_b_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_d2a_b_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_D2A_B_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_d2a_b_hs_slew_on;  /* SLEW_ON value to high side of gate driver              */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_d2a_b_hs_ilim_set; /* ILIM (current limit) value to high side of gate driver */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_d2a_b_ls_slew_on;  /* SLEW_ON value to low side of gate driver               */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_d2a_b_ls_ilim_set; /* ILIM (current limit) value to low side of gate driver  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_d2a_b_reserved1;   /* reserved                                               */
} NIOL_IOL_TX_D2A_B_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_TX_D2A_B_BIT_T bf;
} NIOL_IOL_TX_D2A_B_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d2a_c */
/* => Port C signals to analog part (d2a): */
/*    This register is for debugging purposes only. */
/*    All values are set by hardware but can be overwritten here. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d2a_c    0x00000064U
#define Adr_NIOL_iol_tx_iol_tx_d2a_c 0x00000764U
#define Adr_NIOL_iol_tx_d2a_c        0x00000764U

#define MSK_NIOL_iol_tx_d2a_c_hs_slew_on  0x00000001U
#define SRT_NIOL_iol_tx_d2a_c_hs_slew_on  0
#define MSK_NIOL_iol_tx_d2a_c_hs_ilim_set 0x0000007eU
#define SRT_NIOL_iol_tx_d2a_c_hs_ilim_set 1
#define MSK_NIOL_iol_tx_d2a_c_ls_slew_on  0x00000080U
#define SRT_NIOL_iol_tx_d2a_c_ls_slew_on  7
#define MSK_NIOL_iol_tx_d2a_c_ls_ilim_set 0x00003f00U
#define SRT_NIOL_iol_tx_d2a_c_ls_ilim_set 8

/* all used bits of 'NIOL_iol_tx_d2a_c': */
#define MSK_USED_BITS_NIOL_iol_tx_d2a_c 0x00003fffU

enum {
  BFW_NIOL_iol_tx_d2a_c_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_d2a_c_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_d2a_c_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_d2a_c_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_d2a_c_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_D2A_C_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_d2a_c_hs_slew_on;  /* SLEW_ON value to high side of gate driver              */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_d2a_c_hs_ilim_set; /* ILIM (current limit) value to high side of gate driver */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_d2a_c_ls_slew_on;  /* SLEW_ON value to low side of gate driver               */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_d2a_c_ls_ilim_set; /* ILIM (current limit) value to low side of gate driver  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_d2a_c_reserved1;   /* reserved                                               */
} NIOL_IOL_TX_D2A_C_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_TX_D2A_C_BIT_T bf;
} NIOL_IOL_TX_D2A_C_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_d2a_d */
/* => Port D signals to analog part (d2a): */
/*    This register is for debugging purposes only. */
/*    All values are set by hardware but can be overwritten here. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_d2a_d    0x00000068U
#define Adr_NIOL_iol_tx_iol_tx_d2a_d 0x00000768U
#define Adr_NIOL_iol_tx_d2a_d        0x00000768U

#define MSK_NIOL_iol_tx_d2a_d_hs_slew_on  0x00000001U
#define SRT_NIOL_iol_tx_d2a_d_hs_slew_on  0
#define MSK_NIOL_iol_tx_d2a_d_hs_ilim_set 0x0000007eU
#define SRT_NIOL_iol_tx_d2a_d_hs_ilim_set 1
#define MSK_NIOL_iol_tx_d2a_d_ls_slew_on  0x00000080U
#define SRT_NIOL_iol_tx_d2a_d_ls_slew_on  7
#define MSK_NIOL_iol_tx_d2a_d_ls_ilim_set 0x00003f00U
#define SRT_NIOL_iol_tx_d2a_d_ls_ilim_set 8

/* all used bits of 'NIOL_iol_tx_d2a_d': */
#define MSK_USED_BITS_NIOL_iol_tx_d2a_d 0x00003fffU

enum {
  BFW_NIOL_iol_tx_d2a_d_hs_slew_on  = 1,  /* [0] */
  BFW_NIOL_iol_tx_d2a_d_hs_ilim_set = 6,  /* [6:1] */
  BFW_NIOL_iol_tx_d2a_d_ls_slew_on  = 1,  /* [7] */
  BFW_NIOL_iol_tx_d2a_d_ls_ilim_set = 6,  /* [13:8] */
  BFW_NIOL_iol_tx_d2a_d_reserved1   = 18  /* [31:14] */
};

typedef struct NIOL_IOL_TX_D2A_D_BIT_Ttag {
  unsigned int hs_slew_on  : BFW_NIOL_iol_tx_d2a_d_hs_slew_on;  /* SLEW_ON value to high side of gate driver              */
  unsigned int hs_ilim_set : BFW_NIOL_iol_tx_d2a_d_hs_ilim_set; /* ILIM (current limit) value to high side of gate driver */
  unsigned int ls_slew_on  : BFW_NIOL_iol_tx_d2a_d_ls_slew_on;  /* SLEW_ON value to low side of gate driver               */
  unsigned int ls_ilim_set : BFW_NIOL_iol_tx_d2a_d_ls_ilim_set; /* ILIM (current limit) value to low side of gate driver  */
  unsigned int reserved1   : BFW_NIOL_iol_tx_d2a_d_reserved1;   /* reserved                                               */
} NIOL_IOL_TX_D2A_D_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_IOL_TX_D2A_D_BIT_T bf;
} NIOL_IOL_TX_D2A_D_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_a2d */
/* => OK signals from analog part: */
/*    This register is for debugging purposes only. */
/*    The OK signals show that the current limit has not been reached, but */
/*    these signals only carry information after a blanking time (state=ON). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_a2d    0x0000006CU
#define Adr_NIOL_iol_tx_iol_tx_a2d 0x0000076CU
#define Adr_NIOL_iol_tx_a2d        0x0000076CU

#define MSK_NIOL_iol_tx_a2d_a_hs_ok 0x00000001U
#define SRT_NIOL_iol_tx_a2d_a_hs_ok 0
#define MSK_NIOL_iol_tx_a2d_a_ls_ok 0x00000002U
#define SRT_NIOL_iol_tx_a2d_a_ls_ok 1
#define MSK_NIOL_iol_tx_a2d_b_hs_ok 0x00000004U
#define SRT_NIOL_iol_tx_a2d_b_hs_ok 2
#define MSK_NIOL_iol_tx_a2d_b_ls_ok 0x00000008U
#define SRT_NIOL_iol_tx_a2d_b_ls_ok 3
#define MSK_NIOL_iol_tx_a2d_c_hs_ok 0x00000010U
#define SRT_NIOL_iol_tx_a2d_c_hs_ok 4
#define MSK_NIOL_iol_tx_a2d_c_ls_ok 0x00000020U
#define SRT_NIOL_iol_tx_a2d_c_ls_ok 5
#define MSK_NIOL_iol_tx_a2d_d_hs_ok 0x00000040U
#define SRT_NIOL_iol_tx_a2d_d_hs_ok 6
#define MSK_NIOL_iol_tx_a2d_d_ls_ok 0x00000080U
#define SRT_NIOL_iol_tx_a2d_d_ls_ok 7

/* all used bits of 'NIOL_iol_tx_a2d': */
#define MSK_USED_BITS_NIOL_iol_tx_a2d 0x000000ffU

enum {
  BFW_NIOL_iol_tx_a2d_a_hs_ok   = 1,  /* [0] */
  BFW_NIOL_iol_tx_a2d_a_ls_ok   = 1,  /* [1] */
  BFW_NIOL_iol_tx_a2d_b_hs_ok   = 1,  /* [2] */
  BFW_NIOL_iol_tx_a2d_b_ls_ok   = 1,  /* [3] */
  BFW_NIOL_iol_tx_a2d_c_hs_ok   = 1,  /* [4] */
  BFW_NIOL_iol_tx_a2d_c_ls_ok   = 1,  /* [5] */
  BFW_NIOL_iol_tx_a2d_d_hs_ok   = 1,  /* [6] */
  BFW_NIOL_iol_tx_a2d_d_ls_ok   = 1,  /* [7] */
  BFW_NIOL_iol_tx_a2d_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_TX_A2D_BIT_Ttag {
  unsigned int a_hs_ok   : BFW_NIOL_iol_tx_a2d_a_hs_ok;   /* OK signal of port A high side */
  unsigned int a_ls_ok   : BFW_NIOL_iol_tx_a2d_a_ls_ok;   /* OK signal of port A low side  */
  unsigned int b_hs_ok   : BFW_NIOL_iol_tx_a2d_b_hs_ok;   /* OK signal of port B high side */
  unsigned int b_ls_ok   : BFW_NIOL_iol_tx_a2d_b_ls_ok;   /* OK signal of port B low side  */
  unsigned int c_hs_ok   : BFW_NIOL_iol_tx_a2d_c_hs_ok;   /* OK signal of port C high side */
  unsigned int c_ls_ok   : BFW_NIOL_iol_tx_a2d_c_ls_ok;   /* OK signal of port C low side  */
  unsigned int d_hs_ok   : BFW_NIOL_iol_tx_a2d_d_hs_ok;   /* OK signal of port D high side */
  unsigned int d_ls_ok   : BFW_NIOL_iol_tx_a2d_d_ls_ok;   /* OK signal of port D low side  */
  unsigned int reserved1 : BFW_NIOL_iol_tx_a2d_reserved1; /* reserved                      */
} NIOL_IOL_TX_A2D_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_IOL_TX_A2D_BIT_T bf;
} NIOL_IOL_TX_A2D_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_state_a */
/* => State and filtered OK signals from analog part of port A: */
/*    This register is for debugging purposes only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_state_a    0x00000070U
#define Adr_NIOL_iol_tx_iol_tx_state_a 0x00000770U
#define Adr_NIOL_iol_tx_state_a        0x00000770U

#define MSK_NIOL_iol_tx_state_a_hs_ok_fil 0x00000001U
#define SRT_NIOL_iol_tx_state_a_hs_ok_fil 0
#define MSK_NIOL_iol_tx_state_a_hs_state  0x00000006U
#define SRT_NIOL_iol_tx_state_a_hs_state  1
#define MSK_NIOL_iol_tx_state_a_ls_ok_fil 0x00000010U
#define SRT_NIOL_iol_tx_state_a_ls_ok_fil 4
#define MSK_NIOL_iol_tx_state_a_ls_state  0x00000060U
#define SRT_NIOL_iol_tx_state_a_ls_state  5

/* all used bits of 'NIOL_iol_tx_state_a': */
#define MSK_USED_BITS_NIOL_iol_tx_state_a 0x00000077U

enum {
  BFW_NIOL_iol_tx_state_a_hs_ok_fil = 1,  /* [0] */
  BFW_NIOL_iol_tx_state_a_hs_state  = 2,  /* [2:1] */
  BFW_NIOL_iol_tx_state_a_reserved1 = 1,  /* [3] */
  BFW_NIOL_iol_tx_state_a_ls_ok_fil = 1,  /* [4] */
  BFW_NIOL_iol_tx_state_a_ls_state  = 2,  /* [6:5] */
  BFW_NIOL_iol_tx_state_a_reserved2 = 25  /* [31:7] */
};

typedef struct NIOL_IOL_TX_STATE_A_BIT_Ttag {
  unsigned int hs_ok_fil : BFW_NIOL_iol_tx_state_a_hs_ok_fil; /* state=on: integral filtered OK signal of high side, else 1 */
  unsigned int hs_state  : BFW_NIOL_iol_tx_state_a_hs_state;  /* state of high side:                                        */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved1 : BFW_NIOL_iol_tx_state_a_reserved1; /* reserved                                                   */
  unsigned int ls_ok_fil : BFW_NIOL_iol_tx_state_a_ls_ok_fil; /* state=on: integral filtered OK signal of low side, else 1  */
  unsigned int ls_state  : BFW_NIOL_iol_tx_state_a_ls_state;  /* state of low side                                          */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved2 : BFW_NIOL_iol_tx_state_a_reserved2; /* reserved                                                   */
} NIOL_IOL_TX_STATE_A_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_TX_STATE_A_BIT_T bf;
} NIOL_IOL_TX_STATE_A_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_state_b */
/* => State and filtered OK signals from analog part of port B: */
/*    This register is for debugging purposes only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_state_b    0x00000074U
#define Adr_NIOL_iol_tx_iol_tx_state_b 0x00000774U
#define Adr_NIOL_iol_tx_state_b        0x00000774U

#define MSK_NIOL_iol_tx_state_b_hs_ok_fil 0x00000001U
#define SRT_NIOL_iol_tx_state_b_hs_ok_fil 0
#define MSK_NIOL_iol_tx_state_b_hs_state  0x00000006U
#define SRT_NIOL_iol_tx_state_b_hs_state  1
#define MSK_NIOL_iol_tx_state_b_ls_ok_fil 0x00000010U
#define SRT_NIOL_iol_tx_state_b_ls_ok_fil 4
#define MSK_NIOL_iol_tx_state_b_ls_state  0x00000060U
#define SRT_NIOL_iol_tx_state_b_ls_state  5

/* all used bits of 'NIOL_iol_tx_state_b': */
#define MSK_USED_BITS_NIOL_iol_tx_state_b 0x00000077U

enum {
  BFW_NIOL_iol_tx_state_b_hs_ok_fil = 1,  /* [0] */
  BFW_NIOL_iol_tx_state_b_hs_state  = 2,  /* [2:1] */
  BFW_NIOL_iol_tx_state_b_reserved1 = 1,  /* [3] */
  BFW_NIOL_iol_tx_state_b_ls_ok_fil = 1,  /* [4] */
  BFW_NIOL_iol_tx_state_b_ls_state  = 2,  /* [6:5] */
  BFW_NIOL_iol_tx_state_b_reserved2 = 25  /* [31:7] */
};

typedef struct NIOL_IOL_TX_STATE_B_BIT_Ttag {
  unsigned int hs_ok_fil : BFW_NIOL_iol_tx_state_b_hs_ok_fil; /* state=on: integral filtered OK signal of high side, else 1 */
  unsigned int hs_state  : BFW_NIOL_iol_tx_state_b_hs_state;  /* state of high side:                                        */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved1 : BFW_NIOL_iol_tx_state_b_reserved1; /* reserved                                                   */
  unsigned int ls_ok_fil : BFW_NIOL_iol_tx_state_b_ls_ok_fil; /* state=on: integral filtered OK signal of low side, else 1  */
  unsigned int ls_state  : BFW_NIOL_iol_tx_state_b_ls_state;  /* state of low side                                          */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved2 : BFW_NIOL_iol_tx_state_b_reserved2; /* reserved                                                   */
} NIOL_IOL_TX_STATE_B_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_TX_STATE_B_BIT_T bf;
} NIOL_IOL_TX_STATE_B_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_state_c */
/* => State and filtered OK signals from analog part of port C: */
/*    This register is for debugging purposes only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_state_c    0x00000078U
#define Adr_NIOL_iol_tx_iol_tx_state_c 0x00000778U
#define Adr_NIOL_iol_tx_state_c        0x00000778U

#define MSK_NIOL_iol_tx_state_c_hs_ok_fil 0x00000001U
#define SRT_NIOL_iol_tx_state_c_hs_ok_fil 0
#define MSK_NIOL_iol_tx_state_c_hs_state  0x00000006U
#define SRT_NIOL_iol_tx_state_c_hs_state  1
#define MSK_NIOL_iol_tx_state_c_ls_ok_fil 0x00000010U
#define SRT_NIOL_iol_tx_state_c_ls_ok_fil 4
#define MSK_NIOL_iol_tx_state_c_ls_state  0x00000060U
#define SRT_NIOL_iol_tx_state_c_ls_state  5

/* all used bits of 'NIOL_iol_tx_state_c': */
#define MSK_USED_BITS_NIOL_iol_tx_state_c 0x00000077U

enum {
  BFW_NIOL_iol_tx_state_c_hs_ok_fil = 1,  /* [0] */
  BFW_NIOL_iol_tx_state_c_hs_state  = 2,  /* [2:1] */
  BFW_NIOL_iol_tx_state_c_reserved1 = 1,  /* [3] */
  BFW_NIOL_iol_tx_state_c_ls_ok_fil = 1,  /* [4] */
  BFW_NIOL_iol_tx_state_c_ls_state  = 2,  /* [6:5] */
  BFW_NIOL_iol_tx_state_c_reserved2 = 25  /* [31:7] */
};

typedef struct NIOL_IOL_TX_STATE_C_BIT_Ttag {
  unsigned int hs_ok_fil : BFW_NIOL_iol_tx_state_c_hs_ok_fil; /* state=on: integral filtered OK signal of high side, else 1 */
  unsigned int hs_state  : BFW_NIOL_iol_tx_state_c_hs_state;  /* state of high side:                                        */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved1 : BFW_NIOL_iol_tx_state_c_reserved1; /* reserved                                                   */
  unsigned int ls_ok_fil : BFW_NIOL_iol_tx_state_c_ls_ok_fil; /* state=on: integral filtered OK signal of low side, else 1  */
  unsigned int ls_state  : BFW_NIOL_iol_tx_state_c_ls_state;  /* state of low side                                          */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved2 : BFW_NIOL_iol_tx_state_c_reserved2; /* reserved                                                   */
} NIOL_IOL_TX_STATE_C_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_TX_STATE_C_BIT_T bf;
} NIOL_IOL_TX_STATE_C_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_state_d */
/* => State and filtered OK signals from analog part of port D: */
/*    This register is for debugging purposes only. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_state_d    0x0000007CU
#define Adr_NIOL_iol_tx_iol_tx_state_d 0x0000077CU
#define Adr_NIOL_iol_tx_state_d        0x0000077CU

#define MSK_NIOL_iol_tx_state_d_hs_ok_fil 0x00000001U
#define SRT_NIOL_iol_tx_state_d_hs_ok_fil 0
#define MSK_NIOL_iol_tx_state_d_hs_state  0x00000006U
#define SRT_NIOL_iol_tx_state_d_hs_state  1
#define MSK_NIOL_iol_tx_state_d_ls_ok_fil 0x00000010U
#define SRT_NIOL_iol_tx_state_d_ls_ok_fil 4
#define MSK_NIOL_iol_tx_state_d_ls_state  0x00000060U
#define SRT_NIOL_iol_tx_state_d_ls_state  5

/* all used bits of 'NIOL_iol_tx_state_d': */
#define MSK_USED_BITS_NIOL_iol_tx_state_d 0x00000077U

enum {
  BFW_NIOL_iol_tx_state_d_hs_ok_fil = 1,  /* [0] */
  BFW_NIOL_iol_tx_state_d_hs_state  = 2,  /* [2:1] */
  BFW_NIOL_iol_tx_state_d_reserved1 = 1,  /* [3] */
  BFW_NIOL_iol_tx_state_d_ls_ok_fil = 1,  /* [4] */
  BFW_NIOL_iol_tx_state_d_ls_state  = 2,  /* [6:5] */
  BFW_NIOL_iol_tx_state_d_reserved2 = 25  /* [31:7] */
};

typedef struct NIOL_IOL_TX_STATE_D_BIT_Ttag {
  unsigned int hs_ok_fil : BFW_NIOL_iol_tx_state_d_hs_ok_fil; /* state=on: integral filtered OK signal of high side, else 1 */
  unsigned int hs_state  : BFW_NIOL_iol_tx_state_d_hs_state;  /* state of high side:                                        */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved1 : BFW_NIOL_iol_tx_state_d_reserved1; /* reserved                                                   */
  unsigned int ls_ok_fil : BFW_NIOL_iol_tx_state_d_ls_ok_fil; /* state=on: integral filtered OK signal of low side, else 1  */
  unsigned int ls_state  : BFW_NIOL_iol_tx_state_d_ls_state;  /* state of low side                                          */
                                                              /* 0: off                                                     */
                                                              /* 1: blanking                                                */
                                                              /* 2: on                                                      */
  unsigned int reserved2 : BFW_NIOL_iol_tx_state_d_reserved2; /* reserved                                                   */
} NIOL_IOL_TX_STATE_D_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_TX_STATE_D_BIT_T bf;
} NIOL_IOL_TX_STATE_D_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_irq_raw */
/* => Raw IRQs: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event IRQ, status IRQs must be reset at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_irq_raw    0x00000080U
#define Adr_NIOL_iol_tx_iol_tx_irq_raw 0x00000780U
#define Adr_NIOL_iol_tx_irq_raw        0x00000780U
#define DFLT_VAL_NIOL_iol_tx_irq_raw   0x00000000U

#define MSK_NIOL_iol_tx_irq_raw_a_hs_nok         0x00000001U
#define SRT_NIOL_iol_tx_irq_raw_a_hs_nok         0
#define DFLT_VAL_NIOL_iol_tx_irq_raw_a_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_a_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_a_ls_nok         0x00000002U
#define SRT_NIOL_iol_tx_irq_raw_a_ls_nok         1
#define DFLT_VAL_NIOL_iol_tx_irq_raw_a_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_a_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_b_hs_nok         0x00000004U
#define SRT_NIOL_iol_tx_irq_raw_b_hs_nok         2
#define DFLT_VAL_NIOL_iol_tx_irq_raw_b_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_b_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_b_ls_nok         0x00000008U
#define SRT_NIOL_iol_tx_irq_raw_b_ls_nok         3
#define DFLT_VAL_NIOL_iol_tx_irq_raw_b_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_b_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_c_hs_nok         0x00000010U
#define SRT_NIOL_iol_tx_irq_raw_c_hs_nok         4
#define DFLT_VAL_NIOL_iol_tx_irq_raw_c_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_c_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_c_ls_nok         0x00000020U
#define SRT_NIOL_iol_tx_irq_raw_c_ls_nok         5
#define DFLT_VAL_NIOL_iol_tx_irq_raw_c_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_c_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_d_hs_nok         0x00000040U
#define SRT_NIOL_iol_tx_irq_raw_d_hs_nok         6
#define DFLT_VAL_NIOL_iol_tx_irq_raw_d_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_d_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_raw_d_ls_nok         0x00000080U
#define SRT_NIOL_iol_tx_irq_raw_d_ls_nok         7
#define DFLT_VAL_NIOL_iol_tx_irq_raw_d_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_raw_d_ls_nok 0x00000000U

/* all used bits of 'NIOL_iol_tx_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_tx_irq_raw 0x000000ffU

enum {
  BFW_NIOL_iol_tx_irq_raw_a_hs_nok  = 1,  /* [0] */
  BFW_NIOL_iol_tx_irq_raw_a_ls_nok  = 1,  /* [1] */
  BFW_NIOL_iol_tx_irq_raw_b_hs_nok  = 1,  /* [2] */
  BFW_NIOL_iol_tx_irq_raw_b_ls_nok  = 1,  /* [3] */
  BFW_NIOL_iol_tx_irq_raw_c_hs_nok  = 1,  /* [4] */
  BFW_NIOL_iol_tx_irq_raw_c_ls_nok  = 1,  /* [5] */
  BFW_NIOL_iol_tx_irq_raw_d_hs_nok  = 1,  /* [6] */
  BFW_NIOL_iol_tx_irq_raw_d_ls_nok  = 1,  /* [7] */
  BFW_NIOL_iol_tx_irq_raw_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_TX_IRQ_RAW_BIT_Ttag {
  unsigned int a_hs_nok  : BFW_NIOL_iol_tx_irq_raw_a_hs_nok;  /* EVENT: filtered OK signal of port A high side was "0" during ON state */
  unsigned int a_ls_nok  : BFW_NIOL_iol_tx_irq_raw_a_ls_nok;  /* EVENT: filtered OK signal of port A low side was "0" during ON state  */
  unsigned int b_hs_nok  : BFW_NIOL_iol_tx_irq_raw_b_hs_nok;  /* EVENT: filtered OK signal of port B high side was "0" during ON state */
  unsigned int b_ls_nok  : BFW_NIOL_iol_tx_irq_raw_b_ls_nok;  /* EVENT: filtered OK signal of port B low side was "0" during ON state  */
  unsigned int c_hs_nok  : BFW_NIOL_iol_tx_irq_raw_c_hs_nok;  /* EVENT: filtered OK signal of port C high side was "0" during ON state */
  unsigned int c_ls_nok  : BFW_NIOL_iol_tx_irq_raw_c_ls_nok;  /* EVENT: filtered OK signal of port C low side was "0" during ON state  */
  unsigned int d_hs_nok  : BFW_NIOL_iol_tx_irq_raw_d_hs_nok;  /* EVENT: filtered OK signal of port D high side was "0" during ON state */
  unsigned int d_ls_nok  : BFW_NIOL_iol_tx_irq_raw_d_ls_nok;  /* EVENT: filtered OK signal of port D low side was "0" during ON state  */
  unsigned int reserved1 : BFW_NIOL_iol_tx_irq_raw_reserved1; /* reserved                                                              */
} NIOL_IOL_TX_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_TX_IRQ_RAW_BIT_T bf;
} NIOL_IOL_TX_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_irq_mask_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing to adr_iol_tx_irq_raw */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_irq_mask_set    0x00000084U
#define Adr_NIOL_iol_tx_iol_tx_irq_mask_set 0x00000784U
#define Adr_NIOL_iol_tx_irq_mask_set        0x00000784U
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set   0x00000000U

#define MSK_NIOL_iol_tx_irq_mask_set_a_hs_nok         0x00000001U
#define SRT_NIOL_iol_tx_irq_mask_set_a_hs_nok         0
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_a_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_a_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_a_ls_nok         0x00000002U
#define SRT_NIOL_iol_tx_irq_mask_set_a_ls_nok         1
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_a_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_a_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_b_hs_nok         0x00000004U
#define SRT_NIOL_iol_tx_irq_mask_set_b_hs_nok         2
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_b_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_b_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_b_ls_nok         0x00000008U
#define SRT_NIOL_iol_tx_irq_mask_set_b_ls_nok         3
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_b_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_b_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_c_hs_nok         0x00000010U
#define SRT_NIOL_iol_tx_irq_mask_set_c_hs_nok         4
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_c_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_c_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_c_ls_nok         0x00000020U
#define SRT_NIOL_iol_tx_irq_mask_set_c_ls_nok         5
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_c_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_c_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_d_hs_nok         0x00000040U
#define SRT_NIOL_iol_tx_irq_mask_set_d_hs_nok         6
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_d_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_d_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_set_d_ls_nok         0x00000080U
#define SRT_NIOL_iol_tx_irq_mask_set_d_ls_nok         7
#define DFLT_VAL_NIOL_iol_tx_irq_mask_set_d_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_set_d_ls_nok 0x00000000U

/* all used bits of 'NIOL_iol_tx_irq_mask_set': */
#define MSK_USED_BITS_NIOL_iol_tx_irq_mask_set 0x000000ffU

enum {
  BFW_NIOL_iol_tx_irq_mask_set_a_hs_nok  = 1,  /* [0] */
  BFW_NIOL_iol_tx_irq_mask_set_a_ls_nok  = 1,  /* [1] */
  BFW_NIOL_iol_tx_irq_mask_set_b_hs_nok  = 1,  /* [2] */
  BFW_NIOL_iol_tx_irq_mask_set_b_ls_nok  = 1,  /* [3] */
  BFW_NIOL_iol_tx_irq_mask_set_c_hs_nok  = 1,  /* [4] */
  BFW_NIOL_iol_tx_irq_mask_set_c_ls_nok  = 1,  /* [5] */
  BFW_NIOL_iol_tx_irq_mask_set_d_hs_nok  = 1,  /* [6] */
  BFW_NIOL_iol_tx_irq_mask_set_d_ls_nok  = 1,  /* [7] */
  BFW_NIOL_iol_tx_irq_mask_set_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_TX_IRQ_MASK_SET_BIT_Ttag {
  unsigned int a_hs_nok  : BFW_NIOL_iol_tx_irq_mask_set_a_hs_nok;  /* EVENT: filtered OK signal of port A high side was "0" during ON state */
  unsigned int a_ls_nok  : BFW_NIOL_iol_tx_irq_mask_set_a_ls_nok;  /* EVENT: filtered OK signal of port A low side was "0" during ON state  */
  unsigned int b_hs_nok  : BFW_NIOL_iol_tx_irq_mask_set_b_hs_nok;  /* EVENT: filtered OK signal of port B high side was "0" during ON state */
  unsigned int b_ls_nok  : BFW_NIOL_iol_tx_irq_mask_set_b_ls_nok;  /* EVENT: filtered OK signal of port B low side was "0" during ON state  */
  unsigned int c_hs_nok  : BFW_NIOL_iol_tx_irq_mask_set_c_hs_nok;  /* EVENT: filtered OK signal of port C high side was "0" during ON state */
  unsigned int c_ls_nok  : BFW_NIOL_iol_tx_irq_mask_set_c_ls_nok;  /* EVENT: filtered OK signal of port C low side was "0" during ON state  */
  unsigned int d_hs_nok  : BFW_NIOL_iol_tx_irq_mask_set_d_hs_nok;  /* EVENT: filtered OK signal of port D high side was "0" during ON state */
  unsigned int d_ls_nok  : BFW_NIOL_iol_tx_irq_mask_set_d_ls_nok;  /* EVENT: filtered OK signal of port D low side was "0" during ON state  */
  unsigned int reserved1 : BFW_NIOL_iol_tx_irq_mask_set_reserved1; /* reserved                                                              */
} NIOL_IOL_TX_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_TX_IRQ_MASK_SET_BIT_T bf;
} NIOL_IOL_TX_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_irq_mask_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_irq_mask_reset    0x00000088U
#define Adr_NIOL_iol_tx_iol_tx_irq_mask_reset 0x00000788U
#define Adr_NIOL_iol_tx_irq_mask_reset        0x00000788U
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset   0x00000000U

#define MSK_NIOL_iol_tx_irq_mask_reset_a_hs_nok         0x00000001U
#define SRT_NIOL_iol_tx_irq_mask_reset_a_hs_nok         0
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_a_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_a_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_a_ls_nok         0x00000002U
#define SRT_NIOL_iol_tx_irq_mask_reset_a_ls_nok         1
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_a_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_a_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_b_hs_nok         0x00000004U
#define SRT_NIOL_iol_tx_irq_mask_reset_b_hs_nok         2
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_b_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_b_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_b_ls_nok         0x00000008U
#define SRT_NIOL_iol_tx_irq_mask_reset_b_ls_nok         3
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_b_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_b_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_c_hs_nok         0x00000010U
#define SRT_NIOL_iol_tx_irq_mask_reset_c_hs_nok         4
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_c_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_c_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_c_ls_nok         0x00000020U
#define SRT_NIOL_iol_tx_irq_mask_reset_c_ls_nok         5
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_c_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_c_ls_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_d_hs_nok         0x00000040U
#define SRT_NIOL_iol_tx_irq_mask_reset_d_hs_nok         6
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_d_hs_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_d_hs_nok 0x00000000U
#define MSK_NIOL_iol_tx_irq_mask_reset_d_ls_nok         0x00000080U
#define SRT_NIOL_iol_tx_irq_mask_reset_d_ls_nok         7
#define DFLT_VAL_NIOL_iol_tx_irq_mask_reset_d_ls_nok    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_tx_irq_mask_reset_d_ls_nok 0x00000000U

/* all used bits of 'NIOL_iol_tx_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_iol_tx_irq_mask_reset 0x000000ffU

enum {
  BFW_NIOL_iol_tx_irq_mask_reset_a_hs_nok  = 1,  /* [0] */
  BFW_NIOL_iol_tx_irq_mask_reset_a_ls_nok  = 1,  /* [1] */
  BFW_NIOL_iol_tx_irq_mask_reset_b_hs_nok  = 1,  /* [2] */
  BFW_NIOL_iol_tx_irq_mask_reset_b_ls_nok  = 1,  /* [3] */
  BFW_NIOL_iol_tx_irq_mask_reset_c_hs_nok  = 1,  /* [4] */
  BFW_NIOL_iol_tx_irq_mask_reset_c_ls_nok  = 1,  /* [5] */
  BFW_NIOL_iol_tx_irq_mask_reset_d_hs_nok  = 1,  /* [6] */
  BFW_NIOL_iol_tx_irq_mask_reset_d_ls_nok  = 1,  /* [7] */
  BFW_NIOL_iol_tx_irq_mask_reset_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_TX_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int a_hs_nok  : BFW_NIOL_iol_tx_irq_mask_reset_a_hs_nok;  /* EVENT: filtered OK signal of port A high side was "0" during ON state */
  unsigned int a_ls_nok  : BFW_NIOL_iol_tx_irq_mask_reset_a_ls_nok;  /* EVENT: filtered OK signal of port A low side was "0" during ON state  */
  unsigned int b_hs_nok  : BFW_NIOL_iol_tx_irq_mask_reset_b_hs_nok;  /* EVENT: filtered OK signal of port B high side was "0" during ON state */
  unsigned int b_ls_nok  : BFW_NIOL_iol_tx_irq_mask_reset_b_ls_nok;  /* EVENT: filtered OK signal of port B low side was "0" during ON state  */
  unsigned int c_hs_nok  : BFW_NIOL_iol_tx_irq_mask_reset_c_hs_nok;  /* EVENT: filtered OK signal of port C high side was "0" during ON state */
  unsigned int c_ls_nok  : BFW_NIOL_iol_tx_irq_mask_reset_c_ls_nok;  /* EVENT: filtered OK signal of port C low side was "0" during ON state  */
  unsigned int d_hs_nok  : BFW_NIOL_iol_tx_irq_mask_reset_d_hs_nok;  /* EVENT: filtered OK signal of port D high side was "0" during ON state */
  unsigned int d_ls_nok  : BFW_NIOL_iol_tx_irq_mask_reset_d_ls_nok;  /* EVENT: filtered OK signal of port D low side was "0" during ON state  */
  unsigned int reserved1 : BFW_NIOL_iol_tx_irq_mask_reset_reserved1; /* reserved                                                              */
} NIOL_IOL_TX_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_TX_IRQ_MASK_RESET_BIT_T bf;
} NIOL_IOL_TX_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_irq_masked */
/* => Masked IRQs: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_irq_masked    0x0000008CU
#define Adr_NIOL_iol_tx_iol_tx_irq_masked 0x0000078CU
#define Adr_NIOL_iol_tx_irq_masked        0x0000078CU

#define MSK_NIOL_iol_tx_irq_masked_a_hs_nok 0x00000001U
#define SRT_NIOL_iol_tx_irq_masked_a_hs_nok 0
#define MSK_NIOL_iol_tx_irq_masked_a_ls_nok 0x00000002U
#define SRT_NIOL_iol_tx_irq_masked_a_ls_nok 1
#define MSK_NIOL_iol_tx_irq_masked_b_hs_nok 0x00000004U
#define SRT_NIOL_iol_tx_irq_masked_b_hs_nok 2
#define MSK_NIOL_iol_tx_irq_masked_b_ls_nok 0x00000008U
#define SRT_NIOL_iol_tx_irq_masked_b_ls_nok 3
#define MSK_NIOL_iol_tx_irq_masked_c_hs_nok 0x00000010U
#define SRT_NIOL_iol_tx_irq_masked_c_hs_nok 4
#define MSK_NIOL_iol_tx_irq_masked_c_ls_nok 0x00000020U
#define SRT_NIOL_iol_tx_irq_masked_c_ls_nok 5
#define MSK_NIOL_iol_tx_irq_masked_d_hs_nok 0x00000040U
#define SRT_NIOL_iol_tx_irq_masked_d_hs_nok 6
#define MSK_NIOL_iol_tx_irq_masked_d_ls_nok 0x00000080U
#define SRT_NIOL_iol_tx_irq_masked_d_ls_nok 7

/* all used bits of 'NIOL_iol_tx_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_tx_irq_masked 0x000000ffU

enum {
  BFW_NIOL_iol_tx_irq_masked_a_hs_nok  = 1,  /* [0] */
  BFW_NIOL_iol_tx_irq_masked_a_ls_nok  = 1,  /* [1] */
  BFW_NIOL_iol_tx_irq_masked_b_hs_nok  = 1,  /* [2] */
  BFW_NIOL_iol_tx_irq_masked_b_ls_nok  = 1,  /* [3] */
  BFW_NIOL_iol_tx_irq_masked_c_hs_nok  = 1,  /* [4] */
  BFW_NIOL_iol_tx_irq_masked_c_ls_nok  = 1,  /* [5] */
  BFW_NIOL_iol_tx_irq_masked_d_hs_nok  = 1,  /* [6] */
  BFW_NIOL_iol_tx_irq_masked_d_ls_nok  = 1,  /* [7] */
  BFW_NIOL_iol_tx_irq_masked_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_TX_IRQ_MASKED_BIT_Ttag {
  unsigned int a_hs_nok  : BFW_NIOL_iol_tx_irq_masked_a_hs_nok;  /* EVENT: filtered OK signal of port A high side was "0" during ON state */
  unsigned int a_ls_nok  : BFW_NIOL_iol_tx_irq_masked_a_ls_nok;  /* EVENT: filtered OK signal of port A low side was "0" during ON state  */
  unsigned int b_hs_nok  : BFW_NIOL_iol_tx_irq_masked_b_hs_nok;  /* EVENT: filtered OK signal of port B high side was "0" during ON state */
  unsigned int b_ls_nok  : BFW_NIOL_iol_tx_irq_masked_b_ls_nok;  /* EVENT: filtered OK signal of port B low side was "0" during ON state  */
  unsigned int c_hs_nok  : BFW_NIOL_iol_tx_irq_masked_c_hs_nok;  /* EVENT: filtered OK signal of port C high side was "0" during ON state */
  unsigned int c_ls_nok  : BFW_NIOL_iol_tx_irq_masked_c_ls_nok;  /* EVENT: filtered OK signal of port C low side was "0" during ON state  */
  unsigned int d_hs_nok  : BFW_NIOL_iol_tx_irq_masked_d_hs_nok;  /* EVENT: filtered OK signal of port D high side was "0" during ON state */
  unsigned int d_ls_nok  : BFW_NIOL_iol_tx_irq_masked_d_ls_nok;  /* EVENT: filtered OK signal of port D low side was "0" during ON state  */
  unsigned int reserved1 : BFW_NIOL_iol_tx_irq_masked_reserved1; /* reserved                                                              */
} NIOL_IOL_TX_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_TX_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_TX_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_tx_irq_no */
/* => Lowest active interrupt: */
/*    Shows the highest prior active IRQ (= lowest IRQ number). */
/*    When no IRQ is pending the number of the highest IRQ plus one is returned. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_tx_irq_no    0x00000090U
#define Adr_NIOL_iol_tx_iol_tx_irq_no 0x00000790U
#define Adr_NIOL_iol_tx_irq_no        0x00000790U

#define MSK_NIOL_iol_tx_irq_no_val 0x0000000fU
#define SRT_NIOL_iol_tx_irq_no_val 0

/* all used bits of 'NIOL_iol_tx_irq_no': */
#define MSK_USED_BITS_NIOL_iol_tx_irq_no 0x0000000fU

enum {
  BFW_NIOL_iol_tx_irq_no_val       = 4,  /* [3:0] */
  BFW_NIOL_iol_tx_irq_no_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_IOL_TX_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_tx_irq_no_val;       /* Number of the pending IRQ */
  unsigned int reserved1 : BFW_NIOL_iol_tx_irq_no_reserved1; /* reserved                  */
} NIOL_IOL_TX_IRQ_NO_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_TX_IRQ_NO_BIT_T bf;
} NIOL_IOL_TX_IRQ_NO_T;


/* ===================================================================== */

/* Area of iol_rx */

/* ===================================================================== */

#define Addr_NIOL_iol_rx 0x00000800U

/* --------------------------------------------------------------------- */
/* Register iol_rx_ifilter_prescaler_012 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_ifilter_prescaler_012    0x00000000U
#define Adr_NIOL_iol_rx_iol_rx_ifilter_prescaler_012 0x00000800U
#define Adr_NIOL_iol_rx_ifilter_prescaler_012        0x00000800U
#define DFLT_VAL_NIOL_iol_rx_ifilter_prescaler_012   0x00000000U

#define MSK_NIOL_iol_rx_ifilter_prescaler_012_prescaler0         0x0000000fU
#define SRT_NIOL_iol_rx_ifilter_prescaler_012_prescaler0         0
#define DFLT_VAL_NIOL_iol_rx_ifilter_prescaler_012_prescaler0    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_ifilter_prescaler_012_prescaler0 0x00000000U
#define MSK_NIOL_iol_rx_ifilter_prescaler_012_prescaler1         0x000000f0U
#define SRT_NIOL_iol_rx_ifilter_prescaler_012_prescaler1         4
#define DFLT_VAL_NIOL_iol_rx_ifilter_prescaler_012_prescaler1    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_ifilter_prescaler_012_prescaler1 0x00000000U
#define MSK_NIOL_iol_rx_ifilter_prescaler_012_prescaler2         0x0000ff00U
#define SRT_NIOL_iol_rx_ifilter_prescaler_012_prescaler2         8
#define DFLT_VAL_NIOL_iol_rx_ifilter_prescaler_012_prescaler2    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_ifilter_prescaler_012_prescaler2 0x00000000U

/* all used bits of 'NIOL_iol_rx_ifilter_prescaler_012': */
#define MSK_USED_BITS_NIOL_iol_rx_ifilter_prescaler_012 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_ifilter_prescaler_012_prescaler0 = 4,  /* [3:0] */
  BFW_NIOL_iol_rx_ifilter_prescaler_012_prescaler1 = 4,  /* [7:4] */
  BFW_NIOL_iol_rx_ifilter_prescaler_012_prescaler2 = 8,  /* [15:8] */
  BFW_NIOL_iol_rx_ifilter_prescaler_012_reserved1  = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_IFILTER_PRESCALER_012_BIT_Ttag {
  unsigned int prescaler0 : BFW_NIOL_iol_rx_ifilter_prescaler_012_prescaler0; /* 0 : prescaler disabled                                  */
                                                                              /* 1..MAX: ifilter sample frequency = fclk / (1+prescaler) */
  unsigned int prescaler1 : BFW_NIOL_iol_rx_ifilter_prescaler_012_prescaler1; /*                                                         */
  unsigned int prescaler2 : BFW_NIOL_iol_rx_ifilter_prescaler_012_prescaler2; /*                                                         */
  unsigned int reserved1  : BFW_NIOL_iol_rx_ifilter_prescaler_012_reserved1;  /* reserved                                                */
} NIOL_IOL_RX_IFILTER_PRESCALER_012_BIT_T;

typedef union {
  uint32_t                                val;
  NIOL_IOL_RX_IFILTER_PRESCALER_012_BIT_T bf;
} NIOL_IOL_RX_IFILTER_PRESCALER_012_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_ifilter_prescaler_3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_ifilter_prescaler_3    0x00000004U
#define Adr_NIOL_iol_rx_iol_rx_ifilter_prescaler_3 0x00000804U
#define Adr_NIOL_iol_rx_ifilter_prescaler_3        0x00000804U
#define DFLT_VAL_NIOL_iol_rx_ifilter_prescaler_3   0x00000000U

#define MSK_NIOL_iol_rx_ifilter_prescaler_3_prescaler3         0x00000fffU
#define SRT_NIOL_iol_rx_ifilter_prescaler_3_prescaler3         0
#define DFLT_VAL_NIOL_iol_rx_ifilter_prescaler_3_prescaler3    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_ifilter_prescaler_3_prescaler3 0x00000000U

/* all used bits of 'NIOL_iol_rx_ifilter_prescaler_3': */
#define MSK_USED_BITS_NIOL_iol_rx_ifilter_prescaler_3 0x00000fffU

enum {
  BFW_NIOL_iol_rx_ifilter_prescaler_3_prescaler3 = 12, /* [11:0] */
  BFW_NIOL_iol_rx_ifilter_prescaler_3_reserved1  = 20  /* [31:12] */
};

typedef struct NIOL_IOL_RX_IFILTER_PRESCALER_3_BIT_Ttag {
  unsigned int prescaler3 : BFW_NIOL_iol_rx_ifilter_prescaler_3_prescaler3; /*          */
  unsigned int reserved1  : BFW_NIOL_iol_rx_ifilter_prescaler_3_reserved1;  /* reserved */
} NIOL_IOL_RX_IFILTER_PRESCALER_3_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_IOL_RX_IFILTER_PRESCALER_3_BIT_T bf;
} NIOL_IOL_RX_IFILTER_PRESCALER_3_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_a_cq_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_a_cq_rx    0x00000008U
#define Adr_NIOL_iol_rx_iol_rx_cfg_a_cq_rx 0x00000808U
#define Adr_NIOL_iol_rx_cfg_a_cq_rx        0x00000808U
#define DFLT_VAL_NIOL_iol_rx_cfg_a_cq_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_a_cq_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_a_cq_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_a_cq_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_cq_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_a_cq_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_a_cq_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_a_cq_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_cq_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_a_cq_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_a_cq_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_a_cq_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_cq_rx_irq_mode              0x00000000U
#define MSK_NIOL_iol_rx_cfg_a_cq_rx_isink_on_src                  0x00002000U
#define SRT_NIOL_iol_rx_cfg_a_cq_rx_isink_on_src                  13
#define DFLT_VAL_NIOL_iol_rx_cfg_a_cq_rx_isink_on_src             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_cq_rx_isink_on_src          0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_a_cq_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_a_cq_rx 0x00003fffU

enum {
  BFW_NIOL_iol_rx_cfg_a_cq_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_a_cq_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_a_cq_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_a_cq_rx_isink_on_src          = 1,  /* [13] */
  BFW_NIOL_iol_rx_cfg_a_cq_rx_reserved1             = 18  /* [31:14] */
};

typedef struct NIOL_IOL_RX_CFG_A_CQ_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_a_cq_rx_ifilter_threshold;     /* 0: integral filter disabled                                           */
                                                                                          /* 1..MAX: integral filter threshold                                     */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_a_cq_rx_ifilter_prescaler_sel; /* 0,1,2,3: select corresponding prescaler                               */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_a_cq_rx_irq_mode;              /* 0: IRQ disabled                                                       */
                                                                                          /* 1: level IRQ, asserted when receiver signal is 0                      */
                                                                                          /* 2: level IRQ, asserted when receiver signal is 1                      */
                                                                                          /* 3: event IRQ, set on rising edge                                      */
                                                                                          /* 4: event IRQ, set on falling edge                                     */
                                                                                          /* 5: event IRQ, set on any edge                                         */
  unsigned int isink_on_src          : BFW_NIOL_iol_rx_cfg_a_cq_rx_isink_on_src;          /* 0: corresponding bit in D2A_ISINK_ON is not influenced by rx_en input */
                                                                                          /* 1: corresponding bit in D2A_ISINK_ON is set by rx_en input            */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_a_cq_rx_reserved1;             /* reserved                                                              */
} NIOL_IOL_RX_CFG_A_CQ_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_A_CQ_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_A_CQ_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_a_di_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_a_di_rx    0x0000000CU
#define Adr_NIOL_iol_rx_iol_rx_cfg_a_di_rx 0x0000080CU
#define Adr_NIOL_iol_rx_cfg_a_di_rx        0x0000080CU
#define DFLT_VAL_NIOL_iol_rx_cfg_a_di_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_a_di_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_a_di_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_a_di_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_di_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_a_di_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_a_di_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_a_di_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_di_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_a_di_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_a_di_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_a_di_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_a_di_rx_irq_mode              0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_a_di_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_a_di_rx 0x00001fffU

enum {
  BFW_NIOL_iol_rx_cfg_a_di_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_a_di_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_a_di_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_a_di_rx_reserved1             = 19  /* [31:13] */
};

typedef struct NIOL_IOL_RX_CFG_A_DI_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_a_di_rx_ifilter_threshold;     /* see above */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_a_di_rx_ifilter_prescaler_sel; /* " "       */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_a_di_rx_irq_mode;              /* " "       */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_a_di_rx_reserved1;             /* reserved  */
} NIOL_IOL_RX_CFG_A_DI_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_A_DI_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_A_DI_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_b_cq_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_b_cq_rx    0x00000010U
#define Adr_NIOL_iol_rx_iol_rx_cfg_b_cq_rx 0x00000810U
#define Adr_NIOL_iol_rx_cfg_b_cq_rx        0x00000810U
#define DFLT_VAL_NIOL_iol_rx_cfg_b_cq_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_b_cq_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_b_cq_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_b_cq_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_cq_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_b_cq_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_b_cq_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_b_cq_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_cq_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_b_cq_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_b_cq_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_b_cq_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_cq_rx_irq_mode              0x00000000U
#define MSK_NIOL_iol_rx_cfg_b_cq_rx_isink_on_src                  0x00002000U
#define SRT_NIOL_iol_rx_cfg_b_cq_rx_isink_on_src                  13
#define DFLT_VAL_NIOL_iol_rx_cfg_b_cq_rx_isink_on_src             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_cq_rx_isink_on_src          0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_b_cq_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_b_cq_rx 0x00003fffU

enum {
  BFW_NIOL_iol_rx_cfg_b_cq_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_b_cq_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_b_cq_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_b_cq_rx_isink_on_src          = 1,  /* [13] */
  BFW_NIOL_iol_rx_cfg_b_cq_rx_reserved1             = 18  /* [31:14] */
};

typedef struct NIOL_IOL_RX_CFG_B_CQ_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_b_cq_rx_ifilter_threshold;     /* 0: integral filter disabled                                           */
                                                                                          /* 1..MAX: integral filter threshold                                     */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_b_cq_rx_ifilter_prescaler_sel; /* 0,1,2,3: select corresponding prescaler                               */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_b_cq_rx_irq_mode;              /* 0: IRQ disabled                                                       */
                                                                                          /* 1: level IRQ, asserted when receiver signal is 0                      */
                                                                                          /* 2: level IRQ, asserted when receiver signal is 1                      */
                                                                                          /* 3: event IRQ, set on rising edge                                      */
                                                                                          /* 4: event IRQ, set on falling edge                                     */
                                                                                          /* 5: event IRQ, set on any edge                                         */
  unsigned int isink_on_src          : BFW_NIOL_iol_rx_cfg_b_cq_rx_isink_on_src;          /* 0: corresponding bit in D2A_ISINK_ON is not influenced by rx_en input */
                                                                                          /* 1: corresponding bit in D2A_ISINK_ON is set by rx_en input            */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_b_cq_rx_reserved1;             /* reserved                                                              */
} NIOL_IOL_RX_CFG_B_CQ_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_B_CQ_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_B_CQ_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_b_di_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_b_di_rx    0x00000014U
#define Adr_NIOL_iol_rx_iol_rx_cfg_b_di_rx 0x00000814U
#define Adr_NIOL_iol_rx_cfg_b_di_rx        0x00000814U
#define DFLT_VAL_NIOL_iol_rx_cfg_b_di_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_b_di_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_b_di_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_b_di_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_di_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_b_di_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_b_di_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_b_di_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_di_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_b_di_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_b_di_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_b_di_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_b_di_rx_irq_mode              0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_b_di_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_b_di_rx 0x00001fffU

enum {
  BFW_NIOL_iol_rx_cfg_b_di_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_b_di_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_b_di_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_b_di_rx_reserved1             = 19  /* [31:13] */
};

typedef struct NIOL_IOL_RX_CFG_B_DI_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_b_di_rx_ifilter_threshold;     /* see above */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_b_di_rx_ifilter_prescaler_sel; /* " "       */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_b_di_rx_irq_mode;              /* " "       */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_b_di_rx_reserved1;             /* reserved  */
} NIOL_IOL_RX_CFG_B_DI_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_B_DI_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_B_DI_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_c_cq_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_c_cq_rx    0x00000018U
#define Adr_NIOL_iol_rx_iol_rx_cfg_c_cq_rx 0x00000818U
#define Adr_NIOL_iol_rx_cfg_c_cq_rx        0x00000818U
#define DFLT_VAL_NIOL_iol_rx_cfg_c_cq_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_c_cq_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_c_cq_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_c_cq_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_cq_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_c_cq_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_c_cq_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_c_cq_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_cq_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_c_cq_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_c_cq_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_c_cq_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_cq_rx_irq_mode              0x00000000U
#define MSK_NIOL_iol_rx_cfg_c_cq_rx_isink_on_src                  0x00002000U
#define SRT_NIOL_iol_rx_cfg_c_cq_rx_isink_on_src                  13
#define DFLT_VAL_NIOL_iol_rx_cfg_c_cq_rx_isink_on_src             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_cq_rx_isink_on_src          0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_c_cq_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_c_cq_rx 0x00003fffU

enum {
  BFW_NIOL_iol_rx_cfg_c_cq_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_c_cq_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_c_cq_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_c_cq_rx_isink_on_src          = 1,  /* [13] */
  BFW_NIOL_iol_rx_cfg_c_cq_rx_reserved1             = 18  /* [31:14] */
};

typedef struct NIOL_IOL_RX_CFG_C_CQ_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_c_cq_rx_ifilter_threshold;     /* 0: integral filter disabled                                           */
                                                                                          /* 1..MAX: integral filter threshold                                     */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_c_cq_rx_ifilter_prescaler_sel; /* 0,1,2,3: select corresponding prescaler                               */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_c_cq_rx_irq_mode;              /* 0: IRQ disabled                                                       */
                                                                                          /* 1: level IRQ, asserted when receiver signal is 0                      */
                                                                                          /* 2: level IRQ, asserted when receiver signal is 1                      */
                                                                                          /* 3: event IRQ, set on rising edge                                      */
                                                                                          /* 4: event IRQ, set on falling edge                                     */
                                                                                          /* 5: event IRQ, set on any edge                                         */
  unsigned int isink_on_src          : BFW_NIOL_iol_rx_cfg_c_cq_rx_isink_on_src;          /* 0: corresponding bit in D2A_ISINK_ON is not influenced by rx_en input */
                                                                                          /* 1: corresponding bit in D2A_ISINK_ON is set by rx_en input            */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_c_cq_rx_reserved1;             /* reserved                                                              */
} NIOL_IOL_RX_CFG_C_CQ_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_C_CQ_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_C_CQ_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_c_di_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_c_di_rx    0x0000001CU
#define Adr_NIOL_iol_rx_iol_rx_cfg_c_di_rx 0x0000081CU
#define Adr_NIOL_iol_rx_cfg_c_di_rx        0x0000081CU
#define DFLT_VAL_NIOL_iol_rx_cfg_c_di_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_c_di_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_c_di_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_c_di_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_di_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_c_di_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_c_di_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_c_di_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_di_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_c_di_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_c_di_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_c_di_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_c_di_rx_irq_mode              0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_c_di_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_c_di_rx 0x00001fffU

enum {
  BFW_NIOL_iol_rx_cfg_c_di_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_c_di_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_c_di_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_c_di_rx_reserved1             = 19  /* [31:13] */
};

typedef struct NIOL_IOL_RX_CFG_C_DI_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_c_di_rx_ifilter_threshold;     /* see above */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_c_di_rx_ifilter_prescaler_sel; /* " "       */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_c_di_rx_irq_mode;              /* " "       */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_c_di_rx_reserved1;             /* reserved  */
} NIOL_IOL_RX_CFG_C_DI_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_C_DI_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_C_DI_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_d_cq_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_d_cq_rx    0x00000020U
#define Adr_NIOL_iol_rx_iol_rx_cfg_d_cq_rx 0x00000820U
#define Adr_NIOL_iol_rx_cfg_d_cq_rx        0x00000820U
#define DFLT_VAL_NIOL_iol_rx_cfg_d_cq_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_d_cq_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_d_cq_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_d_cq_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_cq_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_d_cq_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_d_cq_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_d_cq_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_cq_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_d_cq_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_d_cq_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_d_cq_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_cq_rx_irq_mode              0x00000000U
#define MSK_NIOL_iol_rx_cfg_d_cq_rx_isink_on_src                  0x00002000U
#define SRT_NIOL_iol_rx_cfg_d_cq_rx_isink_on_src                  13
#define DFLT_VAL_NIOL_iol_rx_cfg_d_cq_rx_isink_on_src             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_cq_rx_isink_on_src          0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_d_cq_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_d_cq_rx 0x00003fffU

enum {
  BFW_NIOL_iol_rx_cfg_d_cq_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_d_cq_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_d_cq_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_d_cq_rx_isink_on_src          = 1,  /* [13] */
  BFW_NIOL_iol_rx_cfg_d_cq_rx_reserved1             = 18  /* [31:14] */
};

typedef struct NIOL_IOL_RX_CFG_D_CQ_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_d_cq_rx_ifilter_threshold;     /* 0: integral filter disabled                                           */
                                                                                          /* 1..MAX: integral filter threshold                                     */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_d_cq_rx_ifilter_prescaler_sel; /* 0,1,2,3: select corresponding prescaler                               */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_d_cq_rx_irq_mode;              /* 0: IRQ disabled                                                       */
                                                                                          /* 1: level IRQ, asserted when receiver signal is 0                      */
                                                                                          /* 2: level IRQ, asserted when receiver signal is 1                      */
                                                                                          /* 3: event IRQ, set on rising edge                                      */
                                                                                          /* 4: event IRQ, set on falling edge                                     */
                                                                                          /* 5: event IRQ, set on any edge                                         */
  unsigned int isink_on_src          : BFW_NIOL_iol_rx_cfg_d_cq_rx_isink_on_src;          /* 0: corresponding bit in D2A_ISINK_ON is not influenced by rx_en input */
                                                                                          /* 1: corresponding bit in D2A_ISINK_ON is set by rx_en input            */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_d_cq_rx_reserved1;             /* reserved                                                              */
} NIOL_IOL_RX_CFG_D_CQ_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_D_CQ_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_D_CQ_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_d_di_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_d_di_rx    0x00000024U
#define Adr_NIOL_iol_rx_iol_rx_cfg_d_di_rx 0x00000824U
#define Adr_NIOL_iol_rx_cfg_d_di_rx        0x00000824U
#define DFLT_VAL_NIOL_iol_rx_cfg_d_di_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_d_di_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_d_di_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_d_di_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_di_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_d_di_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_d_di_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_d_di_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_di_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_d_di_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_d_di_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_d_di_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_d_di_rx_irq_mode              0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_d_di_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_d_di_rx 0x00001fffU

enum {
  BFW_NIOL_iol_rx_cfg_d_di_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_d_di_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_d_di_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_d_di_rx_reserved1             = 19  /* [31:13] */
};

typedef struct NIOL_IOL_RX_CFG_D_DI_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_d_di_rx_ifilter_threshold;     /* see above */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_d_di_rx_ifilter_prescaler_sel; /* " "       */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_d_di_rx_irq_mode;              /* " "       */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_d_di_rx_reserved1;             /* reserved  */
} NIOL_IOL_RX_CFG_D_DI_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_D_DI_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_D_DI_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_cfg_di_x_rx */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_cfg_di_x_rx    0x00000028U
#define Adr_NIOL_iol_rx_iol_rx_cfg_di_x_rx 0x00000828U
#define Adr_NIOL_iol_rx_cfg_di_x_rx        0x00000828U
#define DFLT_VAL_NIOL_iol_rx_cfg_di_x_rx   0x00000000U

#define MSK_NIOL_iol_rx_cfg_di_x_rx_ifilter_threshold             0x000000ffU
#define SRT_NIOL_iol_rx_cfg_di_x_rx_ifilter_threshold             0
#define DFLT_VAL_NIOL_iol_rx_cfg_di_x_rx_ifilter_threshold        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_di_x_rx_ifilter_threshold     0x00000000U
#define MSK_NIOL_iol_rx_cfg_di_x_rx_ifilter_prescaler_sel         0x00000300U
#define SRT_NIOL_iol_rx_cfg_di_x_rx_ifilter_prescaler_sel         8
#define DFLT_VAL_NIOL_iol_rx_cfg_di_x_rx_ifilter_prescaler_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_di_x_rx_ifilter_prescaler_sel 0x00000000U
#define MSK_NIOL_iol_rx_cfg_di_x_rx_irq_mode                      0x00001c00U
#define SRT_NIOL_iol_rx_cfg_di_x_rx_irq_mode                      10
#define DFLT_VAL_NIOL_iol_rx_cfg_di_x_rx_irq_mode                 0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_cfg_di_x_rx_irq_mode              0x00000000U

/* all used bits of 'NIOL_iol_rx_cfg_di_x_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_cfg_di_x_rx 0x00001fffU

enum {
  BFW_NIOL_iol_rx_cfg_di_x_rx_ifilter_threshold     = 8,  /* [7:0] */
  BFW_NIOL_iol_rx_cfg_di_x_rx_ifilter_prescaler_sel = 2,  /* [9:8] */
  BFW_NIOL_iol_rx_cfg_di_x_rx_irq_mode              = 3,  /* [12:10] */
  BFW_NIOL_iol_rx_cfg_di_x_rx_reserved1             = 19  /* [31:13] */
};

typedef struct NIOL_IOL_RX_CFG_DI_X_RX_BIT_Ttag {
  unsigned int ifilter_threshold     : BFW_NIOL_iol_rx_cfg_di_x_rx_ifilter_threshold;     /* see above */
  unsigned int ifilter_prescaler_sel : BFW_NIOL_iol_rx_cfg_di_x_rx_ifilter_prescaler_sel; /* " "       */
  unsigned int irq_mode              : BFW_NIOL_iol_rx_cfg_di_x_rx_irq_mode;              /* " "       */
  unsigned int reserved1             : BFW_NIOL_iol_rx_cfg_di_x_rx_reserved1;             /* reserved  */
} NIOL_IOL_RX_CFG_DI_X_RX_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_RX_CFG_DI_X_RX_BIT_T bf;
} NIOL_IOL_RX_CFG_DI_X_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_di */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_di    0x0000002CU
#define Adr_NIOL_iol_rx_iol_rx_di 0x0000082CU
#define Adr_NIOL_iol_rx_di        0x0000082CU

#define MSK_NIOL_iol_rx_di_a_cq_fil 0x00000001U
#define SRT_NIOL_iol_rx_di_a_cq_fil 0
#define MSK_NIOL_iol_rx_di_a_di_fil 0x00000002U
#define SRT_NIOL_iol_rx_di_a_di_fil 1
#define MSK_NIOL_iol_rx_di_b_cq_fil 0x00000004U
#define SRT_NIOL_iol_rx_di_b_cq_fil 2
#define MSK_NIOL_iol_rx_di_b_di_fil 0x00000008U
#define SRT_NIOL_iol_rx_di_b_di_fil 3
#define MSK_NIOL_iol_rx_di_c_cq_fil 0x00000010U
#define SRT_NIOL_iol_rx_di_c_cq_fil 4
#define MSK_NIOL_iol_rx_di_c_di_fil 0x00000020U
#define SRT_NIOL_iol_rx_di_c_di_fil 5
#define MSK_NIOL_iol_rx_di_d_cq_fil 0x00000040U
#define SRT_NIOL_iol_rx_di_d_cq_fil 6
#define MSK_NIOL_iol_rx_di_d_di_fil 0x00000080U
#define SRT_NIOL_iol_rx_di_d_di_fil 7
#define MSK_NIOL_iol_rx_di_di_x_fil 0x00000100U
#define SRT_NIOL_iol_rx_di_di_x_fil 8

/* all used bits of 'NIOL_iol_rx_di': */
#define MSK_USED_BITS_NIOL_iol_rx_di 0x000001ffU

enum {
  BFW_NIOL_iol_rx_di_a_cq_fil  = 1,  /* [0] */
  BFW_NIOL_iol_rx_di_a_di_fil  = 1,  /* [1] */
  BFW_NIOL_iol_rx_di_b_cq_fil  = 1,  /* [2] */
  BFW_NIOL_iol_rx_di_b_di_fil  = 1,  /* [3] */
  BFW_NIOL_iol_rx_di_c_cq_fil  = 1,  /* [4] */
  BFW_NIOL_iol_rx_di_c_di_fil  = 1,  /* [5] */
  BFW_NIOL_iol_rx_di_d_cq_fil  = 1,  /* [6] */
  BFW_NIOL_iol_rx_di_d_di_fil  = 1,  /* [7] */
  BFW_NIOL_iol_rx_di_di_x_fil  = 1,  /* [8] */
  BFW_NIOL_iol_rx_di_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_DI_BIT_Ttag {
  unsigned int a_cq_fil  : BFW_NIOL_iol_rx_di_a_cq_fil;  /* filtered industrial receiver */
  unsigned int a_di_fil  : BFW_NIOL_iol_rx_di_a_di_fil;  /* " "                          */
  unsigned int b_cq_fil  : BFW_NIOL_iol_rx_di_b_cq_fil;  /* " "                          */
  unsigned int b_di_fil  : BFW_NIOL_iol_rx_di_b_di_fil;  /* " "                          */
  unsigned int c_cq_fil  : BFW_NIOL_iol_rx_di_c_cq_fil;  /* " "                          */
  unsigned int c_di_fil  : BFW_NIOL_iol_rx_di_c_di_fil;  /* " "                          */
  unsigned int d_cq_fil  : BFW_NIOL_iol_rx_di_d_cq_fil;  /* " "                          */
  unsigned int d_di_fil  : BFW_NIOL_iol_rx_di_d_di_fil;  /* " "                          */
  unsigned int di_x_fil  : BFW_NIOL_iol_rx_di_di_x_fil;  /* " "                          */
  unsigned int reserved1 : BFW_NIOL_iol_rx_di_reserved1; /* reserved                     */
} NIOL_IOL_RX_DI_BIT_T;

typedef union {
  uint32_t             val;
  NIOL_IOL_RX_DI_BIT_T bf;
} NIOL_IOL_RX_DI_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_a_cq */
/* => The D2A registers directly drive the signals to the analog part. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_a_cq    0x00000030U
#define Adr_NIOL_iol_rx_iol_rx_d2a_a_cq 0x00000830U
#define Adr_NIOL_iol_rx_d2a_a_cq        0x00000830U
#define DFLT_VAL_NIOL_iol_rx_d2a_a_cq   0x00000000U

#define MSK_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_a_cq': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_a_cq 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_a_cq_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_A_CQ_BIT_Ttag {
  unsigned int d_iol_a_cq_rx_on     : BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_on;     /*          */
  unsigned int d_iol_a_cq_rx_vt_l   : BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_l;   /*          */
  unsigned int d_iol_a_cq_rx_vt_h   : BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_rx_vt_h;   /*          */
  unsigned int d_iol_a_cq_isink_set : BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_set; /*          */
  unsigned int d_iol_a_cq_isink_dyn : BFW_NIOL_iol_rx_d2a_a_cq_d_iol_a_cq_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_a_cq_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_A_CQ_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_A_CQ_BIT_T bf;
} NIOL_IOL_RX_D2A_A_CQ_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_a_di */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_a_di    0x00000034U
#define Adr_NIOL_iol_rx_iol_rx_d2a_a_di 0x00000834U
#define Adr_NIOL_iol_rx_d2a_a_di        0x00000834U
#define DFLT_VAL_NIOL_iol_rx_d2a_a_di   0x00000000U

#define MSK_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_a_di': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_a_di 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_a_di_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_A_DI_BIT_Ttag {
  unsigned int d_iol_a_di_rx_on     : BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_on;     /*          */
  unsigned int d_iol_a_di_rx_vt_l   : BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_l;   /*          */
  unsigned int d_iol_a_di_rx_vt_h   : BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_rx_vt_h;   /*          */
  unsigned int d_iol_a_di_isink_set : BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_set; /*          */
  unsigned int d_iol_a_di_isink_dyn : BFW_NIOL_iol_rx_d2a_a_di_d_iol_a_di_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_a_di_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_A_DI_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_A_DI_BIT_T bf;
} NIOL_IOL_RX_D2A_A_DI_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_b_cq */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_b_cq    0x00000038U
#define Adr_NIOL_iol_rx_iol_rx_d2a_b_cq 0x00000838U
#define Adr_NIOL_iol_rx_d2a_b_cq        0x00000838U
#define DFLT_VAL_NIOL_iol_rx_d2a_b_cq   0x00000000U

#define MSK_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_b_cq': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_b_cq 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_b_cq_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_B_CQ_BIT_Ttag {
  unsigned int d_iol_b_cq_rx_on     : BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_on;     /*          */
  unsigned int d_iol_b_cq_rx_vt_l   : BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_l;   /*          */
  unsigned int d_iol_b_cq_rx_vt_h   : BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_rx_vt_h;   /*          */
  unsigned int d_iol_b_cq_isink_set : BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_set; /*          */
  unsigned int d_iol_b_cq_isink_dyn : BFW_NIOL_iol_rx_d2a_b_cq_d_iol_b_cq_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_b_cq_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_B_CQ_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_B_CQ_BIT_T bf;
} NIOL_IOL_RX_D2A_B_CQ_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_b_di */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_b_di    0x0000003CU
#define Adr_NIOL_iol_rx_iol_rx_d2a_b_di 0x0000083CU
#define Adr_NIOL_iol_rx_d2a_b_di        0x0000083CU
#define DFLT_VAL_NIOL_iol_rx_d2a_b_di   0x00000000U

#define MSK_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_b_di': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_b_di 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_b_di_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_B_DI_BIT_Ttag {
  unsigned int d_iol_b_di_rx_on     : BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_on;     /*          */
  unsigned int d_iol_b_di_rx_vt_l   : BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_l;   /*          */
  unsigned int d_iol_b_di_rx_vt_h   : BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_rx_vt_h;   /*          */
  unsigned int d_iol_b_di_isink_set : BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_set; /*          */
  unsigned int d_iol_b_di_isink_dyn : BFW_NIOL_iol_rx_d2a_b_di_d_iol_b_di_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_b_di_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_B_DI_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_B_DI_BIT_T bf;
} NIOL_IOL_RX_D2A_B_DI_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_c_cq */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_c_cq    0x00000040U
#define Adr_NIOL_iol_rx_iol_rx_d2a_c_cq 0x00000840U
#define Adr_NIOL_iol_rx_d2a_c_cq        0x00000840U
#define DFLT_VAL_NIOL_iol_rx_d2a_c_cq   0x00000000U

#define MSK_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_c_cq': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_c_cq 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_c_cq_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_C_CQ_BIT_Ttag {
  unsigned int d_iol_c_cq_rx_on     : BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_on;     /*          */
  unsigned int d_iol_c_cq_rx_vt_l   : BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_l;   /*          */
  unsigned int d_iol_c_cq_rx_vt_h   : BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_rx_vt_h;   /*          */
  unsigned int d_iol_c_cq_isink_set : BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_set; /*          */
  unsigned int d_iol_c_cq_isink_dyn : BFW_NIOL_iol_rx_d2a_c_cq_d_iol_c_cq_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_c_cq_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_C_CQ_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_C_CQ_BIT_T bf;
} NIOL_IOL_RX_D2A_C_CQ_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_c_di */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_c_di    0x00000044U
#define Adr_NIOL_iol_rx_iol_rx_d2a_c_di 0x00000844U
#define Adr_NIOL_iol_rx_d2a_c_di        0x00000844U
#define DFLT_VAL_NIOL_iol_rx_d2a_c_di   0x00000000U

#define MSK_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_c_di': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_c_di 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_c_di_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_C_DI_BIT_Ttag {
  unsigned int d_iol_c_di_rx_on     : BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_on;     /*          */
  unsigned int d_iol_c_di_rx_vt_l   : BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_l;   /*          */
  unsigned int d_iol_c_di_rx_vt_h   : BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_rx_vt_h;   /*          */
  unsigned int d_iol_c_di_isink_set : BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_set; /*          */
  unsigned int d_iol_c_di_isink_dyn : BFW_NIOL_iol_rx_d2a_c_di_d_iol_c_di_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_c_di_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_C_DI_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_C_DI_BIT_T bf;
} NIOL_IOL_RX_D2A_C_DI_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_d_cq */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_d_cq    0x00000048U
#define Adr_NIOL_iol_rx_iol_rx_d2a_d_cq 0x00000848U
#define Adr_NIOL_iol_rx_d2a_d_cq        0x00000848U
#define DFLT_VAL_NIOL_iol_rx_d2a_d_cq   0x00000000U

#define MSK_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_d_cq': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_d_cq 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_d_cq_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_D_CQ_BIT_Ttag {
  unsigned int d_iol_d_cq_rx_on     : BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_on;     /*          */
  unsigned int d_iol_d_cq_rx_vt_l   : BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_l;   /*          */
  unsigned int d_iol_d_cq_rx_vt_h   : BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_rx_vt_h;   /*          */
  unsigned int d_iol_d_cq_isink_set : BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_set; /*          */
  unsigned int d_iol_d_cq_isink_dyn : BFW_NIOL_iol_rx_d2a_d_cq_d_iol_d_cq_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_d_cq_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_D_CQ_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_D_CQ_BIT_T bf;
} NIOL_IOL_RX_D2A_D_CQ_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_d_di */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_d_di    0x0000004CU
#define Adr_NIOL_iol_rx_iol_rx_d2a_d_di 0x0000084CU
#define Adr_NIOL_iol_rx_d2a_d_di        0x0000084CU
#define DFLT_VAL_NIOL_iol_rx_d2a_d_di   0x00000000U

#define MSK_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_d_di': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_d_di 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_d_di_reserved1            = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_D_DI_BIT_Ttag {
  unsigned int d_iol_d_di_rx_on     : BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_on;     /*          */
  unsigned int d_iol_d_di_rx_vt_l   : BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_l;   /*          */
  unsigned int d_iol_d_di_rx_vt_h   : BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_rx_vt_h;   /*          */
  unsigned int d_iol_d_di_isink_set : BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_set; /*          */
  unsigned int d_iol_d_di_isink_dyn : BFW_NIOL_iol_rx_d2a_d_di_d_iol_d_di_isink_dyn; /*          */
  unsigned int reserved1            : BFW_NIOL_iol_rx_d2a_d_di_reserved1;            /* reserved */
} NIOL_IOL_RX_D2A_D_DI_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_D_DI_BIT_T bf;
} NIOL_IOL_RX_D2A_D_DI_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_di_x */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_di_x    0x00000050U
#define Adr_NIOL_iol_rx_iol_rx_d2a_di_x 0x00000850U
#define Adr_NIOL_iol_rx_d2a_di_x        0x00000850U
#define DFLT_VAL_NIOL_iol_rx_d2a_di_x   0x00000000U

#define MSK_NIOL_iol_rx_d2a_di_x_d_di_x_rx_on             0x00000001U
#define SRT_NIOL_iol_rx_d2a_di_x_d_di_x_rx_on             0
#define DFLT_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_rx_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_rx_on     0x00000000U
#define MSK_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_l           0x0000007eU
#define SRT_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_l           1
#define DFLT_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_l      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_l   0x00000000U
#define MSK_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_h           0x00001f80U
#define SRT_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_h           7
#define DFLT_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_h      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_h   0x00000000U
#define MSK_NIOL_iol_rx_d2a_di_x_d_di_x_isink_set         0x00002000U
#define SRT_NIOL_iol_rx_d2a_di_x_d_di_x_isink_set         13
#define DFLT_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_isink_set    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_isink_set 0x00000000U
#define MSK_NIOL_iol_rx_d2a_di_x_d_di_x_isink_dyn         0x0000c000U
#define SRT_NIOL_iol_rx_d2a_di_x_d_di_x_isink_dyn         14
#define DFLT_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_isink_dyn    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_di_x_d_di_x_isink_dyn 0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_di_x': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_di_x 0x0000ffffU

enum {
  BFW_NIOL_iol_rx_d2a_di_x_d_di_x_rx_on     = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_l   = 6,  /* [6:1] */
  BFW_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_h   = 6,  /* [12:7] */
  BFW_NIOL_iol_rx_d2a_di_x_d_di_x_isink_set = 1,  /* [13] */
  BFW_NIOL_iol_rx_d2a_di_x_d_di_x_isink_dyn = 2,  /* [15:14] */
  BFW_NIOL_iol_rx_d2a_di_x_reserved1        = 16  /* [31:16] */
};

typedef struct NIOL_IOL_RX_D2A_DI_X_BIT_Ttag {
  unsigned int d_di_x_rx_on     : BFW_NIOL_iol_rx_d2a_di_x_d_di_x_rx_on;     /*          */
  unsigned int d_di_x_rx_vt_l   : BFW_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_l;   /*          */
  unsigned int d_di_x_rx_vt_h   : BFW_NIOL_iol_rx_d2a_di_x_d_di_x_rx_vt_h;   /*          */
  unsigned int d_di_x_isink_set : BFW_NIOL_iol_rx_d2a_di_x_d_di_x_isink_set; /*          */
  unsigned int d_di_x_isink_dyn : BFW_NIOL_iol_rx_d2a_di_x_d_di_x_isink_dyn; /*          */
  unsigned int reserved1        : BFW_NIOL_iol_rx_d2a_di_x_reserved1;        /* reserved */
} NIOL_IOL_RX_D2A_DI_X_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_RX_D2A_DI_X_BIT_T bf;
} NIOL_IOL_RX_D2A_DI_X_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_d2a_isink_on */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_d2a_isink_on    0x00000054U
#define Adr_NIOL_iol_rx_iol_rx_d2a_isink_on 0x00000854U
#define Adr_NIOL_iol_rx_d2a_isink_on        0x00000854U
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on   0x00000000U

#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_a_cq_isink_on         0x00000001U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_a_cq_isink_on         0
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_a_cq_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_a_cq_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_a_di_isink_on         0x00000002U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_a_di_isink_on         1
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_a_di_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_a_di_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_b_cq_isink_on         0x00000004U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_b_cq_isink_on         2
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_b_cq_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_b_cq_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_b_di_isink_on         0x00000008U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_b_di_isink_on         3
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_b_di_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_b_di_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_c_cq_isink_on         0x00000010U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_c_cq_isink_on         4
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_c_cq_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_c_cq_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_c_di_isink_on         0x00000020U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_c_di_isink_on         5
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_c_di_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_c_di_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_d_cq_isink_on         0x00000040U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_d_cq_isink_on         6
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_d_cq_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_d_cq_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_iol_d_di_isink_on         0x00000080U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_iol_d_di_isink_on         7
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_d_di_isink_on    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_iol_d_di_isink_on 0x00000000U
#define MSK_NIOL_iol_rx_d2a_isink_on_d_di_x_isink_on             0x00000100U
#define SRT_NIOL_iol_rx_d2a_isink_on_d_di_x_isink_on             8
#define DFLT_VAL_NIOL_iol_rx_d2a_isink_on_d_di_x_isink_on        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_d2a_isink_on_d_di_x_isink_on     0x00000000U

/* all used bits of 'NIOL_iol_rx_d2a_isink_on': */
#define MSK_USED_BITS_NIOL_iol_rx_d2a_isink_on 0x000001ffU

enum {
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_a_cq_isink_on = 1,  /* [0] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_a_di_isink_on = 1,  /* [1] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_b_cq_isink_on = 1,  /* [2] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_b_di_isink_on = 1,  /* [3] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_c_cq_isink_on = 1,  /* [4] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_c_di_isink_on = 1,  /* [5] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_d_cq_isink_on = 1,  /* [6] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_iol_d_di_isink_on = 1,  /* [7] */
  BFW_NIOL_iol_rx_d2a_isink_on_d_di_x_isink_on     = 1,  /* [8] */
  BFW_NIOL_iol_rx_d2a_isink_on_reserved1           = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_D2A_ISINK_ON_BIT_Ttag {
  unsigned int d_iol_a_cq_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_a_cq_isink_on; /* D2A 1: current sink is turned on                                                                                 */
                                                                                       /* CFG_ A_CQ_RX.isink_on_src determines if this bit is set by rx_en[0] input or if this bis can be controlled by SW */
  unsigned int d_iol_a_di_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_a_di_isink_on; /* D2A 1: current sink is turned on                                                                                 */
  unsigned int d_iol_b_cq_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_b_cq_isink_on; /* D2A 1: current sink is turned on                                                                                 */
                                                                                       /* CFG_ B_CQ_RX.isink_on_src determines if this bit is set by rx_en[1] input or if this bis can be controlled by SW */
  unsigned int d_iol_b_di_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_b_di_isink_on; /* D2A 1: current sink is turned on                                                                                 */
  unsigned int d_iol_c_cq_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_c_cq_isink_on; /* D2A 1: current sink is turned on                                                                                 */
                                                                                       /* CFG_ C_CQ_RX.isink_on_src determines if this bit is set by rx_en[2] input or if this bis can be controlled by SW */
  unsigned int d_iol_c_di_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_c_di_isink_on; /* D2A 1: current sink is turned on                                                                                 */
  unsigned int d_iol_d_cq_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_d_cq_isink_on; /* D2A 1: current sink is turned on                                                                                 */
                                                                                       /* CFG_ D_CQ_RX.isink_on_src determines if this bit is set by rx_en[3] input or if this bis can be controlled by SW */
  unsigned int d_iol_d_di_isink_on : BFW_NIOL_iol_rx_d2a_isink_on_d_iol_d_di_isink_on; /* D2A 1: current sink is turned on                                                                                 */
  unsigned int d_di_x_isink_on     : BFW_NIOL_iol_rx_d2a_isink_on_d_di_x_isink_on;     /* D2A 1: current sink is turned on                                                                                 */
  unsigned int reserved1           : BFW_NIOL_iol_rx_d2a_isink_on_reserved1;           /* reserved                                                                                                         */
} NIOL_IOL_RX_D2A_ISINK_ON_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_RX_D2A_ISINK_ON_BIT_T bf;
} NIOL_IOL_RX_D2A_ISINK_ON_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_a2d_cq_di_rx */
/* => The A2D registers directly read the signals from the analog part (synchronized with two flip flops). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_a2d_cq_di_rx    0x00000058U
#define Adr_NIOL_iol_rx_iol_rx_a2d_cq_di_rx 0x00000858U
#define Adr_NIOL_iol_rx_a2d_cq_di_rx        0x00000858U

#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_cq_rx 0x00000001U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_cq_rx 0
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_di_rx 0x00000002U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_di_rx 1
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_cq_rx 0x00000004U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_cq_rx 2
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_di_rx 0x00000008U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_di_rx 3
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_cq_rx 0x00000010U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_cq_rx 4
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_di_rx 0x00000020U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_di_rx 5
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_cq_rx 0x00000040U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_cq_rx 6
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_di_rx 0x00000080U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_di_rx 7
#define MSK_NIOL_iol_rx_a2d_cq_di_rx_d_di_x_rx     0x00000100U
#define SRT_NIOL_iol_rx_a2d_cq_di_rx_d_di_x_rx     8

/* all used bits of 'NIOL_iol_rx_a2d_cq_di_rx': */
#define MSK_USED_BITS_NIOL_iol_rx_a2d_cq_di_rx 0x000001ffU

enum {
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_cq_rx = 1,  /* [0] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_di_rx = 1,  /* [1] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_cq_rx = 1,  /* [2] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_di_rx = 1,  /* [3] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_cq_rx = 1,  /* [4] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_di_rx = 1,  /* [5] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_cq_rx = 1,  /* [6] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_di_rx = 1,  /* [7] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_d_di_x_rx     = 1,  /* [8] */
  BFW_NIOL_iol_rx_a2d_cq_di_rx_reserved1     = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_A2D_CQ_DI_RX_BIT_Ttag {
  unsigned int d_iol_a_cq_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_cq_rx; /* A2D: Digital industrial receiver output state (iol_a_cq_rx). */
                                                                           /* 0: receiver input is high                                    */
                                                                           /* 1: receiver input is low                                     */
  unsigned int d_iol_a_di_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_a_di_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_iol_b_cq_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_cq_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_iol_b_di_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_b_di_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_iol_c_cq_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_cq_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_iol_c_di_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_c_di_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_iol_d_cq_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_cq_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_iol_d_di_rx : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_iol_d_di_rx; /* see d_iol_a_cq_rx                                            */
  unsigned int d_di_x_rx     : BFW_NIOL_iol_rx_a2d_cq_di_rx_d_di_x_rx;     /* see d_iol_a_cq_rx                                            */
  unsigned int reserved1     : BFW_NIOL_iol_rx_a2d_cq_di_rx_reserved1;     /* reserved                                                     */
} NIOL_IOL_RX_A2D_CQ_DI_RX_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_RX_A2D_CQ_DI_RX_BIT_T bf;
} NIOL_IOL_RX_A2D_CQ_DI_RX_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_irq_raw */
/* => Raw IRQs: */
/*    Read access shows status of unmasked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_irq_raw    0x0000005CU
#define Adr_NIOL_iol_rx_iol_rx_irq_raw 0x0000085CU
#define Adr_NIOL_iol_rx_irq_raw        0x0000085CU

#define MSK_NIOL_iol_rx_irq_raw_a_cq 0x00000001U
#define SRT_NIOL_iol_rx_irq_raw_a_cq 0
#define MSK_NIOL_iol_rx_irq_raw_a_di 0x00000002U
#define SRT_NIOL_iol_rx_irq_raw_a_di 1
#define MSK_NIOL_iol_rx_irq_raw_b_cq 0x00000004U
#define SRT_NIOL_iol_rx_irq_raw_b_cq 2
#define MSK_NIOL_iol_rx_irq_raw_b_di 0x00000008U
#define SRT_NIOL_iol_rx_irq_raw_b_di 3
#define MSK_NIOL_iol_rx_irq_raw_c_cq 0x00000010U
#define SRT_NIOL_iol_rx_irq_raw_c_cq 4
#define MSK_NIOL_iol_rx_irq_raw_c_di 0x00000020U
#define SRT_NIOL_iol_rx_irq_raw_c_di 5
#define MSK_NIOL_iol_rx_irq_raw_d_cq 0x00000040U
#define SRT_NIOL_iol_rx_irq_raw_d_cq 6
#define MSK_NIOL_iol_rx_irq_raw_d_di 0x00000080U
#define SRT_NIOL_iol_rx_irq_raw_d_di 7
#define MSK_NIOL_iol_rx_irq_raw_di_x 0x00000100U
#define SRT_NIOL_iol_rx_irq_raw_di_x 8

/* all used bits of 'NIOL_iol_rx_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_rx_irq_raw 0x000001ffU

enum {
  BFW_NIOL_iol_rx_irq_raw_a_cq      = 1,  /* [0] */
  BFW_NIOL_iol_rx_irq_raw_a_di      = 1,  /* [1] */
  BFW_NIOL_iol_rx_irq_raw_b_cq      = 1,  /* [2] */
  BFW_NIOL_iol_rx_irq_raw_b_di      = 1,  /* [3] */
  BFW_NIOL_iol_rx_irq_raw_c_cq      = 1,  /* [4] */
  BFW_NIOL_iol_rx_irq_raw_c_di      = 1,  /* [5] */
  BFW_NIOL_iol_rx_irq_raw_d_cq      = 1,  /* [6] */
  BFW_NIOL_iol_rx_irq_raw_d_di      = 1,  /* [7] */
  BFW_NIOL_iol_rx_irq_raw_di_x      = 1,  /* [8] */
  BFW_NIOL_iol_rx_irq_raw_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_IRQ_RAW_BIT_Ttag {
  unsigned int a_cq      : BFW_NIOL_iol_rx_irq_raw_a_cq;      /* STATUS / EVENT type and functionality depending on CFG_*.irq_mode */
  unsigned int a_di      : BFW_NIOL_iol_rx_irq_raw_a_di;      /* STATUS / EVENT                                                    */
  unsigned int b_cq      : BFW_NIOL_iol_rx_irq_raw_b_cq;      /* STATUS / EVENT                                                    */
  unsigned int b_di      : BFW_NIOL_iol_rx_irq_raw_b_di;      /* STATUS / EVENT                                                    */
  unsigned int c_cq      : BFW_NIOL_iol_rx_irq_raw_c_cq;      /* STATUS / EVENT                                                    */
  unsigned int c_di      : BFW_NIOL_iol_rx_irq_raw_c_di;      /* STATUS / EVENT                                                    */
  unsigned int d_cq      : BFW_NIOL_iol_rx_irq_raw_d_cq;      /* STATUS / EVENT                                                    */
  unsigned int d_di      : BFW_NIOL_iol_rx_irq_raw_d_di;      /* STATUS / EVENT                                                    */
  unsigned int di_x      : BFW_NIOL_iol_rx_irq_raw_di_x;      /* STATUS / EVENT                                                    */
  unsigned int reserved1 : BFW_NIOL_iol_rx_irq_raw_reserved1; /* reserved                                                          */
} NIOL_IOL_RX_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_RX_IRQ_RAW_BIT_T bf;
} NIOL_IOL_RX_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_irq_mask_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_irq_mask_set    0x00000060U
#define Adr_NIOL_iol_rx_iol_rx_irq_mask_set 0x00000860U
#define Adr_NIOL_iol_rx_irq_mask_set        0x00000860U
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set   0x00000000U

#define MSK_NIOL_iol_rx_irq_mask_set_a_cq         0x00000001U
#define SRT_NIOL_iol_rx_irq_mask_set_a_cq         0
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_a_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_a_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_a_di         0x00000002U
#define SRT_NIOL_iol_rx_irq_mask_set_a_di         1
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_a_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_a_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_b_cq         0x00000004U
#define SRT_NIOL_iol_rx_irq_mask_set_b_cq         2
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_b_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_b_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_b_di         0x00000008U
#define SRT_NIOL_iol_rx_irq_mask_set_b_di         3
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_b_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_b_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_c_cq         0x00000010U
#define SRT_NIOL_iol_rx_irq_mask_set_c_cq         4
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_c_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_c_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_c_di         0x00000020U
#define SRT_NIOL_iol_rx_irq_mask_set_c_di         5
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_c_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_c_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_d_cq         0x00000040U
#define SRT_NIOL_iol_rx_irq_mask_set_d_cq         6
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_d_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_d_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_d_di         0x00000080U
#define SRT_NIOL_iol_rx_irq_mask_set_d_di         7
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_d_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_d_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_set_di_x         0x00000100U
#define SRT_NIOL_iol_rx_irq_mask_set_di_x         8
#define DFLT_VAL_NIOL_iol_rx_irq_mask_set_di_x    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_set_di_x 0x00000000U

/* all used bits of 'NIOL_iol_rx_irq_mask_set': */
#define MSK_USED_BITS_NIOL_iol_rx_irq_mask_set 0x000001ffU

enum {
  BFW_NIOL_iol_rx_irq_mask_set_a_cq      = 1,  /* [0] */
  BFW_NIOL_iol_rx_irq_mask_set_a_di      = 1,  /* [1] */
  BFW_NIOL_iol_rx_irq_mask_set_b_cq      = 1,  /* [2] */
  BFW_NIOL_iol_rx_irq_mask_set_b_di      = 1,  /* [3] */
  BFW_NIOL_iol_rx_irq_mask_set_c_cq      = 1,  /* [4] */
  BFW_NIOL_iol_rx_irq_mask_set_c_di      = 1,  /* [5] */
  BFW_NIOL_iol_rx_irq_mask_set_d_cq      = 1,  /* [6] */
  BFW_NIOL_iol_rx_irq_mask_set_d_di      = 1,  /* [7] */
  BFW_NIOL_iol_rx_irq_mask_set_di_x      = 1,  /* [8] */
  BFW_NIOL_iol_rx_irq_mask_set_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_IRQ_MASK_SET_BIT_Ttag {
  unsigned int a_cq      : BFW_NIOL_iol_rx_irq_mask_set_a_cq;      /* STATUS / EVENT type and functionality depending on CFG_*.irq_mode */
  unsigned int a_di      : BFW_NIOL_iol_rx_irq_mask_set_a_di;      /* STATUS / EVENT                                                    */
  unsigned int b_cq      : BFW_NIOL_iol_rx_irq_mask_set_b_cq;      /* STATUS / EVENT                                                    */
  unsigned int b_di      : BFW_NIOL_iol_rx_irq_mask_set_b_di;      /* STATUS / EVENT                                                    */
  unsigned int c_cq      : BFW_NIOL_iol_rx_irq_mask_set_c_cq;      /* STATUS / EVENT                                                    */
  unsigned int c_di      : BFW_NIOL_iol_rx_irq_mask_set_c_di;      /* STATUS / EVENT                                                    */
  unsigned int d_cq      : BFW_NIOL_iol_rx_irq_mask_set_d_cq;      /* STATUS / EVENT                                                    */
  unsigned int d_di      : BFW_NIOL_iol_rx_irq_mask_set_d_di;      /* STATUS / EVENT                                                    */
  unsigned int di_x      : BFW_NIOL_iol_rx_irq_mask_set_di_x;      /* STATUS / EVENT                                                    */
  unsigned int reserved1 : BFW_NIOL_iol_rx_irq_mask_set_reserved1; /* reserved                                                          */
} NIOL_IOL_RX_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_RX_IRQ_MASK_SET_BIT_T bf;
} NIOL_IOL_RX_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_irq_mask_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_irq_mask_reset    0x00000064U
#define Adr_NIOL_iol_rx_iol_rx_irq_mask_reset 0x00000864U
#define Adr_NIOL_iol_rx_irq_mask_reset        0x00000864U
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset   0x00000000U

#define MSK_NIOL_iol_rx_irq_mask_reset_a_cq         0x00000001U
#define SRT_NIOL_iol_rx_irq_mask_reset_a_cq         0
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_a_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_a_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_a_di         0x00000002U
#define SRT_NIOL_iol_rx_irq_mask_reset_a_di         1
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_a_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_a_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_b_cq         0x00000004U
#define SRT_NIOL_iol_rx_irq_mask_reset_b_cq         2
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_b_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_b_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_b_di         0x00000008U
#define SRT_NIOL_iol_rx_irq_mask_reset_b_di         3
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_b_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_b_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_c_cq         0x00000010U
#define SRT_NIOL_iol_rx_irq_mask_reset_c_cq         4
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_c_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_c_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_c_di         0x00000020U
#define SRT_NIOL_iol_rx_irq_mask_reset_c_di         5
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_c_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_c_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_d_cq         0x00000040U
#define SRT_NIOL_iol_rx_irq_mask_reset_d_cq         6
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_d_cq    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_d_cq 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_d_di         0x00000080U
#define SRT_NIOL_iol_rx_irq_mask_reset_d_di         7
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_d_di    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_d_di 0x00000000U
#define MSK_NIOL_iol_rx_irq_mask_reset_di_x         0x00000100U
#define SRT_NIOL_iol_rx_irq_mask_reset_di_x         8
#define DFLT_VAL_NIOL_iol_rx_irq_mask_reset_di_x    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_rx_irq_mask_reset_di_x 0x00000000U

/* all used bits of 'NIOL_iol_rx_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_iol_rx_irq_mask_reset 0x000001ffU

enum {
  BFW_NIOL_iol_rx_irq_mask_reset_a_cq      = 1,  /* [0] */
  BFW_NIOL_iol_rx_irq_mask_reset_a_di      = 1,  /* [1] */
  BFW_NIOL_iol_rx_irq_mask_reset_b_cq      = 1,  /* [2] */
  BFW_NIOL_iol_rx_irq_mask_reset_b_di      = 1,  /* [3] */
  BFW_NIOL_iol_rx_irq_mask_reset_c_cq      = 1,  /* [4] */
  BFW_NIOL_iol_rx_irq_mask_reset_c_di      = 1,  /* [5] */
  BFW_NIOL_iol_rx_irq_mask_reset_d_cq      = 1,  /* [6] */
  BFW_NIOL_iol_rx_irq_mask_reset_d_di      = 1,  /* [7] */
  BFW_NIOL_iol_rx_irq_mask_reset_di_x      = 1,  /* [8] */
  BFW_NIOL_iol_rx_irq_mask_reset_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int a_cq      : BFW_NIOL_iol_rx_irq_mask_reset_a_cq;      /* STATUS / EVENT type and functionality depending on CFG_*.irq_mode */
  unsigned int a_di      : BFW_NIOL_iol_rx_irq_mask_reset_a_di;      /* STATUS / EVENT                                                    */
  unsigned int b_cq      : BFW_NIOL_iol_rx_irq_mask_reset_b_cq;      /* STATUS / EVENT                                                    */
  unsigned int b_di      : BFW_NIOL_iol_rx_irq_mask_reset_b_di;      /* STATUS / EVENT                                                    */
  unsigned int c_cq      : BFW_NIOL_iol_rx_irq_mask_reset_c_cq;      /* STATUS / EVENT                                                    */
  unsigned int c_di      : BFW_NIOL_iol_rx_irq_mask_reset_c_di;      /* STATUS / EVENT                                                    */
  unsigned int d_cq      : BFW_NIOL_iol_rx_irq_mask_reset_d_cq;      /* STATUS / EVENT                                                    */
  unsigned int d_di      : BFW_NIOL_iol_rx_irq_mask_reset_d_di;      /* STATUS / EVENT                                                    */
  unsigned int di_x      : BFW_NIOL_iol_rx_irq_mask_reset_di_x;      /* STATUS / EVENT                                                    */
  unsigned int reserved1 : BFW_NIOL_iol_rx_irq_mask_reset_reserved1; /* reserved                                                          */
} NIOL_IOL_RX_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_RX_IRQ_MASK_RESET_BIT_T bf;
} NIOL_IOL_RX_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_irq_masked */
/* => Masked IRQs: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_irq_masked    0x00000068U
#define Adr_NIOL_iol_rx_iol_rx_irq_masked 0x00000868U
#define Adr_NIOL_iol_rx_irq_masked        0x00000868U

#define MSK_NIOL_iol_rx_irq_masked_a_cq 0x00000001U
#define SRT_NIOL_iol_rx_irq_masked_a_cq 0
#define MSK_NIOL_iol_rx_irq_masked_a_di 0x00000002U
#define SRT_NIOL_iol_rx_irq_masked_a_di 1
#define MSK_NIOL_iol_rx_irq_masked_b_cq 0x00000004U
#define SRT_NIOL_iol_rx_irq_masked_b_cq 2
#define MSK_NIOL_iol_rx_irq_masked_b_di 0x00000008U
#define SRT_NIOL_iol_rx_irq_masked_b_di 3
#define MSK_NIOL_iol_rx_irq_masked_c_cq 0x00000010U
#define SRT_NIOL_iol_rx_irq_masked_c_cq 4
#define MSK_NIOL_iol_rx_irq_masked_c_di 0x00000020U
#define SRT_NIOL_iol_rx_irq_masked_c_di 5
#define MSK_NIOL_iol_rx_irq_masked_d_cq 0x00000040U
#define SRT_NIOL_iol_rx_irq_masked_d_cq 6
#define MSK_NIOL_iol_rx_irq_masked_d_di 0x00000080U
#define SRT_NIOL_iol_rx_irq_masked_d_di 7
#define MSK_NIOL_iol_rx_irq_masked_di_x 0x00000100U
#define SRT_NIOL_iol_rx_irq_masked_di_x 8

/* all used bits of 'NIOL_iol_rx_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_rx_irq_masked 0x000001ffU

enum {
  BFW_NIOL_iol_rx_irq_masked_a_cq      = 1,  /* [0] */
  BFW_NIOL_iol_rx_irq_masked_a_di      = 1,  /* [1] */
  BFW_NIOL_iol_rx_irq_masked_b_cq      = 1,  /* [2] */
  BFW_NIOL_iol_rx_irq_masked_b_di      = 1,  /* [3] */
  BFW_NIOL_iol_rx_irq_masked_c_cq      = 1,  /* [4] */
  BFW_NIOL_iol_rx_irq_masked_c_di      = 1,  /* [5] */
  BFW_NIOL_iol_rx_irq_masked_d_cq      = 1,  /* [6] */
  BFW_NIOL_iol_rx_irq_masked_d_di      = 1,  /* [7] */
  BFW_NIOL_iol_rx_irq_masked_di_x      = 1,  /* [8] */
  BFW_NIOL_iol_rx_irq_masked_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_RX_IRQ_MASKED_BIT_Ttag {
  unsigned int a_cq      : BFW_NIOL_iol_rx_irq_masked_a_cq;      /* STATUS / EVENT type and functionality depending on CFG_*.irq_mode */
  unsigned int a_di      : BFW_NIOL_iol_rx_irq_masked_a_di;      /* STATUS / EVENT                                                    */
  unsigned int b_cq      : BFW_NIOL_iol_rx_irq_masked_b_cq;      /* STATUS / EVENT                                                    */
  unsigned int b_di      : BFW_NIOL_iol_rx_irq_masked_b_di;      /* STATUS / EVENT                                                    */
  unsigned int c_cq      : BFW_NIOL_iol_rx_irq_masked_c_cq;      /* STATUS / EVENT                                                    */
  unsigned int c_di      : BFW_NIOL_iol_rx_irq_masked_c_di;      /* STATUS / EVENT                                                    */
  unsigned int d_cq      : BFW_NIOL_iol_rx_irq_masked_d_cq;      /* STATUS / EVENT                                                    */
  unsigned int d_di      : BFW_NIOL_iol_rx_irq_masked_d_di;      /* STATUS / EVENT                                                    */
  unsigned int di_x      : BFW_NIOL_iol_rx_irq_masked_di_x;      /* STATUS / EVENT                                                    */
  unsigned int reserved1 : BFW_NIOL_iol_rx_irq_masked_reserved1; /* reserved                                                          */
} NIOL_IOL_RX_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_RX_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_RX_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_rx_irq_no */
/* => Lowest active interrupt: */
/*    Shows the highest prior active IRQ (= lowest IRQ number). */
/*    When no IRQ is pending the number of the highest IRQ plus one is returned. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_rx_irq_no    0x0000006CU
#define Adr_NIOL_iol_rx_iol_rx_irq_no 0x0000086CU
#define Adr_NIOL_iol_rx_irq_no        0x0000086CU

#define MSK_NIOL_iol_rx_irq_no_val 0x0000000fU
#define SRT_NIOL_iol_rx_irq_no_val 0

/* all used bits of 'NIOL_iol_rx_irq_no': */
#define MSK_USED_BITS_NIOL_iol_rx_irq_no 0x0000000fU

enum {
  BFW_NIOL_iol_rx_irq_no_val       = 4,  /* [3:0] */
  BFW_NIOL_iol_rx_irq_no_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_IOL_RX_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_rx_irq_no_val;       /* Number of the pending IRQ */
  unsigned int reserved1 : BFW_NIOL_iol_rx_irq_no_reserved1; /* reserved                  */
} NIOL_IOL_RX_IRQ_NO_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_RX_IRQ_NO_BIT_T bf;
} NIOL_IOL_RX_IRQ_NO_T;


/* ===================================================================== */

/* Area of iol_sio */

/* ===================================================================== */

#define Addr_NIOL_iol_sio 0x00000880U

/* --------------------------------------------------------------------- */
/* Register iol_sio_di */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_di     0x00000000U
#define Adr_NIOL_iol_sio_iol_sio_di 0x00000880U
#define Adr_NIOL_iol_sio_di         0x00000880U

#define MSK_NIOL_iol_sio_di_a_cq_fil 0x00000001U
#define SRT_NIOL_iol_sio_di_a_cq_fil 0
#define MSK_NIOL_iol_sio_di_a_di_fil 0x00000002U
#define SRT_NIOL_iol_sio_di_a_di_fil 1
#define MSK_NIOL_iol_sio_di_b_cq_fil 0x00000004U
#define SRT_NIOL_iol_sio_di_b_cq_fil 2
#define MSK_NIOL_iol_sio_di_b_di_fil 0x00000008U
#define SRT_NIOL_iol_sio_di_b_di_fil 3
#define MSK_NIOL_iol_sio_di_c_cq_fil 0x00000010U
#define SRT_NIOL_iol_sio_di_c_cq_fil 4
#define MSK_NIOL_iol_sio_di_c_di_fil 0x00000020U
#define SRT_NIOL_iol_sio_di_c_di_fil 5
#define MSK_NIOL_iol_sio_di_d_cq_fil 0x00000040U
#define SRT_NIOL_iol_sio_di_d_cq_fil 6
#define MSK_NIOL_iol_sio_di_d_di_fil 0x00000080U
#define SRT_NIOL_iol_sio_di_d_di_fil 7
#define MSK_NIOL_iol_sio_di_di_x_fil 0x00000100U
#define SRT_NIOL_iol_sio_di_di_x_fil 8

/* all used bits of 'NIOL_iol_sio_di': */
#define MSK_USED_BITS_NIOL_iol_sio_di 0x000001ffU

enum {
  BFW_NIOL_iol_sio_di_a_cq_fil  = 1,  /* [0] */
  BFW_NIOL_iol_sio_di_a_di_fil  = 1,  /* [1] */
  BFW_NIOL_iol_sio_di_b_cq_fil  = 1,  /* [2] */
  BFW_NIOL_iol_sio_di_b_di_fil  = 1,  /* [3] */
  BFW_NIOL_iol_sio_di_c_cq_fil  = 1,  /* [4] */
  BFW_NIOL_iol_sio_di_c_di_fil  = 1,  /* [5] */
  BFW_NIOL_iol_sio_di_d_cq_fil  = 1,  /* [6] */
  BFW_NIOL_iol_sio_di_d_di_fil  = 1,  /* [7] */
  BFW_NIOL_iol_sio_di_di_x_fil  = 1,  /* [8] */
  BFW_NIOL_iol_sio_di_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_SIO_DI_BIT_Ttag {
  unsigned int a_cq_fil  : BFW_NIOL_iol_sio_di_a_cq_fil;  /* filtered industrial receiver,                                                     */
                                                          /* exactly the same as see DI register in Port - Industrial Receiver (IOL_RX module) */
  unsigned int a_di_fil  : BFW_NIOL_iol_sio_di_a_di_fil;  /* " "                                                                               */
  unsigned int b_cq_fil  : BFW_NIOL_iol_sio_di_b_cq_fil;  /* " "                                                                               */
  unsigned int b_di_fil  : BFW_NIOL_iol_sio_di_b_di_fil;  /* " "                                                                               */
  unsigned int c_cq_fil  : BFW_NIOL_iol_sio_di_c_cq_fil;  /* " "                                                                               */
  unsigned int c_di_fil  : BFW_NIOL_iol_sio_di_c_di_fil;  /* " "                                                                               */
  unsigned int d_cq_fil  : BFW_NIOL_iol_sio_di_d_cq_fil;  /* " "                                                                               */
  unsigned int d_di_fil  : BFW_NIOL_iol_sio_di_d_di_fil;  /* " "                                                                               */
  unsigned int di_x_fil  : BFW_NIOL_iol_sio_di_di_x_fil;  /* " "                                                                               */
  unsigned int reserved1 : BFW_NIOL_iol_sio_di_reserved1; /* reserved                                                                          */
} NIOL_IOL_SIO_DI_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_IOL_SIO_DI_BIT_T bf;
} NIOL_IOL_SIO_DI_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_di_rs */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_di_rs     0x00000004U
#define Adr_NIOL_iol_sio_iol_sio_di_rs 0x00000884U
#define Adr_NIOL_iol_sio_di_rs         0x00000884U

#define MSK_NIOL_iol_sio_di_rs_a_cq_fil 0x00000001U
#define SRT_NIOL_iol_sio_di_rs_a_cq_fil 0
#define MSK_NIOL_iol_sio_di_rs_a_di_fil 0x00000002U
#define SRT_NIOL_iol_sio_di_rs_a_di_fil 1
#define MSK_NIOL_iol_sio_di_rs_b_cq_fil 0x00000004U
#define SRT_NIOL_iol_sio_di_rs_b_cq_fil 2
#define MSK_NIOL_iol_sio_di_rs_b_di_fil 0x00000008U
#define SRT_NIOL_iol_sio_di_rs_b_di_fil 3
#define MSK_NIOL_iol_sio_di_rs_c_cq_fil 0x00000010U
#define SRT_NIOL_iol_sio_di_rs_c_cq_fil 4
#define MSK_NIOL_iol_sio_di_rs_c_di_fil 0x00000020U
#define SRT_NIOL_iol_sio_di_rs_c_di_fil 5
#define MSK_NIOL_iol_sio_di_rs_d_cq_fil 0x00000040U
#define SRT_NIOL_iol_sio_di_rs_d_cq_fil 6
#define MSK_NIOL_iol_sio_di_rs_d_di_fil 0x00000080U
#define SRT_NIOL_iol_sio_di_rs_d_di_fil 7
#define MSK_NIOL_iol_sio_di_rs_di_x_fil 0x00000100U
#define SRT_NIOL_iol_sio_di_rs_di_x_fil 8

/* all used bits of 'NIOL_iol_sio_di_rs': */
#define MSK_USED_BITS_NIOL_iol_sio_di_rs 0x000001ffU

enum {
  BFW_NIOL_iol_sio_di_rs_a_cq_fil  = 1,  /* [0] */
  BFW_NIOL_iol_sio_di_rs_a_di_fil  = 1,  /* [1] */
  BFW_NIOL_iol_sio_di_rs_b_cq_fil  = 1,  /* [2] */
  BFW_NIOL_iol_sio_di_rs_b_di_fil  = 1,  /* [3] */
  BFW_NIOL_iol_sio_di_rs_c_cq_fil  = 1,  /* [4] */
  BFW_NIOL_iol_sio_di_rs_c_di_fil  = 1,  /* [5] */
  BFW_NIOL_iol_sio_di_rs_d_cq_fil  = 1,  /* [6] */
  BFW_NIOL_iol_sio_di_rs_d_di_fil  = 1,  /* [7] */
  BFW_NIOL_iol_sio_di_rs_di_x_fil  = 1,  /* [8] */
  BFW_NIOL_iol_sio_di_rs_reserved1 = 23  /* [31:9] */
};

typedef struct NIOL_IOL_SIO_DI_RS_BIT_Ttag {
  unsigned int a_cq_fil  : BFW_NIOL_iol_sio_di_rs_a_cq_fil;  /* read sync.                               */
                                                             /* Captures DI when when sync_sio_di occurs */
  unsigned int a_di_fil  : BFW_NIOL_iol_sio_di_rs_a_di_fil;  /* " "                                      */
  unsigned int b_cq_fil  : BFW_NIOL_iol_sio_di_rs_b_cq_fil;  /* " "                                      */
  unsigned int b_di_fil  : BFW_NIOL_iol_sio_di_rs_b_di_fil;  /* " "                                      */
  unsigned int c_cq_fil  : BFW_NIOL_iol_sio_di_rs_c_cq_fil;  /* " "                                      */
  unsigned int c_di_fil  : BFW_NIOL_iol_sio_di_rs_c_di_fil;  /* " "                                      */
  unsigned int d_cq_fil  : BFW_NIOL_iol_sio_di_rs_d_cq_fil;  /* " "                                      */
  unsigned int d_di_fil  : BFW_NIOL_iol_sio_di_rs_d_di_fil;  /* " "                                      */
  unsigned int di_x_fil  : BFW_NIOL_iol_sio_di_rs_di_x_fil;  /* " "                                      */
  unsigned int reserved1 : BFW_NIOL_iol_sio_di_rs_reserved1; /* reserved                                 */
} NIOL_IOL_SIO_DI_RS_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_SIO_DI_RS_BIT_T bf;
} NIOL_IOL_SIO_DI_RS_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do     0x00000008U
#define Adr_NIOL_iol_sio_iol_sio_do 0x00000888U
#define Adr_NIOL_iol_sio_do         0x00000888U
#define DFLT_VAL_NIOL_iol_sio_do    0x00000000U

#define MSK_NIOL_iol_sio_do_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do': */
#define MSK_USED_BITS_NIOL_iol_sio_do 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_d_gate_a_oe; /* D2A 1: gate is driven low (PMOS is turned on)                                                                                                                                          */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_d_gate_b_oe; /* " "                                                                                                                                                                                    */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_d_gate_c_oe; /* " "                                                                                                                                                                                    */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_d_gate_d_oe; /* " "                                                                                                                                                                                    */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_iol_do_a;    /* Controls the IO Link Driver when SIO is selected as source in Port - IO Link Driver module (IOL_TX). Mode (push/pull, push only, pull only) is also configurable in the IOL_TX module. */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_iol_do_b;    /* " "                                                                                                                                                                                    */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_iol_do_c;    /* " "                                                                                                                                                                                    */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_iol_do_d;    /* " "                                                                                                                                                                                    */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_reserved1;   /* reserved                                                                                                                                                                               */
} NIOL_IOL_SIO_DO_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_IOL_SIO_DO_BIT_T bf;
} NIOL_IOL_SIO_DO_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_set */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_set     0x0000000CU
#define Adr_NIOL_iol_sio_iol_sio_do_set 0x0000088CU
#define Adr_NIOL_iol_sio_do_set         0x0000088CU
#define DFLT_VAL_NIOL_iol_sio_do_set    0x00000000U

#define MSK_NIOL_iol_sio_do_set_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_set_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_set_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_set_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_set_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_set_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_set_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_set_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_set_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_set_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_set_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_set_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_set_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_set_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_set_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_set_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_set_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_set_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_set_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_set_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_set_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_set_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_set_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_set_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_set_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do_set': */
#define MSK_USED_BITS_NIOL_iol_sio_do_set 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_set_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_set_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_set_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_set_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_set_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_set_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_set_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_set_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_set_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_SET_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_set_d_gate_a_oe; /* '1' sets the corresponding bit in DO */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_set_d_gate_b_oe; /* " "                                  */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_set_d_gate_c_oe; /* " "                                  */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_set_d_gate_d_oe; /* " "                                  */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_set_iol_do_a;    /* " "                                  */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_set_iol_do_b;    /* " "                                  */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_set_iol_do_c;    /* " "                                  */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_set_iol_do_d;    /* " "                                  */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_set_reserved1;   /* reserved                             */
} NIOL_IOL_SIO_DO_SET_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_SIO_DO_SET_BIT_T bf;
} NIOL_IOL_SIO_DO_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_clr */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_clr     0x00000010U
#define Adr_NIOL_iol_sio_iol_sio_do_clr 0x00000890U
#define Adr_NIOL_iol_sio_do_clr         0x00000890U
#define DFLT_VAL_NIOL_iol_sio_do_clr    0x00000000U

#define MSK_NIOL_iol_sio_do_clr_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_clr_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_clr_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_clr_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_clr_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_clr_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_clr_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_clr_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_clr_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_clr_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_clr_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_clr_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_clr_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_clr_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_clr_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_clr_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_clr_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_clr_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_clr_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_clr_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_clr_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_clr_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_clr_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_clr_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_clr_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do_clr': */
#define MSK_USED_BITS_NIOL_iol_sio_do_clr 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_clr_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_clr_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_clr_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_clr_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_clr_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_clr_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_clr_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_clr_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_clr_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_CLR_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_clr_d_gate_a_oe; /* '1' clears the corresponding bit in DO */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_clr_d_gate_b_oe; /* " "                                    */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_clr_d_gate_c_oe; /* " "                                    */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_clr_d_gate_d_oe; /* " "                                    */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_clr_iol_do_a;    /* " "                                    */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_clr_iol_do_b;    /* " "                                    */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_clr_iol_do_c;    /* " "                                    */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_clr_iol_do_d;    /* " "                                    */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_clr_reserved1;   /* reserved                               */
} NIOL_IOL_SIO_DO_CLR_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_SIO_DO_CLR_BIT_T bf;
} NIOL_IOL_SIO_DO_CLR_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_ws */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_ws     0x00000014U
#define Adr_NIOL_iol_sio_iol_sio_do_ws 0x00000894U
#define Adr_NIOL_iol_sio_do_ws         0x00000894U
#define DFLT_VAL_NIOL_iol_sio_do_ws    0x00000000U

#define MSK_NIOL_iol_sio_do_ws_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_ws_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_ws_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_ws_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_ws_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_ws_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_ws_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_ws_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_ws_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_ws_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_ws_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_ws_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_ws_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_ws_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_ws_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_ws_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_ws_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do_ws': */
#define MSK_USED_BITS_NIOL_iol_sio_do_ws 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_ws_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_ws_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_ws_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_ws_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_ws_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_ws_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_ws_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_ws_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_ws_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_WS_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_ws_d_gate_a_oe; /* write sync. When sync_sio_do occurs (module inout from SYNC unit) all bits with DO_WS_MASK[*]=1 are transfered to the DO register. */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_ws_d_gate_b_oe; /* " "                                                                                                                                */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_ws_d_gate_c_oe; /* " "                                                                                                                                */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_ws_d_gate_d_oe; /* " "                                                                                                                                */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_ws_iol_do_a;    /* " "                                                                                                                                */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_ws_iol_do_b;    /* " "                                                                                                                                */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_ws_iol_do_c;    /* " "                                                                                                                                */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_ws_iol_do_d;    /* " "                                                                                                                                */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_ws_reserved1;   /* reserved                                                                                                                           */
} NIOL_IOL_SIO_DO_WS_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_SIO_DO_WS_BIT_T bf;
} NIOL_IOL_SIO_DO_WS_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_ws_set */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_ws_set     0x00000018U
#define Adr_NIOL_iol_sio_iol_sio_do_ws_set 0x00000898U
#define Adr_NIOL_iol_sio_do_ws_set         0x00000898U
#define DFLT_VAL_NIOL_iol_sio_do_ws_set    0x00000000U

#define MSK_NIOL_iol_sio_do_ws_set_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_ws_set_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_ws_set_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_ws_set_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_ws_set_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_ws_set_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_ws_set_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_ws_set_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_set_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_ws_set_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_ws_set_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_set_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do_ws_set': */
#define MSK_USED_BITS_NIOL_iol_sio_do_ws_set 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_ws_set_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_ws_set_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_ws_set_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_ws_set_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_ws_set_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_ws_set_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_ws_set_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_ws_set_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_ws_set_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_WS_SET_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_ws_set_d_gate_a_oe; /* '1' sets the corresponding bit in DO_WS */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_ws_set_d_gate_b_oe; /* " "                                     */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_ws_set_d_gate_c_oe; /* " "                                     */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_ws_set_d_gate_d_oe; /* " "                                     */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_ws_set_iol_do_a;    /* " "                                     */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_ws_set_iol_do_b;    /* " "                                     */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_ws_set_iol_do_c;    /* " "                                     */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_ws_set_iol_do_d;    /* " "                                     */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_ws_set_reserved1;   /* reserved                                */
} NIOL_IOL_SIO_DO_WS_SET_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_SIO_DO_WS_SET_BIT_T bf;
} NIOL_IOL_SIO_DO_WS_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_ws_clr */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_ws_clr     0x0000001CU
#define Adr_NIOL_iol_sio_iol_sio_do_ws_clr 0x0000089CU
#define Adr_NIOL_iol_sio_do_ws_clr         0x0000089CU
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr    0x00000000U

#define MSK_NIOL_iol_sio_do_ws_clr_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_ws_clr_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_ws_clr_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_ws_clr_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_ws_clr_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_ws_clr_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_ws_clr_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_ws_clr_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_clr_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_ws_clr_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_ws_clr_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_clr_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do_ws_clr': */
#define MSK_USED_BITS_NIOL_iol_sio_do_ws_clr 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_ws_clr_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_ws_clr_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_ws_clr_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_ws_clr_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_ws_clr_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_ws_clr_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_ws_clr_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_ws_clr_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_ws_clr_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_WS_CLR_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_ws_clr_d_gate_a_oe; /* '1' clears the corresponding bit in DO_WS */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_ws_clr_d_gate_b_oe; /* " "                                       */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_ws_clr_d_gate_c_oe; /* " "                                       */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_ws_clr_d_gate_d_oe; /* " "                                       */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_ws_clr_iol_do_a;    /* " "                                       */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_ws_clr_iol_do_b;    /* " "                                       */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_ws_clr_iol_do_c;    /* " "                                       */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_ws_clr_iol_do_d;    /* " "                                       */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_ws_clr_reserved1;   /* reserved                                  */
} NIOL_IOL_SIO_DO_WS_CLR_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_SIO_DO_WS_CLR_BIT_T bf;
} NIOL_IOL_SIO_DO_WS_CLR_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_ws_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_ws_mask     0x00000020U
#define Adr_NIOL_iol_sio_iol_sio_do_ws_mask 0x000008A0U
#define Adr_NIOL_iol_sio_do_ws_mask         0x000008A0U
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask    0x00000000U

#define MSK_NIOL_iol_sio_do_ws_mask_d_gate_a_oe         0x00000007U
#define SRT_NIOL_iol_sio_do_ws_mask_d_gate_a_oe         0
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_d_gate_a_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_d_gate_a_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_d_gate_b_oe         0x00000038U
#define SRT_NIOL_iol_sio_do_ws_mask_d_gate_b_oe         3
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_d_gate_b_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_d_gate_b_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_d_gate_c_oe         0x000001c0U
#define SRT_NIOL_iol_sio_do_ws_mask_d_gate_c_oe         6
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_d_gate_c_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_d_gate_c_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_d_gate_d_oe         0x00000e00U
#define SRT_NIOL_iol_sio_do_ws_mask_d_gate_d_oe         9
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_d_gate_d_oe    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_d_gate_d_oe 0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_iol_do_a            0x00001000U
#define SRT_NIOL_iol_sio_do_ws_mask_iol_do_a            12
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_iol_do_a       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_iol_do_a    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_iol_do_b            0x00002000U
#define SRT_NIOL_iol_sio_do_ws_mask_iol_do_b            13
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_iol_do_b       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_iol_do_b    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_iol_do_c            0x00004000U
#define SRT_NIOL_iol_sio_do_ws_mask_iol_do_c            14
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_iol_do_c       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_iol_do_c    0x00000000U
#define MSK_NIOL_iol_sio_do_ws_mask_iol_do_d            0x00008000U
#define SRT_NIOL_iol_sio_do_ws_mask_iol_do_d            15
#define DFLT_VAL_NIOL_iol_sio_do_ws_mask_iol_do_d       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_ws_mask_iol_do_d    0x00000000U

/* all used bits of 'NIOL_iol_sio_do_ws_mask': */
#define MSK_USED_BITS_NIOL_iol_sio_do_ws_mask 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_do_ws_mask_d_gate_a_oe = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_do_ws_mask_d_gate_b_oe = 3,  /* [5:3] */
  BFW_NIOL_iol_sio_do_ws_mask_d_gate_c_oe = 3,  /* [8:6] */
  BFW_NIOL_iol_sio_do_ws_mask_d_gate_d_oe = 3,  /* [11:9] */
  BFW_NIOL_iol_sio_do_ws_mask_iol_do_a    = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_ws_mask_iol_do_b    = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_ws_mask_iol_do_c    = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_ws_mask_iol_do_d    = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_ws_mask_reserved1   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_WS_MASK_BIT_Ttag {
  unsigned int d_gate_a_oe : BFW_NIOL_iol_sio_do_ws_mask_d_gate_a_oe; /* see DO_WS */
  unsigned int d_gate_b_oe : BFW_NIOL_iol_sio_do_ws_mask_d_gate_b_oe; /* " "       */
  unsigned int d_gate_c_oe : BFW_NIOL_iol_sio_do_ws_mask_d_gate_c_oe; /* " "       */
  unsigned int d_gate_d_oe : BFW_NIOL_iol_sio_do_ws_mask_d_gate_d_oe; /* " "       */
  unsigned int iol_do_a    : BFW_NIOL_iol_sio_do_ws_mask_iol_do_a;    /* " "       */
  unsigned int iol_do_b    : BFW_NIOL_iol_sio_do_ws_mask_iol_do_b;    /* " "       */
  unsigned int iol_do_c    : BFW_NIOL_iol_sio_do_ws_mask_iol_do_c;    /* " "       */
  unsigned int iol_do_d    : BFW_NIOL_iol_sio_do_ws_mask_iol_do_d;    /* " "       */
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_ws_mask_reserved1;   /* reserved  */
} NIOL_IOL_SIO_DO_WS_MASK_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_SIO_DO_WS_MASK_BIT_T bf;
} NIOL_IOL_SIO_DO_WS_MASK_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_en */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_en     0x00000024U
#define Adr_NIOL_iol_sio_iol_sio_do_en 0x000008A4U
#define Adr_NIOL_iol_sio_do_en         0x000008A4U
#define DFLT_VAL_NIOL_iol_sio_do_en    0x00000000U

#define MSK_NIOL_iol_sio_do_en_iol_do_en_a         0x00001000U
#define SRT_NIOL_iol_sio_do_en_iol_do_en_a         12
#define DFLT_VAL_NIOL_iol_sio_do_en_iol_do_en_a    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_iol_do_en_a 0x00000000U
#define MSK_NIOL_iol_sio_do_en_iol_do_en_b         0x00002000U
#define SRT_NIOL_iol_sio_do_en_iol_do_en_b         13
#define DFLT_VAL_NIOL_iol_sio_do_en_iol_do_en_b    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_iol_do_en_b 0x00000000U
#define MSK_NIOL_iol_sio_do_en_iol_do_en_c         0x00004000U
#define SRT_NIOL_iol_sio_do_en_iol_do_en_c         14
#define DFLT_VAL_NIOL_iol_sio_do_en_iol_do_en_c    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_iol_do_en_c 0x00000000U
#define MSK_NIOL_iol_sio_do_en_iol_do_en_d         0x00008000U
#define SRT_NIOL_iol_sio_do_en_iol_do_en_d         15
#define DFLT_VAL_NIOL_iol_sio_do_en_iol_do_en_d    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_iol_do_en_d 0x00000000U

/* all used bits of 'NIOL_iol_sio_do_en': */
#define MSK_USED_BITS_NIOL_iol_sio_do_en 0x0000f000U

enum {
  BFW_NIOL_iol_sio_do_en_reserved1   = 12, /* [11:0] */
  BFW_NIOL_iol_sio_do_en_iol_do_en_a = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_en_iol_do_en_b = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_en_iol_do_en_c = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_en_iol_do_en_d = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_en_reserved2   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_EN_BIT_Ttag {
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_en_reserved1;   /* reserved                                                                                                                                                                                */
  unsigned int iol_do_en_a : BFW_NIOL_iol_sio_do_en_iol_do_en_a; /* Controls the IOL Link Driver when SIO is selected as source in Port - IO Link Driver module (IOL_TX). Mode (push/pull, push only, pull only) is also configurable in the IOL_TX module. */
  unsigned int iol_do_en_b : BFW_NIOL_iol_sio_do_en_iol_do_en_b; /* " "                                                                                                                                                                                     */
  unsigned int iol_do_en_c : BFW_NIOL_iol_sio_do_en_iol_do_en_c; /* " "                                                                                                                                                                                     */
  unsigned int iol_do_en_d : BFW_NIOL_iol_sio_do_en_iol_do_en_d; /* " "                                                                                                                                                                                     */
  unsigned int reserved2   : BFW_NIOL_iol_sio_do_en_reserved2;   /* reserved                                                                                                                                                                                */
} NIOL_IOL_SIO_DO_EN_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_IOL_SIO_DO_EN_BIT_T bf;
} NIOL_IOL_SIO_DO_EN_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_en_set */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_en_set     0x00000028U
#define Adr_NIOL_iol_sio_iol_sio_do_en_set 0x000008A8U
#define Adr_NIOL_iol_sio_do_en_set         0x000008A8U
#define DFLT_VAL_NIOL_iol_sio_do_en_set    0x00000000U

#define MSK_NIOL_iol_sio_do_en_set_iol_do_en_a         0x00001000U
#define SRT_NIOL_iol_sio_do_en_set_iol_do_en_a         12
#define DFLT_VAL_NIOL_iol_sio_do_en_set_iol_do_en_a    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_set_iol_do_en_a 0x00000000U
#define MSK_NIOL_iol_sio_do_en_set_iol_do_en_b         0x00002000U
#define SRT_NIOL_iol_sio_do_en_set_iol_do_en_b         13
#define DFLT_VAL_NIOL_iol_sio_do_en_set_iol_do_en_b    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_set_iol_do_en_b 0x00000000U
#define MSK_NIOL_iol_sio_do_en_set_iol_do_en_c         0x00004000U
#define SRT_NIOL_iol_sio_do_en_set_iol_do_en_c         14
#define DFLT_VAL_NIOL_iol_sio_do_en_set_iol_do_en_c    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_set_iol_do_en_c 0x00000000U
#define MSK_NIOL_iol_sio_do_en_set_iol_do_en_d         0x00008000U
#define SRT_NIOL_iol_sio_do_en_set_iol_do_en_d         15
#define DFLT_VAL_NIOL_iol_sio_do_en_set_iol_do_en_d    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_set_iol_do_en_d 0x00000000U

/* all used bits of 'NIOL_iol_sio_do_en_set': */
#define MSK_USED_BITS_NIOL_iol_sio_do_en_set 0x0000f000U

enum {
  BFW_NIOL_iol_sio_do_en_set_reserved1   = 12, /* [11:0] */
  BFW_NIOL_iol_sio_do_en_set_iol_do_en_a = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_en_set_iol_do_en_b = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_en_set_iol_do_en_c = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_en_set_iol_do_en_d = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_en_set_reserved2   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_EN_SET_BIT_Ttag {
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_en_set_reserved1;   /* reserved                           */
  unsigned int iol_do_en_a : BFW_NIOL_iol_sio_do_en_set_iol_do_en_a; /* 1: sets corresponding bit in DO_EN */
  unsigned int iol_do_en_b : BFW_NIOL_iol_sio_do_en_set_iol_do_en_b; /* " "                                */
  unsigned int iol_do_en_c : BFW_NIOL_iol_sio_do_en_set_iol_do_en_c; /* " "                                */
  unsigned int iol_do_en_d : BFW_NIOL_iol_sio_do_en_set_iol_do_en_d; /* " "                                */
  unsigned int reserved2   : BFW_NIOL_iol_sio_do_en_set_reserved2;   /* reserved                           */
} NIOL_IOL_SIO_DO_EN_SET_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_SIO_DO_EN_SET_BIT_T bf;
} NIOL_IOL_SIO_DO_EN_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_do_en_clr */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_do_en_clr     0x0000002CU
#define Adr_NIOL_iol_sio_iol_sio_do_en_clr 0x000008ACU
#define Adr_NIOL_iol_sio_do_en_clr         0x000008ACU
#define DFLT_VAL_NIOL_iol_sio_do_en_clr    0x00000000U

#define MSK_NIOL_iol_sio_do_en_clr_iol_do_en_a         0x00001000U
#define SRT_NIOL_iol_sio_do_en_clr_iol_do_en_a         12
#define DFLT_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_a    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_a 0x00000000U
#define MSK_NIOL_iol_sio_do_en_clr_iol_do_en_b         0x00002000U
#define SRT_NIOL_iol_sio_do_en_clr_iol_do_en_b         13
#define DFLT_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_b    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_b 0x00000000U
#define MSK_NIOL_iol_sio_do_en_clr_iol_do_en_c         0x00004000U
#define SRT_NIOL_iol_sio_do_en_clr_iol_do_en_c         14
#define DFLT_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_c    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_c 0x00000000U
#define MSK_NIOL_iol_sio_do_en_clr_iol_do_en_d         0x00008000U
#define SRT_NIOL_iol_sio_do_en_clr_iol_do_en_d         15
#define DFLT_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_d    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_do_en_clr_iol_do_en_d 0x00000000U

/* all used bits of 'NIOL_iol_sio_do_en_clr': */
#define MSK_USED_BITS_NIOL_iol_sio_do_en_clr 0x0000f000U

enum {
  BFW_NIOL_iol_sio_do_en_clr_reserved1   = 12, /* [11:0] */
  BFW_NIOL_iol_sio_do_en_clr_iol_do_en_a = 1,  /* [12] */
  BFW_NIOL_iol_sio_do_en_clr_iol_do_en_b = 1,  /* [13] */
  BFW_NIOL_iol_sio_do_en_clr_iol_do_en_c = 1,  /* [14] */
  BFW_NIOL_iol_sio_do_en_clr_iol_do_en_d = 1,  /* [15] */
  BFW_NIOL_iol_sio_do_en_clr_reserved2   = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DO_EN_CLR_BIT_Ttag {
  unsigned int reserved1   : BFW_NIOL_iol_sio_do_en_clr_reserved1;   /* reserved                             */
  unsigned int iol_do_en_a : BFW_NIOL_iol_sio_do_en_clr_iol_do_en_a; /* 1: clears corresponding bit in DO_EN */
  unsigned int iol_do_en_b : BFW_NIOL_iol_sio_do_en_clr_iol_do_en_b; /* " "                                  */
  unsigned int iol_do_en_c : BFW_NIOL_iol_sio_do_en_clr_iol_do_en_c; /* " "                                  */
  unsigned int iol_do_en_d : BFW_NIOL_iol_sio_do_en_clr_iol_do_en_d; /* " "                                  */
  unsigned int reserved2   : BFW_NIOL_iol_sio_do_en_clr_reserved2;   /* reserved                             */
} NIOL_IOL_SIO_DO_EN_CLR_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_SIO_DO_EN_CLR_BIT_T bf;
} NIOL_IOL_SIO_DO_EN_CLR_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_pulse_gen_cmd */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_pulse_gen_cmd     0x00000030U
#define Adr_NIOL_iol_sio_iol_sio_pulse_gen_cmd 0x000008B0U
#define Adr_NIOL_iol_sio_pulse_gen_cmd         0x000008B0U
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cmd    0x00000000U

#define MSK_NIOL_iol_sio_pulse_gen_cmd_stop              0x00000001U
#define SRT_NIOL_iol_sio_pulse_gen_cmd_stop              0
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cmd_stop         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cmd_stop      0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cmd_iol_a_run         0x00000002U
#define SRT_NIOL_iol_sio_pulse_gen_cmd_iol_a_run         1
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_a_run    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_a_run 0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cmd_iol_b_run         0x00000004U
#define SRT_NIOL_iol_sio_pulse_gen_cmd_iol_b_run         2
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_b_run    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_b_run 0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cmd_iol_c_run         0x00000008U
#define SRT_NIOL_iol_sio_pulse_gen_cmd_iol_c_run         3
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_c_run    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_c_run 0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cmd_iol_d_run         0x00000010U
#define SRT_NIOL_iol_sio_pulse_gen_cmd_iol_d_run         4
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_d_run    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cmd_iol_d_run 0x00000000U

/* all used bits of 'NIOL_iol_sio_pulse_gen_cmd': */
#define MSK_USED_BITS_NIOL_iol_sio_pulse_gen_cmd 0x0000001fU

enum {
  BFW_NIOL_iol_sio_pulse_gen_cmd_stop      = 1,  /* [0] */
  BFW_NIOL_iol_sio_pulse_gen_cmd_iol_a_run = 1,  /* [1] */
  BFW_NIOL_iol_sio_pulse_gen_cmd_iol_b_run = 1,  /* [2] */
  BFW_NIOL_iol_sio_pulse_gen_cmd_iol_c_run = 1,  /* [3] */
  BFW_NIOL_iol_sio_pulse_gen_cmd_iol_d_run = 1,  /* [4] */
  BFW_NIOL_iol_sio_pulse_gen_cmd_reserved1 = 27  /* [31:5] */
};

typedef struct NIOL_IOL_SIO_PULSE_GEN_CMD_BIT_Ttag {
  unsigned int stop      : BFW_NIOL_iol_sio_pulse_gen_cmd_stop;      /* Writing '0' will be ignored                                                                */
                                                                     /* Writing a '1' will stop pulse generation                                                   */
  unsigned int iol_a_run : BFW_NIOL_iol_sio_pulse_gen_cmd_iol_a_run; /* 1: Start pulse generation for iol_a. Ignored if any (a-d) pulse generation is in progress. */
  unsigned int iol_b_run : BFW_NIOL_iol_sio_pulse_gen_cmd_iol_b_run; /* " "                                                                                        */
  unsigned int iol_c_run : BFW_NIOL_iol_sio_pulse_gen_cmd_iol_c_run; /* " "                                                                                        */
  unsigned int iol_d_run : BFW_NIOL_iol_sio_pulse_gen_cmd_iol_d_run; /* " "                                                                                        */
  unsigned int reserved1 : BFW_NIOL_iol_sio_pulse_gen_cmd_reserved1; /* reserved                                                                                   */
} NIOL_IOL_SIO_PULSE_GEN_CMD_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_SIO_PULSE_GEN_CMD_BIT_T bf;
} NIOL_IOL_SIO_PULSE_GEN_CMD_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_pulse_gen_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_pulse_gen_cfg     0x00000034U
#define Adr_NIOL_iol_sio_iol_sio_pulse_gen_cfg 0x000008B4U
#define Adr_NIOL_iol_sio_pulse_gen_cfg         0x000008B4U
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg    0x00000000U

#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_a_sync_en           0x00000001U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_a_sync_en           0
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_a_sync_en      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_a_sync_en   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_auto           0x00000002U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_auto           1
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_auto      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_auto   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_invert         0x00000004U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_invert         2
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_invert    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_invert 0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_b_sync_en           0x00000008U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_b_sync_en           3
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_b_sync_en      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_b_sync_en   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_auto           0x00000010U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_auto           4
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_auto      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_auto   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_invert         0x00000020U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_invert         5
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_invert    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_invert 0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_c_sync_en           0x00000040U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_c_sync_en           6
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_c_sync_en      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_c_sync_en   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_auto           0x00000080U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_auto           7
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_auto      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_auto   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_invert         0x00000100U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_invert         8
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_invert    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_invert 0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_d_sync_en           0x00000200U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_d_sync_en           9
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_d_sync_en      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_d_sync_en   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_auto           0x00000400U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_auto           10
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_auto      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_auto   0x00000000U
#define MSK_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_invert         0x00000800U
#define SRT_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_invert         11
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_invert    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_invert 0x00000000U

/* all used bits of 'NIOL_iol_sio_pulse_gen_cfg': */
#define MSK_USED_BITS_NIOL_iol_sio_pulse_gen_cfg 0x00000fffU

enum {
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_a_sync_en   = 1,  /* [0] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_auto   = 1,  /* [1] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_invert = 1,  /* [2] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_b_sync_en   = 1,  /* [3] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_auto   = 1,  /* [4] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_invert = 1,  /* [5] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_c_sync_en   = 1,  /* [6] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_auto   = 1,  /* [7] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_invert = 1,  /* [8] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_d_sync_en   = 1,  /* [9] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_auto   = 1,  /* [10] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_invert = 1,  /* [11] */
  BFW_NIOL_iol_sio_pulse_gen_cfg_reserved1       = 20  /* [31:12] */
};

typedef struct NIOL_IOL_SIO_PULSE_GEN_CFG_BIT_Ttag {
  unsigned int iol_a_sync_en   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_a_sync_en;   /* 0: sync_iol_a input is ignored                                                                                         */
                                                                                 /* 1: when sync_uart_a_tx occurs: Start pulse generation for iol_a. Ignored if any (a-d) pulse generation is in progress. */
  unsigned int iol_a_do_auto   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_auto;   /* 0: DO.iol_do_a is not changed.                                                                                         */
                                                                                 /* 1: At the start of the pulse DO.iol_do_a is set to (iol_a_do_auto_invert xor DI.a_cq_fil).                             */
                                                                                 /* In both cases DO.iol_do_a is not modified at the end of the pulse.                                                     */
  unsigned int iol_a_do_invert : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_a_do_invert; /* 1: DI.a_cq_fil is inverted when transferred to DO.                                                                     */
  unsigned int iol_b_sync_en   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_b_sync_en;   /* see iol_a_sync_en                                                                                                      */
  unsigned int iol_b_do_auto   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_auto;   /* see iol_a_do_auto                                                                                                      */
  unsigned int iol_b_do_invert : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_b_do_invert; /* see iol_a_do_invert                                                                                                    */
  unsigned int iol_c_sync_en   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_c_sync_en;   /* see iol_a_sync_en                                                                                                      */
  unsigned int iol_c_do_auto   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_auto;   /* see iol_a_do_auto                                                                                                      */
  unsigned int iol_c_do_invert : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_c_do_invert; /* see iol_a_do_invert                                                                                                    */
  unsigned int iol_d_sync_en   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_d_sync_en;   /* see iol_a_sync_en                                                                                                      */
  unsigned int iol_d_do_auto   : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_auto;   /* see iol_a_do_auto                                                                                                      */
  unsigned int iol_d_do_invert : BFW_NIOL_iol_sio_pulse_gen_cfg_iol_d_do_invert; /* see iol_a_do_invert                                                                                                    */
  unsigned int reserved1       : BFW_NIOL_iol_sio_pulse_gen_cfg_reserved1;       /* reserved                                                                                                               */
} NIOL_IOL_SIO_PULSE_GEN_CFG_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_SIO_PULSE_GEN_CFG_BIT_T bf;
} NIOL_IOL_SIO_PULSE_GEN_CFG_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_pulse_gen_duration */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_pulse_gen_duration     0x00000038U
#define Adr_NIOL_iol_sio_iol_sio_pulse_gen_duration 0x000008B8U
#define Adr_NIOL_iol_sio_pulse_gen_duration         0x000008B8U
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_duration    0x00001f40U

#define MSK_NIOL_iol_sio_pulse_gen_duration_val         0x0000ffffU
#define SRT_NIOL_iol_sio_pulse_gen_duration_val         0
#define DFLT_VAL_NIOL_iol_sio_pulse_gen_duration_val    0x00001f40U
#define DFLT_BF_VAL_NIOL_iol_sio_pulse_gen_duration_val 0x00001f40U

/* all used bits of 'NIOL_iol_sio_pulse_gen_duration': */
#define MSK_USED_BITS_NIOL_iol_sio_pulse_gen_duration 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_pulse_gen_duration_val       = 16, /* [15:0] */
  BFW_NIOL_iol_sio_pulse_gen_duration_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_PULSE_GEN_DURATION_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_sio_pulse_gen_duration_val;       /* 1..MAX length of pulse in clock cycles */
  unsigned int reserved1 : BFW_NIOL_iol_sio_pulse_gen_duration_reserved1; /* reserved                               */
} NIOL_IOL_SIO_PULSE_GEN_DURATION_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_IOL_SIO_PULSE_GEN_DURATION_BIT_T bf;
} NIOL_IOL_SIO_PULSE_GEN_DURATION_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_tio_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_tio_cfg     0x0000003CU
#define Adr_NIOL_iol_sio_iol_sio_tio_cfg 0x000008BCU
#define Adr_NIOL_iol_sio_tio_cfg         0x000008BCU
#define DFLT_VAL_NIOL_iol_sio_tio_cfg    0x00000000U

#define MSK_NIOL_iol_sio_tio_cfg_en              0x00000001U
#define SRT_NIOL_iol_sio_tio_cfg_en              0
#define DFLT_VAL_NIOL_iol_sio_tio_cfg_en         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_cfg_en      0x00000000U
#define MSK_NIOL_iol_sio_tio_cfg_max_len         0x0000000eU
#define SRT_NIOL_iol_sio_tio_cfg_max_len         1
#define DFLT_VAL_NIOL_iol_sio_tio_cfg_max_len    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_cfg_max_len 0x00000000U

/* all used bits of 'NIOL_iol_sio_tio_cfg': */
#define MSK_USED_BITS_NIOL_iol_sio_tio_cfg 0x0000000fU

enum {
  BFW_NIOL_iol_sio_tio_cfg_en        = 1,  /* [0] */
  BFW_NIOL_iol_sio_tio_cfg_max_len   = 3,  /* [3:1] */
  BFW_NIOL_iol_sio_tio_cfg_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_IOL_SIO_TIO_CFG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_iol_sio_tio_cfg_en;        /* 0: TIO disabled, no DMA access is performed, pointers are not advanced, no timed inputs / outputs are generated. */
  unsigned int max_len   : BFW_NIOL_iol_sio_tio_cfg_max_len;   /* 0..6: 2^max_len = maximum number of timed inputs / outputs per TIO unit (1..64).                                 */
  unsigned int reserved1 : BFW_NIOL_iol_sio_tio_cfg_reserved1; /* reserved                                                                                                         */
} NIOL_IOL_SIO_TIO_CFG_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_SIO_TIO_CFG_BIT_T bf;
} NIOL_IOL_SIO_TIO_CFG_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_tio_bp */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_tio_bp     0x00000040U
#define Adr_NIOL_iol_sio_iol_sio_tio_bp 0x000008C0U
#define Adr_NIOL_iol_sio_tio_bp         0x000008C0U
#define DFLT_VAL_NIOL_iol_sio_tio_bp    0x00000000U

#define MSK_NIOL_iol_sio_tio_bp_val         0x0000ffffU
#define SRT_NIOL_iol_sio_tio_bp_val         0
#define DFLT_VAL_NIOL_iol_sio_tio_bp_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_bp_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_tio_bp': */
#define MSK_USED_BITS_NIOL_iol_sio_tio_bp 0x0000ffffU

enum {
  BFW_NIOL_iol_sio_tio_bp_val       = 16, /* [15:0] */
  BFW_NIOL_iol_sio_tio_bp_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_TIO_BP_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_sio_tio_bp_val;       /* Defines the time span of the phase_phase from the SYNC unit of which timed inputs/outputs are read from / written to a single descriptor (DMA_ADR_*).                                                                               */
                                                              /* The time span is:                                                                                                                                                                                                                   */
                                                              /* for TIO_BP = 0 : BASE_PHASE_RLD . .0                                                                                                                                                                                                */
                                                              /* for TIO_BP > 0 : (TIO_BP-1)..0 BASE_PHASE_RLD..TIO_BP                                                                                                                                                                               */
                                                              /* A new time span starts when TIO_BP matches base_phase and base_phase_next occurs, i.e. the first base_phase of the new descriptor is BASE_PHASE_RLD / TIO_BP-1.                                                                     */
                                                              /* Then the following actions occur:                                                                                                                                                                                                   */
                                                              /* - the descriptor DMA_ADR_* is advanced: NEXT -> NOW -> PREV                                                                                                                                                                         */
                                                              /* - all pending timed outputs to be read from the former NOW descriptor are discarded                                                                                                                                                 */
                                                              /* - all pending timed inputs writing to the former PREV descriptor are discarded                                                                                                                                                      */
                                                              /* - pending timed input captures from the former NOW descriptor may still be written to the new PREV descriptor. Only when IRQ_RAW.prev_completed is asserted no further write operations are performed to the former NOW descriptor. */
  unsigned int reserved1 : BFW_NIOL_iol_sio_tio_bp_reserved1; /* reserved                                                                                                                                                                                                                            */
} NIOL_IOL_SIO_TIO_BP_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_SIO_TIO_BP_BIT_T bf;
} NIOL_IOL_SIO_TIO_BP_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_tio_sel */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_tio_sel     0x00000044U
#define Adr_NIOL_iol_sio_iol_sio_tio_sel 0x000008C4U
#define Adr_NIOL_iol_sio_tio_sel         0x000008C4U
#define DFLT_VAL_NIOL_iol_sio_tio_sel    0x00000000U

#define MSK_NIOL_iol_sio_tio_sel_val         0x00000007U
#define SRT_NIOL_iol_sio_tio_sel_val         0
#define DFLT_VAL_NIOL_iol_sio_tio_sel_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_sel_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_tio_sel': */
#define MSK_USED_BITS_NIOL_iol_sio_tio_sel 0x00000007U

enum {
  BFW_NIOL_iol_sio_tio_sel_val       = 3,  /* [2:0] */
  BFW_NIOL_iol_sio_tio_sel_reserved1 = 29  /* [31:3] */
};

typedef struct NIOL_IOL_SIO_TIO_SEL_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_sio_tio_sel_val;       /* 0..7 selects the TIO unit visible and writable in register TIO */
  unsigned int reserved1 : BFW_NIOL_iol_sio_tio_sel_reserved1; /* reserved                                                       */
} NIOL_IOL_SIO_TIO_SEL_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_SIO_TIO_SEL_BIT_T bf;
} NIOL_IOL_SIO_TIO_SEL_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_tio */
/* => Configuration of Timed Input Output unit selected by TIO_SEL. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_tio     0x00000048U
#define Adr_NIOL_iol_sio_iol_sio_tio 0x000008C8U
#define Adr_NIOL_iol_sio_tio         0x000008C8U
#define DFLT_VAL_NIOL_iol_sio_tio    0x00000000U

#define MSK_NIOL_iol_sio_tio_mode             0x00000003U
#define SRT_NIOL_iol_sio_tio_mode             0
#define DFLT_VAL_NIOL_iol_sio_tio_mode        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_mode     0x00000000U
#define MSK_NIOL_iol_sio_tio_dido_sel         0x0000003cU
#define SRT_NIOL_iol_sio_tio_dido_sel         2
#define DFLT_VAL_NIOL_iol_sio_tio_dido_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_dido_sel 0x00000000U
#define MSK_NIOL_iol_sio_tio_edge             0x000000c0U
#define SRT_NIOL_iol_sio_tio_edge             6
#define DFLT_VAL_NIOL_iol_sio_tio_edge        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_tio_edge     0x00000000U

/* all used bits of 'NIOL_iol_sio_tio': */
#define MSK_USED_BITS_NIOL_iol_sio_tio 0x000000ffU

enum {
  BFW_NIOL_iol_sio_tio_mode      = 2,  /* [1:0] */
  BFW_NIOL_iol_sio_tio_dido_sel  = 4,  /* [5:2] */
  BFW_NIOL_iol_sio_tio_edge      = 2,  /* [7:6] */
  BFW_NIOL_iol_sio_tio_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_SIO_TIO_BIT_Ttag {
  unsigned int mode      : BFW_NIOL_iol_sio_tio_mode;      /* Note: All changes of mode must go to or go from 0 (disabled).                                                                                                                                                                                                                                               */
                                                           /* 0: disabled                                                                                                                                                                                                                                                                                                 */
                                                           /* 1: input time stamping                                                                                                                                                                                                                                                                                      */
                                                           /* When the edge configured by edge occurs on the the DI input selected by dido_sel the current base_phase and value of DI is stored to the NOW descriptor as a 16 bit word in the following format: {base_phase[15:1], DI[dido_sel]}. Storing may extend after the NOW descriptor became the PREV descriptor. */
                                                           /* 2: timed output                                                                                                                                                                                                                                                                                             */
                                                           /* When the base_phase matches the base_phase read from the NOW descriptor the output selected by dido_sel is set to the specified value.                                                                                                                                                                      */
                                                           /* The NOW descriptor contains the base_phase and value for DO as a 16 bit word in the following format: {base_phase[15:1], DO[dido_sel]}. For the read base phase the LSB is set to '0' for comparison.                                                                                                       */
                                                           /* When the 16 bit word is 0xFFFF or the entire descriptor has been output no further timed outputs are performed for the NOW descriptor and the first timed output for the NEXT descriptor is requested (prefetched).                                                                                         */
                                                           /* 3: reserved - do not use                                                                                                                                                                                                                                                                                    */
                                                           /* The byte address used to store a timed input or read a timed output is:                                                                                                                                                                                                                                     */
                                                           /* DMA_ADR_NOW + tio_no* 2^(TIO_CFG.max_len)*2 + offset*2                                                                                                                                                                                                                                                      */
                                                           /* where                                                                                                                                                                                                                                                                                                       */
                                                           /* tio_no is the number of the TIO unit, i.e. 0..7                                                                                                                                                                                                                                                             */
                                                           /* offset is the number of previous timed inputs / outputs during this descriptor.                                                                                                                                                                                                                             */
                                                           /* TIO Unit Prioritisation                                                                                                                                                                                                                                                                                     */
                                                           /* All TIO units share a single DMA channel. DMA requests of the TIO units are processed according to their priority with TIO unit 0 having highest and TIO 7 the lowest priority.                                                                                                                             */
                                                           /* DMA requests to empty descriptors are discarded immediately, with the exception of read requests to the NEXT descriptor which are ignored (i.e. not even considered for prioritisation) in order to facilitate prefetching of timed outputs.                                                                */
  unsigned int dido_sel  : BFW_NIOL_iol_sio_tio_dido_sel;  /* For mode=1 (input capture): 0..8 Select bit in DI as source to capture.                                                                                                                                                                                                                                     */
                                                           /* For mode=2 (output compare): 0..15 Select bit in DO to be set.                                                                                                                                                                                                                                              */
  unsigned int edge      : BFW_NIOL_iol_sio_tio_edge;      /* For mode=1 (input capture): Select edge to capture.                                                                                                                                                                                                                                                         */
                                                           /* 0 : rising edge                                                                                                                                                                                                                                                                                             */
                                                           /* 1: falling edge                                                                                                                                                                                                                                                                                             */
                                                           /* 2: both edges                                                                                                                                                                                                                                                                                               */
                                                           /* 3: reserved                                                                                                                                                                                                                                                                                                 */
  unsigned int reserved1 : BFW_NIOL_iol_sio_tio_reserved1; /* reserved                                                                                                                                                                                                                                                                                                    */
} NIOL_IOL_SIO_TIO_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_IOL_SIO_TIO_BIT_T bf;
} NIOL_IOL_SIO_TIO_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_dma_ctrl */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_dma_ctrl     0x0000004CU
#define Adr_NIOL_iol_sio_iol_sio_dma_ctrl 0x000008CCU
#define Adr_NIOL_iol_sio_dma_ctrl         0x000008CCU
#define DFLT_VAL_NIOL_iol_sio_dma_ctrl    0x00000000U

#define MSK_NIOL_iol_sio_dma_ctrl_adr_next_clr         0x00000001U
#define SRT_NIOL_iol_sio_dma_ctrl_adr_next_clr         0
#define DFLT_VAL_NIOL_iol_sio_dma_ctrl_adr_next_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_ctrl_adr_next_clr 0x00000000U
#define MSK_NIOL_iol_sio_dma_ctrl_adr_now_clr          0x00000002U
#define SRT_NIOL_iol_sio_dma_ctrl_adr_now_clr          1
#define DFLT_VAL_NIOL_iol_sio_dma_ctrl_adr_now_clr     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_ctrl_adr_now_clr  0x00000000U
#define MSK_NIOL_iol_sio_dma_ctrl_adr_prev_clr         0x00000004U
#define SRT_NIOL_iol_sio_dma_ctrl_adr_prev_clr         2
#define DFLT_VAL_NIOL_iol_sio_dma_ctrl_adr_prev_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_ctrl_adr_prev_clr 0x00000000U
#define MSK_NIOL_iol_sio_dma_ctrl_next                 0x00000008U
#define SRT_NIOL_iol_sio_dma_ctrl_next                 3
#define DFLT_VAL_NIOL_iol_sio_dma_ctrl_next            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_ctrl_next         0x00000000U

/* all used bits of 'NIOL_iol_sio_dma_ctrl': */
#define MSK_USED_BITS_NIOL_iol_sio_dma_ctrl 0x0000000fU

enum {
  BFW_NIOL_iol_sio_dma_ctrl_adr_next_clr = 1,  /* [0] */
  BFW_NIOL_iol_sio_dma_ctrl_adr_now_clr  = 1,  /* [1] */
  BFW_NIOL_iol_sio_dma_ctrl_adr_prev_clr = 1,  /* [2] */
  BFW_NIOL_iol_sio_dma_ctrl_next         = 1,  /* [3] */
  BFW_NIOL_iol_sio_dma_ctrl_reserved1    = 28  /* [31:4] */
};

typedef struct NIOL_IOL_SIO_DMA_CTRL_BIT_Ttag {
  unsigned int adr_next_clr : BFW_NIOL_iol_sio_dma_ctrl_adr_next_clr; /* write: 1: clear dma_adr_next (flag set to empty)                                           */
                                                                      /* read: 1: dma_adr_next empty                                                                */
  unsigned int adr_now_clr  : BFW_NIOL_iol_sio_dma_ctrl_adr_now_clr;  /* " "                                                                                        */
  unsigned int adr_prev_clr : BFW_NIOL_iol_sio_dma_ctrl_adr_prev_clr; /* " "                                                                                        */
  unsigned int next         : BFW_NIOL_iol_sio_dma_ctrl_next;         /* 1: same effect as if TIO_BP matches. DMA_ADR_* is advanced as follows: NEXT -> NOW -> PREV */
  unsigned int reserved1    : BFW_NIOL_iol_sio_dma_ctrl_reserved1;    /* reserved                                                                                   */
} NIOL_IOL_SIO_DMA_CTRL_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_IOL_SIO_DMA_CTRL_BIT_T bf;
} NIOL_IOL_SIO_DMA_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_dma_adr_next */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_dma_adr_next     0x00000050U
#define Adr_NIOL_iol_sio_iol_sio_dma_adr_next 0x000008D0U
#define Adr_NIOL_iol_sio_dma_adr_next         0x000008D0U
#define DFLT_VAL_NIOL_iol_sio_dma_adr_next    0x00000000U

#define MSK_NIOL_iol_sio_dma_adr_next_val         0x0000fffeU
#define SRT_NIOL_iol_sio_dma_adr_next_val         1
#define DFLT_VAL_NIOL_iol_sio_dma_adr_next_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_adr_next_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_dma_adr_next': */
#define MSK_USED_BITS_NIOL_iol_sio_dma_adr_next 0x0000fffeU

enum {
  BFW_NIOL_iol_sio_dma_adr_next_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_sio_dma_adr_next_val       = 15, /* [15:1] */
  BFW_NIOL_iol_sio_dma_adr_next_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DMA_ADR_NEXT_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_sio_dma_adr_next_reserved1; /* reserved                                                                                                                       */
  unsigned int val       : BFW_NIOL_iol_sio_dma_adr_next_val;       /* descriptor of the next TIO_BP base_phase period. When not empty, reads for timed outputs will occur to prefetch timed outputs. */
  unsigned int reserved2 : BFW_NIOL_iol_sio_dma_adr_next_reserved2; /* reserved                                                                                                                       */
} NIOL_IOL_SIO_DMA_ADR_NEXT_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_SIO_DMA_ADR_NEXT_BIT_T bf;
} NIOL_IOL_SIO_DMA_ADR_NEXT_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_dma_adr_now */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_dma_adr_now     0x00000054U
#define Adr_NIOL_iol_sio_iol_sio_dma_adr_now 0x000008D4U
#define Adr_NIOL_iol_sio_dma_adr_now         0x000008D4U
#define DFLT_VAL_NIOL_iol_sio_dma_adr_now    0x00000000U

#define MSK_NIOL_iol_sio_dma_adr_now_val         0x0000fffeU
#define SRT_NIOL_iol_sio_dma_adr_now_val         1
#define DFLT_VAL_NIOL_iol_sio_dma_adr_now_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_adr_now_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_dma_adr_now': */
#define MSK_USED_BITS_NIOL_iol_sio_dma_adr_now 0x0000fffeU

enum {
  BFW_NIOL_iol_sio_dma_adr_now_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_sio_dma_adr_now_val       = 15, /* [15:1] */
  BFW_NIOL_iol_sio_dma_adr_now_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DMA_ADR_NOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_sio_dma_adr_now_reserved1; /* reserved                        */
  unsigned int val       : BFW_NIOL_iol_sio_dma_adr_now_val;       /* descriptor currently processed. */
  unsigned int reserved2 : BFW_NIOL_iol_sio_dma_adr_now_reserved2; /* reserved                        */
} NIOL_IOL_SIO_DMA_ADR_NOW_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_SIO_DMA_ADR_NOW_BIT_T bf;
} NIOL_IOL_SIO_DMA_ADR_NOW_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_dma_adr_prev */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_dma_adr_prev     0x00000058U
#define Adr_NIOL_iol_sio_iol_sio_dma_adr_prev 0x000008D8U
#define Adr_NIOL_iol_sio_dma_adr_prev         0x000008D8U
#define DFLT_VAL_NIOL_iol_sio_dma_adr_prev    0x00000000U

#define MSK_NIOL_iol_sio_dma_adr_prev_val         0x0000fffeU
#define SRT_NIOL_iol_sio_dma_adr_prev_val         1
#define DFLT_VAL_NIOL_iol_sio_dma_adr_prev_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_adr_prev_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_dma_adr_prev': */
#define MSK_USED_BITS_NIOL_iol_sio_dma_adr_prev 0x0000fffeU

enum {
  BFW_NIOL_iol_sio_dma_adr_prev_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_sio_dma_adr_prev_val       = 15, /* [15:1] */
  BFW_NIOL_iol_sio_dma_adr_prev_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DMA_ADR_PREV_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_sio_dma_adr_prev_reserved1; /* reserved                                                                                                                                                                      */
  unsigned int val       : BFW_NIOL_iol_sio_dma_adr_prev_val;       /* descriptor of the previous TIO_BP base_phase period. Input events captured during the previous period may still be written to this descriptor until IRQ_RAW.prev_completed=1. */
  unsigned int reserved2 : BFW_NIOL_iol_sio_dma_adr_prev_reserved2; /* reserved                                                                                                                                                                      */
} NIOL_IOL_SIO_DMA_ADR_PREV_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_SIO_DMA_ADR_PREV_BIT_T bf;
} NIOL_IOL_SIO_DMA_ADR_PREV_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_dma_ac_high */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_dma_ac_high     0x0000005CU
#define Adr_NIOL_iol_sio_iol_sio_dma_ac_high 0x000008DCU
#define Adr_NIOL_iol_sio_dma_ac_high         0x000008DCU
#define DFLT_VAL_NIOL_iol_sio_dma_ac_high    0x00000000U

#define MSK_NIOL_iol_sio_dma_ac_high_val         0x0000ffe0U
#define SRT_NIOL_iol_sio_dma_ac_high_val         5
#define DFLT_VAL_NIOL_iol_sio_dma_ac_high_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_ac_high_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_dma_ac_high': */
#define MSK_USED_BITS_NIOL_iol_sio_dma_ac_high 0x0000ffe0U

enum {
  BFW_NIOL_iol_sio_dma_ac_high_reserved1 = 5,  /* [4:0] */
  BFW_NIOL_iol_sio_dma_ac_high_val       = 11, /* [15:5] */
  BFW_NIOL_iol_sio_dma_ac_high_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DMA_AC_HIGH_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_sio_dma_ac_high_reserved1; /* reserved                                                                                                                                        */
  unsigned int val       : BFW_NIOL_iol_sio_dma_ac_high_val;       /* DMA access control higher address.                                                                                                              */
                                                                   /* DMA writes are only executed when TSU_AC_LOW <= adr <= CFG_AC_HIGH . Writes outside this range will be discarded and assert IRQ_RAW.ac_err_evt. */
  unsigned int reserved2 : BFW_NIOL_iol_sio_dma_ac_high_reserved2; /* reserved                                                                                                                                        */
} NIOL_IOL_SIO_DMA_AC_HIGH_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_SIO_DMA_AC_HIGH_BIT_T bf;
} NIOL_IOL_SIO_DMA_AC_HIGH_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_dma_ac_low */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_dma_ac_low     0x00000060U
#define Adr_NIOL_iol_sio_iol_sio_dma_ac_low 0x000008E0U
#define Adr_NIOL_iol_sio_dma_ac_low         0x000008E0U
#define DFLT_VAL_NIOL_iol_sio_dma_ac_low    0x00000000U

#define MSK_NIOL_iol_sio_dma_ac_low_val         0x0000ffe0U
#define SRT_NIOL_iol_sio_dma_ac_low_val         5
#define DFLT_VAL_NIOL_iol_sio_dma_ac_low_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_dma_ac_low_val 0x00000000U

/* all used bits of 'NIOL_iol_sio_dma_ac_low': */
#define MSK_USED_BITS_NIOL_iol_sio_dma_ac_low 0x0000ffe0U

enum {
  BFW_NIOL_iol_sio_dma_ac_low_reserved1 = 5,  /* [4:0] */
  BFW_NIOL_iol_sio_dma_ac_low_val       = 11, /* [15:5] */
  BFW_NIOL_iol_sio_dma_ac_low_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_SIO_DMA_AC_LOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_sio_dma_ac_low_reserved1; /* reserved                          */
  unsigned int val       : BFW_NIOL_iol_sio_dma_ac_low_val;       /* DMA access control lower address. */
  unsigned int reserved2 : BFW_NIOL_iol_sio_dma_ac_low_reserved2; /* reserved                          */
} NIOL_IOL_SIO_DMA_AC_LOW_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_SIO_DMA_AC_LOW_BIT_T bf;
} NIOL_IOL_SIO_DMA_AC_LOW_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_irq_raw */
/* => Writing a '1' to a bit position with an event type IRQ will clear the event flag. */
/*    Writing to bit positions with a 'status' type IRQ has no effect. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_irq_raw     0x00000064U
#define Adr_NIOL_iol_sio_iol_sio_irq_raw 0x000008E4U
#define Adr_NIOL_iol_sio_irq_raw         0x000008E4U
#define DFLT_VAL_NIOL_iol_sio_irq_raw    0x00000000U

#define MSK_NIOL_iol_sio_irq_raw_pulse_gen_idle            0x00000001U
#define SRT_NIOL_iol_sio_irq_raw_pulse_gen_idle            0
#define DFLT_VAL_NIOL_iol_sio_irq_raw_pulse_gen_idle       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_pulse_gen_idle    0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_prev_completed            0x00000002U
#define SRT_NIOL_iol_sio_irq_raw_prev_completed            1
#define DFLT_VAL_NIOL_iol_sio_irq_raw_prev_completed       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_prev_completed    0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_next_empty                0x00000004U
#define SRT_NIOL_iol_sio_irq_raw_next_empty                2
#define DFLT_VAL_NIOL_iol_sio_irq_raw_next_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_next_empty        0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_next_underrun_evt         0x00000008U
#define SRT_NIOL_iol_sio_irq_raw_next_underrun_evt         3
#define DFLT_VAL_NIOL_iol_sio_irq_raw_next_underrun_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_next_underrun_evt 0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_ac_err_evt                0x00000010U
#define SRT_NIOL_iol_sio_irq_raw_ac_err_evt                4
#define DFLT_VAL_NIOL_iol_sio_irq_raw_ac_err_evt           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_ac_err_evt        0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio0_err_evt              0x00000020U
#define SRT_NIOL_iol_sio_irq_raw_tio0_err_evt              5
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio0_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio0_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio1_err_evt              0x00000040U
#define SRT_NIOL_iol_sio_irq_raw_tio1_err_evt              6
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio1_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio1_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio2_err_evt              0x00000080U
#define SRT_NIOL_iol_sio_irq_raw_tio2_err_evt              7
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio2_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio2_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio3_err_evt              0x00000100U
#define SRT_NIOL_iol_sio_irq_raw_tio3_err_evt              8
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio3_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio3_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio4_err_evt              0x00000200U
#define SRT_NIOL_iol_sio_irq_raw_tio4_err_evt              9
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio4_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio4_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio5_err_evt              0x00000400U
#define SRT_NIOL_iol_sio_irq_raw_tio5_err_evt              10
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio5_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio5_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio6_err_evt              0x00000800U
#define SRT_NIOL_iol_sio_irq_raw_tio6_err_evt              11
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio6_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio6_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_raw_tio7_err_evt              0x00001000U
#define SRT_NIOL_iol_sio_irq_raw_tio7_err_evt              12
#define DFLT_VAL_NIOL_iol_sio_irq_raw_tio7_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_raw_tio7_err_evt      0x00000000U

/* all used bits of 'NIOL_iol_sio_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_sio_irq_raw 0x00001fffU

enum {
  BFW_NIOL_iol_sio_irq_raw_pulse_gen_idle    = 1,  /* [0] */
  BFW_NIOL_iol_sio_irq_raw_prev_completed    = 1,  /* [1] */
  BFW_NIOL_iol_sio_irq_raw_next_empty        = 1,  /* [2] */
  BFW_NIOL_iol_sio_irq_raw_next_underrun_evt = 1,  /* [3] */
  BFW_NIOL_iol_sio_irq_raw_ac_err_evt        = 1,  /* [4] */
  BFW_NIOL_iol_sio_irq_raw_tio0_err_evt      = 1,  /* [5] */
  BFW_NIOL_iol_sio_irq_raw_tio1_err_evt      = 1,  /* [6] */
  BFW_NIOL_iol_sio_irq_raw_tio2_err_evt      = 1,  /* [7] */
  BFW_NIOL_iol_sio_irq_raw_tio3_err_evt      = 1,  /* [8] */
  BFW_NIOL_iol_sio_irq_raw_tio4_err_evt      = 1,  /* [9] */
  BFW_NIOL_iol_sio_irq_raw_tio5_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_sio_irq_raw_tio6_err_evt      = 1,  /* [11] */
  BFW_NIOL_iol_sio_irq_raw_tio7_err_evt      = 1,  /* [12] */
  BFW_NIOL_iol_sio_irq_raw_reserved1         = 19  /* [31:13] */
};

typedef struct NIOL_IOL_SIO_IRQ_RAW_BIT_Ttag {
  unsigned int pulse_gen_idle    : BFW_NIOL_iol_sio_irq_raw_pulse_gen_idle;    /* STATUS: 1: pulse generator idle                                                                                                                                                                                                                                                                                                               */
  unsigned int prev_completed    : BFW_NIOL_iol_sio_irq_raw_prev_completed;    /* STATUS: 1: writing finished to adr_dma_prev.                                                                                                                                                                                                                                                                                                  */
                                                                               /*         Status flag set and cleared by hardware.                                                                                                                                                                                                                                                                                              */
                                                                               /*         It becomes '0' when the DMA descriptor is advanced (NEXT->NOW->PREV) and there are still write requests pending to the NOW descriptor which is becoming the new PREV descriptor. Only when there are no outstanding write requests to the PREV descriptor prev_completed becomes '1'.                                                 */
  unsigned int next_empty        : BFW_NIOL_iol_sio_irq_raw_next_empty;        /* STATUS: 1: dma_adr_next is empty and ready to accept new pointer.                                                                                                                                                                                                                                                                             */
  unsigned int next_underrun_evt : BFW_NIOL_iol_sio_irq_raw_next_underrun_evt; /* EVENT : 1: dma_adr_next was empty when an advance of the descriptor was requested by match of TIO_BP or DMA_CTRL.next.                                                                                                                                                                                                                        */
  unsigned int ac_err_evt        : BFW_NIOL_iol_sio_irq_raw_ac_err_evt;        /* EVENT : 1: access control error: write outside of allowed addresses                                                                                                                                                                                                                                                                           */
  unsigned int tio0_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio0_err_evt;      /* EVENT : 1: timed input: capture lost as DMA was busy or the descriptor was full or not available (dma_adr_[now|prev]_empty).                                                                                                                                                                                                                  */
                                                                               /*         1: timed output: timed output was read too late and thus discarded or the end of the descriptor was not reached before the time span of the descriptor ended or the NOW descriptor was not available (dma_adr_now_empty). Requesting to read from the NEXT descriptor while it is not yet available will not trigger the error event. */
  unsigned int tio1_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio1_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int tio2_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio2_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int tio3_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio3_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int tio4_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio4_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int tio5_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio5_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int tio6_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio6_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int tio7_err_evt      : BFW_NIOL_iol_sio_irq_raw_tio7_err_evt;      /* EVENT :                                                                                                                                                                                                                                                                                                                                       */
  unsigned int reserved1         : BFW_NIOL_iol_sio_irq_raw_reserved1;         /* reserved                                                                                                                                                                                                                                                                                                                                      */
} NIOL_IOL_SIO_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_SIO_IRQ_RAW_BIT_T bf;
} NIOL_IOL_SIO_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_irq_masked */
/* => Shows status of masked IRQs (as connected to IRQ controller). */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_irq_masked     0x00000068U
#define Adr_NIOL_iol_sio_iol_sio_irq_masked 0x000008E8U
#define Adr_NIOL_iol_sio_irq_masked         0x000008E8U

#define MSK_NIOL_iol_sio_irq_masked_pulse_gen_idle    0x00000001U
#define SRT_NIOL_iol_sio_irq_masked_pulse_gen_idle    0
#define MSK_NIOL_iol_sio_irq_masked_prev_completed    0x00000002U
#define SRT_NIOL_iol_sio_irq_masked_prev_completed    1
#define MSK_NIOL_iol_sio_irq_masked_next_empty        0x00000004U
#define SRT_NIOL_iol_sio_irq_masked_next_empty        2
#define MSK_NIOL_iol_sio_irq_masked_next_underrun_evt 0x00000008U
#define SRT_NIOL_iol_sio_irq_masked_next_underrun_evt 3
#define MSK_NIOL_iol_sio_irq_masked_ac_err_evt        0x00000010U
#define SRT_NIOL_iol_sio_irq_masked_ac_err_evt        4
#define MSK_NIOL_iol_sio_irq_masked_tio0_err_evt      0x00000020U
#define SRT_NIOL_iol_sio_irq_masked_tio0_err_evt      5
#define MSK_NIOL_iol_sio_irq_masked_tio1_err_evt      0x00000040U
#define SRT_NIOL_iol_sio_irq_masked_tio1_err_evt      6
#define MSK_NIOL_iol_sio_irq_masked_tio2_err_evt      0x00000080U
#define SRT_NIOL_iol_sio_irq_masked_tio2_err_evt      7
#define MSK_NIOL_iol_sio_irq_masked_tio3_err_evt      0x00000100U
#define SRT_NIOL_iol_sio_irq_masked_tio3_err_evt      8
#define MSK_NIOL_iol_sio_irq_masked_tio4_err_evt      0x00000200U
#define SRT_NIOL_iol_sio_irq_masked_tio4_err_evt      9
#define MSK_NIOL_iol_sio_irq_masked_tio5_err_evt      0x00000400U
#define SRT_NIOL_iol_sio_irq_masked_tio5_err_evt      10
#define MSK_NIOL_iol_sio_irq_masked_tio6_err_evt      0x00000800U
#define SRT_NIOL_iol_sio_irq_masked_tio6_err_evt      11
#define MSK_NIOL_iol_sio_irq_masked_tio7_err_evt      0x00001000U
#define SRT_NIOL_iol_sio_irq_masked_tio7_err_evt      12

/* all used bits of 'NIOL_iol_sio_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_sio_irq_masked 0x00001fffU

enum {
  BFW_NIOL_iol_sio_irq_masked_pulse_gen_idle    = 1,  /* [0] */
  BFW_NIOL_iol_sio_irq_masked_prev_completed    = 1,  /* [1] */
  BFW_NIOL_iol_sio_irq_masked_next_empty        = 1,  /* [2] */
  BFW_NIOL_iol_sio_irq_masked_next_underrun_evt = 1,  /* [3] */
  BFW_NIOL_iol_sio_irq_masked_ac_err_evt        = 1,  /* [4] */
  BFW_NIOL_iol_sio_irq_masked_tio0_err_evt      = 1,  /* [5] */
  BFW_NIOL_iol_sio_irq_masked_tio1_err_evt      = 1,  /* [6] */
  BFW_NIOL_iol_sio_irq_masked_tio2_err_evt      = 1,  /* [7] */
  BFW_NIOL_iol_sio_irq_masked_tio3_err_evt      = 1,  /* [8] */
  BFW_NIOL_iol_sio_irq_masked_tio4_err_evt      = 1,  /* [9] */
  BFW_NIOL_iol_sio_irq_masked_tio5_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_sio_irq_masked_tio6_err_evt      = 1,  /* [11] */
  BFW_NIOL_iol_sio_irq_masked_tio7_err_evt      = 1,  /* [12] */
  BFW_NIOL_iol_sio_irq_masked_reserved1         = 19  /* [31:13] */
};

typedef struct NIOL_IOL_SIO_IRQ_MASKED_BIT_Ttag {
  unsigned int pulse_gen_idle    : BFW_NIOL_iol_sio_irq_masked_pulse_gen_idle;    /* STATUS:  */
  unsigned int prev_completed    : BFW_NIOL_iol_sio_irq_masked_prev_completed;    /* STATUS:  */
  unsigned int next_empty        : BFW_NIOL_iol_sio_irq_masked_next_empty;        /* STATUS:  */
  unsigned int next_underrun_evt : BFW_NIOL_iol_sio_irq_masked_next_underrun_evt; /* EVENT :  */
  unsigned int ac_err_evt        : BFW_NIOL_iol_sio_irq_masked_ac_err_evt;        /* EVENT :  */
  unsigned int tio0_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio0_err_evt;      /* EVENT :  */
  unsigned int tio1_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio1_err_evt;      /* EVENT :  */
  unsigned int tio2_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio2_err_evt;      /* EVENT :  */
  unsigned int tio3_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio3_err_evt;      /* EVENT :  */
  unsigned int tio4_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio4_err_evt;      /* EVENT :  */
  unsigned int tio5_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio5_err_evt;      /* EVENT :  */
  unsigned int tio6_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio6_err_evt;      /* EVENT :  */
  unsigned int tio7_err_evt      : BFW_NIOL_iol_sio_irq_masked_tio7_err_evt;      /* EVENT :  */
  unsigned int reserved1         : BFW_NIOL_iol_sio_irq_masked_reserved1;         /* reserved */
} NIOL_IOL_SIO_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_SIO_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_SIO_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_irq_msk_set */
/* => IRQ mask set registerWrite: 1: set the corresponding bit in the IRQ maskRead: returns IRQ mask */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_irq_msk_set     0x0000006CU
#define Adr_NIOL_iol_sio_iol_sio_irq_msk_set 0x000008ECU
#define Adr_NIOL_iol_sio_irq_msk_set         0x000008ECU
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set    0x00000000U

#define MSK_NIOL_iol_sio_irq_msk_set_pulse_gen_idle            0x00000001U
#define SRT_NIOL_iol_sio_irq_msk_set_pulse_gen_idle            0
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_pulse_gen_idle       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_pulse_gen_idle    0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_prev_completed            0x00000002U
#define SRT_NIOL_iol_sio_irq_msk_set_prev_completed            1
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_prev_completed       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_prev_completed    0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_next_empty                0x00000004U
#define SRT_NIOL_iol_sio_irq_msk_set_next_empty                2
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_next_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_next_empty        0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_next_underrun_evt         0x00000008U
#define SRT_NIOL_iol_sio_irq_msk_set_next_underrun_evt         3
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_next_underrun_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_next_underrun_evt 0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_ac_err_evt                0x00000010U
#define SRT_NIOL_iol_sio_irq_msk_set_ac_err_evt                4
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_ac_err_evt           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_ac_err_evt        0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio0_err_evt              0x00000020U
#define SRT_NIOL_iol_sio_irq_msk_set_tio0_err_evt              5
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio0_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio0_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio1_err_evt              0x00000040U
#define SRT_NIOL_iol_sio_irq_msk_set_tio1_err_evt              6
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio1_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio1_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio2_err_evt              0x00000080U
#define SRT_NIOL_iol_sio_irq_msk_set_tio2_err_evt              7
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio2_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio2_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio3_err_evt              0x00000100U
#define SRT_NIOL_iol_sio_irq_msk_set_tio3_err_evt              8
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio3_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio3_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio4_err_evt              0x00000200U
#define SRT_NIOL_iol_sio_irq_msk_set_tio4_err_evt              9
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio4_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio4_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio5_err_evt              0x00000400U
#define SRT_NIOL_iol_sio_irq_msk_set_tio5_err_evt              10
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio5_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio5_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio6_err_evt              0x00000800U
#define SRT_NIOL_iol_sio_irq_msk_set_tio6_err_evt              11
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio6_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio6_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_set_tio7_err_evt              0x00001000U
#define SRT_NIOL_iol_sio_irq_msk_set_tio7_err_evt              12
#define DFLT_VAL_NIOL_iol_sio_irq_msk_set_tio7_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_set_tio7_err_evt      0x00000000U

/* all used bits of 'NIOL_iol_sio_irq_msk_set': */
#define MSK_USED_BITS_NIOL_iol_sio_irq_msk_set 0x00001fffU

enum {
  BFW_NIOL_iol_sio_irq_msk_set_pulse_gen_idle    = 1,  /* [0] */
  BFW_NIOL_iol_sio_irq_msk_set_prev_completed    = 1,  /* [1] */
  BFW_NIOL_iol_sio_irq_msk_set_next_empty        = 1,  /* [2] */
  BFW_NIOL_iol_sio_irq_msk_set_next_underrun_evt = 1,  /* [3] */
  BFW_NIOL_iol_sio_irq_msk_set_ac_err_evt        = 1,  /* [4] */
  BFW_NIOL_iol_sio_irq_msk_set_tio0_err_evt      = 1,  /* [5] */
  BFW_NIOL_iol_sio_irq_msk_set_tio1_err_evt      = 1,  /* [6] */
  BFW_NIOL_iol_sio_irq_msk_set_tio2_err_evt      = 1,  /* [7] */
  BFW_NIOL_iol_sio_irq_msk_set_tio3_err_evt      = 1,  /* [8] */
  BFW_NIOL_iol_sio_irq_msk_set_tio4_err_evt      = 1,  /* [9] */
  BFW_NIOL_iol_sio_irq_msk_set_tio5_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_sio_irq_msk_set_tio6_err_evt      = 1,  /* [11] */
  BFW_NIOL_iol_sio_irq_msk_set_tio7_err_evt      = 1,  /* [12] */
  BFW_NIOL_iol_sio_irq_msk_set_reserved1         = 19  /* [31:13] */
};

typedef struct NIOL_IOL_SIO_IRQ_MSK_SET_BIT_Ttag {
  unsigned int pulse_gen_idle    : BFW_NIOL_iol_sio_irq_msk_set_pulse_gen_idle;    /*          */
  unsigned int prev_completed    : BFW_NIOL_iol_sio_irq_msk_set_prev_completed;    /*          */
  unsigned int next_empty        : BFW_NIOL_iol_sio_irq_msk_set_next_empty;        /*          */
  unsigned int next_underrun_evt : BFW_NIOL_iol_sio_irq_msk_set_next_underrun_evt; /*          */
  unsigned int ac_err_evt        : BFW_NIOL_iol_sio_irq_msk_set_ac_err_evt;        /*          */
  unsigned int tio0_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio0_err_evt;      /*          */
  unsigned int tio1_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio1_err_evt;      /*          */
  unsigned int tio2_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio2_err_evt;      /*          */
  unsigned int tio3_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio3_err_evt;      /*          */
  unsigned int tio4_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio4_err_evt;      /*          */
  unsigned int tio5_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio5_err_evt;      /*          */
  unsigned int tio6_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio6_err_evt;      /*          */
  unsigned int tio7_err_evt      : BFW_NIOL_iol_sio_irq_msk_set_tio7_err_evt;      /*          */
  unsigned int reserved1         : BFW_NIOL_iol_sio_irq_msk_set_reserved1;         /* reserved */
} NIOL_IOL_SIO_IRQ_MSK_SET_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_SIO_IRQ_MSK_SET_BIT_T bf;
} NIOL_IOL_SIO_IRQ_MSK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_irq_msk_reset */
/* => IRQ mask reset registerWrite: 1: clear the corresponding bit in the IRQ maskRead: returns IRQ mask */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_irq_msk_reset     0x00000070U
#define Adr_NIOL_iol_sio_iol_sio_irq_msk_reset 0x000008F0U
#define Adr_NIOL_iol_sio_irq_msk_reset         0x000008F0U
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset    0x00000000U

#define MSK_NIOL_iol_sio_irq_msk_reset_pulse_gen_idle            0x00000001U
#define SRT_NIOL_iol_sio_irq_msk_reset_pulse_gen_idle            0
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_pulse_gen_idle       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_pulse_gen_idle    0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_prev_completed            0x00000002U
#define SRT_NIOL_iol_sio_irq_msk_reset_prev_completed            1
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_prev_completed       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_prev_completed    0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_next_empty                0x00000004U
#define SRT_NIOL_iol_sio_irq_msk_reset_next_empty                2
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_next_empty           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_next_empty        0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_next_underrun_evt         0x00000008U
#define SRT_NIOL_iol_sio_irq_msk_reset_next_underrun_evt         3
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_next_underrun_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_next_underrun_evt 0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_ac_err_evt                0x00000010U
#define SRT_NIOL_iol_sio_irq_msk_reset_ac_err_evt                4
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_ac_err_evt           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_ac_err_evt        0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio0_err_evt              0x00000020U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio0_err_evt              5
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio0_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio0_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio1_err_evt              0x00000040U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio1_err_evt              6
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio1_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio1_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio2_err_evt              0x00000080U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio2_err_evt              7
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio2_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio2_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio3_err_evt              0x00000100U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio3_err_evt              8
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio3_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio3_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio4_err_evt              0x00000200U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio4_err_evt              9
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio4_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio4_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio5_err_evt              0x00000400U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio5_err_evt              10
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio5_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio5_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio6_err_evt              0x00000800U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio6_err_evt              11
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio6_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio6_err_evt      0x00000000U
#define MSK_NIOL_iol_sio_irq_msk_reset_tio7_err_evt              0x00001000U
#define SRT_NIOL_iol_sio_irq_msk_reset_tio7_err_evt              12
#define DFLT_VAL_NIOL_iol_sio_irq_msk_reset_tio7_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_sio_irq_msk_reset_tio7_err_evt      0x00000000U

/* all used bits of 'NIOL_iol_sio_irq_msk_reset': */
#define MSK_USED_BITS_NIOL_iol_sio_irq_msk_reset 0x00001fffU

enum {
  BFW_NIOL_iol_sio_irq_msk_reset_pulse_gen_idle    = 1,  /* [0] */
  BFW_NIOL_iol_sio_irq_msk_reset_prev_completed    = 1,  /* [1] */
  BFW_NIOL_iol_sio_irq_msk_reset_next_empty        = 1,  /* [2] */
  BFW_NIOL_iol_sio_irq_msk_reset_next_underrun_evt = 1,  /* [3] */
  BFW_NIOL_iol_sio_irq_msk_reset_ac_err_evt        = 1,  /* [4] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio0_err_evt      = 1,  /* [5] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio1_err_evt      = 1,  /* [6] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio2_err_evt      = 1,  /* [7] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio3_err_evt      = 1,  /* [8] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio4_err_evt      = 1,  /* [9] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio5_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio6_err_evt      = 1,  /* [11] */
  BFW_NIOL_iol_sio_irq_msk_reset_tio7_err_evt      = 1,  /* [12] */
  BFW_NIOL_iol_sio_irq_msk_reset_reserved1         = 19  /* [31:13] */
};

typedef struct NIOL_IOL_SIO_IRQ_MSK_RESET_BIT_Ttag {
  unsigned int pulse_gen_idle    : BFW_NIOL_iol_sio_irq_msk_reset_pulse_gen_idle;    /*          */
  unsigned int prev_completed    : BFW_NIOL_iol_sio_irq_msk_reset_prev_completed;    /*          */
  unsigned int next_empty        : BFW_NIOL_iol_sio_irq_msk_reset_next_empty;        /*          */
  unsigned int next_underrun_evt : BFW_NIOL_iol_sio_irq_msk_reset_next_underrun_evt; /*          */
  unsigned int ac_err_evt        : BFW_NIOL_iol_sio_irq_msk_reset_ac_err_evt;        /*          */
  unsigned int tio0_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio0_err_evt;      /*          */
  unsigned int tio1_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio1_err_evt;      /*          */
  unsigned int tio2_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio2_err_evt;      /*          */
  unsigned int tio3_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio3_err_evt;      /*          */
  unsigned int tio4_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio4_err_evt;      /*          */
  unsigned int tio5_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio5_err_evt;      /*          */
  unsigned int tio6_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio6_err_evt;      /*          */
  unsigned int tio7_err_evt      : BFW_NIOL_iol_sio_irq_msk_reset_tio7_err_evt;      /*          */
  unsigned int reserved1         : BFW_NIOL_iol_sio_irq_msk_reset_reserved1;         /* reserved */
} NIOL_IOL_SIO_IRQ_MSK_RESET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_SIO_IRQ_MSK_RESET_BIT_T bf;
} NIOL_IOL_SIO_IRQ_MSK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_sio_irq_no */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_sio_irq_no     0x00000074U
#define Adr_NIOL_iol_sio_iol_sio_irq_no 0x000008F4U
#define Adr_NIOL_iol_sio_irq_no         0x000008F4U

#define MSK_NIOL_iol_sio_irq_no_val 0x0000000fU
#define SRT_NIOL_iol_sio_irq_no_val 0

/* all used bits of 'NIOL_iol_sio_irq_no': */
#define MSK_USED_BITS_NIOL_iol_sio_irq_no 0x0000000fU

enum {
  BFW_NIOL_iol_sio_irq_no_val       = 4,  /* [3:0] */
  BFW_NIOL_iol_sio_irq_no_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_IOL_SIO_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_sio_irq_no_val;       /* Number of the non-masked pending IRQ with the highest priority (=lowest bit position). When no non-masked IRQ is pending the number of the highest IRQ plus one is returned. */
  unsigned int reserved1 : BFW_NIOL_iol_sio_irq_no_reserved1; /* reserved                                                                                                                                                                     */
} NIOL_IOL_SIO_IRQ_NO_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_IOL_SIO_IRQ_NO_BIT_T bf;
} NIOL_IOL_SIO_IRQ_NO_T;


/* ===================================================================== */

/* Area of sync */

/* ===================================================================== */

#define Addr_NIOL_sync 0x00000900U

/* --------------------------------------------------------------------- */
/* Register sync_cfg */
/* => Configuration Registers */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_cfg  0x00000000U
#define Adr_NIOL_sync_sync_cfg 0x00000900U
#define Adr_NIOL_sync_cfg      0x00000900U
#define DFLT_VAL_NIOL_sync_cfg 0x00000000U

#define MSK_NIOL_sync_cfg_en         0x00000001U
#define SRT_NIOL_sync_cfg_en         0
#define DFLT_VAL_NIOL_sync_cfg_en    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cfg_en 0x00000000U

/* all used bits of 'NIOL_sync_cfg': */
#define MSK_USED_BITS_NIOL_sync_cfg 0x00000001U

enum {
  BFW_NIOL_sync_cfg_en        = 1,  /* [0] */
  BFW_NIOL_sync_cfg_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_SYNC_CFG_BIT_Ttag {
  unsigned int en        : BFW_NIOL_sync_cfg_en;        /* 0: TIMEBASE is not incremented */
  unsigned int reserved1 : BFW_NIOL_sync_cfg_reserved1; /* reserved                       */
} NIOL_SYNC_CFG_BIT_T;

typedef union {
  uint32_t            val;
  NIOL_SYNC_CFG_BIT_T bf;
} NIOL_SYNC_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_timebase_modulus */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_timebase_modulus  0x00000004U
#define Adr_NIOL_sync_sync_timebase_modulus 0x00000904U
#define Adr_NIOL_sync_timebase_modulus      0x00000904U
#define DFLT_VAL_NIOL_sync_timebase_modulus 0x00000000U

#define MSK_NIOL_sync_timebase_modulus_val         0x0000ffffU
#define SRT_NIOL_sync_timebase_modulus_val         0
#define DFLT_VAL_NIOL_sync_timebase_modulus_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_timebase_modulus_val 0x00000000U

/* all used bits of 'NIOL_sync_timebase_modulus': */
#define MSK_USED_BITS_NIOL_sync_timebase_modulus 0x0000ffffU

enum {
  BFW_NIOL_sync_timebase_modulus_val       = 16, /* [15:0] */
  BFW_NIOL_sync_timebase_modulus_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_TIMEBASE_MODULUS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_timebase_modulus_val;       /* see TIMEBASE */
  unsigned int reserved1 : BFW_NIOL_sync_timebase_modulus_reserved1; /* reserved     */
} NIOL_SYNC_TIMEBASE_MODULUS_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_SYNC_TIMEBASE_MODULUS_BIT_T bf;
} NIOL_SYNC_TIMEBASE_MODULUS_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_0_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_0_rld  0x00000008U
#define Adr_NIOL_sync_sync_sub_phase_0_rld 0x00000908U
#define Adr_NIOL_sync_sub_phase_0_rld      0x00000908U
#define DFLT_VAL_NIOL_sync_sub_phase_0_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_0_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_0_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_0_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_0_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_0_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_0_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_0_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_0_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_0_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_0_rld_val;       /* see SUB_PHASE. Reload value for sub phase 0 */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_0_rld_reserved1; /* reserved                                    */
} NIOL_SYNC_SUB_PHASE_0_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_0_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_0_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_1_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_1_rld  0x0000000CU
#define Adr_NIOL_sync_sync_sub_phase_1_rld 0x0000090CU
#define Adr_NIOL_sync_sub_phase_1_rld      0x0000090CU
#define DFLT_VAL_NIOL_sync_sub_phase_1_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_1_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_1_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_1_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_1_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_1_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_1_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_1_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_1_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_1_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_1_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_1_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_1_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_1_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_1_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_2_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_2_rld  0x00000010U
#define Adr_NIOL_sync_sync_sub_phase_2_rld 0x00000910U
#define Adr_NIOL_sync_sub_phase_2_rld      0x00000910U
#define DFLT_VAL_NIOL_sync_sub_phase_2_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_2_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_2_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_2_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_2_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_2_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_2_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_2_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_2_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_2_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_2_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_2_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_2_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_2_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_2_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_3_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_3_rld  0x00000014U
#define Adr_NIOL_sync_sync_sub_phase_3_rld 0x00000914U
#define Adr_NIOL_sync_sub_phase_3_rld      0x00000914U
#define DFLT_VAL_NIOL_sync_sub_phase_3_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_3_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_3_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_3_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_3_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_3_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_3_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_3_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_3_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_3_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_3_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_3_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_3_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_3_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_3_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_4_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_4_rld  0x00000018U
#define Adr_NIOL_sync_sync_sub_phase_4_rld 0x00000918U
#define Adr_NIOL_sync_sub_phase_4_rld      0x00000918U
#define DFLT_VAL_NIOL_sync_sub_phase_4_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_4_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_4_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_4_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_4_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_4_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_4_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_4_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_4_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_4_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_4_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_4_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_4_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_4_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_4_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_5_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_5_rld  0x0000001CU
#define Adr_NIOL_sync_sync_sub_phase_5_rld 0x0000091CU
#define Adr_NIOL_sync_sub_phase_5_rld      0x0000091CU
#define DFLT_VAL_NIOL_sync_sub_phase_5_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_5_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_5_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_5_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_5_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_5_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_5_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_5_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_5_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_5_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_5_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_5_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_5_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_5_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_5_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_6_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_6_rld  0x00000020U
#define Adr_NIOL_sync_sync_sub_phase_6_rld 0x00000920U
#define Adr_NIOL_sync_sub_phase_6_rld      0x00000920U
#define DFLT_VAL_NIOL_sync_sub_phase_6_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_6_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_6_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_6_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_6_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_6_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_6_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_6_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_6_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_6_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_6_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_6_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_6_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_6_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_6_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_7_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_7_rld  0x00000024U
#define Adr_NIOL_sync_sync_sub_phase_7_rld 0x00000924U
#define Adr_NIOL_sync_sub_phase_7_rld      0x00000924U
#define DFLT_VAL_NIOL_sync_sub_phase_7_rld 0x00000000U

#define MSK_NIOL_sync_sub_phase_7_rld_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_7_rld_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_7_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_7_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_7_rld': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_7_rld 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_7_rld_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_7_rld_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_7_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_7_rld_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_7_rld_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_7_RLD_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_SUB_PHASE_7_RLD_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_7_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_cmd_do_sync */
/* => Command Register */
/*     */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_cmd_do_sync  0x00000028U
#define Adr_NIOL_sync_sync_cmd_do_sync 0x00000928U
#define Adr_NIOL_sync_cmd_do_sync      0x00000928U
#define DFLT_VAL_NIOL_sync_cmd_do_sync 0x00000000U

#define MSK_NIOL_sync_cmd_do_sync_read_sync         0x00000001U
#define SRT_NIOL_sync_cmd_do_sync_read_sync         0
#define DFLT_VAL_NIOL_sync_cmd_do_sync_read_sync    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_read_sync 0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync0             0x00000002U
#define SRT_NIOL_sync_cmd_do_sync_sync0             1
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync0        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync0     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync1             0x00000004U
#define SRT_NIOL_sync_cmd_do_sync_sync1             2
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync1        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync1     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync2             0x00000008U
#define SRT_NIOL_sync_cmd_do_sync_sync2             3
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync2        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync2     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync3             0x00000010U
#define SRT_NIOL_sync_cmd_do_sync_sync3             4
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync3        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync3     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync4             0x00000020U
#define SRT_NIOL_sync_cmd_do_sync_sync4             5
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync4        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync4     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync5             0x00000040U
#define SRT_NIOL_sync_cmd_do_sync_sync5             6
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync5        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync5     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync6             0x00000080U
#define SRT_NIOL_sync_cmd_do_sync_sync6             7
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync6        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync6     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync7             0x00000100U
#define SRT_NIOL_sync_cmd_do_sync_sync7             8
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync7        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync7     0x00000000U
#define MSK_NIOL_sync_cmd_do_sync_sync8             0x00000200U
#define SRT_NIOL_sync_cmd_do_sync_sync8             9
#define DFLT_VAL_NIOL_sync_cmd_do_sync_sync8        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_cmd_do_sync_sync8     0x00000000U

/* all used bits of 'NIOL_sync_cmd_do_sync': */
#define MSK_USED_BITS_NIOL_sync_cmd_do_sync 0x000003ffU

enum {
  BFW_NIOL_sync_cmd_do_sync_read_sync = 1,  /* [0] */
  BFW_NIOL_sync_cmd_do_sync_sync0     = 1,  /* [1] */
  BFW_NIOL_sync_cmd_do_sync_sync1     = 1,  /* [2] */
  BFW_NIOL_sync_cmd_do_sync_sync2     = 1,  /* [3] */
  BFW_NIOL_sync_cmd_do_sync_sync3     = 1,  /* [4] */
  BFW_NIOL_sync_cmd_do_sync_sync4     = 1,  /* [5] */
  BFW_NIOL_sync_cmd_do_sync_sync5     = 1,  /* [6] */
  BFW_NIOL_sync_cmd_do_sync_sync6     = 1,  /* [7] */
  BFW_NIOL_sync_cmd_do_sync_sync7     = 1,  /* [8] */
  BFW_NIOL_sync_cmd_do_sync_sync8     = 1,  /* [9] */
  BFW_NIOL_sync_cmd_do_sync_reserved1 = 22  /* [31:10] */
};

typedef struct NIOL_SYNC_CMD_DO_SYNC_BIT_Ttag {
  unsigned int read_sync : BFW_NIOL_sync_cmd_do_sync_read_sync; /* 1: triggers a read sync                                                                  */
  unsigned int sync0     : BFW_NIOL_sync_cmd_do_sync_sync0;     /* 1: triggers sync0 - also used internally by sync module as write sync                    */
  unsigned int sync1     : BFW_NIOL_sync_cmd_do_sync_sync1;     /* 1: triggers sync1 - also used internally by sync module to generates a pulse on sync_out */
  unsigned int sync2     : BFW_NIOL_sync_cmd_do_sync_sync2;     /* 1: triggers sync2                                                                        */
  unsigned int sync3     : BFW_NIOL_sync_cmd_do_sync_sync3;     /*                                                                                          */
  unsigned int sync4     : BFW_NIOL_sync_cmd_do_sync_sync4;     /*                                                                                          */
  unsigned int sync5     : BFW_NIOL_sync_cmd_do_sync_sync5;     /*                                                                                          */
  unsigned int sync6     : BFW_NIOL_sync_cmd_do_sync_sync6;     /*                                                                                          */
  unsigned int sync7     : BFW_NIOL_sync_cmd_do_sync_sync7;     /*                                                                                          */
  unsigned int sync8     : BFW_NIOL_sync_cmd_do_sync_sync8;     /*                                                                                          */
  unsigned int reserved1 : BFW_NIOL_sync_cmd_do_sync_reserved1; /* reserved                                                                                 */
} NIOL_SYNC_CMD_DO_SYNC_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_CMD_DO_SYNC_BIT_T bf;
} NIOL_SYNC_CMD_DO_SYNC_T;

/* --------------------------------------------------------------------- */
/* Register sync_write_sync_ctrl */
/* => Write Sync */
/*    When a write sync occurs all write sync (*_WS) registers which have their corresponding WRITE_SYNC_CTRL.*written flags set are transfered to their corresponding state registers. */
/*    The write sync is connected to sync generator sync[0]. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_write_sync_ctrl  0x0000002CU
#define Adr_NIOL_sync_sync_write_sync_ctrl 0x0000092CU
#define Adr_NIOL_sync_write_sync_ctrl      0x0000092CU
#define DFLT_VAL_NIOL_sync_write_sync_ctrl 0x00000000U

#define MSK_NIOL_sync_write_sync_ctrl_timebase_ws_written               0x00000001U
#define SRT_NIOL_sync_write_sync_ctrl_timebase_ws_written               0
#define DFLT_VAL_NIOL_sync_write_sync_ctrl_timebase_ws_written          0x00000000U
#define DFLT_BF_VAL_NIOL_sync_write_sync_ctrl_timebase_ws_written       0x00000000U
#define MSK_NIOL_sync_write_sync_ctrl_timebase_inc_ws_written           0x00000002U
#define SRT_NIOL_sync_write_sync_ctrl_timebase_inc_ws_written           1
#define DFLT_VAL_NIOL_sync_write_sync_ctrl_timebase_inc_ws_written      0x00000000U
#define DFLT_BF_VAL_NIOL_sync_write_sync_ctrl_timebase_inc_ws_written   0x00000000U
#define MSK_NIOL_sync_write_sync_ctrl_base_phase_rld_ws_written         0x00000004U
#define SRT_NIOL_sync_write_sync_ctrl_base_phase_rld_ws_written         2
#define DFLT_VAL_NIOL_sync_write_sync_ctrl_base_phase_rld_ws_written    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_write_sync_ctrl_base_phase_rld_ws_written 0x00000000U
#define MSK_NIOL_sync_write_sync_ctrl_base_phase_ws_written             0x00000008U
#define SRT_NIOL_sync_write_sync_ctrl_base_phase_ws_written             3
#define DFLT_VAL_NIOL_sync_write_sync_ctrl_base_phase_ws_written        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_write_sync_ctrl_base_phase_ws_written     0x00000000U
#define MSK_NIOL_sync_write_sync_ctrl_sub_phase_ws_written              0x00000010U
#define SRT_NIOL_sync_write_sync_ctrl_sub_phase_ws_written              4
#define DFLT_VAL_NIOL_sync_write_sync_ctrl_sub_phase_ws_written         0x00000000U
#define DFLT_BF_VAL_NIOL_sync_write_sync_ctrl_sub_phase_ws_written      0x00000000U

/* all used bits of 'NIOL_sync_write_sync_ctrl': */
#define MSK_USED_BITS_NIOL_sync_write_sync_ctrl 0x0000001fU

enum {
  BFW_NIOL_sync_write_sync_ctrl_timebase_ws_written       = 1,  /* [0] */
  BFW_NIOL_sync_write_sync_ctrl_timebase_inc_ws_written   = 1,  /* [1] */
  BFW_NIOL_sync_write_sync_ctrl_base_phase_rld_ws_written = 1,  /* [2] */
  BFW_NIOL_sync_write_sync_ctrl_base_phase_ws_written     = 1,  /* [3] */
  BFW_NIOL_sync_write_sync_ctrl_sub_phase_ws_written      = 1,  /* [4] */
  BFW_NIOL_sync_write_sync_ctrl_reserved1                 = 27  /* [31:5] */
};

typedef struct NIOL_SYNC_WRITE_SYNC_CTRL_BIT_Ttag {
  unsigned int timebase_ws_written       : BFW_NIOL_sync_write_sync_ctrl_timebase_ws_written;       /* 1 : TIMEBASE_WS will be transfered to TIMEBASE during the next write_sync pulse. */
                                                                                                    /* Set automatically when the CPU writes to TIMEBASE_WS.                            */
                                                                                                    /* Cleared with every write_sync.                                                   */
  unsigned int timebase_inc_ws_written   : BFW_NIOL_sync_write_sync_ctrl_timebase_inc_ws_written;   /*                                                                                  */
  unsigned int base_phase_rld_ws_written : BFW_NIOL_sync_write_sync_ctrl_base_phase_rld_ws_written; /*                                                                                  */
  unsigned int base_phase_ws_written     : BFW_NIOL_sync_write_sync_ctrl_base_phase_ws_written;     /*                                                                                  */
  unsigned int sub_phase_ws_written      : BFW_NIOL_sync_write_sync_ctrl_sub_phase_ws_written;      /*                                                                                  */
  unsigned int reserved1                 : BFW_NIOL_sync_write_sync_ctrl_reserved1;                 /* reserved                                                                         */
} NIOL_SYNC_WRITE_SYNC_CTRL_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_WRITE_SYNC_CTRL_BIT_T bf;
} NIOL_SYNC_WRITE_SYNC_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register sync_timebase_ws */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_timebase_ws  0x00000030U
#define Adr_NIOL_sync_sync_timebase_ws 0x00000930U
#define Adr_NIOL_sync_timebase_ws      0x00000930U
#define DFLT_VAL_NIOL_sync_timebase_ws 0x00000000U

#define MSK_NIOL_sync_timebase_ws_val         0x0000ffffU
#define SRT_NIOL_sync_timebase_ws_val         0
#define DFLT_VAL_NIOL_sync_timebase_ws_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_timebase_ws_val 0x00000000U

/* all used bits of 'NIOL_sync_timebase_ws': */
#define MSK_USED_BITS_NIOL_sync_timebase_ws 0x0000ffffU

enum {
  BFW_NIOL_sync_timebase_ws_val       = 16, /* [15:0] */
  BFW_NIOL_sync_timebase_ws_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_TIMEBASE_WS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_timebase_ws_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_timebase_ws_reserved1; /* reserved */
} NIOL_SYNC_TIMEBASE_WS_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_TIMEBASE_WS_BIT_T bf;
} NIOL_SYNC_TIMEBASE_WS_T;

/* --------------------------------------------------------------------- */
/* Register sync_timebase_inc_ws */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_timebase_inc_ws  0x00000034U
#define Adr_NIOL_sync_sync_timebase_inc_ws 0x00000934U
#define Adr_NIOL_sync_timebase_inc_ws      0x00000934U
#define DFLT_VAL_NIOL_sync_timebase_inc_ws 0x00000000U

#define MSK_NIOL_sync_timebase_inc_ws_val         0x0000ffffU
#define SRT_NIOL_sync_timebase_inc_ws_val         0
#define DFLT_VAL_NIOL_sync_timebase_inc_ws_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_timebase_inc_ws_val 0x00000000U

/* all used bits of 'NIOL_sync_timebase_inc_ws': */
#define MSK_USED_BITS_NIOL_sync_timebase_inc_ws 0x0000ffffU

enum {
  BFW_NIOL_sync_timebase_inc_ws_val       = 16, /* [15:0] */
  BFW_NIOL_sync_timebase_inc_ws_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_TIMEBASE_INC_WS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_timebase_inc_ws_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_timebase_inc_ws_reserved1; /* reserved */
} NIOL_SYNC_TIMEBASE_INC_WS_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_SYNC_TIMEBASE_INC_WS_BIT_T bf;
} NIOL_SYNC_TIMEBASE_INC_WS_T;

/* --------------------------------------------------------------------- */
/* Register sync_base_phase_rld_ws */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_base_phase_rld_ws  0x00000038U
#define Adr_NIOL_sync_sync_base_phase_rld_ws 0x00000938U
#define Adr_NIOL_sync_base_phase_rld_ws      0x00000938U
#define DFLT_VAL_NIOL_sync_base_phase_rld_ws 0x00000000U

#define MSK_NIOL_sync_base_phase_rld_ws_val         0x0000ffffU
#define SRT_NIOL_sync_base_phase_rld_ws_val         0
#define DFLT_VAL_NIOL_sync_base_phase_rld_ws_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_base_phase_rld_ws_val 0x00000000U

/* all used bits of 'NIOL_sync_base_phase_rld_ws': */
#define MSK_USED_BITS_NIOL_sync_base_phase_rld_ws 0x0000ffffU

enum {
  BFW_NIOL_sync_base_phase_rld_ws_val       = 16, /* [15:0] */
  BFW_NIOL_sync_base_phase_rld_ws_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_BASE_PHASE_RLD_WS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_base_phase_rld_ws_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_base_phase_rld_ws_reserved1; /* reserved */
} NIOL_SYNC_BASE_PHASE_RLD_WS_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_SYNC_BASE_PHASE_RLD_WS_BIT_T bf;
} NIOL_SYNC_BASE_PHASE_RLD_WS_T;

/* --------------------------------------------------------------------- */
/* Register sync_base_phase_ws */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_base_phase_ws  0x0000003CU
#define Adr_NIOL_sync_sync_base_phase_ws 0x0000093CU
#define Adr_NIOL_sync_base_phase_ws      0x0000093CU
#define DFLT_VAL_NIOL_sync_base_phase_ws 0x00000000U

#define MSK_NIOL_sync_base_phase_ws_val         0x0000ffffU
#define SRT_NIOL_sync_base_phase_ws_val         0
#define DFLT_VAL_NIOL_sync_base_phase_ws_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_base_phase_ws_val 0x00000000U

/* all used bits of 'NIOL_sync_base_phase_ws': */
#define MSK_USED_BITS_NIOL_sync_base_phase_ws 0x0000ffffU

enum {
  BFW_NIOL_sync_base_phase_ws_val       = 16, /* [15:0] */
  BFW_NIOL_sync_base_phase_ws_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_BASE_PHASE_WS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_base_phase_ws_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_base_phase_ws_reserved1; /* reserved */
} NIOL_SYNC_BASE_PHASE_WS_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SYNC_BASE_PHASE_WS_BIT_T bf;
} NIOL_SYNC_BASE_PHASE_WS_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_ws */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_ws  0x00000040U
#define Adr_NIOL_sync_sync_sub_phase_ws 0x00000940U
#define Adr_NIOL_sync_sub_phase_ws      0x00000940U
#define DFLT_VAL_NIOL_sync_sub_phase_ws 0x00000000U

#define MSK_NIOL_sync_sub_phase_ws_val                   0x000007ffU
#define SRT_NIOL_sync_sub_phase_ws_val                   0
#define DFLT_VAL_NIOL_sync_sub_phase_ws_val              0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_ws_val           0x00000000U
#define MSK_NIOL_sync_sub_phase_ws_sub_phase_sel         0x00003800U
#define SRT_NIOL_sync_sub_phase_ws_sub_phase_sel         11
#define DFLT_VAL_NIOL_sync_sub_phase_ws_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_ws_sub_phase_sel 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_ws': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_ws 0x00003fffU

enum {
  BFW_NIOL_sync_sub_phase_ws_val           = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_ws_sub_phase_sel = 3,  /* [13:11] */
  BFW_NIOL_sync_sub_phase_ws_reserved1     = 18  /* [31:14] */
};

typedef struct NIOL_SYNC_SUB_PHASE_WS_BIT_Ttag {
  unsigned int val           : BFW_NIOL_sync_sub_phase_ws_val;           /*                                         */
  unsigned int sub_phase_sel : BFW_NIOL_sync_sub_phase_ws_sub_phase_sel; /* 0..7: select SUB_PHASE_? for write sync */
  unsigned int reserved1     : BFW_NIOL_sync_sub_phase_ws_reserved1;     /* reserved                                */
} NIOL_SYNC_SUB_PHASE_WS_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_SYNC_SUB_PHASE_WS_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_WS_T;

/* --------------------------------------------------------------------- */
/* Register sync_timebase */
/* => State */
/*    The registers TIMEBASE, TIMEBASE_INC, BASE_PHASE* and SUB_PHASE_* represent the dynamic state of the synchronization unit. */
/*    Directly writing to these registers is only recommended during startup (CFG.en=0). During operation they shall be set with at precisely defined time using the *_WS registers and a write sync. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_timebase  0x00000044U
#define Adr_NIOL_sync_sync_timebase 0x00000944U
#define Adr_NIOL_sync_timebase      0x00000944U
#define DFLT_VAL_NIOL_sync_timebase 0x00000000U

#define MSK_NIOL_sync_timebase_val         0x0000ffffU
#define SRT_NIOL_sync_timebase_val         0
#define DFLT_VAL_NIOL_sync_timebase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_timebase_val 0x00000000U

/* all used bits of 'NIOL_sync_timebase': */
#define MSK_USED_BITS_NIOL_sync_timebase 0x0000ffffU

enum {
  BFW_NIOL_sync_timebase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_timebase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_TIMEBASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_timebase_val;       /* when CFG.en=1                                                                 */
                                                             /* TIMEBASE <= (TIMEBASE + TIMEBASE_INC) % TIMEBASE_MODULUS in every clock cycle */
  unsigned int reserved1 : BFW_NIOL_sync_timebase_reserved1; /* reserved                                                                      */
} NIOL_SYNC_TIMEBASE_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_SYNC_TIMEBASE_BIT_T bf;
} NIOL_SYNC_TIMEBASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_timebase_inc */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_timebase_inc  0x00000048U
#define Adr_NIOL_sync_sync_timebase_inc 0x00000948U
#define Adr_NIOL_sync_timebase_inc      0x00000948U
#define DFLT_VAL_NIOL_sync_timebase_inc 0x00000000U

#define MSK_NIOL_sync_timebase_inc_val         0x0000ffffU
#define SRT_NIOL_sync_timebase_inc_val         0
#define DFLT_VAL_NIOL_sync_timebase_inc_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_timebase_inc_val 0x00000000U

/* all used bits of 'NIOL_sync_timebase_inc': */
#define MSK_USED_BITS_NIOL_sync_timebase_inc 0x0000ffffU

enum {
  BFW_NIOL_sync_timebase_inc_val       = 16, /* [15:0] */
  BFW_NIOL_sync_timebase_inc_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_TIMEBASE_INC_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_timebase_inc_val;       /* see TIMEBASE */
  unsigned int reserved1 : BFW_NIOL_sync_timebase_inc_reserved1; /* reserved     */
} NIOL_SYNC_TIMEBASE_INC_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_SYNC_TIMEBASE_INC_BIT_T bf;
} NIOL_SYNC_TIMEBASE_INC_T;

/* --------------------------------------------------------------------- */
/* Register sync_base_phase_rld */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_base_phase_rld  0x0000004CU
#define Adr_NIOL_sync_sync_base_phase_rld 0x0000094CU
#define Adr_NIOL_sync_base_phase_rld      0x0000094CU
#define DFLT_VAL_NIOL_sync_base_phase_rld 0x00000000U

#define MSK_NIOL_sync_base_phase_rld_val         0x0000ffffU
#define SRT_NIOL_sync_base_phase_rld_val         0
#define DFLT_VAL_NIOL_sync_base_phase_rld_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_base_phase_rld_val 0x00000000U

/* all used bits of 'NIOL_sync_base_phase_rld': */
#define MSK_USED_BITS_NIOL_sync_base_phase_rld 0x0000ffffU

enum {
  BFW_NIOL_sync_base_phase_rld_val       = 16, /* [15:0] */
  BFW_NIOL_sync_base_phase_rld_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_BASE_PHASE_RLD_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_base_phase_rld_val;       /* see BASE_PHASE. Reload value for BASE_PHASE. */
  unsigned int reserved1 : BFW_NIOL_sync_base_phase_rld_reserved1; /* reserved                                     */
} NIOL_SYNC_BASE_PHASE_RLD_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_BASE_PHASE_RLD_BIT_T bf;
} NIOL_SYNC_BASE_PHASE_RLD_T;

/* --------------------------------------------------------------------- */
/* Register sync_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_base_phase  0x00000050U
#define Adr_NIOL_sync_sync_base_phase 0x00000950U
#define Adr_NIOL_sync_base_phase      0x00000950U
#define DFLT_VAL_NIOL_sync_base_phase 0x00000000U

#define MSK_NIOL_sync_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_base_phase_val         0
#define DFLT_VAL_NIOL_sync_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_base_phase': */
#define MSK_USED_BITS_NIOL_sync_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_base_phase_val;       /* Decremented by one simultaneously every time TIMEBASE wraps around TIMEBASE_MODULUS. Upon reaching zero BASE_PHASE wraps to BASE_PHASE_RLD and asserts base_phase_rld_evt. */
                                                               /* when TIMEBASE overflows (simultaneously)                                                                                                                                   */
                                                               /* BASE_PHASE = (BASE_PHASE==0) ? BASE_PHASE_RLD : (BASE_PHASE - 1)                                                                                                           */
  unsigned int reserved1 : BFW_NIOL_sync_base_phase_reserved1; /* reserved                                                                                                                                                                   */
} NIOL_SYNC_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SYNC_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_0 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_0  0x00000054U
#define Adr_NIOL_sync_sync_sub_phase_0 0x00000954U
#define Adr_NIOL_sync_sub_phase_0      0x00000954U
#define DFLT_VAL_NIOL_sync_sub_phase_0 0x00000000U

#define MSK_NIOL_sync_sub_phase_0_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_0_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_0_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_0': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_0 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_0_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_0_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_0_val;       /* Decremented by one simultaneously every time BASE_PHASE wraps to BASE_PHASE_RLD. Upon reaching zero SUB_PHASE_? wraps to SUB_PHASE?_RLD. */
                                                                /* when BASE_PHASE underflows (simultaneously)                                                                                              */
                                                                /* SUB_PHASE_?= (SUB_PHASE_?==0) ? SUB_PHASE_?_RLD : (SUB_PHASE_?-1)                                                                        */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_0_reserved1; /* reserved                                                                                                                                 */
} NIOL_SYNC_SUB_PHASE_0_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_0_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_0_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_1  0x00000058U
#define Adr_NIOL_sync_sync_sub_phase_1 0x00000958U
#define Adr_NIOL_sync_sub_phase_1      0x00000958U
#define DFLT_VAL_NIOL_sync_sub_phase_1 0x00000000U

#define MSK_NIOL_sync_sub_phase_1_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_1_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_1_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_1': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_1 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_1_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_1_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_1_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_1_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_1_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_1_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_1_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_2  0x0000005CU
#define Adr_NIOL_sync_sync_sub_phase_2 0x0000095CU
#define Adr_NIOL_sync_sub_phase_2      0x0000095CU
#define DFLT_VAL_NIOL_sync_sub_phase_2 0x00000000U

#define MSK_NIOL_sync_sub_phase_2_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_2_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_2_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_2': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_2 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_2_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_2_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_2_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_2_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_2_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_2_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_2_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_3  0x00000060U
#define Adr_NIOL_sync_sync_sub_phase_3 0x00000960U
#define Adr_NIOL_sync_sub_phase_3      0x00000960U
#define DFLT_VAL_NIOL_sync_sub_phase_3 0x00000000U

#define MSK_NIOL_sync_sub_phase_3_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_3_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_3_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_3_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_3': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_3 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_3_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_3_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_3_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_3_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_3_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_3_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_3_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_3_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_4 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_4  0x00000064U
#define Adr_NIOL_sync_sync_sub_phase_4 0x00000964U
#define Adr_NIOL_sync_sub_phase_4      0x00000964U
#define DFLT_VAL_NIOL_sync_sub_phase_4 0x00000000U

#define MSK_NIOL_sync_sub_phase_4_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_4_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_4_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_4_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_4': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_4 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_4_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_4_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_4_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_4_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_4_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_4_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_4_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_4_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_5 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_5  0x00000068U
#define Adr_NIOL_sync_sync_sub_phase_5 0x00000968U
#define Adr_NIOL_sync_sub_phase_5      0x00000968U
#define DFLT_VAL_NIOL_sync_sub_phase_5 0x00000000U

#define MSK_NIOL_sync_sub_phase_5_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_5_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_5_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_5_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_5': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_5 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_5_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_5_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_5_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_5_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_5_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_5_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_5_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_5_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_6 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_6  0x0000006CU
#define Adr_NIOL_sync_sync_sub_phase_6 0x0000096CU
#define Adr_NIOL_sync_sub_phase_6      0x0000096CU
#define DFLT_VAL_NIOL_sync_sub_phase_6 0x00000000U

#define MSK_NIOL_sync_sub_phase_6_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_6_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_6_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_6_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_6': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_6 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_6_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_6_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_6_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_6_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_6_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_6_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_6_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_6_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_7 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_7  0x00000070U
#define Adr_NIOL_sync_sync_sub_phase_7 0x00000970U
#define Adr_NIOL_sync_sub_phase_7      0x00000970U
#define DFLT_VAL_NIOL_sync_sub_phase_7 0x00000000U

#define MSK_NIOL_sync_sub_phase_7_val         0x000007ffU
#define SRT_NIOL_sync_sub_phase_7_val         0
#define DFLT_VAL_NIOL_sync_sub_phase_7_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sub_phase_7_val 0x00000000U

/* all used bits of 'NIOL_sync_sub_phase_7': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_7 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_7_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_7_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_7_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_7_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_7_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_7_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_SUB_PHASE_7_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_7_T;

/* --------------------------------------------------------------------- */
/* Register sync_read_sync_cfg */
/* => Read Sync */
/*    The read sync registers (*_RS) capture the state registers of the sync unit when an sync_in or sync_in_int sync pulse occurs. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_read_sync_cfg  0x00000074U
#define Adr_NIOL_sync_sync_read_sync_cfg 0x00000974U
#define Adr_NIOL_sync_read_sync_cfg      0x00000974U
#define DFLT_VAL_NIOL_sync_read_sync_cfg 0x00000000U

#define MSK_NIOL_sync_read_sync_cfg_src                        0x00000007U
#define SRT_NIOL_sync_read_sync_cfg_src                        0
#define DFLT_VAL_NIOL_sync_read_sync_cfg_src                   0x00000000U
#define DFLT_BF_VAL_NIOL_sync_read_sync_cfg_src                0x00000000U
#define MSK_NIOL_sync_read_sync_cfg_sync_in_edge               0x00000018U
#define SRT_NIOL_sync_read_sync_cfg_sync_in_edge               3
#define DFLT_VAL_NIOL_sync_read_sync_cfg_sync_in_edge          0x00000000U
#define DFLT_BF_VAL_NIOL_sync_read_sync_cfg_sync_in_edge       0x00000000U
#define MSK_NIOL_sync_read_sync_cfg_sub_phase_sel0             0x000000e0U
#define SRT_NIOL_sync_read_sync_cfg_sub_phase_sel0             5
#define DFLT_VAL_NIOL_sync_read_sync_cfg_sub_phase_sel0        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_read_sync_cfg_sub_phase_sel0     0x00000000U
#define MSK_NIOL_sync_read_sync_cfg_sub_phase_sel1             0x00000700U
#define SRT_NIOL_sync_read_sync_cfg_sub_phase_sel1             8
#define DFLT_VAL_NIOL_sync_read_sync_cfg_sub_phase_sel1        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_read_sync_cfg_sub_phase_sel1     0x00000000U
#define MSK_NIOL_sync_read_sync_cfg_sync_in_ifil_thres         0x0000f800U
#define SRT_NIOL_sync_read_sync_cfg_sync_in_ifil_thres         11
#define DFLT_VAL_NIOL_sync_read_sync_cfg_sync_in_ifil_thres    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_read_sync_cfg_sync_in_ifil_thres 0x00000000U

/* all used bits of 'NIOL_sync_read_sync_cfg': */
#define MSK_USED_BITS_NIOL_sync_read_sync_cfg 0x0000ffffU

enum {
  BFW_NIOL_sync_read_sync_cfg_src                = 3,  /* [2:0] */
  BFW_NIOL_sync_read_sync_cfg_sync_in_edge       = 2,  /* [4:3] */
  BFW_NIOL_sync_read_sync_cfg_sub_phase_sel0     = 3,  /* [7:5] */
  BFW_NIOL_sync_read_sync_cfg_sub_phase_sel1     = 3,  /* [10:8] */
  BFW_NIOL_sync_read_sync_cfg_sync_in_ifil_thres = 5,  /* [15:11] */
  BFW_NIOL_sync_read_sync_cfg_reserved1          = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_READ_SYNC_CFG_BIT_Ttag {
  unsigned int src                : BFW_NIOL_sync_read_sync_cfg_src;                /* 0: no read_sync source selected                                     */
                                                                                    /* 1: sync_in (filtered pin signal from IOMUX)                         */
                                                                                    /* 2: sync_in_int[0] (from HISPI module)                               */
                                                                                    /* 3: sync_in_int[1] (from rx of IOL_Uart A)                           */
                                                                                    /* 4: sync_in_int[2] (from rx of IOL_Uart B)                           */
                                                                                    /* 5: sync_in_int[3] (from rx of IOL_Uart C)                           */
                                                                                    /* 6: sync_in_int[4] (from rx of IOL_Uart D)                           */
  unsigned int sync_in_edge       : BFW_NIOL_sync_read_sync_cfg_sync_in_edge;       /* 0: rising edge of sync_in signal triggers a read sync               */
                                                                                    /* 1: falling edge " "                                                 */
                                                                                    /* 2: both edges " "                                                   */
  unsigned int sub_phase_sel0     : BFW_NIOL_sync_read_sync_cfg_sub_phase_sel0;     /* 0..7: select SUB_PHASE_? for read sync                              */
                                                                                    /* selected SUB_PHASE will be copied to SUB_PHASE_SEL0_RW at read sync */
  unsigned int sub_phase_sel1     : BFW_NIOL_sync_read_sync_cfg_sub_phase_sel1;     /* 0..7: select SUB_PHASE_? for read sync                              */
                                                                                    /* selected SUB_PHASE will be copied to SUB_PHASE_SEL1_RW at read sync */
  unsigned int sync_in_ifil_thres : BFW_NIOL_sync_read_sync_cfg_sync_in_ifil_thres; /* integral filter threshold for the sync_in input.                    */
  unsigned int reserved1          : BFW_NIOL_sync_read_sync_cfg_reserved1;          /* reserved                                                            */
} NIOL_SYNC_READ_SYNC_CFG_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SYNC_READ_SYNC_CFG_BIT_T bf;
} NIOL_SYNC_READ_SYNC_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_timebase_rs */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_timebase_rs  0x00000078U
#define Adr_NIOL_sync_sync_timebase_rs 0x00000978U
#define Adr_NIOL_sync_timebase_rs      0x00000978U

#define MSK_NIOL_sync_timebase_rs_val 0x0000ffffU
#define SRT_NIOL_sync_timebase_rs_val 0

/* all used bits of 'NIOL_sync_timebase_rs': */
#define MSK_USED_BITS_NIOL_sync_timebase_rs 0x0000ffffU

enum {
  BFW_NIOL_sync_timebase_rs_val       = 16, /* [15:0] */
  BFW_NIOL_sync_timebase_rs_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_TIMEBASE_RS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_timebase_rs_val;       /* Captures the corresponding register when a read sync occurs. */
  unsigned int reserved1 : BFW_NIOL_sync_timebase_rs_reserved1; /* reserved                                                     */
} NIOL_SYNC_TIMEBASE_RS_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_TIMEBASE_RS_BIT_T bf;
} NIOL_SYNC_TIMEBASE_RS_T;

/* --------------------------------------------------------------------- */
/* Register sync_base_phase_rs */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_base_phase_rs  0x0000007CU
#define Adr_NIOL_sync_sync_base_phase_rs 0x0000097CU
#define Adr_NIOL_sync_base_phase_rs      0x0000097CU

#define MSK_NIOL_sync_base_phase_rs_val 0x0000ffffU
#define SRT_NIOL_sync_base_phase_rs_val 0

/* all used bits of 'NIOL_sync_base_phase_rs': */
#define MSK_USED_BITS_NIOL_sync_base_phase_rs 0x0000ffffU

enum {
  BFW_NIOL_sync_base_phase_rs_val       = 16, /* [15:0] */
  BFW_NIOL_sync_base_phase_rs_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_BASE_PHASE_RS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_base_phase_rs_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_base_phase_rs_reserved1; /* reserved */
} NIOL_SYNC_BASE_PHASE_RS_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SYNC_BASE_PHASE_RS_BIT_T bf;
} NIOL_SYNC_BASE_PHASE_RS_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_sel0_rs */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_sel0_rs  0x00000080U
#define Adr_NIOL_sync_sync_sub_phase_sel0_rs 0x00000980U
#define Adr_NIOL_sync_sub_phase_sel0_rs      0x00000980U

#define MSK_NIOL_sync_sub_phase_sel0_rs_val 0x000007ffU
#define SRT_NIOL_sync_sub_phase_sel0_rs_val 0

/* all used bits of 'NIOL_sync_sub_phase_sel0_rs': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_sel0_rs 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_sel0_rs_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_sel0_rs_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_SEL0_RS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_sel0_rs_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_sel0_rs_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_SEL0_RS_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_SYNC_SUB_PHASE_SEL0_RS_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_SEL0_RS_T;

/* --------------------------------------------------------------------- */
/* Register sync_sub_phase_sel1_rs */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sub_phase_sel1_rs  0x00000084U
#define Adr_NIOL_sync_sync_sub_phase_sel1_rs 0x00000984U
#define Adr_NIOL_sync_sub_phase_sel1_rs      0x00000984U

#define MSK_NIOL_sync_sub_phase_sel1_rs_val 0x000007ffU
#define SRT_NIOL_sync_sub_phase_sel1_rs_val 0

/* all used bits of 'NIOL_sync_sub_phase_sel1_rs': */
#define MSK_USED_BITS_NIOL_sync_sub_phase_sel1_rs 0x000007ffU

enum {
  BFW_NIOL_sync_sub_phase_sel1_rs_val       = 11, /* [10:0] */
  BFW_NIOL_sync_sub_phase_sel1_rs_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SUB_PHASE_SEL1_RS_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sub_phase_sel1_rs_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sub_phase_sel1_rs_reserved1; /* reserved */
} NIOL_SYNC_SUB_PHASE_SEL1_RS_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_SYNC_SUB_PHASE_SEL1_RS_BIT_T bf;
} NIOL_SYNC_SUB_PHASE_SEL1_RS_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_0_cfg */
/* => Sync signal generator. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_0_cfg  0x00000088U
#define Adr_NIOL_sync_sync_sync_gen_0_cfg 0x00000988U
#define Adr_NIOL_sync_sync_gen_0_cfg      0x00000988U
#define DFLT_VAL_NIOL_sync_sync_gen_0_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_0_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_0_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_0_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_0_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_0_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_0_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_0_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_0_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_0_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_0_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_0_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_0_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_0_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_0_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_0_cfg_sub_phase_sel; /* 0: no sync pulse generated by sync generator.                               */
                                                                           /* sync pulse generated when TIMEBASE advances AND                             */
                                                                           /* 1: only SYNC_GEN?_BASE_PHASE matches BASE_PHASE                             */
                                                                           /* 2: SYNC_GEN?_BASE_PHASE matches BASE_PHASE AND sub_phase matches SUB_PHASE0 */
                                                                           /* 3: " " SUB_PHASE1                                                           */
                                                                           /* ...                                                                         */
                                                                           /* 9: " " SUB_PHASE7                                                           */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_0_cfg_sub_phase;     /*                                                                             */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_0_cfg_reserved1;     /* reserved                                                                    */
} NIOL_SYNC_SYNC_GEN_0_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_0_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_0_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_0_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_0_base_phase  0x0000008CU
#define Adr_NIOL_sync_sync_sync_gen_0_base_phase 0x0000098CU
#define Adr_NIOL_sync_sync_gen_0_base_phase      0x0000098CU
#define DFLT_VAL_NIOL_sync_sync_gen_0_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_0_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_0_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_0_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_0_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_0_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_0_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_0_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_0_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_0_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_0_base_phase_val;       /* see SYNC_GEN_0_CFG */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_0_base_phase_reserved1; /* reserved           */
} NIOL_SYNC_SYNC_GEN_0_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_0_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_0_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_1_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_1_cfg  0x00000090U
#define Adr_NIOL_sync_sync_sync_gen_1_cfg 0x00000990U
#define Adr_NIOL_sync_sync_gen_1_cfg      0x00000990U
#define DFLT_VAL_NIOL_sync_sync_gen_1_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_1_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_1_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_1_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_1_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_1_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_1_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_1_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_1_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_1_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_1_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_1_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_1_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_1_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_1_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_1_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_1_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_1_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_1_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_1_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_1_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_1_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_1_base_phase  0x00000094U
#define Adr_NIOL_sync_sync_sync_gen_1_base_phase 0x00000994U
#define Adr_NIOL_sync_sync_gen_1_base_phase      0x00000994U
#define DFLT_VAL_NIOL_sync_sync_gen_1_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_1_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_1_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_1_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_1_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_1_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_1_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_1_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_1_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_1_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_1_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_1_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_1_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_1_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_1_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_2_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_2_cfg  0x00000098U
#define Adr_NIOL_sync_sync_sync_gen_2_cfg 0x00000998U
#define Adr_NIOL_sync_sync_gen_2_cfg      0x00000998U
#define DFLT_VAL_NIOL_sync_sync_gen_2_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_2_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_2_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_2_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_2_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_2_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_2_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_2_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_2_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_2_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_2_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_2_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_2_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_2_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_2_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_2_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_2_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_2_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_2_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_2_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_2_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_2_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_2_base_phase  0x0000009CU
#define Adr_NIOL_sync_sync_sync_gen_2_base_phase 0x0000099CU
#define Adr_NIOL_sync_sync_gen_2_base_phase      0x0000099CU
#define DFLT_VAL_NIOL_sync_sync_gen_2_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_2_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_2_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_2_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_2_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_2_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_2_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_2_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_2_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_2_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_2_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_2_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_2_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_2_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_2_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_3_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_3_cfg  0x000000A0U
#define Adr_NIOL_sync_sync_sync_gen_3_cfg 0x000009A0U
#define Adr_NIOL_sync_sync_gen_3_cfg      0x000009A0U
#define DFLT_VAL_NIOL_sync_sync_gen_3_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_3_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_3_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_3_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_3_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_3_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_3_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_3_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_3_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_3_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_3_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_3_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_3_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_3_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_3_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_3_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_3_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_3_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_3_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_3_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_3_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_3_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_3_base_phase  0x000000A4U
#define Adr_NIOL_sync_sync_sync_gen_3_base_phase 0x000009A4U
#define Adr_NIOL_sync_sync_gen_3_base_phase      0x000009A4U
#define DFLT_VAL_NIOL_sync_sync_gen_3_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_3_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_3_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_3_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_3_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_3_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_3_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_3_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_3_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_3_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_3_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_3_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_3_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_3_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_3_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_4_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_4_cfg  0x000000A8U
#define Adr_NIOL_sync_sync_sync_gen_4_cfg 0x000009A8U
#define Adr_NIOL_sync_sync_gen_4_cfg      0x000009A8U
#define DFLT_VAL_NIOL_sync_sync_gen_4_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_4_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_4_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_4_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_4_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_4_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_4_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_4_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_4_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_4_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_4_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_4_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_4_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_4_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_4_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_4_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_4_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_4_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_4_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_4_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_4_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_4_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_4_base_phase  0x000000ACU
#define Adr_NIOL_sync_sync_sync_gen_4_base_phase 0x000009ACU
#define Adr_NIOL_sync_sync_gen_4_base_phase      0x000009ACU
#define DFLT_VAL_NIOL_sync_sync_gen_4_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_4_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_4_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_4_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_4_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_4_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_4_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_4_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_4_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_4_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_4_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_4_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_4_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_4_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_4_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_5_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_5_cfg  0x000000B0U
#define Adr_NIOL_sync_sync_sync_gen_5_cfg 0x000009B0U
#define Adr_NIOL_sync_sync_gen_5_cfg      0x000009B0U
#define DFLT_VAL_NIOL_sync_sync_gen_5_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_5_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_5_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_5_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_5_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_5_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_5_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_5_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_5_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_5_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_5_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_5_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_5_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_5_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_5_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_5_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_5_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_5_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_5_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_5_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_5_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_5_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_5_base_phase  0x000000B4U
#define Adr_NIOL_sync_sync_sync_gen_5_base_phase 0x000009B4U
#define Adr_NIOL_sync_sync_gen_5_base_phase      0x000009B4U
#define DFLT_VAL_NIOL_sync_sync_gen_5_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_5_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_5_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_5_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_5_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_5_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_5_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_5_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_5_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_5_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_5_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_5_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_5_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_5_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_5_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_6_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_6_cfg  0x000000B8U
#define Adr_NIOL_sync_sync_sync_gen_6_cfg 0x000009B8U
#define Adr_NIOL_sync_sync_gen_6_cfg      0x000009B8U
#define DFLT_VAL_NIOL_sync_sync_gen_6_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_6_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_6_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_6_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_6_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_6_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_6_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_6_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_6_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_6_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_6_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_6_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_6_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_6_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_6_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_6_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_6_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_6_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_6_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_6_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_6_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_6_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_6_base_phase  0x000000BCU
#define Adr_NIOL_sync_sync_sync_gen_6_base_phase 0x000009BCU
#define Adr_NIOL_sync_sync_gen_6_base_phase      0x000009BCU
#define DFLT_VAL_NIOL_sync_sync_gen_6_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_6_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_6_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_6_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_6_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_6_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_6_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_6_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_6_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_6_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_6_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_6_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_6_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_6_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_6_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_7_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_7_cfg  0x000000C0U
#define Adr_NIOL_sync_sync_sync_gen_7_cfg 0x000009C0U
#define Adr_NIOL_sync_sync_gen_7_cfg      0x000009C0U
#define DFLT_VAL_NIOL_sync_sync_gen_7_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_7_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_7_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_7_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_7_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_7_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_7_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_7_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_7_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_7_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_7_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_7_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_7_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_7_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_7_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_7_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_7_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_7_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_7_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_7_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_7_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_7_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_7_base_phase  0x000000C4U
#define Adr_NIOL_sync_sync_sync_gen_7_base_phase 0x000009C4U
#define Adr_NIOL_sync_sync_gen_7_base_phase      0x000009C4U
#define DFLT_VAL_NIOL_sync_sync_gen_7_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_7_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_7_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_7_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_7_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_7_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_7_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_7_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_7_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_7_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_7_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_7_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_7_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_7_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_7_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_8_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_8_cfg  0x000000C8U
#define Adr_NIOL_sync_sync_sync_gen_8_cfg 0x000009C8U
#define Adr_NIOL_sync_sync_gen_8_cfg      0x000009C8U
#define DFLT_VAL_NIOL_sync_sync_gen_8_cfg 0x00000000U

#define MSK_NIOL_sync_sync_gen_8_cfg_sub_phase_sel         0x0000000fU
#define SRT_NIOL_sync_sync_gen_8_cfg_sub_phase_sel         0
#define DFLT_VAL_NIOL_sync_sync_gen_8_cfg_sub_phase_sel    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_8_cfg_sub_phase_sel 0x00000000U
#define MSK_NIOL_sync_sync_gen_8_cfg_sub_phase             0x00007ff0U
#define SRT_NIOL_sync_sync_gen_8_cfg_sub_phase             4
#define DFLT_VAL_NIOL_sync_sync_gen_8_cfg_sub_phase        0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_8_cfg_sub_phase     0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_8_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_8_cfg 0x00007fffU

enum {
  BFW_NIOL_sync_sync_gen_8_cfg_sub_phase_sel = 4,  /* [3:0] */
  BFW_NIOL_sync_sync_gen_8_cfg_sub_phase     = 11, /* [14:4] */
  BFW_NIOL_sync_sync_gen_8_cfg_reserved1     = 17  /* [31:15] */
};

typedef struct NIOL_SYNC_SYNC_GEN_8_CFG_BIT_Ttag {
  unsigned int sub_phase_sel : BFW_NIOL_sync_sync_gen_8_cfg_sub_phase_sel; /*          */
  unsigned int sub_phase     : BFW_NIOL_sync_sync_gen_8_cfg_sub_phase;     /*          */
  unsigned int reserved1     : BFW_NIOL_sync_sync_gen_8_cfg_reserved1;     /* reserved */
} NIOL_SYNC_SYNC_GEN_8_CFG_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_SYNC_SYNC_GEN_8_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_8_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_gen_8_base_phase */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_gen_8_base_phase  0x000000CCU
#define Adr_NIOL_sync_sync_sync_gen_8_base_phase 0x000009CCU
#define Adr_NIOL_sync_sync_gen_8_base_phase      0x000009CCU
#define DFLT_VAL_NIOL_sync_sync_gen_8_base_phase 0x00000000U

#define MSK_NIOL_sync_sync_gen_8_base_phase_val         0x0000ffffU
#define SRT_NIOL_sync_sync_gen_8_base_phase_val         0
#define DFLT_VAL_NIOL_sync_sync_gen_8_base_phase_val    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_gen_8_base_phase_val 0x00000000U

/* all used bits of 'NIOL_sync_sync_gen_8_base_phase': */
#define MSK_USED_BITS_NIOL_sync_sync_gen_8_base_phase 0x0000ffffU

enum {
  BFW_NIOL_sync_sync_gen_8_base_phase_val       = 16, /* [15:0] */
  BFW_NIOL_sync_sync_gen_8_base_phase_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_SYNC_SYNC_GEN_8_BASE_PHASE_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_sync_gen_8_base_phase_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_sync_sync_gen_8_base_phase_reserved1; /* reserved */
} NIOL_SYNC_SYNC_GEN_8_BASE_PHASE_BIT_T;

typedef union {
  uint32_t                              val;
  NIOL_SYNC_SYNC_GEN_8_BASE_PHASE_BIT_T bf;
} NIOL_SYNC_SYNC_GEN_8_BASE_PHASE_T;

/* --------------------------------------------------------------------- */
/* Register sync_sync_out_cfg */
/* => Sync Out Generator */
/*    When sync[1] occurs a a pulse is generated on sync_out */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_sync_out_cfg  0x000000D0U
#define Adr_NIOL_sync_sync_sync_out_cfg 0x000009D0U
#define Adr_NIOL_sync_sync_out_cfg      0x000009D0U
#define DFLT_VAL_NIOL_sync_sync_out_cfg 0x00000000U

#define MSK_NIOL_sync_sync_out_cfg_polarity         0x00000003U
#define SRT_NIOL_sync_sync_out_cfg_polarity         0
#define DFLT_VAL_NIOL_sync_sync_out_cfg_polarity    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_out_cfg_polarity 0x00000000U
#define MSK_NIOL_sync_sync_out_cfg_duration         0x000007fcU
#define SRT_NIOL_sync_sync_out_cfg_duration         2
#define DFLT_VAL_NIOL_sync_sync_out_cfg_duration    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_sync_out_cfg_duration 0x00000000U

/* all used bits of 'NIOL_sync_sync_out_cfg': */
#define MSK_USED_BITS_NIOL_sync_sync_out_cfg 0x000007ffU

enum {
  BFW_NIOL_sync_sync_out_cfg_polarity  = 2,  /* [1:0] */
  BFW_NIOL_sync_sync_out_cfg_duration  = 9,  /* [10:2] */
  BFW_NIOL_sync_sync_out_cfg_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_SYNC_OUT_CFG_BIT_Ttag {
  unsigned int polarity  : BFW_NIOL_sync_sync_out_cfg_polarity;  /* sync_out behaviour                                                                              */
                                                                 /* 0: sync_out pulse is high active (idle level =0)1: sync_out pulse is low active (idle level =1) */
                                                                 /* 2: sync_out toggles                                                                             */
  unsigned int duration  : BFW_NIOL_sync_sync_out_cfg_duration;  /* pulse duration in clock cycles (only for polarity=0 and 1)                                      */
  unsigned int reserved1 : BFW_NIOL_sync_sync_out_cfg_reserved1; /* reserved                                                                                        */
} NIOL_SYNC_SYNC_OUT_CFG_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_SYNC_SYNC_OUT_CFG_BIT_T bf;
} NIOL_SYNC_SYNC_OUT_CFG_T;

/* --------------------------------------------------------------------- */
/* Register sync_irq_raw */
/* => Writing a '1' to a bit position with an event type IRQ will clear the event flag. */
/*    Writing to bit positions with a 'status' type IRQ has no effect. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_irq_raw  0x000000D4U
#define Adr_NIOL_sync_sync_irq_raw 0x000009D4U
#define Adr_NIOL_sync_irq_raw      0x000009D4U
#define DFLT_VAL_NIOL_sync_irq_raw 0x00000000U

#define MSK_NIOL_sync_irq_raw_base_phase_rld_evt         0x00000001U
#define SRT_NIOL_sync_irq_raw_base_phase_rld_evt         0
#define DFLT_VAL_NIOL_sync_irq_raw_base_phase_rld_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_base_phase_rld_evt 0x00000000U
#define MSK_NIOL_sync_irq_raw_read_sync_evt              0x00000002U
#define SRT_NIOL_sync_irq_raw_read_sync_evt              1
#define DFLT_VAL_NIOL_sync_irq_raw_read_sync_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_read_sync_evt      0x00000000U
#define MSK_NIOL_sync_irq_raw_sync0_evt                  0x00000004U
#define SRT_NIOL_sync_irq_raw_sync0_evt                  2
#define DFLT_VAL_NIOL_sync_irq_raw_sync0_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync0_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync1_evt                  0x00000008U
#define SRT_NIOL_sync_irq_raw_sync1_evt                  3
#define DFLT_VAL_NIOL_sync_irq_raw_sync1_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync1_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync2_evt                  0x00000010U
#define SRT_NIOL_sync_irq_raw_sync2_evt                  4
#define DFLT_VAL_NIOL_sync_irq_raw_sync2_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync2_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync3_evt                  0x00000020U
#define SRT_NIOL_sync_irq_raw_sync3_evt                  5
#define DFLT_VAL_NIOL_sync_irq_raw_sync3_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync3_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync4_evt                  0x00000040U
#define SRT_NIOL_sync_irq_raw_sync4_evt                  6
#define DFLT_VAL_NIOL_sync_irq_raw_sync4_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync4_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync5_evt                  0x00000080U
#define SRT_NIOL_sync_irq_raw_sync5_evt                  7
#define DFLT_VAL_NIOL_sync_irq_raw_sync5_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync5_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync6_evt                  0x00000100U
#define SRT_NIOL_sync_irq_raw_sync6_evt                  8
#define DFLT_VAL_NIOL_sync_irq_raw_sync6_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync6_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync7_evt                  0x00000200U
#define SRT_NIOL_sync_irq_raw_sync7_evt                  9
#define DFLT_VAL_NIOL_sync_irq_raw_sync7_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync7_evt          0x00000000U
#define MSK_NIOL_sync_irq_raw_sync8_evt                  0x00000400U
#define SRT_NIOL_sync_irq_raw_sync8_evt                  10
#define DFLT_VAL_NIOL_sync_irq_raw_sync8_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_raw_sync8_evt          0x00000000U

/* all used bits of 'NIOL_sync_irq_raw': */
#define MSK_USED_BITS_NIOL_sync_irq_raw 0x000007ffU

enum {
  BFW_NIOL_sync_irq_raw_base_phase_rld_evt = 1,  /* [0] */
  BFW_NIOL_sync_irq_raw_read_sync_evt      = 1,  /* [1] */
  BFW_NIOL_sync_irq_raw_sync0_evt          = 1,  /* [2] */
  BFW_NIOL_sync_irq_raw_sync1_evt          = 1,  /* [3] */
  BFW_NIOL_sync_irq_raw_sync2_evt          = 1,  /* [4] */
  BFW_NIOL_sync_irq_raw_sync3_evt          = 1,  /* [5] */
  BFW_NIOL_sync_irq_raw_sync4_evt          = 1,  /* [6] */
  BFW_NIOL_sync_irq_raw_sync5_evt          = 1,  /* [7] */
  BFW_NIOL_sync_irq_raw_sync6_evt          = 1,  /* [8] */
  BFW_NIOL_sync_irq_raw_sync7_evt          = 1,  /* [9] */
  BFW_NIOL_sync_irq_raw_sync8_evt          = 1,  /* [10] */
  BFW_NIOL_sync_irq_raw_reserved1          = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_IRQ_RAW_BIT_Ttag {
  unsigned int base_phase_rld_evt : BFW_NIOL_sync_irq_raw_base_phase_rld_evt; /* EVENT: 1: BASE_PHASE was reloaded with BASE_PHASE_RLD */
  unsigned int read_sync_evt      : BFW_NIOL_sync_irq_raw_read_sync_evt;      /* EVENT: 1: read sync event occurred                    */
  unsigned int sync0_evt          : BFW_NIOL_sync_irq_raw_sync0_evt;          /* EVENT: 1: sync0 occurred                              */
  unsigned int sync1_evt          : BFW_NIOL_sync_irq_raw_sync1_evt;          /* EVENT:                                                */
  unsigned int sync2_evt          : BFW_NIOL_sync_irq_raw_sync2_evt;          /* EVENT:                                                */
  unsigned int sync3_evt          : BFW_NIOL_sync_irq_raw_sync3_evt;          /* EVENT:                                                */
  unsigned int sync4_evt          : BFW_NIOL_sync_irq_raw_sync4_evt;          /* EVENT:                                                */
  unsigned int sync5_evt          : BFW_NIOL_sync_irq_raw_sync5_evt;          /* EVENT:                                                */
  unsigned int sync6_evt          : BFW_NIOL_sync_irq_raw_sync6_evt;          /* EVENT:                                                */
  unsigned int sync7_evt          : BFW_NIOL_sync_irq_raw_sync7_evt;          /* EVENT:                                                */
  unsigned int sync8_evt          : BFW_NIOL_sync_irq_raw_sync8_evt;          /* EVENT:                                                */
  unsigned int reserved1          : BFW_NIOL_sync_irq_raw_reserved1;          /* reserved                                              */
} NIOL_SYNC_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_SYNC_IRQ_RAW_BIT_T bf;
} NIOL_SYNC_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register sync_irq_masked */
/* => Shows status of masked IRQs (as connected to IRQ controller). */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_irq_masked  0x000000D8U
#define Adr_NIOL_sync_sync_irq_masked 0x000009D8U
#define Adr_NIOL_sync_irq_masked      0x000009D8U

#define MSK_NIOL_sync_irq_masked_base_phase_rld_evt 0x00000001U
#define SRT_NIOL_sync_irq_masked_base_phase_rld_evt 0
#define MSK_NIOL_sync_irq_masked_read_sync_evt      0x00000002U
#define SRT_NIOL_sync_irq_masked_read_sync_evt      1
#define MSK_NIOL_sync_irq_masked_sync0_evt          0x00000004U
#define SRT_NIOL_sync_irq_masked_sync0_evt          2
#define MSK_NIOL_sync_irq_masked_sync1_evt          0x00000008U
#define SRT_NIOL_sync_irq_masked_sync1_evt          3
#define MSK_NIOL_sync_irq_masked_sync2_evt          0x00000010U
#define SRT_NIOL_sync_irq_masked_sync2_evt          4
#define MSK_NIOL_sync_irq_masked_sync3_evt          0x00000020U
#define SRT_NIOL_sync_irq_masked_sync3_evt          5
#define MSK_NIOL_sync_irq_masked_sync4_evt          0x00000040U
#define SRT_NIOL_sync_irq_masked_sync4_evt          6
#define MSK_NIOL_sync_irq_masked_sync5_evt          0x00000080U
#define SRT_NIOL_sync_irq_masked_sync5_evt          7
#define MSK_NIOL_sync_irq_masked_sync6_evt          0x00000100U
#define SRT_NIOL_sync_irq_masked_sync6_evt          8
#define MSK_NIOL_sync_irq_masked_sync7_evt          0x00000200U
#define SRT_NIOL_sync_irq_masked_sync7_evt          9
#define MSK_NIOL_sync_irq_masked_sync8_evt          0x00000400U
#define SRT_NIOL_sync_irq_masked_sync8_evt          10

/* all used bits of 'NIOL_sync_irq_masked': */
#define MSK_USED_BITS_NIOL_sync_irq_masked 0x000007ffU

enum {
  BFW_NIOL_sync_irq_masked_base_phase_rld_evt = 1,  /* [0] */
  BFW_NIOL_sync_irq_masked_read_sync_evt      = 1,  /* [1] */
  BFW_NIOL_sync_irq_masked_sync0_evt          = 1,  /* [2] */
  BFW_NIOL_sync_irq_masked_sync1_evt          = 1,  /* [3] */
  BFW_NIOL_sync_irq_masked_sync2_evt          = 1,  /* [4] */
  BFW_NIOL_sync_irq_masked_sync3_evt          = 1,  /* [5] */
  BFW_NIOL_sync_irq_masked_sync4_evt          = 1,  /* [6] */
  BFW_NIOL_sync_irq_masked_sync5_evt          = 1,  /* [7] */
  BFW_NIOL_sync_irq_masked_sync6_evt          = 1,  /* [8] */
  BFW_NIOL_sync_irq_masked_sync7_evt          = 1,  /* [9] */
  BFW_NIOL_sync_irq_masked_sync8_evt          = 1,  /* [10] */
  BFW_NIOL_sync_irq_masked_reserved1          = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_IRQ_MASKED_BIT_Ttag {
  unsigned int base_phase_rld_evt : BFW_NIOL_sync_irq_masked_base_phase_rld_evt; /* EVENT:   */
  unsigned int read_sync_evt      : BFW_NIOL_sync_irq_masked_read_sync_evt;      /* EVENT:   */
  unsigned int sync0_evt          : BFW_NIOL_sync_irq_masked_sync0_evt;          /* EVENT:   */
  unsigned int sync1_evt          : BFW_NIOL_sync_irq_masked_sync1_evt;          /* EVENT:   */
  unsigned int sync2_evt          : BFW_NIOL_sync_irq_masked_sync2_evt;          /* EVENT:   */
  unsigned int sync3_evt          : BFW_NIOL_sync_irq_masked_sync3_evt;          /* EVENT:   */
  unsigned int sync4_evt          : BFW_NIOL_sync_irq_masked_sync4_evt;          /* EVENT:   */
  unsigned int sync5_evt          : BFW_NIOL_sync_irq_masked_sync5_evt;          /* EVENT:   */
  unsigned int sync6_evt          : BFW_NIOL_sync_irq_masked_sync6_evt;          /* EVENT:   */
  unsigned int sync7_evt          : BFW_NIOL_sync_irq_masked_sync7_evt;          /* EVENT:   */
  unsigned int sync8_evt          : BFW_NIOL_sync_irq_masked_sync8_evt;          /* EVENT:   */
  unsigned int reserved1          : BFW_NIOL_sync_irq_masked_reserved1;          /* reserved */
} NIOL_SYNC_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_SYNC_IRQ_MASKED_BIT_T bf;
} NIOL_SYNC_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register sync_irq_msk_set */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_irq_msk_set  0x000000DCU
#define Adr_NIOL_sync_sync_irq_msk_set 0x000009DCU
#define Adr_NIOL_sync_irq_msk_set      0x000009DCU
#define DFLT_VAL_NIOL_sync_irq_msk_set 0x00000000U

#define MSK_NIOL_sync_irq_msk_set_base_phase_rld_evt         0x00000001U
#define SRT_NIOL_sync_irq_msk_set_base_phase_rld_evt         0
#define DFLT_VAL_NIOL_sync_irq_msk_set_base_phase_rld_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_base_phase_rld_evt 0x00000000U
#define MSK_NIOL_sync_irq_msk_set_read_sync_evt              0x00000002U
#define SRT_NIOL_sync_irq_msk_set_read_sync_evt              1
#define DFLT_VAL_NIOL_sync_irq_msk_set_read_sync_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_read_sync_evt      0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync0_evt                  0x00000004U
#define SRT_NIOL_sync_irq_msk_set_sync0_evt                  2
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync0_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync0_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync1_evt                  0x00000008U
#define SRT_NIOL_sync_irq_msk_set_sync1_evt                  3
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync1_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync1_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync2_evt                  0x00000010U
#define SRT_NIOL_sync_irq_msk_set_sync2_evt                  4
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync2_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync2_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync3_evt                  0x00000020U
#define SRT_NIOL_sync_irq_msk_set_sync3_evt                  5
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync3_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync3_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync4_evt                  0x00000040U
#define SRT_NIOL_sync_irq_msk_set_sync4_evt                  6
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync4_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync4_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync5_evt                  0x00000080U
#define SRT_NIOL_sync_irq_msk_set_sync5_evt                  7
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync5_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync5_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync6_evt                  0x00000100U
#define SRT_NIOL_sync_irq_msk_set_sync6_evt                  8
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync6_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync6_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync7_evt                  0x00000200U
#define SRT_NIOL_sync_irq_msk_set_sync7_evt                  9
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync7_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync7_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_set_sync8_evt                  0x00000400U
#define SRT_NIOL_sync_irq_msk_set_sync8_evt                  10
#define DFLT_VAL_NIOL_sync_irq_msk_set_sync8_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_set_sync8_evt          0x00000000U

/* all used bits of 'NIOL_sync_irq_msk_set': */
#define MSK_USED_BITS_NIOL_sync_irq_msk_set 0x000007ffU

enum {
  BFW_NIOL_sync_irq_msk_set_base_phase_rld_evt = 1,  /* [0] */
  BFW_NIOL_sync_irq_msk_set_read_sync_evt      = 1,  /* [1] */
  BFW_NIOL_sync_irq_msk_set_sync0_evt          = 1,  /* [2] */
  BFW_NIOL_sync_irq_msk_set_sync1_evt          = 1,  /* [3] */
  BFW_NIOL_sync_irq_msk_set_sync2_evt          = 1,  /* [4] */
  BFW_NIOL_sync_irq_msk_set_sync3_evt          = 1,  /* [5] */
  BFW_NIOL_sync_irq_msk_set_sync4_evt          = 1,  /* [6] */
  BFW_NIOL_sync_irq_msk_set_sync5_evt          = 1,  /* [7] */
  BFW_NIOL_sync_irq_msk_set_sync6_evt          = 1,  /* [8] */
  BFW_NIOL_sync_irq_msk_set_sync7_evt          = 1,  /* [9] */
  BFW_NIOL_sync_irq_msk_set_sync8_evt          = 1,  /* [10] */
  BFW_NIOL_sync_irq_msk_set_reserved1          = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_IRQ_MSK_SET_BIT_Ttag {
  unsigned int base_phase_rld_evt : BFW_NIOL_sync_irq_msk_set_base_phase_rld_evt; /* Write: 1: set the corresponding bit in the IRQ mask */
                                                                                  /* Read: returns IRQ mask                              */
  unsigned int read_sync_evt      : BFW_NIOL_sync_irq_msk_set_read_sync_evt;      /*                                                     */
  unsigned int sync0_evt          : BFW_NIOL_sync_irq_msk_set_sync0_evt;          /*                                                     */
  unsigned int sync1_evt          : BFW_NIOL_sync_irq_msk_set_sync1_evt;          /*                                                     */
  unsigned int sync2_evt          : BFW_NIOL_sync_irq_msk_set_sync2_evt;          /*                                                     */
  unsigned int sync3_evt          : BFW_NIOL_sync_irq_msk_set_sync3_evt;          /*                                                     */
  unsigned int sync4_evt          : BFW_NIOL_sync_irq_msk_set_sync4_evt;          /*                                                     */
  unsigned int sync5_evt          : BFW_NIOL_sync_irq_msk_set_sync5_evt;          /*                                                     */
  unsigned int sync6_evt          : BFW_NIOL_sync_irq_msk_set_sync6_evt;          /*                                                     */
  unsigned int sync7_evt          : BFW_NIOL_sync_irq_msk_set_sync7_evt;          /*                                                     */
  unsigned int sync8_evt          : BFW_NIOL_sync_irq_msk_set_sync8_evt;          /*                                                     */
  unsigned int reserved1          : BFW_NIOL_sync_irq_msk_set_reserved1;          /* reserved                                            */
} NIOL_SYNC_IRQ_MSK_SET_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_SYNC_IRQ_MSK_SET_BIT_T bf;
} NIOL_SYNC_IRQ_MSK_SET_T;

/* --------------------------------------------------------------------- */
/* Register sync_irq_msk_reset */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_irq_msk_reset  0x000000E0U
#define Adr_NIOL_sync_sync_irq_msk_reset 0x000009E0U
#define Adr_NIOL_sync_irq_msk_reset      0x000009E0U
#define DFLT_VAL_NIOL_sync_irq_msk_reset 0x00000000U

#define MSK_NIOL_sync_irq_msk_reset_base_phase_rld_evt         0x00000001U
#define SRT_NIOL_sync_irq_msk_reset_base_phase_rld_evt         0
#define DFLT_VAL_NIOL_sync_irq_msk_reset_base_phase_rld_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_base_phase_rld_evt 0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_read_sync_evt              0x00000002U
#define SRT_NIOL_sync_irq_msk_reset_read_sync_evt              1
#define DFLT_VAL_NIOL_sync_irq_msk_reset_read_sync_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_read_sync_evt      0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync0_evt                  0x00000004U
#define SRT_NIOL_sync_irq_msk_reset_sync0_evt                  2
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync0_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync0_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync1_evt                  0x00000008U
#define SRT_NIOL_sync_irq_msk_reset_sync1_evt                  3
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync1_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync1_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync2_evt                  0x00000010U
#define SRT_NIOL_sync_irq_msk_reset_sync2_evt                  4
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync2_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync2_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync3_evt                  0x00000020U
#define SRT_NIOL_sync_irq_msk_reset_sync3_evt                  5
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync3_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync3_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync4_evt                  0x00000040U
#define SRT_NIOL_sync_irq_msk_reset_sync4_evt                  6
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync4_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync4_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync5_evt                  0x00000080U
#define SRT_NIOL_sync_irq_msk_reset_sync5_evt                  7
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync5_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync5_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync6_evt                  0x00000100U
#define SRT_NIOL_sync_irq_msk_reset_sync6_evt                  8
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync6_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync6_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync7_evt                  0x00000200U
#define SRT_NIOL_sync_irq_msk_reset_sync7_evt                  9
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync7_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync7_evt          0x00000000U
#define MSK_NIOL_sync_irq_msk_reset_sync8_evt                  0x00000400U
#define SRT_NIOL_sync_irq_msk_reset_sync8_evt                  10
#define DFLT_VAL_NIOL_sync_irq_msk_reset_sync8_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_sync_irq_msk_reset_sync8_evt          0x00000000U

/* all used bits of 'NIOL_sync_irq_msk_reset': */
#define MSK_USED_BITS_NIOL_sync_irq_msk_reset 0x000007ffU

enum {
  BFW_NIOL_sync_irq_msk_reset_base_phase_rld_evt = 1,  /* [0] */
  BFW_NIOL_sync_irq_msk_reset_read_sync_evt      = 1,  /* [1] */
  BFW_NIOL_sync_irq_msk_reset_sync0_evt          = 1,  /* [2] */
  BFW_NIOL_sync_irq_msk_reset_sync1_evt          = 1,  /* [3] */
  BFW_NIOL_sync_irq_msk_reset_sync2_evt          = 1,  /* [4] */
  BFW_NIOL_sync_irq_msk_reset_sync3_evt          = 1,  /* [5] */
  BFW_NIOL_sync_irq_msk_reset_sync4_evt          = 1,  /* [6] */
  BFW_NIOL_sync_irq_msk_reset_sync5_evt          = 1,  /* [7] */
  BFW_NIOL_sync_irq_msk_reset_sync6_evt          = 1,  /* [8] */
  BFW_NIOL_sync_irq_msk_reset_sync7_evt          = 1,  /* [9] */
  BFW_NIOL_sync_irq_msk_reset_sync8_evt          = 1,  /* [10] */
  BFW_NIOL_sync_irq_msk_reset_reserved1          = 21  /* [31:11] */
};

typedef struct NIOL_SYNC_IRQ_MSK_RESET_BIT_Ttag {
  unsigned int base_phase_rld_evt : BFW_NIOL_sync_irq_msk_reset_base_phase_rld_evt; /* Write: 1: clear the corresponding bit in the IRQ mask */
                                                                                    /* Read: returns IRQ mask                                */
  unsigned int read_sync_evt      : BFW_NIOL_sync_irq_msk_reset_read_sync_evt;      /*                                                       */
  unsigned int sync0_evt          : BFW_NIOL_sync_irq_msk_reset_sync0_evt;          /*                                                       */
  unsigned int sync1_evt          : BFW_NIOL_sync_irq_msk_reset_sync1_evt;          /*                                                       */
  unsigned int sync2_evt          : BFW_NIOL_sync_irq_msk_reset_sync2_evt;          /*                                                       */
  unsigned int sync3_evt          : BFW_NIOL_sync_irq_msk_reset_sync3_evt;          /*                                                       */
  unsigned int sync4_evt          : BFW_NIOL_sync_irq_msk_reset_sync4_evt;          /*                                                       */
  unsigned int sync5_evt          : BFW_NIOL_sync_irq_msk_reset_sync5_evt;          /*                                                       */
  unsigned int sync6_evt          : BFW_NIOL_sync_irq_msk_reset_sync6_evt;          /*                                                       */
  unsigned int sync7_evt          : BFW_NIOL_sync_irq_msk_reset_sync7_evt;          /*                                                       */
  unsigned int sync8_evt          : BFW_NIOL_sync_irq_msk_reset_sync8_evt;          /*                                                       */
  unsigned int reserved1          : BFW_NIOL_sync_irq_msk_reset_reserved1;          /* reserved                                              */
} NIOL_SYNC_IRQ_MSK_RESET_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_SYNC_IRQ_MSK_RESET_BIT_T bf;
} NIOL_SYNC_IRQ_MSK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register sync_irq_no */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_sync_irq_no  0x000000E4U
#define Adr_NIOL_sync_sync_irq_no 0x000009E4U
#define Adr_NIOL_sync_irq_no      0x000009E4U

#define MSK_NIOL_sync_irq_no_val 0x0000000fU
#define SRT_NIOL_sync_irq_no_val 0

/* all used bits of 'NIOL_sync_irq_no': */
#define MSK_USED_BITS_NIOL_sync_irq_no 0x0000000fU

enum {
  BFW_NIOL_sync_irq_no_val       = 4,  /* [3:0] */
  BFW_NIOL_sync_irq_no_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_SYNC_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_sync_irq_no_val;       /* Number of the non-masked pending IRQ with the highest priority (=lowest bit position). When no non-masked IRQ is pending the number of the highest IRQ plus one is returned. */
  unsigned int reserved1 : BFW_NIOL_sync_irq_no_reserved1; /* reserved                                                                                                                                                                     */
} NIOL_SYNC_IRQ_NO_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_SYNC_IRQ_NO_BIT_T bf;
} NIOL_SYNC_IRQ_NO_T;


/* ===================================================================== */

/* AREA iol_uart */
/* Area of iol_uart_a, iol_uart_b, iol_uart_c, iol_uart_d */

/* ===================================================================== */

#define Addr_NIOL_iol_uart_a 0x00000A00U
#define Addr_NIOL_iol_uart_b 0x00000B00U
#define Addr_NIOL_iol_uart_c 0x00000C00U
#define Addr_NIOL_iol_uart_d 0x00000D00U

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_cfg        0x00000000U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_cfg 0x00000A00U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_cfg 0x00000B00U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_cfg 0x00000C00U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_cfg 0x00000D00U
#define DFLT_VAL_NIOL_iol_uart_tx_cfg       0x00000000U

#define MSK_NIOL_iol_uart_tx_cfg_en                 0x00000001U
#define SRT_NIOL_iol_uart_tx_cfg_en                 0
#define DFLT_VAL_NIOL_iol_uart_tx_cfg_en            0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_cfg_en         0x00000000U
#define MSK_NIOL_iol_uart_tx_cfg_tx_inv             0x00000002U
#define SRT_NIOL_iol_uart_tx_cfg_tx_inv             1
#define DFLT_VAL_NIOL_iol_uart_tx_cfg_tx_inv        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_cfg_tx_inv     0x00000000U
#define MSK_NIOL_iol_uart_tx_cfg_tx_en_inv          0x00000004U
#define SRT_NIOL_iol_uart_tx_cfg_tx_en_inv          2
#define DFLT_VAL_NIOL_iol_uart_tx_cfg_tx_en_inv     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_cfg_tx_en_inv  0x00000000U
#define MSK_NIOL_iol_uart_tx_cfg_parity             0x00000018U
#define SRT_NIOL_iol_uart_tx_cfg_parity             3
#define DFLT_VAL_NIOL_iol_uart_tx_cfg_parity        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_cfg_parity     0x00000000U
#define MSK_NIOL_iol_uart_tx_cfg_start_cond         0x00000060U
#define SRT_NIOL_iol_uart_tx_cfg_start_cond         5
#define DFLT_VAL_NIOL_iol_uart_tx_cfg_start_cond    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_cfg_start_cond 0x00000000U
#define MSK_NIOL_iol_uart_tx_cfg_back2back          0x00000080U
#define SRT_NIOL_iol_uart_tx_cfg_back2back          7
#define DFLT_VAL_NIOL_iol_uart_tx_cfg_back2back     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_cfg_back2back  0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_cfg': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_cfg 0x000000ffU

enum {
  BFW_NIOL_iol_uart_tx_cfg_en         = 1,  /* [0] */
  BFW_NIOL_iol_uart_tx_cfg_tx_inv     = 1,  /* [1] */
  BFW_NIOL_iol_uart_tx_cfg_tx_en_inv  = 1,  /* [2] */
  BFW_NIOL_iol_uart_tx_cfg_parity     = 2,  /* [4:3] */
  BFW_NIOL_iol_uart_tx_cfg_start_cond = 2,  /* [6:5] */
  BFW_NIOL_iol_uart_tx_cfg_back2back  = 1,  /* [7] */
  BFW_NIOL_iol_uart_tx_cfg_reserved1  = 24  /* [31:8] */
};

typedef struct NIOL_IOL_UART_TX_CFG_BIT_Ttag {
  unsigned int en         : BFW_NIOL_iol_uart_tx_cfg_en;         /* 0: transmitter is stopped, aborts current transmission and descriptor immediately.            */
  unsigned int tx_inv     : BFW_NIOL_iol_uart_tx_cfg_tx_inv;     /* 1: tx is inverted at the output                                                               */
  unsigned int tx_en_inv  : BFW_NIOL_iol_uart_tx_cfg_tx_en_inv;  /* 1: tx_en is inverted at the output                                                            */
  unsigned int parity     : BFW_NIOL_iol_uart_tx_cfg_parity;     /* transmitted parity 00: no, 01: even, 10: odd                                                  */
  unsigned int start_cond : BFW_NIOL_iol_uart_tx_cfg_start_cond; /* Transmit start condition                                                                      */
                                                                 /* 0: transmission starts immediately when a new tx descriptor becomes available.                */
                                                                 /* 1: A new tx descriptor is loaded immediately, but transmission starts with the sync_tx pulse. */
                                                                 /*    When no transmission is ready IRQ_RAW.tx_sync_err_evt is asserted.                         */
                                                                 /* 2: A new tx descriptor is loaded immediately, but transmission starts when the                */
                                                                 /*    response_timer_evt is asserted.                                                            */
                                                                 /* 3: reserved                                                                                   */
  unsigned int back2back  : BFW_NIOL_iol_uart_tx_cfg_back2back;  /* 1: Allow back2back descriptor transmission. This only has an effect if sync_en = 0.           */
                                                                 /* Note: This will change behavior of the tx_completed_evt: It will be asserted earlier, i.e.    */
                                                                 /* it will be set when the transmission of the stopbit of the last UART frame starts.            */
  unsigned int reserved1  : BFW_NIOL_iol_uart_tx_cfg_reserved1;  /* reserved                                                                                      */
} NIOL_IOL_UART_TX_CFG_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_UART_TX_CFG_BIT_T bf;
} NIOL_IOL_UART_TX_CFG_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_en_shift */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_en_shift        0x00000004U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_en_shift 0x00000A04U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_en_shift 0x00000B04U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_en_shift 0x00000C04U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_en_shift 0x00000D04U
#define DFLT_VAL_NIOL_iol_uart_tx_en_shift       0x00000000U

#define MSK_NIOL_iol_uart_tx_en_shift_val         0x00000003U
#define SRT_NIOL_iol_uart_tx_en_shift_val         0
#define DFLT_VAL_NIOL_iol_uart_tx_en_shift_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_en_shift_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_en_shift': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_en_shift 0x00000003U

enum {
  BFW_NIOL_iol_uart_tx_en_shift_val       = 2,  /* [1:0] */
  BFW_NIOL_iol_uart_tx_en_shift_reserved1 = 30  /* [31:2] */
};

typedef struct NIOL_IOL_UART_TX_EN_SHIFT_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_en_shift_val;       /* 0..3, see TX_EN */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_en_shift_reserved1; /* reserved        */
} NIOL_IOL_UART_TX_EN_SHIFT_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_UART_TX_EN_SHIFT_BIT_T bf;
} NIOL_IOL_UART_TX_EN_SHIFT_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_en_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_en_cfg        0x00000008U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_en_cfg 0x00000A08U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_en_cfg 0x00000B08U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_en_cfg 0x00000C08U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_en_cfg 0x00000D08U
#define DFLT_VAL_NIOL_iol_uart_tx_en_cfg       0x00000000U

#define MSK_NIOL_iol_uart_tx_en_cfg_pre          0x000000ffU
#define SRT_NIOL_iol_uart_tx_en_cfg_pre          0
#define DFLT_VAL_NIOL_iol_uart_tx_en_cfg_pre     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_en_cfg_pre  0x00000000U
#define MSK_NIOL_iol_uart_tx_en_cfg_post         0x0000ff00U
#define SRT_NIOL_iol_uart_tx_en_cfg_post         8
#define DFLT_VAL_NIOL_iol_uart_tx_en_cfg_post    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_en_cfg_post 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_en_cfg': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_en_cfg 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_tx_en_cfg_pre       = 8,  /* [7:0] */
  BFW_NIOL_iol_uart_tx_en_cfg_post      = 8,  /* [15:8] */
  BFW_NIOL_iol_uart_tx_en_cfg_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_TX_EN_CFG_BIT_Ttag {
  unsigned int pre       : BFW_NIOL_iol_uart_tx_en_cfg_pre;       /* 0: tx_en is asserted 0..1 sys_clk cycles before the first start bit of a tx descriptor                                                                                                                                                                                                      */
                                                                  /* 1..MAX                                                                                                                                                                                                                                                                                      */
                                                                  /* when tx_en is not asserted when the first start bit of a tx descriptor is ready to sent: tx_en is is asserted for pre*2^TX_EN_SHIFT clock cycles before the transmission of the first start bit                                                                                             */
                                                                  /* when tx_en is asserted when the first start bit of a tx descriptor is ready to sent: the first start bit is transmitted immediately. This allows for back 2 back transmission of UART frames from subsequent tx descriptors. (Note: This case should not occur when TX_CFG.sync_en is set). */
  unsigned int post      : BFW_NIOL_iol_uart_tx_en_cfg_post;      /* 0: tx_en is deasserted 0..1 sys_clk cycles after the last stop bit of a tx descriptor                                                                                                                                                                                                       */
                                                                  /* 1..MAX: tx_en is kept asserted for post*2^TX_EN_SHIFT clock cycles                                                                                                                                                                                                                          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_en_cfg_reserved1; /* reserved                                                                                                                                                                                                                                                                                    */
} NIOL_IOL_UART_TX_EN_CFG_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_UART_TX_EN_CFG_BIT_T bf;
} NIOL_IOL_UART_TX_EN_CFG_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_tbit */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_tbit        0x0000000CU
#define Adr_NIOL_iol_uart_a_iol_uart_tx_tbit 0x00000A0CU
#define Adr_NIOL_iol_uart_b_iol_uart_tx_tbit 0x00000B0CU
#define Adr_NIOL_iol_uart_c_iol_uart_tx_tbit 0x00000C0CU
#define Adr_NIOL_iol_uart_d_iol_uart_tx_tbit 0x00000D0CU
#define DFLT_VAL_NIOL_iol_uart_tx_tbit       0x00000000U

#define MSK_NIOL_iol_uart_tx_tbit_val         0x0000ffffU
#define SRT_NIOL_iol_uart_tx_tbit_val         0
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_tbit': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_tbit 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_tx_tbit_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_tx_tbit_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_TX_TBIT_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_tbit_val;       /* 24..MAX                                                                  */
                                                                /* T(startbit to parity) = (TX_TBIT - TX_TBIT_SUB(tx bit)) * T(uart_fe_clk) */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_tbit_reserved1; /* reserved                                                                 */
} NIOL_IOL_UART_TX_TBIT_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_IOL_UART_TX_TBIT_BIT_T bf;
} NIOL_IOL_UART_TX_TBIT_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_tbit_sub */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_tbit_sub        0x00000010U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_tbit_sub 0x00000A10U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_tbit_sub 0x00000B10U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_tbit_sub 0x00000C10U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_tbit_sub 0x00000D10U
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub       0x00000000U

#define MSK_NIOL_iol_uart_tx_tbit_sub_start          0x00000001U
#define SRT_NIOL_iol_uart_tx_tbit_sub_start          0
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_start     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_start  0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d0             0x00000002U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d0             1
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d0        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d0     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d1             0x00000004U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d1             2
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d1        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d1     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d2             0x00000008U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d2             3
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d2        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d2     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d3             0x00000010U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d3             4
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d3        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d3     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d4             0x00000020U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d4             5
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d4        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d4     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d5             0x00000040U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d5             6
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d5        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d5     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d6             0x00000080U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d6             7
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d6        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d6     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_d7             0x00000100U
#define SRT_NIOL_iol_uart_tx_tbit_sub_d7             8
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_d7        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_d7     0x00000000U
#define MSK_NIOL_iol_uart_tx_tbit_sub_parity         0x00000200U
#define SRT_NIOL_iol_uart_tx_tbit_sub_parity         9
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_sub_parity    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_sub_parity 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_tbit_sub': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_tbit_sub 0x000003ffU

enum {
  BFW_NIOL_iol_uart_tx_tbit_sub_start     = 1,  /* [0] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d0        = 1,  /* [1] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d1        = 1,  /* [2] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d2        = 1,  /* [3] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d3        = 1,  /* [4] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d4        = 1,  /* [5] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d5        = 1,  /* [6] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d6        = 1,  /* [7] */
  BFW_NIOL_iol_uart_tx_tbit_sub_d7        = 1,  /* [8] */
  BFW_NIOL_iol_uart_tx_tbit_sub_parity    = 1,  /* [9] */
  BFW_NIOL_iol_uart_tx_tbit_sub_reserved1 = 22  /* [31:10] */
};

typedef struct NIOL_IOL_UART_TX_TBIT_SUB_BIT_Ttag {
  unsigned int start     : BFW_NIOL_iol_uart_tx_tbit_sub_start;     /* 0: T(startbit) = TX_TBIT * T(uart_fe_clk)      */
                                                                    /* 1: T(startbit) = (TX_TBIT -1) * T(uart_fe_clk) */
  unsigned int d0        : BFW_NIOL_iol_uart_tx_tbit_sub_d0;        /*                                                */
  unsigned int d1        : BFW_NIOL_iol_uart_tx_tbit_sub_d1;        /*                                                */
  unsigned int d2        : BFW_NIOL_iol_uart_tx_tbit_sub_d2;        /*                                                */
  unsigned int d3        : BFW_NIOL_iol_uart_tx_tbit_sub_d3;        /*                                                */
  unsigned int d4        : BFW_NIOL_iol_uart_tx_tbit_sub_d4;        /*                                                */
  unsigned int d5        : BFW_NIOL_iol_uart_tx_tbit_sub_d5;        /*                                                */
  unsigned int d6        : BFW_NIOL_iol_uart_tx_tbit_sub_d6;        /*                                                */
  unsigned int d7        : BFW_NIOL_iol_uart_tx_tbit_sub_d7;        /*                                                */
  unsigned int parity    : BFW_NIOL_iol_uart_tx_tbit_sub_parity;    /*                                                */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_tbit_sub_reserved1; /* reserved                                       */
} NIOL_IOL_UART_TX_TBIT_SUB_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_UART_TX_TBIT_SUB_BIT_T bf;
} NIOL_IOL_UART_TX_TBIT_SUB_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_tbit_stop_lw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_tbit_stop_lw        0x00000014U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_tbit_stop_lw 0x00000A14U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_tbit_stop_lw 0x00000B14U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_tbit_stop_lw 0x00000C14U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_tbit_stop_lw 0x00000D14U
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_stop_lw       0x00000000U

#define MSK_NIOL_iol_uart_tx_tbit_stop_lw_val         0x0000ffffU
#define SRT_NIOL_iol_uart_tx_tbit_stop_lw_val         0
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_stop_lw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_stop_lw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_tbit_stop_lw': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_tbit_stop_lw 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_tx_tbit_stop_lw_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_tx_tbit_stop_lw_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_TX_TBIT_STOP_LW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_tbit_stop_lw_val;       /* T(stopbit) = TX_TBIT_STOP */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_tbit_stop_lw_reserved1; /* reserved                  */
} NIOL_IOL_UART_TX_TBIT_STOP_LW_BIT_T;

typedef union {
  uint32_t                            val;
  NIOL_IOL_UART_TX_TBIT_STOP_LW_BIT_T bf;
} NIOL_IOL_UART_TX_TBIT_STOP_LW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_tbit_stop_hw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_tbit_stop_hw        0x00000018U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_tbit_stop_hw 0x00000A18U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_tbit_stop_hw 0x00000B18U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_tbit_stop_hw 0x00000C18U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_tbit_stop_hw 0x00000D18U
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_stop_hw       0x00000000U

#define MSK_NIOL_iol_uart_tx_tbit_stop_hw_val         0x00000001U
#define SRT_NIOL_iol_uart_tx_tbit_stop_hw_val         0
#define DFLT_VAL_NIOL_iol_uart_tx_tbit_stop_hw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_tbit_stop_hw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_tbit_stop_hw': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_tbit_stop_hw 0x00000001U

enum {
  BFW_NIOL_iol_uart_tx_tbit_stop_hw_val       = 1,  /* [0] */
  BFW_NIOL_iol_uart_tx_tbit_stop_hw_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_IOL_UART_TX_TBIT_STOP_HW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_tbit_stop_hw_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_tbit_stop_hw_reserved1; /* reserved */
} NIOL_IOL_UART_TX_TBIT_STOP_HW_BIT_T;

typedef union {
  uint32_t                            val;
  NIOL_IOL_UART_TX_TBIT_STOP_HW_BIT_T bf;
} NIOL_IOL_UART_TX_TBIT_STOP_HW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_low_water */
/* => TX Status */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_low_water        0x0000001CU
#define Adr_NIOL_iol_uart_a_iol_uart_tx_low_water 0x00000A1CU
#define Adr_NIOL_iol_uart_b_iol_uart_tx_low_water 0x00000B1CU
#define Adr_NIOL_iol_uart_c_iol_uart_tx_low_water 0x00000C1CU
#define Adr_NIOL_iol_uart_d_iol_uart_tx_low_water 0x00000D1CU
#define DFLT_VAL_NIOL_iol_uart_tx_low_water       0x00000000U

#define MSK_NIOL_iol_uart_tx_low_water_val         0x000007ffU
#define SRT_NIOL_iol_uart_tx_low_water_val         0
#define DFLT_VAL_NIOL_iol_uart_tx_low_water_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_low_water_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_low_water': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_low_water 0x000007ffU

enum {
  BFW_NIOL_iol_uart_tx_low_water_val       = 11, /* [10:0] */
  BFW_NIOL_iol_uart_tx_low_water_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_IOL_UART_TX_LOW_WATER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_low_water_val;       /* IRQ.tx_low_water is asserted if TX_LEN <= TX_LOW_WATER.tx_len                                            */
                                                                     /* This register can be changed during reception of a frame to generate multiple interrupts per descriptor. */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_low_water_reserved1; /* reserved                                                                                                 */
} NIOL_IOL_UART_TX_LOW_WATER_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_UART_TX_LOW_WATER_BIT_T bf;
} NIOL_IOL_UART_TX_LOW_WATER_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_len */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_len        0x00000020U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_len 0x00000A20U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_len 0x00000B20U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_len 0x00000C20U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_len 0x00000D20U

#define MSK_NIOL_iol_uart_tx_len_val 0x000007ffU
#define SRT_NIOL_iol_uart_tx_len_val 0

/* all used bits of 'NIOL_iol_uart_tx_len': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_len 0x000007ffU

enum {
  BFW_NIOL_iol_uart_tx_len_val       = 11, /* [10:0] */
  BFW_NIOL_iol_uart_tx_len_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_IOL_UART_TX_LEN_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_len_val;       /* UART transmit bytes remaining to be read by DMA                        */
                                                               /* byte TX_LEN+1 has been read by DMA (and can e.g. be overwritten by SW) */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_len_reserved1; /* reserved                                                               */
} NIOL_IOL_UART_TX_LEN_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_UART_TX_LEN_BIT_T bf;
} NIOL_IOL_UART_TX_LEN_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_radr */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_radr        0x00000024U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_radr 0x00000A24U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_radr 0x00000B24U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_radr 0x00000C24U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_radr 0x00000D24U

#define MSK_NIOL_iol_uart_tx_radr_val 0x0000ffffU
#define SRT_NIOL_iol_uart_tx_radr_val 0

/* all used bits of 'NIOL_iol_uart_tx_radr': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_radr 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_tx_radr_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_tx_radr_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_TX_RADR_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_tx_radr_val;       /* next address to be read                                     */
                                                                /* TX_RADR-1 has been read (and can e.g. be overwritten by SW) */
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_radr_reserved1; /* reserved                                                    */
} NIOL_IOL_UART_TX_RADR_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_IOL_UART_TX_RADR_BIT_T bf;
} NIOL_IOL_UART_TX_RADR_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_cfg        0x00000028U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_cfg 0x00000A28U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_cfg 0x00000B28U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_cfg 0x00000C28U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_cfg 0x00000D28U
#define DFLT_VAL_NIOL_iol_uart_rx_cfg       0x00000000U

#define MSK_NIOL_iol_uart_rx_cfg_en                            0x00000001U
#define SRT_NIOL_iol_uart_rx_cfg_en                            0
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_en                       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_en                    0x00000000U
#define MSK_NIOL_iol_uart_rx_cfg_rx_inv                        0x00000002U
#define SRT_NIOL_iol_uart_rx_cfg_rx_inv                        1
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_rx_inv                   0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_rx_inv                0x00000000U
#define MSK_NIOL_iol_uart_rx_cfg_rx_en_inv                     0x00000004U
#define SRT_NIOL_iol_uart_rx_cfg_rx_en_inv                     2
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_rx_en_inv                0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_rx_en_inv             0x00000000U
#define MSK_NIOL_iol_uart_rx_cfg_parity                        0x00000018U
#define SRT_NIOL_iol_uart_rx_cfg_parity                        3
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_parity                   0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_parity                0x00000000U
#define MSK_NIOL_iol_uart_rx_cfg_rx_src                        0x00000020U
#define SRT_NIOL_iol_uart_rx_cfg_rx_src                        5
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_rx_src                   0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_rx_src                0x00000000U
#define MSK_NIOL_iol_uart_rx_cfg_half_duplex                   0x000001c0U
#define SRT_NIOL_iol_uart_rx_cfg_half_duplex                   6
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_half_duplex              0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_half_duplex           0x00000000U
#define MSK_NIOL_iol_uart_rx_cfg_half_duplex_last_tbit         0x00000e00U
#define SRT_NIOL_iol_uart_rx_cfg_half_duplex_last_tbit         9
#define DFLT_VAL_NIOL_iol_uart_rx_cfg_half_duplex_last_tbit    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_cfg_half_duplex_last_tbit 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_cfg': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_cfg 0x00000fffU

enum {
  BFW_NIOL_iol_uart_rx_cfg_en                    = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_cfg_rx_inv                = 1,  /* [1] */
  BFW_NIOL_iol_uart_rx_cfg_rx_en_inv             = 1,  /* [2] */
  BFW_NIOL_iol_uart_rx_cfg_parity                = 2,  /* [4:3] */
  BFW_NIOL_iol_uart_rx_cfg_rx_src                = 1,  /* [5] */
  BFW_NIOL_iol_uart_rx_cfg_half_duplex           = 3,  /* [8:6] */
  BFW_NIOL_iol_uart_rx_cfg_half_duplex_last_tbit = 3,  /* [11:9] */
  BFW_NIOL_iol_uart_rx_cfg_reserved1             = 20  /* [31:12] */
};

typedef struct NIOL_IOL_UART_RX_CFG_BIT_Ttag {
  unsigned int en                    : BFW_NIOL_iol_uart_rx_cfg_en;                    /* Receiver enable                                                                                 */
                                                                                       /* 0: receiver is stopped, current transmission and descriptor are aborted immediately.            */
  unsigned int rx_inv                : BFW_NIOL_iol_uart_rx_cfg_rx_inv;                /* RX input signal polarity                                                                        */
                                                                                       /* 1: rx is inverted at the input                                                                  */
  unsigned int rx_en_inv             : BFW_NIOL_iol_uart_rx_cfg_rx_en_inv;             /* RX enable output polarity                                                                       */
                                                                                       /* 1: rx_en is inverted at the output                                                              */
  unsigned int parity                : BFW_NIOL_iol_uart_rx_cfg_parity;                /* Parity configuration                                                                            */
                                                                                       /* 00: no parity                                                                                   */
                                                                                       /* 01: even parity                                                                                 */
                                                                                       /* 10: odd parity                                                                                  */
                                                                                       /* 11: reserved                                                                                    */
  unsigned int rx_src                : BFW_NIOL_iol_uart_rx_cfg_rx_src;                /* RX source selection                                                                             */
                                                                                       /* 0: rx input                                                                                     */
                                                                                       /* 1: loop back from tx side                                                                       */
  unsigned int half_duplex           : BFW_NIOL_iol_uart_rx_cfg_half_duplex;           /* Half duplex configuration                                                                       */
                                                                                       /* 0:      full duplex operation, receive active permanently                                       */
                                                                                       /* 1:      half duplex operation, no local echo canceling                                          */
                                                                                       /* 2..MAX: half duplex operation with local echo canceling                                         */
                                                                                       /*         rx input is masked during transmit, starting with the first start bit and extending     */
                                                                                       /*         (concurrently) for (half_duplex-1) RX_TBIT cycles after the last stop bit of a tx       */
                                                                                       /*         descriptor.                                                                             */
                                                                                       /*         The length of the last cycle can be configured with the half_duplex_last_tbit bitfield. */
  unsigned int half_duplex_last_tbit : BFW_NIOL_iol_uart_rx_cfg_half_duplex_last_tbit; /* Length of last RX_TBIT when local echo canceling is on.                                         */
                                                                                       /* 0:    RX_TBIT / 1                                                                               */
                                                                                       /* 1:    RX_TBIT * 7 / 8                                                                           */
                                                                                       /* 2:    RX_TBIT * 3 / 4                                                                           */
                                                                                       /* 3:    RX_TBIT / 2                                                                               */
                                                                                       /* 4:    RX_TBIT / 4                                                                               */
                                                                                       /* 5:    RX_TBIT / 8                                                                               */
                                                                                       /* 6..7: reserved                                                                                  */
  unsigned int reserved1             : BFW_NIOL_iol_uart_rx_cfg_reserved1;             /* reserved                                                                                        */
} NIOL_IOL_UART_RX_CFG_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_UART_RX_CFG_BIT_T bf;
} NIOL_IOL_UART_RX_CFG_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_timeout */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_timeout        0x0000002CU
#define Adr_NIOL_iol_uart_a_iol_uart_rx_timeout 0x00000A2CU
#define Adr_NIOL_iol_uart_b_iol_uart_rx_timeout 0x00000B2CU
#define Adr_NIOL_iol_uart_c_iol_uart_rx_timeout 0x00000C2CU
#define Adr_NIOL_iol_uart_d_iol_uart_rx_timeout 0x00000D2CU
#define DFLT_VAL_NIOL_iol_uart_rx_timeout       0x00000000U

#define MSK_NIOL_iol_uart_rx_timeout_val         0x0000000fU
#define SRT_NIOL_iol_uart_rx_timeout_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_timeout_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_timeout_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_timeout': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_timeout 0x0000000fU

enum {
  BFW_NIOL_iol_uart_rx_timeout_val       = 4,  /* [3:0] */
  BFW_NIOL_iol_uart_rx_timeout_reserved1 = 28  /* [31:4] */
};

typedef struct NIOL_IOL_UART_RX_TIMEOUT_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_timeout_val;       /* Inter character receive timeout (rx frame to rx frame) in RX_TBIT.                                     */
                                                                   /* 0:      no timeout                                                                                     */
                                                                   /* 1..MAX: The timeout is started at the end of the stop bit of every received byte and stopped when the  */
                                                                   /*         startbit edge of the next byte is detected. When the timeout occurs IRQ_RAW.rx_timeout_evt     */
                                                                   /*         is asserted.                                                                                   */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_timeout_reserved1; /* reserved                                                                                               */
} NIOL_IOL_UART_RX_TIMEOUT_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_RX_TIMEOUT_BIT_T bf;
} NIOL_IOL_UART_RX_TIMEOUT_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_tbit_lw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_tbit_lw        0x00000030U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_tbit_lw 0x00000A30U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_tbit_lw 0x00000B30U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_tbit_lw 0x00000C30U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_tbit_lw 0x00000D30U
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_lw       0x00000000U

#define MSK_NIOL_iol_uart_rx_tbit_lw_val         0x0000ffffU
#define SRT_NIOL_iol_uart_rx_tbit_lw_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_lw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_lw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_tbit_lw': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_tbit_lw 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_rx_tbit_lw_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_rx_tbit_lw_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_TBIT_LW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_tbit_lw_val;       /* T(rx bit) = (RX_TBIT - RX_TBIT_SUB(rx bit)) * T(uart_fe_clk) */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_tbit_lw_reserved1; /* reserved                                                     */
} NIOL_IOL_UART_RX_TBIT_LW_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_RX_TBIT_LW_BIT_T bf;
} NIOL_IOL_UART_RX_TBIT_LW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_tbit_hw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_tbit_hw        0x00000034U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_tbit_hw 0x00000A34U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_tbit_hw 0x00000B34U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_tbit_hw 0x00000C34U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_tbit_hw 0x00000D34U
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_hw       0x00000000U

#define MSK_NIOL_iol_uart_rx_tbit_hw_val         0x00000001U
#define SRT_NIOL_iol_uart_rx_tbit_hw_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_hw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_hw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_tbit_hw': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_tbit_hw 0x00000001U

enum {
  BFW_NIOL_iol_uart_rx_tbit_hw_val       = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_tbit_hw_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_IOL_UART_RX_TBIT_HW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_tbit_hw_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_tbit_hw_reserved1; /* reserved */
} NIOL_IOL_UART_RX_TBIT_HW_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_RX_TBIT_HW_BIT_T bf;
} NIOL_IOL_UART_RX_TBIT_HW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_tbit_sub */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_tbit_sub        0x00000038U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_tbit_sub 0x00000A38U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_tbit_sub 0x00000B38U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_tbit_sub 0x00000C38U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_tbit_sub 0x00000D38U
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub       0x00000000U

#define MSK_NIOL_iol_uart_rx_tbit_sub_start          0x00000001U
#define SRT_NIOL_iol_uart_rx_tbit_sub_start          0
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_start     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_start  0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d0             0x00000002U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d0             1
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d0        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d0     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d1             0x00000004U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d1             2
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d1        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d1     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d2             0x00000008U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d2             3
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d2        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d2     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d3             0x00000010U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d3             4
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d3        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d3     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d4             0x00000020U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d4             5
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d4        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d4     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d5             0x00000040U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d5             6
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d5        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d5     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d6             0x00000080U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d6             7
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d6        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d6     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_d7             0x00000100U
#define SRT_NIOL_iol_uart_rx_tbit_sub_d7             8
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_d7        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_d7     0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_parity         0x00000200U
#define SRT_NIOL_iol_uart_rx_tbit_sub_parity         9
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_parity    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_parity 0x00000000U
#define MSK_NIOL_iol_uart_rx_tbit_sub_stop           0x00000400U
#define SRT_NIOL_iol_uart_rx_tbit_sub_stop           10
#define DFLT_VAL_NIOL_iol_uart_rx_tbit_sub_stop      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_tbit_sub_stop   0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_tbit_sub': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_tbit_sub 0x000007ffU

enum {
  BFW_NIOL_iol_uart_rx_tbit_sub_start     = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d0        = 1,  /* [1] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d1        = 1,  /* [2] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d2        = 1,  /* [3] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d3        = 1,  /* [4] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d4        = 1,  /* [5] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d5        = 1,  /* [6] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d6        = 1,  /* [7] */
  BFW_NIOL_iol_uart_rx_tbit_sub_d7        = 1,  /* [8] */
  BFW_NIOL_iol_uart_rx_tbit_sub_parity    = 1,  /* [9] */
  BFW_NIOL_iol_uart_rx_tbit_sub_stop      = 1,  /* [10] */
  BFW_NIOL_iol_uart_rx_tbit_sub_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_IOL_UART_RX_TBIT_SUB_BIT_Ttag {
  unsigned int start     : BFW_NIOL_iol_uart_rx_tbit_sub_start;     /* 0: T(startbit) = RX_TBIT * T(uart_fe_clk)      */
                                                                    /* 1: T(startbit) = (RX_TBIT -1) * T(uart_fe_clk) */
  unsigned int d0        : BFW_NIOL_iol_uart_rx_tbit_sub_d0;        /*                                                */
  unsigned int d1        : BFW_NIOL_iol_uart_rx_tbit_sub_d1;        /*                                                */
  unsigned int d2        : BFW_NIOL_iol_uart_rx_tbit_sub_d2;        /*                                                */
  unsigned int d3        : BFW_NIOL_iol_uart_rx_tbit_sub_d3;        /*                                                */
  unsigned int d4        : BFW_NIOL_iol_uart_rx_tbit_sub_d4;        /*                                                */
  unsigned int d5        : BFW_NIOL_iol_uart_rx_tbit_sub_d5;        /*                                                */
  unsigned int d6        : BFW_NIOL_iol_uart_rx_tbit_sub_d6;        /*                                                */
  unsigned int d7        : BFW_NIOL_iol_uart_rx_tbit_sub_d7;        /*                                                */
  unsigned int parity    : BFW_NIOL_iol_uart_rx_tbit_sub_parity;    /*                                                */
  unsigned int stop      : BFW_NIOL_iol_uart_rx_tbit_sub_stop;      /*                                                */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_tbit_sub_reserved1; /* reserved                                       */
} NIOL_IOL_UART_RX_TBIT_SUB_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_UART_RX_TBIT_SUB_BIT_T bf;
} NIOL_IOL_UART_RX_TBIT_SUB_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_startbit_ifil_thres */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_startbit_ifil_thres        0x0000003CU
#define Adr_NIOL_iol_uart_a_iol_uart_rx_startbit_ifil_thres 0x00000A3CU
#define Adr_NIOL_iol_uart_b_iol_uart_rx_startbit_ifil_thres 0x00000B3CU
#define Adr_NIOL_iol_uart_c_iol_uart_rx_startbit_ifil_thres 0x00000C3CU
#define Adr_NIOL_iol_uart_d_iol_uart_rx_startbit_ifil_thres 0x00000D3CU
#define DFLT_VAL_NIOL_iol_uart_rx_startbit_ifil_thres       0x00000000U

#define MSK_NIOL_iol_uart_rx_startbit_ifil_thres_val         0x0000ffffU
#define SRT_NIOL_iol_uart_rx_startbit_ifil_thres_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_startbit_ifil_thres_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_startbit_ifil_thres_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_startbit_ifil_thres': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_startbit_ifil_thres 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_rx_startbit_ifil_thres_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_rx_startbit_ifil_thres_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_STARTBIT_IFIL_THRES_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_startbit_ifil_thres_val;       /* threshold of integral filter for the start bit detection. Causes a delay by the same amount of cycles. But be corrected in the RX_SAMPLE_OFFSET */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_startbit_ifil_thres_reserved1; /* reserved                                                                                                                                        */
} NIOL_IOL_UART_RX_STARTBIT_IFIL_THRES_BIT_T;

typedef union {
  uint32_t                                   val;
  NIOL_IOL_UART_RX_STARTBIT_IFIL_THRES_BIT_T bf;
} NIOL_IOL_UART_RX_STARTBIT_IFIL_THRES_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_startbit_detect_cfg */
/* => Startbit detection configuration */
/*    Note: These options are mostly useful when not using the integral filter for the startbit detection, i.e. \ */
/*    rx_startbit_ifil_thres is set to zero. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_startbit_detect_cfg        0x00000040U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_startbit_detect_cfg 0x00000A40U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_startbit_detect_cfg 0x00000B40U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_startbit_detect_cfg 0x00000C40U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_startbit_detect_cfg 0x00000D40U
#define DFLT_VAL_NIOL_iol_uart_rx_startbit_detect_cfg       0x00000000U

#define MSK_NIOL_iol_uart_rx_startbit_detect_cfg_stopbit_post_thres            0x00007fffU
#define SRT_NIOL_iol_uart_rx_startbit_detect_cfg_stopbit_post_thres            0
#define DFLT_VAL_NIOL_iol_uart_rx_startbit_detect_cfg_stopbit_post_thres       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_startbit_detect_cfg_stopbit_post_thres    0x00000000U
#define MSK_NIOL_iol_uart_rx_startbit_detect_cfg_allow_stopbit_preempt         0x00008000U
#define SRT_NIOL_iol_uart_rx_startbit_detect_cfg_allow_stopbit_preempt         15
#define DFLT_VAL_NIOL_iol_uart_rx_startbit_detect_cfg_allow_stopbit_preempt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_startbit_detect_cfg_allow_stopbit_preempt 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_startbit_detect_cfg': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_startbit_detect_cfg 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_rx_startbit_detect_cfg_stopbit_post_thres    = 15, /* [14:0] */
  BFW_NIOL_iol_uart_rx_startbit_detect_cfg_allow_stopbit_preempt = 1,  /* [15] */
  BFW_NIOL_iol_uart_rx_startbit_detect_cfg_reserved1             = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_STARTBIT_DETECT_CFG_BIT_Ttag {
  unsigned int stopbit_post_thres    : BFW_NIOL_iol_uart_rx_startbit_detect_cfg_stopbit_post_thres;    /* Sample count threshold to configure when detection of a new startbit edge within the post sample phase of the stopbit is allowed. */
                                                                                                       /* Note: Setting 0 disables this feature, i.e. a new startbit will not be detected within the post sample phase.                     */
  unsigned int allow_stopbit_preempt : BFW_NIOL_iol_uart_rx_startbit_detect_cfg_allow_stopbit_preempt; /* 1: Allow preemption of stop bit post-sampling phase by a new  start bit edge.                                                     */
                                                                                                       /* Note: To enable this feature, stopbit_post_thres must be set to > 0.                                                              */
  unsigned int reserved1             : BFW_NIOL_iol_uart_rx_startbit_detect_cfg_reserved1;             /* reserved                                                                                                                          */
} NIOL_IOL_UART_RX_STARTBIT_DETECT_CFG_BIT_T;

typedef union {
  uint32_t                                   val;
  NIOL_IOL_UART_RX_STARTBIT_DETECT_CFG_BIT_T bf;
} NIOL_IOL_UART_RX_STARTBIT_DETECT_CFG_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_sample_offset_lw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_sample_offset_lw        0x00000044U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_sample_offset_lw 0x00000A44U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_sample_offset_lw 0x00000B44U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_sample_offset_lw 0x00000C44U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_sample_offset_lw 0x00000D44U
#define DFLT_VAL_NIOL_iol_uart_rx_sample_offset_lw       0x00000000U

#define MSK_NIOL_iol_uart_rx_sample_offset_lw_val         0x0000ffffU
#define SRT_NIOL_iol_uart_rx_sample_offset_lw_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_sample_offset_lw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_sample_offset_lw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_sample_offset_lw': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_sample_offset_lw 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_rx_sample_offset_lw_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_rx_sample_offset_lw_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_SAMPLE_OFFSET_LW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_sample_offset_lw_val;       /* the sampling window starts RX_SAMPLE_OFFSET clock cycles after the bit boundary (i.e. after the start bit) and extends for RX_SAMPLE_LEN clock cycles */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_sample_offset_lw_reserved1; /* reserved                                                                                                                                              */
} NIOL_IOL_UART_RX_SAMPLE_OFFSET_LW_BIT_T;

typedef union {
  uint32_t                                val;
  NIOL_IOL_UART_RX_SAMPLE_OFFSET_LW_BIT_T bf;
} NIOL_IOL_UART_RX_SAMPLE_OFFSET_LW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_sample_offset_hw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_sample_offset_hw        0x00000048U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_sample_offset_hw 0x00000A48U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_sample_offset_hw 0x00000B48U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_sample_offset_hw 0x00000C48U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_sample_offset_hw 0x00000D48U
#define DFLT_VAL_NIOL_iol_uart_rx_sample_offset_hw       0x00000000U

#define MSK_NIOL_iol_uart_rx_sample_offset_hw_val         0x00000001U
#define SRT_NIOL_iol_uart_rx_sample_offset_hw_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_sample_offset_hw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_sample_offset_hw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_sample_offset_hw': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_sample_offset_hw 0x00000001U

enum {
  BFW_NIOL_iol_uart_rx_sample_offset_hw_val       = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_sample_offset_hw_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_IOL_UART_RX_SAMPLE_OFFSET_HW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_sample_offset_hw_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_sample_offset_hw_reserved1; /* reserved */
} NIOL_IOL_UART_RX_SAMPLE_OFFSET_HW_BIT_T;

typedef union {
  uint32_t                                val;
  NIOL_IOL_UART_RX_SAMPLE_OFFSET_HW_BIT_T bf;
} NIOL_IOL_UART_RX_SAMPLE_OFFSET_HW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_sample_len_lw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_sample_len_lw        0x0000004CU
#define Adr_NIOL_iol_uart_a_iol_uart_rx_sample_len_lw 0x00000A4CU
#define Adr_NIOL_iol_uart_b_iol_uart_rx_sample_len_lw 0x00000B4CU
#define Adr_NIOL_iol_uart_c_iol_uart_rx_sample_len_lw 0x00000C4CU
#define Adr_NIOL_iol_uart_d_iol_uart_rx_sample_len_lw 0x00000D4CU
#define DFLT_VAL_NIOL_iol_uart_rx_sample_len_lw       0x00000000U

#define MSK_NIOL_iol_uart_rx_sample_len_lw_val         0x0000ffffU
#define SRT_NIOL_iol_uart_rx_sample_len_lw_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_sample_len_lw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_sample_len_lw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_sample_len_lw': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_sample_len_lw 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_rx_sample_len_lw_val       = 16, /* [15:0] */
  BFW_NIOL_iol_uart_rx_sample_len_lw_reserved1 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_SAMPLE_LEN_LW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_sample_len_lw_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_sample_len_lw_reserved1; /* reserved */
} NIOL_IOL_UART_RX_SAMPLE_LEN_LW_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_IOL_UART_RX_SAMPLE_LEN_LW_BIT_T bf;
} NIOL_IOL_UART_RX_SAMPLE_LEN_LW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_sample_len_hw */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_sample_len_hw        0x00000050U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_sample_len_hw 0x00000A50U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_sample_len_hw 0x00000B50U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_sample_len_hw 0x00000C50U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_sample_len_hw 0x00000D50U
#define DFLT_VAL_NIOL_iol_uart_rx_sample_len_hw       0x00000000U

#define MSK_NIOL_iol_uart_rx_sample_len_hw_val         0x00000001U
#define SRT_NIOL_iol_uart_rx_sample_len_hw_val         0
#define DFLT_VAL_NIOL_iol_uart_rx_sample_len_hw_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_sample_len_hw_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_sample_len_hw': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_sample_len_hw 0x00000001U

enum {
  BFW_NIOL_iol_uart_rx_sample_len_hw_val       = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_sample_len_hw_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_IOL_UART_RX_SAMPLE_LEN_HW_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_sample_len_hw_val;       /*          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_sample_len_hw_reserved1; /* reserved */
} NIOL_IOL_UART_RX_SAMPLE_LEN_HW_BIT_T;

typedef union {
  uint32_t                             val;
  NIOL_IOL_UART_RX_SAMPLE_LEN_HW_BIT_T bf;
} NIOL_IOL_UART_RX_SAMPLE_LEN_HW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_high_water */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_high_water        0x00000054U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_high_water 0x00000A54U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_high_water 0x00000B54U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_high_water 0x00000C54U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_high_water 0x00000D54U
#define DFLT_VAL_NIOL_iol_uart_rx_high_water       0x00007800U

#define MSK_NIOL_iol_uart_rx_high_water_bytes         0x000007ffU
#define SRT_NIOL_iol_uart_rx_high_water_bytes         0
#define DFLT_VAL_NIOL_iol_uart_rx_high_water_bytes    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_high_water_bytes 0x00000000U
#define MSK_NIOL_iol_uart_rx_high_water_bits          0x00007800U
#define SRT_NIOL_iol_uart_rx_high_water_bits          11
#define DFLT_VAL_NIOL_iol_uart_rx_high_water_bits     0x00007800U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_high_water_bits  0x0000000fU

/* all used bits of 'NIOL_iol_uart_rx_high_water': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_high_water 0x00007fffU

enum {
  BFW_NIOL_iol_uart_rx_high_water_bytes     = 11, /* [10:0] */
  BFW_NIOL_iol_uart_rx_high_water_bits      = 4,  /* [14:11] */
  BFW_NIOL_iol_uart_rx_high_water_reserved1 = 17  /* [31:15] */
};

typedef struct NIOL_IOL_UART_RX_HIGH_WATER_BIT_Ttag {
  unsigned int bytes     : BFW_NIOL_iol_uart_rx_high_water_bytes;     /* IRQ.rx_high_water is asserted if                                                                         */
                                                                      /* (RX_LEN == RX_HIGH_WATER.bytes AND RX_BUFFER.bits >= RX_HIGH_WATER.bits) OR                              */
                                                                      /* (RX_LEN < RX_HIGH_WATER.bytes)                                                                           */
                                                                      /* This register can be changed during reception of a frame to generate multiple interrupts per descriptor. */
                                                                      /* Note: When setting bytes = 0 and bits = 0xf the IRQ will never be triggered, hence it is the             */
                                                                      /* default setting.                                                                                         */
  unsigned int bits      : BFW_NIOL_iol_uart_rx_high_water_bits;      /*                                                                                                          */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_high_water_reserved1; /* reserved                                                                                                 */
} NIOL_IOL_UART_RX_HIGH_WATER_BIT_T;

typedef union {
  uint32_t                          val;
  NIOL_IOL_UART_RX_HIGH_WATER_BIT_T bf;
} NIOL_IOL_UART_RX_HIGH_WATER_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_len */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_len        0x00000058U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_len 0x00000A58U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_len 0x00000B58U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_len 0x00000C58U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_len 0x00000D58U

#define MSK_NIOL_iol_uart_rx_len_val 0x000007ffU
#define SRT_NIOL_iol_uart_rx_len_val 0

/* all used bits of 'NIOL_iol_uart_rx_len': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_len 0x000007ffU

enum {
  BFW_NIOL_iol_uart_rx_len_val       = 11, /* [10:0] */
  BFW_NIOL_iol_uart_rx_len_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_IOL_UART_RX_LEN_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_len_val;       /* UART bytes remaining to be written by DMA.                                                  */
                                                               /* UART byte (RxDmaDescriptor.Len - RX_LEN.val) has been written by DMA and can be read by SW. */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_len_reserved1; /* reserved                                                                                    */
} NIOL_IOL_UART_RX_LEN_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_UART_RX_LEN_BIT_T bf;
} NIOL_IOL_UART_RX_LEN_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_len_saved */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_len_saved        0x0000005CU
#define Adr_NIOL_iol_uart_a_iol_uart_rx_len_saved 0x00000A5CU
#define Adr_NIOL_iol_uart_b_iol_uart_rx_len_saved 0x00000B5CU
#define Adr_NIOL_iol_uart_c_iol_uart_rx_len_saved 0x00000C5CU
#define Adr_NIOL_iol_uart_d_iol_uart_rx_len_saved 0x00000D5CU

#define MSK_NIOL_iol_uart_rx_len_saved_val 0x000007ffU
#define SRT_NIOL_iol_uart_rx_len_saved_val 0

/* all used bits of 'NIOL_iol_uart_rx_len_saved': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_len_saved 0x000007ffU

enum {
  BFW_NIOL_iol_uart_rx_len_saved_val       = 11, /* [10:0] */
  BFW_NIOL_iol_uart_rx_len_saved_reserved1 = 21  /* [31:11] */
};

typedef struct NIOL_IOL_UART_RX_LEN_SAVED_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_len_saved_val;       /* RX_LEN when RX_BUFFER or RX_XOR was read */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_len_saved_reserved1; /* reserved                                 */
} NIOL_IOL_UART_RX_LEN_SAVED_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_UART_RX_LEN_SAVED_BIT_T bf;
} NIOL_IOL_UART_RX_LEN_SAVED_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_buffer */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_buffer        0x00000060U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_buffer 0x00000A60U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_buffer 0x00000B60U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_buffer 0x00000C60U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_buffer 0x00000D60U

#define MSK_NIOL_iol_uart_rx_buffer_data 0x000000ffU
#define SRT_NIOL_iol_uart_rx_buffer_data 0
#define MSK_NIOL_iol_uart_rx_buffer_bits 0x00000f00U
#define SRT_NIOL_iol_uart_rx_buffer_bits 8

/* all used bits of 'NIOL_iol_uart_rx_buffer': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_buffer 0x00000fffU

enum {
  BFW_NIOL_iol_uart_rx_buffer_data      = 8,  /* [7:0] */
  BFW_NIOL_iol_uart_rx_buffer_bits      = 4,  /* [11:8] */
  BFW_NIOL_iol_uart_rx_buffer_reserved1 = 20  /* [31:12] */
};

typedef struct NIOL_IOL_UART_RX_BUFFER_BIT_Ttag {
  unsigned int data      : BFW_NIOL_iol_uart_rx_buffer_data;      /* data (and parity) of UART frame (RxDmaDescriptor.Len - RX_LEN.val + 1) currently received  */
                                                                  /* (omitting the start bit)                                                                   */
                                                                  /* Updated at the same cycle as RX_LEN                                                        */
  unsigned int bits      : BFW_NIOL_iol_uart_rx_buffer_bits;      /* number of received bits in data                                                            */
                                                                  /* 0: data = 0, no bit valid (i.e. still receiving (RxDmaDescriptor.Len - RX_LEN.val) parity  */
                                                                  /*     or stop bit _or_ start bit or d0 of (RxDmaDescriptor.Len - RX_LEN.val + 1))            */
                                                                  /* 1: d0 in data[0] is valid                                                                  */
                                                                  /* ....                                                                                       */
                                                                  /* 8: d0 in data[7] is valid                                                                  */
                                                                  /* Updated at the same cycle as RX_LEN                                                        */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_buffer_reserved1; /* reserved                                                                                   */
} NIOL_IOL_UART_RX_BUFFER_BIT_T;

typedef union {
  uint32_t                      val;
  NIOL_IOL_UART_RX_BUFFER_BIT_T bf;
} NIOL_IOL_UART_RX_BUFFER_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_xor */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_xor        0x00000064U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_xor 0x00000A64U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_xor 0x00000B64U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_xor 0x00000C64U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_xor 0x00000D64U

#define MSK_NIOL_iol_uart_rx_xor_val 0x000000ffU
#define SRT_NIOL_iol_uart_rx_xor_val 0

/* all used bits of 'NIOL_iol_uart_rx_xor': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_xor 0x000000ffU

enum {
  BFW_NIOL_iol_uart_rx_xor_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_uart_rx_xor_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_UART_RX_XOR_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_rx_xor_val;       /* XOR of the received bytes of the current descriptor until (including)  */
                                                               /* (RxDmaDescriptor.Len - RX_LEN.val)                                     */
                                                               /* Updated at the same cycle as RX_LEN                                    */
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_xor_reserved1; /* reserved                                                               */
} NIOL_IOL_UART_RX_XOR_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_UART_RX_XOR_BIT_T bf;
} NIOL_IOL_UART_RX_XOR_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_response_timer */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_response_timer        0x00000068U
#define Adr_NIOL_iol_uart_a_iol_uart_response_timer 0x00000A68U
#define Adr_NIOL_iol_uart_b_iol_uart_response_timer 0x00000B68U
#define Adr_NIOL_iol_uart_c_iol_uart_response_timer 0x00000C68U
#define Adr_NIOL_iol_uart_d_iol_uart_response_timer 0x00000D68U
#define DFLT_VAL_NIOL_iol_uart_response_timer       0x00000000U

#define MSK_NIOL_iol_uart_response_timer_val           0x0000001fU
#define SRT_NIOL_iol_uart_response_timer_val           0
#define DFLT_VAL_NIOL_iol_uart_response_timer_val      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_response_timer_val   0x00000000U
#define MSK_NIOL_iol_uart_response_timer_cfg           0x00000020U
#define SRT_NIOL_iol_uart_response_timer_cfg           5
#define DFLT_VAL_NIOL_iol_uart_response_timer_cfg      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_response_timer_cfg   0x00000000U
#define MSK_NIOL_iol_uart_response_timer_start         0x00000040U
#define SRT_NIOL_iol_uart_response_timer_start         6
#define DFLT_VAL_NIOL_iol_uart_response_timer_start    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_response_timer_start 0x00000000U

/* all used bits of 'NIOL_iol_uart_response_timer': */
#define MSK_USED_BITS_NIOL_iol_uart_response_timer 0x0000007fU

enum {
  BFW_NIOL_iol_uart_response_timer_val       = 5,  /* [4:0] */
  BFW_NIOL_iol_uart_response_timer_cfg       = 1,  /* [5] */
  BFW_NIOL_iol_uart_response_timer_start     = 1,  /* [6] */
  BFW_NIOL_iol_uart_response_timer_reserved1 = 25  /* [31:7] */
};

typedef struct NIOL_IOL_UART_RESPONSE_TIMER_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_response_timer_val;       /* Response timer value in RX_TBIT.                                                          */
                                                                       /* 0:      no timeout                                                                        */
                                                                       /* 1..MAX: The timer is started and stopped according to 'cfg' bit. When the timeout occurs  */
                                                                       /*         IRQ_RAW.response_timer_evt is asserted.                                           */
  unsigned int cfg       : BFW_NIOL_iol_uart_response_timer_cfg;       /* Response timer configuration.                                                             */
                                                                       /* 0: Response timer is started at the end of the stop bit of the last TX descriptor byte    */
                                                                       /*    when no new TX descriptor is available (IOL master). It is stopped when a startbit     */
                                                                       /*    edge is detected by the receive logic.                                                 */
                                                                       /* 1: Response timer is started at the end of the stop bit of the last RX descriptor byte    */
                                                                       /*    when no new RX descriptor is available (IOL slave). It is stopped/aborted when a       */
                                                                       /*    startbit edge is detected by the receive logic (usually not a use case in IOL slave    */
                                                                       /*    mode).                                                                                 */
  unsigned int start     : BFW_NIOL_iol_uart_response_timer_start;     /* Response timer manual start.                                                              */
                                                                       /* Writing a '1' will manually (re)start the response timer. It will only have an effect     */
                                                                       /* if no character reception is in progress.                                                 */
                                                                       /* This bit will be reset automatically by hardware and is always '0' on read.               */
  unsigned int reserved1 : BFW_NIOL_iol_uart_response_timer_reserved1; /* reserved                                                                                  */
} NIOL_IOL_UART_RESPONSE_TIMER_BIT_T;

typedef union {
  uint32_t                           val;
  NIOL_IOL_UART_RESPONSE_TIMER_BIT_T bf;
} NIOL_IOL_UART_RESPONSE_TIMER_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_dma_ac_high */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_dma_ac_high        0x0000006CU
#define Adr_NIOL_iol_uart_a_iol_uart_dma_ac_high 0x00000A6CU
#define Adr_NIOL_iol_uart_b_iol_uart_dma_ac_high 0x00000B6CU
#define Adr_NIOL_iol_uart_c_iol_uart_dma_ac_high 0x00000C6CU
#define Adr_NIOL_iol_uart_d_iol_uart_dma_ac_high 0x00000D6CU
#define DFLT_VAL_NIOL_iol_uart_dma_ac_high       0x0000fff0U

#define MSK_NIOL_iol_uart_dma_ac_high_val         0x0000fff0U
#define SRT_NIOL_iol_uart_dma_ac_high_val         4
#define DFLT_VAL_NIOL_iol_uart_dma_ac_high_val    0x0000fff0U
#define DFLT_BF_VAL_NIOL_iol_uart_dma_ac_high_val 0x00000fffU

/* all used bits of 'NIOL_iol_uart_dma_ac_high': */
#define MSK_USED_BITS_NIOL_iol_uart_dma_ac_high 0x0000fff0U

enum {
  BFW_NIOL_iol_uart_dma_ac_high_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_iol_uart_dma_ac_high_val       = 12, /* [15:4] */
  BFW_NIOL_iol_uart_dma_ac_high_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_DMA_AC_HIGH_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_uart_dma_ac_high_reserved1; /* reserved                          */
  unsigned int val       : BFW_NIOL_iol_uart_dma_ac_high_val;       /* DMA access control higher address */
  unsigned int reserved2 : BFW_NIOL_iol_uart_dma_ac_high_reserved2; /* reserved                          */
} NIOL_IOL_UART_DMA_AC_HIGH_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_UART_DMA_AC_HIGH_BIT_T bf;
} NIOL_IOL_UART_DMA_AC_HIGH_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_dma_ac_low */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_dma_ac_low        0x00000070U
#define Adr_NIOL_iol_uart_a_iol_uart_dma_ac_low 0x00000A70U
#define Adr_NIOL_iol_uart_b_iol_uart_dma_ac_low 0x00000B70U
#define Adr_NIOL_iol_uart_c_iol_uart_dma_ac_low 0x00000C70U
#define Adr_NIOL_iol_uart_d_iol_uart_dma_ac_low 0x00000D70U
#define DFLT_VAL_NIOL_iol_uart_dma_ac_low       0x00000000U

#define MSK_NIOL_iol_uart_dma_ac_low_val         0x0000fff0U
#define SRT_NIOL_iol_uart_dma_ac_low_val         4
#define DFLT_VAL_NIOL_iol_uart_dma_ac_low_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_dma_ac_low_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_dma_ac_low': */
#define MSK_USED_BITS_NIOL_iol_uart_dma_ac_low 0x0000fff0U

enum {
  BFW_NIOL_iol_uart_dma_ac_low_reserved1 = 4,  /* [3:0] */
  BFW_NIOL_iol_uart_dma_ac_low_val       = 12, /* [15:4] */
  BFW_NIOL_iol_uart_dma_ac_low_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_DMA_AC_LOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_uart_dma_ac_low_reserved1; /* reserved                                                                                                            */
  unsigned int val       : BFW_NIOL_iol_uart_dma_ac_low_val;       /* DMA access control lower addressDMA writes are only executed when CFG_AC_LOW & 0x0 <= address <= CFG_AC_HIGH & 0x0. */
                                                                   /* Writes outside this range will be discarded and assert IRQ_RAW.ac_err_evt.                                          */
  unsigned int reserved2 : BFW_NIOL_iol_uart_dma_ac_low_reserved2; /* reserved                                                                                                            */
} NIOL_IOL_UART_DMA_AC_LOW_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_DMA_AC_LOW_BIT_T bf;
} NIOL_IOL_UART_DMA_AC_LOW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_dma_ctrl */
/* =>  */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_dma_ctrl        0x00000074U
#define Adr_NIOL_iol_uart_a_iol_uart_dma_ctrl 0x00000A74U
#define Adr_NIOL_iol_uart_b_iol_uart_dma_ctrl 0x00000B74U
#define Adr_NIOL_iol_uart_c_iol_uart_dma_ctrl 0x00000C74U
#define Adr_NIOL_iol_uart_d_iol_uart_dma_ctrl 0x00000D74U
#define DFLT_VAL_NIOL_iol_uart_dma_ctrl       0x00000000U

#define MSK_NIOL_iol_uart_dma_ctrl_tx_adr_now_skip         0x00000001U
#define SRT_NIOL_iol_uart_dma_ctrl_tx_adr_now_skip         0
#define DFLT_VAL_NIOL_iol_uart_dma_ctrl_tx_adr_now_skip    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_dma_ctrl_tx_adr_now_skip 0x00000000U
#define MSK_NIOL_iol_uart_dma_ctrl_tx_adr_next_clr         0x00000002U
#define SRT_NIOL_iol_uart_dma_ctrl_tx_adr_next_clr         1
#define DFLT_VAL_NIOL_iol_uart_dma_ctrl_tx_adr_next_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_dma_ctrl_tx_adr_next_clr 0x00000000U
#define MSK_NIOL_iol_uart_dma_ctrl_rx_adr_now_skip         0x00000004U
#define SRT_NIOL_iol_uart_dma_ctrl_rx_adr_now_skip         2
#define DFLT_VAL_NIOL_iol_uart_dma_ctrl_rx_adr_now_skip    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_dma_ctrl_rx_adr_now_skip 0x00000000U
#define MSK_NIOL_iol_uart_dma_ctrl_rx_adr_next_clr         0x00000008U
#define SRT_NIOL_iol_uart_dma_ctrl_rx_adr_next_clr         3
#define DFLT_VAL_NIOL_iol_uart_dma_ctrl_rx_adr_next_clr    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_dma_ctrl_rx_adr_next_clr 0x00000000U

/* all used bits of 'NIOL_iol_uart_dma_ctrl': */
#define MSK_USED_BITS_NIOL_iol_uart_dma_ctrl 0x0000000fU

enum {
  BFW_NIOL_iol_uart_dma_ctrl_tx_adr_now_skip = 1,  /* [0] */
  BFW_NIOL_iol_uart_dma_ctrl_tx_adr_next_clr = 1,  /* [1] */
  BFW_NIOL_iol_uart_dma_ctrl_rx_adr_now_skip = 1,  /* [2] */
  BFW_NIOL_iol_uart_dma_ctrl_rx_adr_next_clr = 1,  /* [3] */
  BFW_NIOL_iol_uart_dma_ctrl_reserved1       = 28  /* [31:4] */
};

typedef struct NIOL_IOL_UART_DMA_CTRL_BIT_Ttag {
  unsigned int tx_adr_now_skip : BFW_NIOL_iol_uart_dma_ctrl_tx_adr_now_skip; /* 1: advance to TX_ADR_NEXT after the currently transmitted byte */
  unsigned int tx_adr_next_clr : BFW_NIOL_iol_uart_dma_ctrl_tx_adr_next_clr; /* 1: clear TX_ADR_NEXT (buffer flag set to empty)                */
  unsigned int rx_adr_now_skip : BFW_NIOL_iol_uart_dma_ctrl_rx_adr_now_skip; /* 1: advance to RX_ADR_NEXT after the currently received byte    */
  unsigned int rx_adr_next_clr : BFW_NIOL_iol_uart_dma_ctrl_rx_adr_next_clr; /* 1: clear RX_ADR_NEXT (buffer flag set to empty)                */
  unsigned int reserved1       : BFW_NIOL_iol_uart_dma_ctrl_reserved1;       /* reserved                                                       */
} NIOL_IOL_UART_DMA_CTRL_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_IOL_UART_DMA_CTRL_BIT_T bf;
} NIOL_IOL_UART_DMA_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_adr_next */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_adr_next        0x00000078U
#define Adr_NIOL_iol_uart_a_iol_uart_tx_adr_next 0x00000A78U
#define Adr_NIOL_iol_uart_b_iol_uart_tx_adr_next 0x00000B78U
#define Adr_NIOL_iol_uart_c_iol_uart_tx_adr_next 0x00000C78U
#define Adr_NIOL_iol_uart_d_iol_uart_tx_adr_next 0x00000D78U
#define DFLT_VAL_NIOL_iol_uart_tx_adr_next       0x00000000U

#define MSK_NIOL_iol_uart_tx_adr_next_val         0x0000fffeU
#define SRT_NIOL_iol_uart_tx_adr_next_val         1
#define DFLT_VAL_NIOL_iol_uart_tx_adr_next_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_tx_adr_next_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_tx_adr_next': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_adr_next 0x0000fffeU

enum {
  BFW_NIOL_iol_uart_tx_adr_next_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_uart_tx_adr_next_val       = 15, /* [15:1] */
  BFW_NIOL_iol_uart_tx_adr_next_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_TX_ADR_NEXT_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_adr_next_reserved1; /* reserved */
  unsigned int val       : BFW_NIOL_iol_uart_tx_adr_next_val;       /*          */
  unsigned int reserved2 : BFW_NIOL_iol_uart_tx_adr_next_reserved2; /* reserved */
} NIOL_IOL_UART_TX_ADR_NEXT_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_UART_TX_ADR_NEXT_BIT_T bf;
} NIOL_IOL_UART_TX_ADR_NEXT_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_tx_adr_now */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_tx_adr_now        0x0000007CU
#define Adr_NIOL_iol_uart_a_iol_uart_tx_adr_now 0x00000A7CU
#define Adr_NIOL_iol_uart_b_iol_uart_tx_adr_now 0x00000B7CU
#define Adr_NIOL_iol_uart_c_iol_uart_tx_adr_now 0x00000C7CU
#define Adr_NIOL_iol_uart_d_iol_uart_tx_adr_now 0x00000D7CU

#define MSK_NIOL_iol_uart_tx_adr_now_val 0x0000fffeU
#define SRT_NIOL_iol_uart_tx_adr_now_val 1

/* all used bits of 'NIOL_iol_uart_tx_adr_now': */
#define MSK_USED_BITS_NIOL_iol_uart_tx_adr_now 0x0000fffeU

enum {
  BFW_NIOL_iol_uart_tx_adr_now_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_uart_tx_adr_now_val       = 15, /* [15:1] */
  BFW_NIOL_iol_uart_tx_adr_now_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_TX_ADR_NOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_uart_tx_adr_now_reserved1; /* reserved */
  unsigned int val       : BFW_NIOL_iol_uart_tx_adr_now_val;       /*          */
  unsigned int reserved2 : BFW_NIOL_iol_uart_tx_adr_now_reserved2; /* reserved */
} NIOL_IOL_UART_TX_ADR_NOW_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_TX_ADR_NOW_BIT_T bf;
} NIOL_IOL_UART_TX_ADR_NOW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_adr_next */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_adr_next        0x00000080U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_adr_next 0x00000A80U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_adr_next 0x00000B80U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_adr_next 0x00000C80U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_adr_next 0x00000D80U
#define DFLT_VAL_NIOL_iol_uart_rx_adr_next       0x00000000U

#define MSK_NIOL_iol_uart_rx_adr_next_val         0x0000fffeU
#define SRT_NIOL_iol_uart_rx_adr_next_val         1
#define DFLT_VAL_NIOL_iol_uart_rx_adr_next_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_rx_adr_next_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_rx_adr_next': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_adr_next 0x0000fffeU

enum {
  BFW_NIOL_iol_uart_rx_adr_next_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_adr_next_val       = 15, /* [15:1] */
  BFW_NIOL_iol_uart_rx_adr_next_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_ADR_NEXT_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_adr_next_reserved1; /* reserved */
  unsigned int val       : BFW_NIOL_iol_uart_rx_adr_next_val;       /*          */
  unsigned int reserved2 : BFW_NIOL_iol_uart_rx_adr_next_reserved2; /* reserved */
} NIOL_IOL_UART_RX_ADR_NEXT_BIT_T;

typedef union {
  uint32_t                        val;
  NIOL_IOL_UART_RX_ADR_NEXT_BIT_T bf;
} NIOL_IOL_UART_RX_ADR_NEXT_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_rx_adr_now */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_rx_adr_now        0x00000084U
#define Adr_NIOL_iol_uart_a_iol_uart_rx_adr_now 0x00000A84U
#define Adr_NIOL_iol_uart_b_iol_uart_rx_adr_now 0x00000B84U
#define Adr_NIOL_iol_uart_c_iol_uart_rx_adr_now 0x00000C84U
#define Adr_NIOL_iol_uart_d_iol_uart_rx_adr_now 0x00000D84U

#define MSK_NIOL_iol_uart_rx_adr_now_val 0x0000fffeU
#define SRT_NIOL_iol_uart_rx_adr_now_val 1

/* all used bits of 'NIOL_iol_uart_rx_adr_now': */
#define MSK_USED_BITS_NIOL_iol_uart_rx_adr_now 0x0000fffeU

enum {
  BFW_NIOL_iol_uart_rx_adr_now_reserved1 = 1,  /* [0] */
  BFW_NIOL_iol_uart_rx_adr_now_val       = 15, /* [15:1] */
  BFW_NIOL_iol_uart_rx_adr_now_reserved2 = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_RX_ADR_NOW_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_iol_uart_rx_adr_now_reserved1; /* reserved */
  unsigned int val       : BFW_NIOL_iol_uart_rx_adr_now_val;       /*          */
  unsigned int reserved2 : BFW_NIOL_iol_uart_rx_adr_now_reserved2; /* reserved */
} NIOL_IOL_UART_RX_ADR_NOW_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_RX_ADR_NOW_BIT_T bf;
} NIOL_IOL_UART_RX_ADR_NOW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_iol_crc_compression */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_iol_crc_compression        0x00000088U
#define Adr_NIOL_iol_uart_a_iol_uart_iol_crc_compression 0x00000A88U
#define Adr_NIOL_iol_uart_b_iol_uart_iol_crc_compression 0x00000B88U
#define Adr_NIOL_iol_uart_c_iol_uart_iol_crc_compression 0x00000C88U
#define Adr_NIOL_iol_uart_d_iol_uart_iol_crc_compression 0x00000D88U
#define DFLT_VAL_NIOL_iol_uart_iol_crc_compression       0x00000000U

#define MSK_NIOL_iol_uart_iol_crc_compression_val         0x000000ffU
#define SRT_NIOL_iol_uart_iol_crc_compression_val         0
#define DFLT_VAL_NIOL_iol_uart_iol_crc_compression_val    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_iol_crc_compression_val 0x00000000U

/* all used bits of 'NIOL_iol_uart_iol_crc_compression': */
#define MSK_USED_BITS_NIOL_iol_uart_iol_crc_compression 0x000000ffU

enum {
  BFW_NIOL_iol_uart_iol_crc_compression_val       = 8,  /* [7:0] */
  BFW_NIOL_iol_uart_iol_crc_compression_reserved1 = 24  /* [31:8] */
};

typedef struct NIOL_IOL_UART_IOL_CRC_COMPRESSION_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_iol_crc_compression_val;       /* HW accelerator for CRC compression.                                                      */
                                                                            /* Writing a byte to this register will set this register to its compressed CRC equivalent. */
  unsigned int reserved1 : BFW_NIOL_iol_uart_iol_crc_compression_reserved1; /* reserved                                                                                 */
} NIOL_IOL_UART_IOL_CRC_COMPRESSION_BIT_T;

typedef union {
  uint32_t                                val;
  NIOL_IOL_UART_IOL_CRC_COMPRESSION_BIT_T bf;
} NIOL_IOL_UART_IOL_CRC_COMPRESSION_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_irq_raw */
/* => Raw IRQs: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event IRQ, status IRQs must be reset at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_irq_raw        0x0000008CU
#define Adr_NIOL_iol_uart_a_iol_uart_irq_raw 0x00000A8CU
#define Adr_NIOL_iol_uart_b_iol_uart_irq_raw 0x00000B8CU
#define Adr_NIOL_iol_uart_c_iol_uart_irq_raw 0x00000C8CU
#define Adr_NIOL_iol_uart_d_iol_uart_irq_raw 0x00000D8CU
#define DFLT_VAL_NIOL_iol_uart_irq_raw       0x00000000U

#define MSK_NIOL_iol_uart_irq_raw_tx_completed_evt            0x00000001U
#define SRT_NIOL_iol_uart_irq_raw_tx_completed_evt            0
#define DFLT_VAL_NIOL_iol_uart_irq_raw_tx_completed_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_tx_completed_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_tx_dma_err_evt              0x00000002U
#define SRT_NIOL_iol_uart_irq_raw_tx_dma_err_evt              1
#define DFLT_VAL_NIOL_iol_uart_irq_raw_tx_dma_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_tx_dma_err_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_tx_sync_err_evt             0x00000004U
#define SRT_NIOL_iol_uart_irq_raw_tx_sync_err_evt             2
#define DFLT_VAL_NIOL_iol_uart_irq_raw_tx_sync_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_tx_sync_err_evt     0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_response_timer_evt          0x00000008U
#define SRT_NIOL_iol_uart_irq_raw_response_timer_evt          3
#define DFLT_VAL_NIOL_iol_uart_irq_raw_response_timer_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_response_timer_evt  0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_completed_evt            0x00000010U
#define SRT_NIOL_iol_uart_irq_raw_rx_completed_evt            4
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_completed_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_completed_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_start_err_evt            0x00000020U
#define SRT_NIOL_iol_uart_irq_raw_rx_start_err_evt            5
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_start_err_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_start_err_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_parity_err_evt           0x00000040U
#define SRT_NIOL_iol_uart_irq_raw_rx_parity_err_evt           6
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_parity_err_evt      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_parity_err_evt   0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_stop_err_evt             0x00000080U
#define SRT_NIOL_iol_uart_irq_raw_rx_stop_err_evt             7
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_stop_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_stop_err_evt     0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_timeout_evt              0x00000100U
#define SRT_NIOL_iol_uart_irq_raw_rx_timeout_evt              8
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_timeout_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_timeout_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_overflow_err_evt         0x00000200U
#define SRT_NIOL_iol_uart_irq_raw_rx_overflow_err_evt         9
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_overflow_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_overflow_err_evt 0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_dma_err_evt              0x00000400U
#define SRT_NIOL_iol_uart_irq_raw_rx_dma_err_evt              10
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_dma_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_dma_err_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_ac_err_evt                  0x00000800U
#define SRT_NIOL_iol_uart_irq_raw_ac_err_evt                  11
#define DFLT_VAL_NIOL_iol_uart_irq_raw_ac_err_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_ac_err_evt          0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_tx_low_water                0x00001000U
#define SRT_NIOL_iol_uart_irq_raw_tx_low_water                12
#define DFLT_VAL_NIOL_iol_uart_irq_raw_tx_low_water           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_tx_low_water        0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_tx_adr_next_empty           0x00002000U
#define SRT_NIOL_iol_uart_irq_raw_tx_adr_next_empty           13
#define DFLT_VAL_NIOL_iol_uart_irq_raw_tx_adr_next_empty      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_tx_adr_next_empty   0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_high_water               0x00004000U
#define SRT_NIOL_iol_uart_irq_raw_rx_high_water               14
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_high_water          0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_high_water       0x00000000U
#define MSK_NIOL_iol_uart_irq_raw_rx_adr_next_empty           0x00008000U
#define SRT_NIOL_iol_uart_irq_raw_rx_adr_next_empty           15
#define DFLT_VAL_NIOL_iol_uart_irq_raw_rx_adr_next_empty      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_raw_rx_adr_next_empty   0x00000000U

/* all used bits of 'NIOL_iol_uart_irq_raw': */
#define MSK_USED_BITS_NIOL_iol_uart_irq_raw 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_irq_raw_tx_completed_evt    = 1,  /* [0] */
  BFW_NIOL_iol_uart_irq_raw_tx_dma_err_evt      = 1,  /* [1] */
  BFW_NIOL_iol_uart_irq_raw_tx_sync_err_evt     = 1,  /* [2] */
  BFW_NIOL_iol_uart_irq_raw_response_timer_evt  = 1,  /* [3] */
  BFW_NIOL_iol_uart_irq_raw_rx_completed_evt    = 1,  /* [4] */
  BFW_NIOL_iol_uart_irq_raw_rx_start_err_evt    = 1,  /* [5] */
  BFW_NIOL_iol_uart_irq_raw_rx_parity_err_evt   = 1,  /* [6] */
  BFW_NIOL_iol_uart_irq_raw_rx_stop_err_evt     = 1,  /* [7] */
  BFW_NIOL_iol_uart_irq_raw_rx_timeout_evt      = 1,  /* [8] */
  BFW_NIOL_iol_uart_irq_raw_rx_overflow_err_evt = 1,  /* [9] */
  BFW_NIOL_iol_uart_irq_raw_rx_dma_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_uart_irq_raw_ac_err_evt          = 1,  /* [11] */
  BFW_NIOL_iol_uart_irq_raw_tx_low_water        = 1,  /* [12] */
  BFW_NIOL_iol_uart_irq_raw_tx_adr_next_empty   = 1,  /* [13] */
  BFW_NIOL_iol_uart_irq_raw_rx_high_water       = 1,  /* [14] */
  BFW_NIOL_iol_uart_irq_raw_rx_adr_next_empty   = 1,  /* [15] */
  BFW_NIOL_iol_uart_irq_raw_reserved1           = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_IRQ_RAW_BIT_Ttag {
  unsigned int tx_completed_evt    : BFW_NIOL_iol_uart_irq_raw_tx_completed_evt;    /* EVENT : 1: last byte of descriptor has been transmitted             */
  unsigned int tx_dma_err_evt      : BFW_NIOL_iol_uart_irq_raw_tx_dma_err_evt;      /* EVENT : 1: tx data read DMA too slow, wrong data transmitted        */
  unsigned int tx_sync_err_evt     : BFW_NIOL_iol_uart_irq_raw_tx_sync_err_evt;     /* EVENT : 1: sync_tx occurred and no frame was ready for transmit     */
  unsigned int response_timer_evt  : BFW_NIOL_iol_uart_irq_raw_response_timer_evt;  /* EVENT : 1: Response timer event occurred                            */
  unsigned int rx_completed_evt    : BFW_NIOL_iol_uart_irq_raw_rx_completed_evt;    /* EVENT : 1: complete rx descriptor has been written                  */
  unsigned int rx_start_err_evt    : BFW_NIOL_iol_uart_irq_raw_rx_start_err_evt;    /* EVENT : 1: start bit error occurred                                 */
  unsigned int rx_parity_err_evt   : BFW_NIOL_iol_uart_irq_raw_rx_parity_err_evt;   /* EVENT : 1: parity error occurred                                    */
  unsigned int rx_stop_err_evt     : BFW_NIOL_iol_uart_irq_raw_rx_stop_err_evt;     /* EVENT : 1: stop bit error occurred                                  */
  unsigned int rx_timeout_evt      : BFW_NIOL_iol_uart_irq_raw_rx_timeout_evt;      /* EVENT : 1: Inter character receive timeout occurred                 */
  unsigned int rx_overflow_err_evt : BFW_NIOL_iol_uart_irq_raw_rx_overflow_err_evt; /* EVENT : 1: data byte received and no descriptor available           */
  unsigned int rx_dma_err_evt      : BFW_NIOL_iol_uart_irq_raw_rx_dma_err_evt;      /* EVENT : 1: rx data write DMA too slow, receive data not written     */
  unsigned int ac_err_evt          : BFW_NIOL_iol_uart_irq_raw_ac_err_evt;          /* EVENT : 1: access control error: write outside of allowed addresses */
  unsigned int tx_low_water        : BFW_NIOL_iol_uart_irq_raw_tx_low_water;        /* STATUS: see TX_LEN_LOW_WATER                                        */
  unsigned int tx_adr_next_empty   : BFW_NIOL_iol_uart_irq_raw_tx_adr_next_empty;   /* STATUS                                                              */
  unsigned int rx_high_water       : BFW_NIOL_iol_uart_irq_raw_rx_high_water;       /* STATUS: see RX_LEN_HIGH_WATER                                       */
  unsigned int rx_adr_next_empty   : BFW_NIOL_iol_uart_irq_raw_rx_adr_next_empty;   /* STATUS                                                              */
  unsigned int reserved1           : BFW_NIOL_iol_uart_irq_raw_reserved1;           /* reserved                                                            */
} NIOL_IOL_UART_IRQ_RAW_BIT_T;

typedef union {
  uint32_t                    val;
  NIOL_IOL_UART_IRQ_RAW_BIT_T bf;
} NIOL_IOL_UART_IRQ_RAW_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_irq_mask_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing to adr_iol_uart_irq_raw */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_irq_mask_set        0x00000090U
#define Adr_NIOL_iol_uart_a_iol_uart_irq_mask_set 0x00000A90U
#define Adr_NIOL_iol_uart_b_iol_uart_irq_mask_set 0x00000B90U
#define Adr_NIOL_iol_uart_c_iol_uart_irq_mask_set 0x00000C90U
#define Adr_NIOL_iol_uart_d_iol_uart_irq_mask_set 0x00000D90U
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set       0x00000000U

#define MSK_NIOL_iol_uart_irq_mask_set_tx_completed_evt            0x00000001U
#define SRT_NIOL_iol_uart_irq_mask_set_tx_completed_evt            0
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_tx_completed_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_tx_completed_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_tx_dma_err_evt              0x00000002U
#define SRT_NIOL_iol_uart_irq_mask_set_tx_dma_err_evt              1
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_tx_dma_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_tx_dma_err_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_tx_sync_err_evt             0x00000004U
#define SRT_NIOL_iol_uart_irq_mask_set_tx_sync_err_evt             2
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_tx_sync_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_tx_sync_err_evt     0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_response_timer_evt          0x00000008U
#define SRT_NIOL_iol_uart_irq_mask_set_response_timer_evt          3
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_response_timer_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_response_timer_evt  0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_completed_evt            0x00000010U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_completed_evt            4
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_completed_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_completed_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_start_err_evt            0x00000020U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_start_err_evt            5
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_start_err_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_start_err_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_parity_err_evt           0x00000040U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_parity_err_evt           6
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_parity_err_evt      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_parity_err_evt   0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_stop_err_evt             0x00000080U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_stop_err_evt             7
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_stop_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_stop_err_evt     0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_timeout_evt              0x00000100U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_timeout_evt              8
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_timeout_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_timeout_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_overflow_err_evt         0x00000200U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_overflow_err_evt         9
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_overflow_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_overflow_err_evt 0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_dma_err_evt              0x00000400U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_dma_err_evt              10
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_dma_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_dma_err_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_ac_err_evt                  0x00000800U
#define SRT_NIOL_iol_uart_irq_mask_set_ac_err_evt                  11
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_ac_err_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_ac_err_evt          0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_tx_low_water                0x00001000U
#define SRT_NIOL_iol_uart_irq_mask_set_tx_low_water                12
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_tx_low_water           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_tx_low_water        0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_tx_adr_next_empty           0x00002000U
#define SRT_NIOL_iol_uart_irq_mask_set_tx_adr_next_empty           13
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_tx_adr_next_empty      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_tx_adr_next_empty   0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_high_water               0x00004000U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_high_water               14
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_high_water          0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_high_water       0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_set_rx_adr_next_empty           0x00008000U
#define SRT_NIOL_iol_uart_irq_mask_set_rx_adr_next_empty           15
#define DFLT_VAL_NIOL_iol_uart_irq_mask_set_rx_adr_next_empty      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_set_rx_adr_next_empty   0x00000000U

/* all used bits of 'NIOL_iol_uart_irq_mask_set': */
#define MSK_USED_BITS_NIOL_iol_uart_irq_mask_set 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_irq_mask_set_tx_completed_evt    = 1,  /* [0] */
  BFW_NIOL_iol_uart_irq_mask_set_tx_dma_err_evt      = 1,  /* [1] */
  BFW_NIOL_iol_uart_irq_mask_set_tx_sync_err_evt     = 1,  /* [2] */
  BFW_NIOL_iol_uart_irq_mask_set_response_timer_evt  = 1,  /* [3] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_completed_evt    = 1,  /* [4] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_start_err_evt    = 1,  /* [5] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_parity_err_evt   = 1,  /* [6] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_stop_err_evt     = 1,  /* [7] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_timeout_evt      = 1,  /* [8] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_overflow_err_evt = 1,  /* [9] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_dma_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_uart_irq_mask_set_ac_err_evt          = 1,  /* [11] */
  BFW_NIOL_iol_uart_irq_mask_set_tx_low_water        = 1,  /* [12] */
  BFW_NIOL_iol_uart_irq_mask_set_tx_adr_next_empty   = 1,  /* [13] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_high_water       = 1,  /* [14] */
  BFW_NIOL_iol_uart_irq_mask_set_rx_adr_next_empty   = 1,  /* [15] */
  BFW_NIOL_iol_uart_irq_mask_set_reserved1           = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_IRQ_MASK_SET_BIT_Ttag {
  unsigned int tx_completed_evt    : BFW_NIOL_iol_uart_irq_mask_set_tx_completed_evt;    /* EVENT : 1: last byte of descriptor has been transmitted             */
  unsigned int tx_dma_err_evt      : BFW_NIOL_iol_uart_irq_mask_set_tx_dma_err_evt;      /* EVENT : 1: tx data read DMA too slow, wrong data transmitted        */
  unsigned int tx_sync_err_evt     : BFW_NIOL_iol_uart_irq_mask_set_tx_sync_err_evt;     /* EVENT : 1: sync_tx occurred and no frame was ready for transmit     */
  unsigned int response_timer_evt  : BFW_NIOL_iol_uart_irq_mask_set_response_timer_evt;  /* EVENT : 1: Response timer event occurred                            */
  unsigned int rx_completed_evt    : BFW_NIOL_iol_uart_irq_mask_set_rx_completed_evt;    /* EVENT : 1: complete rx descriptor has been written                  */
  unsigned int rx_start_err_evt    : BFW_NIOL_iol_uart_irq_mask_set_rx_start_err_evt;    /* EVENT : 1: start bit error occurred                                 */
  unsigned int rx_parity_err_evt   : BFW_NIOL_iol_uart_irq_mask_set_rx_parity_err_evt;   /* EVENT : 1: parity error occurred                                    */
  unsigned int rx_stop_err_evt     : BFW_NIOL_iol_uart_irq_mask_set_rx_stop_err_evt;     /* EVENT : 1: stop bit error occurred                                  */
  unsigned int rx_timeout_evt      : BFW_NIOL_iol_uart_irq_mask_set_rx_timeout_evt;      /* EVENT : 1: Inter character receive timeout occurred                 */
  unsigned int rx_overflow_err_evt : BFW_NIOL_iol_uart_irq_mask_set_rx_overflow_err_evt; /* EVENT : 1: data byte received and no descriptor available           */
  unsigned int rx_dma_err_evt      : BFW_NIOL_iol_uart_irq_mask_set_rx_dma_err_evt;      /* EVENT : 1: rx data write DMA too slow, receive data not written     */
  unsigned int ac_err_evt          : BFW_NIOL_iol_uart_irq_mask_set_ac_err_evt;          /* EVENT : 1: access control error: write outside of allowed addresses */
  unsigned int tx_low_water        : BFW_NIOL_iol_uart_irq_mask_set_tx_low_water;        /* STATUS: see TX_LEN_LOW_WATER                                        */
  unsigned int tx_adr_next_empty   : BFW_NIOL_iol_uart_irq_mask_set_tx_adr_next_empty;   /* STATUS                                                              */
  unsigned int rx_high_water       : BFW_NIOL_iol_uart_irq_mask_set_rx_high_water;       /* STATUS: see RX_LEN_HIGH_WATER                                       */
  unsigned int rx_adr_next_empty   : BFW_NIOL_iol_uart_irq_mask_set_rx_adr_next_empty;   /* STATUS                                                              */
  unsigned int reserved1           : BFW_NIOL_iol_uart_irq_mask_set_reserved1;           /* reserved                                                            */
} NIOL_IOL_UART_IRQ_MASK_SET_BIT_T;

typedef union {
  uint32_t                         val;
  NIOL_IOL_UART_IRQ_MASK_SET_BIT_T bf;
} NIOL_IOL_UART_IRQ_MASK_SET_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_irq_mask_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_irq_mask_reset        0x00000094U
#define Adr_NIOL_iol_uart_a_iol_uart_irq_mask_reset 0x00000A94U
#define Adr_NIOL_iol_uart_b_iol_uart_irq_mask_reset 0x00000B94U
#define Adr_NIOL_iol_uart_c_iol_uart_irq_mask_reset 0x00000C94U
#define Adr_NIOL_iol_uart_d_iol_uart_irq_mask_reset 0x00000D94U
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset       0x00000000U

#define MSK_NIOL_iol_uart_irq_mask_reset_tx_completed_evt            0x00000001U
#define SRT_NIOL_iol_uart_irq_mask_reset_tx_completed_evt            0
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_tx_completed_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_tx_completed_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_tx_dma_err_evt              0x00000002U
#define SRT_NIOL_iol_uart_irq_mask_reset_tx_dma_err_evt              1
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_tx_dma_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_tx_dma_err_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_tx_sync_err_evt             0x00000004U
#define SRT_NIOL_iol_uart_irq_mask_reset_tx_sync_err_evt             2
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_tx_sync_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_tx_sync_err_evt     0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_response_timer_evt          0x00000008U
#define SRT_NIOL_iol_uart_irq_mask_reset_response_timer_evt          3
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_response_timer_evt     0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_response_timer_evt  0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_completed_evt            0x00000010U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_completed_evt            4
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_completed_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_completed_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_start_err_evt            0x00000020U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_start_err_evt            5
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_start_err_evt       0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_start_err_evt    0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_parity_err_evt           0x00000040U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_parity_err_evt           6
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_parity_err_evt      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_parity_err_evt   0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_stop_err_evt             0x00000080U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_stop_err_evt             7
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_stop_err_evt        0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_stop_err_evt     0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_timeout_evt              0x00000100U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_timeout_evt              8
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_timeout_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_timeout_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_overflow_err_evt         0x00000200U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_overflow_err_evt         9
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_overflow_err_evt    0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_overflow_err_evt 0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_dma_err_evt              0x00000400U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_dma_err_evt              10
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_dma_err_evt         0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_dma_err_evt      0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_ac_err_evt                  0x00000800U
#define SRT_NIOL_iol_uart_irq_mask_reset_ac_err_evt                  11
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_ac_err_evt             0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_ac_err_evt          0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_tx_low_water                0x00001000U
#define SRT_NIOL_iol_uart_irq_mask_reset_tx_low_water                12
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_tx_low_water           0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_tx_low_water        0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_tx_adr_next_empty           0x00002000U
#define SRT_NIOL_iol_uart_irq_mask_reset_tx_adr_next_empty           13
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_tx_adr_next_empty      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_tx_adr_next_empty   0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_high_water               0x00004000U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_high_water               14
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_high_water          0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_high_water       0x00000000U
#define MSK_NIOL_iol_uart_irq_mask_reset_rx_adr_next_empty           0x00008000U
#define SRT_NIOL_iol_uart_irq_mask_reset_rx_adr_next_empty           15
#define DFLT_VAL_NIOL_iol_uart_irq_mask_reset_rx_adr_next_empty      0x00000000U
#define DFLT_BF_VAL_NIOL_iol_uart_irq_mask_reset_rx_adr_next_empty   0x00000000U

/* all used bits of 'NIOL_iol_uart_irq_mask_reset': */
#define MSK_USED_BITS_NIOL_iol_uart_irq_mask_reset 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_irq_mask_reset_tx_completed_evt    = 1,  /* [0] */
  BFW_NIOL_iol_uart_irq_mask_reset_tx_dma_err_evt      = 1,  /* [1] */
  BFW_NIOL_iol_uart_irq_mask_reset_tx_sync_err_evt     = 1,  /* [2] */
  BFW_NIOL_iol_uart_irq_mask_reset_response_timer_evt  = 1,  /* [3] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_completed_evt    = 1,  /* [4] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_start_err_evt    = 1,  /* [5] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_parity_err_evt   = 1,  /* [6] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_stop_err_evt     = 1,  /* [7] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_timeout_evt      = 1,  /* [8] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_overflow_err_evt = 1,  /* [9] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_dma_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_uart_irq_mask_reset_ac_err_evt          = 1,  /* [11] */
  BFW_NIOL_iol_uart_irq_mask_reset_tx_low_water        = 1,  /* [12] */
  BFW_NIOL_iol_uart_irq_mask_reset_tx_adr_next_empty   = 1,  /* [13] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_high_water       = 1,  /* [14] */
  BFW_NIOL_iol_uart_irq_mask_reset_rx_adr_next_empty   = 1,  /* [15] */
  BFW_NIOL_iol_uart_irq_mask_reset_reserved1           = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_IRQ_MASK_RESET_BIT_Ttag {
  unsigned int tx_completed_evt    : BFW_NIOL_iol_uart_irq_mask_reset_tx_completed_evt;    /* EVENT : 1: last byte of descriptor has been transmitted             */
  unsigned int tx_dma_err_evt      : BFW_NIOL_iol_uart_irq_mask_reset_tx_dma_err_evt;      /* EVENT : 1: tx data read DMA too slow, wrong data transmitted        */
  unsigned int tx_sync_err_evt     : BFW_NIOL_iol_uart_irq_mask_reset_tx_sync_err_evt;     /* EVENT : 1: sync_tx occurred and no frame was ready for transmit     */
  unsigned int response_timer_evt  : BFW_NIOL_iol_uart_irq_mask_reset_response_timer_evt;  /* EVENT : 1: Response timer event occurred                            */
  unsigned int rx_completed_evt    : BFW_NIOL_iol_uart_irq_mask_reset_rx_completed_evt;    /* EVENT : 1: complete rx descriptor has been written                  */
  unsigned int rx_start_err_evt    : BFW_NIOL_iol_uart_irq_mask_reset_rx_start_err_evt;    /* EVENT : 1: start bit error occurred                                 */
  unsigned int rx_parity_err_evt   : BFW_NIOL_iol_uart_irq_mask_reset_rx_parity_err_evt;   /* EVENT : 1: parity error occurred                                    */
  unsigned int rx_stop_err_evt     : BFW_NIOL_iol_uart_irq_mask_reset_rx_stop_err_evt;     /* EVENT : 1: stop bit error occurred                                  */
  unsigned int rx_timeout_evt      : BFW_NIOL_iol_uart_irq_mask_reset_rx_timeout_evt;      /* EVENT : 1: Inter character receive timeout occurred                 */
  unsigned int rx_overflow_err_evt : BFW_NIOL_iol_uart_irq_mask_reset_rx_overflow_err_evt; /* EVENT : 1: data byte received and no descriptor available           */
  unsigned int rx_dma_err_evt      : BFW_NIOL_iol_uart_irq_mask_reset_rx_dma_err_evt;      /* EVENT : 1: rx data write DMA too slow, receive data not written     */
  unsigned int ac_err_evt          : BFW_NIOL_iol_uart_irq_mask_reset_ac_err_evt;          /* EVENT : 1: access control error: write outside of allowed addresses */
  unsigned int tx_low_water        : BFW_NIOL_iol_uart_irq_mask_reset_tx_low_water;        /* STATUS: see TX_LEN_LOW_WATER                                        */
  unsigned int tx_adr_next_empty   : BFW_NIOL_iol_uart_irq_mask_reset_tx_adr_next_empty;   /* STATUS                                                              */
  unsigned int rx_high_water       : BFW_NIOL_iol_uart_irq_mask_reset_rx_high_water;       /* STATUS: see RX_LEN_HIGH_WATER                                       */
  unsigned int rx_adr_next_empty   : BFW_NIOL_iol_uart_irq_mask_reset_rx_adr_next_empty;   /* STATUS                                                              */
  unsigned int reserved1           : BFW_NIOL_iol_uart_irq_mask_reset_reserved1;           /* reserved                                                            */
} NIOL_IOL_UART_IRQ_MASK_RESET_BIT_T;

typedef union {
  uint32_t                           val;
  NIOL_IOL_UART_IRQ_MASK_RESET_BIT_T bf;
} NIOL_IOL_UART_IRQ_MASK_RESET_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_irq_masked */
/* => Masked IRQs: */
/*    Shows status of masked IRQs (as connected to IRQ controller). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_irq_masked        0x00000098U
#define Adr_NIOL_iol_uart_a_iol_uart_irq_masked 0x00000A98U
#define Adr_NIOL_iol_uart_b_iol_uart_irq_masked 0x00000B98U
#define Adr_NIOL_iol_uart_c_iol_uart_irq_masked 0x00000C98U
#define Adr_NIOL_iol_uart_d_iol_uart_irq_masked 0x00000D98U

#define MSK_NIOL_iol_uart_irq_masked_tx_completed_evt    0x00000001U
#define SRT_NIOL_iol_uart_irq_masked_tx_completed_evt    0
#define MSK_NIOL_iol_uart_irq_masked_tx_dma_err_evt      0x00000002U
#define SRT_NIOL_iol_uart_irq_masked_tx_dma_err_evt      1
#define MSK_NIOL_iol_uart_irq_masked_tx_sync_err_evt     0x00000004U
#define SRT_NIOL_iol_uart_irq_masked_tx_sync_err_evt     2
#define MSK_NIOL_iol_uart_irq_masked_response_timer_evt  0x00000008U
#define SRT_NIOL_iol_uart_irq_masked_response_timer_evt  3
#define MSK_NIOL_iol_uart_irq_masked_rx_completed_evt    0x00000010U
#define SRT_NIOL_iol_uart_irq_masked_rx_completed_evt    4
#define MSK_NIOL_iol_uart_irq_masked_rx_start_err_evt    0x00000020U
#define SRT_NIOL_iol_uart_irq_masked_rx_start_err_evt    5
#define MSK_NIOL_iol_uart_irq_masked_rx_parity_err_evt   0x00000040U
#define SRT_NIOL_iol_uart_irq_masked_rx_parity_err_evt   6
#define MSK_NIOL_iol_uart_irq_masked_rx_stop_err_evt     0x00000080U
#define SRT_NIOL_iol_uart_irq_masked_rx_stop_err_evt     7
#define MSK_NIOL_iol_uart_irq_masked_rx_timeout_evt      0x00000100U
#define SRT_NIOL_iol_uart_irq_masked_rx_timeout_evt      8
#define MSK_NIOL_iol_uart_irq_masked_rx_overflow_err_evt 0x00000200U
#define SRT_NIOL_iol_uart_irq_masked_rx_overflow_err_evt 9
#define MSK_NIOL_iol_uart_irq_masked_rx_dma_err_evt      0x00000400U
#define SRT_NIOL_iol_uart_irq_masked_rx_dma_err_evt      10
#define MSK_NIOL_iol_uart_irq_masked_ac_err_evt          0x00000800U
#define SRT_NIOL_iol_uart_irq_masked_ac_err_evt          11
#define MSK_NIOL_iol_uart_irq_masked_tx_low_water        0x00001000U
#define SRT_NIOL_iol_uart_irq_masked_tx_low_water        12
#define MSK_NIOL_iol_uart_irq_masked_tx_adr_next_empty   0x00002000U
#define SRT_NIOL_iol_uart_irq_masked_tx_adr_next_empty   13
#define MSK_NIOL_iol_uart_irq_masked_rx_high_water       0x00004000U
#define SRT_NIOL_iol_uart_irq_masked_rx_high_water       14
#define MSK_NIOL_iol_uart_irq_masked_rx_adr_next_empty   0x00008000U
#define SRT_NIOL_iol_uart_irq_masked_rx_adr_next_empty   15

/* all used bits of 'NIOL_iol_uart_irq_masked': */
#define MSK_USED_BITS_NIOL_iol_uart_irq_masked 0x0000ffffU

enum {
  BFW_NIOL_iol_uart_irq_masked_tx_completed_evt    = 1,  /* [0] */
  BFW_NIOL_iol_uart_irq_masked_tx_dma_err_evt      = 1,  /* [1] */
  BFW_NIOL_iol_uart_irq_masked_tx_sync_err_evt     = 1,  /* [2] */
  BFW_NIOL_iol_uart_irq_masked_response_timer_evt  = 1,  /* [3] */
  BFW_NIOL_iol_uart_irq_masked_rx_completed_evt    = 1,  /* [4] */
  BFW_NIOL_iol_uart_irq_masked_rx_start_err_evt    = 1,  /* [5] */
  BFW_NIOL_iol_uart_irq_masked_rx_parity_err_evt   = 1,  /* [6] */
  BFW_NIOL_iol_uart_irq_masked_rx_stop_err_evt     = 1,  /* [7] */
  BFW_NIOL_iol_uart_irq_masked_rx_timeout_evt      = 1,  /* [8] */
  BFW_NIOL_iol_uart_irq_masked_rx_overflow_err_evt = 1,  /* [9] */
  BFW_NIOL_iol_uart_irq_masked_rx_dma_err_evt      = 1,  /* [10] */
  BFW_NIOL_iol_uart_irq_masked_ac_err_evt          = 1,  /* [11] */
  BFW_NIOL_iol_uart_irq_masked_tx_low_water        = 1,  /* [12] */
  BFW_NIOL_iol_uart_irq_masked_tx_adr_next_empty   = 1,  /* [13] */
  BFW_NIOL_iol_uart_irq_masked_rx_high_water       = 1,  /* [14] */
  BFW_NIOL_iol_uart_irq_masked_rx_adr_next_empty   = 1,  /* [15] */
  BFW_NIOL_iol_uart_irq_masked_reserved1           = 16  /* [31:16] */
};

typedef struct NIOL_IOL_UART_IRQ_MASKED_BIT_Ttag {
  unsigned int tx_completed_evt    : BFW_NIOL_iol_uart_irq_masked_tx_completed_evt;    /* EVENT : 1: last byte of descriptor has been transmitted             */
  unsigned int tx_dma_err_evt      : BFW_NIOL_iol_uart_irq_masked_tx_dma_err_evt;      /* EVENT : 1: tx data read DMA too slow, wrong data transmitted        */
  unsigned int tx_sync_err_evt     : BFW_NIOL_iol_uart_irq_masked_tx_sync_err_evt;     /* EVENT : 1: sync_tx occurred and no frame was ready for transmit     */
  unsigned int response_timer_evt  : BFW_NIOL_iol_uart_irq_masked_response_timer_evt;  /* EVENT : 1: Response timer event occurred                            */
  unsigned int rx_completed_evt    : BFW_NIOL_iol_uart_irq_masked_rx_completed_evt;    /* EVENT : 1: complete rx descriptor has been written                  */
  unsigned int rx_start_err_evt    : BFW_NIOL_iol_uart_irq_masked_rx_start_err_evt;    /* EVENT : 1: start bit error occurred                                 */
  unsigned int rx_parity_err_evt   : BFW_NIOL_iol_uart_irq_masked_rx_parity_err_evt;   /* EVENT : 1: parity error occurred                                    */
  unsigned int rx_stop_err_evt     : BFW_NIOL_iol_uart_irq_masked_rx_stop_err_evt;     /* EVENT : 1: stop bit error occurred                                  */
  unsigned int rx_timeout_evt      : BFW_NIOL_iol_uart_irq_masked_rx_timeout_evt;      /* EVENT : 1: Inter character receive timeout occurred                 */
  unsigned int rx_overflow_err_evt : BFW_NIOL_iol_uart_irq_masked_rx_overflow_err_evt; /* EVENT : 1: data byte received and no descriptor available           */
  unsigned int rx_dma_err_evt      : BFW_NIOL_iol_uart_irq_masked_rx_dma_err_evt;      /* EVENT : 1: rx data write DMA too slow, receive data not written     */
  unsigned int ac_err_evt          : BFW_NIOL_iol_uart_irq_masked_ac_err_evt;          /* EVENT : 1: access control error: write outside of allowed addresses */
  unsigned int tx_low_water        : BFW_NIOL_iol_uart_irq_masked_tx_low_water;        /* STATUS: see TX_LEN_LOW_WATER                                        */
  unsigned int tx_adr_next_empty   : BFW_NIOL_iol_uart_irq_masked_tx_adr_next_empty;   /* STATUS                                                              */
  unsigned int rx_high_water       : BFW_NIOL_iol_uart_irq_masked_rx_high_water;       /* STATUS: see RX_LEN_HIGH_WATER                                       */
  unsigned int rx_adr_next_empty   : BFW_NIOL_iol_uart_irq_masked_rx_adr_next_empty;   /* STATUS                                                              */
  unsigned int reserved1           : BFW_NIOL_iol_uart_irq_masked_reserved1;           /* reserved                                                            */
} NIOL_IOL_UART_IRQ_MASKED_BIT_T;

typedef union {
  uint32_t                       val;
  NIOL_IOL_UART_IRQ_MASKED_BIT_T bf;
} NIOL_IOL_UART_IRQ_MASKED_T;

/* --------------------------------------------------------------------- */
/* Register iol_uart_irq_no */
/* => Lowest active interrupt: */
/*    Shows the highest prior active IRQ (= lowest IRQ number). */
/*    When no IRQ is pending the number of the highest IRQ plus one is returned. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_iol_uart_irq_no        0x0000009CU
#define Adr_NIOL_iol_uart_a_iol_uart_irq_no 0x00000A9CU
#define Adr_NIOL_iol_uart_b_iol_uart_irq_no 0x00000B9CU
#define Adr_NIOL_iol_uart_c_iol_uart_irq_no 0x00000C9CU
#define Adr_NIOL_iol_uart_d_iol_uart_irq_no 0x00000D9CU

#define MSK_NIOL_iol_uart_irq_no_val 0x0000001fU
#define SRT_NIOL_iol_uart_irq_no_val 0

/* all used bits of 'NIOL_iol_uart_irq_no': */
#define MSK_USED_BITS_NIOL_iol_uart_irq_no 0x0000001fU

enum {
  BFW_NIOL_iol_uart_irq_no_val       = 5,  /* [4:0] */
  BFW_NIOL_iol_uart_irq_no_reserved1 = 27  /* [31:5] */
};

typedef struct NIOL_IOL_UART_IRQ_NO_BIT_Ttag {
  unsigned int val       : BFW_NIOL_iol_uart_irq_no_val;       /* Number of the pending IRQ */
  unsigned int reserved1 : BFW_NIOL_iol_uart_irq_no_reserved1; /* reserved                  */
} NIOL_IOL_UART_IRQ_NO_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_IOL_UART_IRQ_NO_BIT_T bf;
} NIOL_IOL_UART_IRQ_NO_T;


/* ===================================================================== */

/* Area of debug */

/* ===================================================================== */

#define Addr_NIOL_debug 0x00001000U

/* --------------------------------------------------------------------- */
/* Register debug_dbg_ctrl */
/* => Debug Control DBG_CTRL */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_ctrl   0x00000000U
#define Adr_NIOL_debug_debug_dbg_ctrl 0x00001000U
#define Adr_NIOL_debug_dbg_ctrl       0x00001000U
#define DFLT_VAL_NIOL_debug_dbg_ctrl  0x00000000U

#define MSK_NIOL_debug_dbg_ctrl_SSTE         0x00000001U
#define SRT_NIOL_debug_dbg_ctrl_SSTE         0
#define DFLT_VAL_NIOL_debug_dbg_ctrl_SSTE    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ctrl_SSTE 0x00000000U
#define MSK_NIOL_debug_dbg_ctrl_HALT         0x00010000U
#define SRT_NIOL_debug_dbg_ctrl_HALT         16
#define DFLT_VAL_NIOL_debug_dbg_ctrl_HALT    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ctrl_HALT 0x00000000U

/* all used bits of 'NIOL_debug_dbg_ctrl': */
#define MSK_USED_BITS_NIOL_debug_dbg_ctrl 0x00010001U

enum {
  BFW_NIOL_debug_dbg_ctrl_SSTE      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_ctrl_reserved1 = 15, /* [15:1] */
  BFW_NIOL_debug_dbg_ctrl_HALT      = 1,  /* [16] */
  BFW_NIOL_debug_dbg_ctrl_reserved2 = 15  /* [31:17] */
};

typedef struct NIOL_DEBUG_DBG_CTRL_BIT_Ttag {
  unsigned int SSTE      : BFW_NIOL_debug_dbg_ctrl_SSTE;      /* SWhen 1 written, core enters debug mode, when 0 written, core exits debug mode. When read, 1 means core is in debug mode */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_ctrl_reserved1; /* reserved                                                                                                                 */
  unsigned int HALT      : BFW_NIOL_debug_dbg_ctrl_HALT;      /* Single-step enable                                                                                                       */
  unsigned int reserved2 : BFW_NIOL_debug_dbg_ctrl_reserved2; /* reserved                                                                                                                 */
} NIOL_DEBUG_DBG_CTRL_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_DEBUG_DBG_CTRL_BIT_T bf;
} NIOL_DEBUG_DBG_CTRL_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_hit */
/* => Debug Hit DBG_HIT */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_hit   0x00000004U
#define Adr_NIOL_debug_debug_dbg_hit 0x00001004U
#define Adr_NIOL_debug_dbg_hit       0x00001004U
#define DFLT_VAL_NIOL_debug_dbg_hit  0x00000000U

#define MSK_NIOL_debug_dbg_hit_SSTH         0x00000001U
#define SRT_NIOL_debug_dbg_hit_SSTH         0
#define DFLT_VAL_NIOL_debug_dbg_hit_SSTH    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_hit_SSTH 0x00000000U
#define MSK_NIOL_debug_dbg_hit_HALT         0x00010000U
#define SRT_NIOL_debug_dbg_hit_HALT         16
#define DFLT_VAL_NIOL_debug_dbg_hit_HALT    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_hit_HALT 0x00000000U

/* all used bits of 'NIOL_debug_dbg_hit': */
#define MSK_USED_BITS_NIOL_debug_dbg_hit 0x00010001U

enum {
  BFW_NIOL_debug_dbg_hit_SSTH      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_hit_reserved1 = 15, /* [15:1] */
  BFW_NIOL_debug_dbg_hit_HALT      = 1,  /* [16] */
  BFW_NIOL_debug_dbg_hit_reserved2 = 15  /* [31:17] */
};

typedef struct NIOL_DEBUG_DBG_HIT_BIT_Ttag {
  unsigned int SSTH      : BFW_NIOL_debug_dbg_hit_SSTH;      /* Single-step hit, sticky bit that must be cleared by external debugger */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_hit_reserved1; /* reserved                                                              */
  unsigned int HALT      : BFW_NIOL_debug_dbg_hit_HALT;      /* Set when the core is in a sleeping state and waits for an event       */
  unsigned int reserved2 : BFW_NIOL_debug_dbg_hit_reserved2; /* reserved                                                              */
} NIOL_DEBUG_DBG_HIT_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_DEBUG_DBG_HIT_BIT_T bf;
} NIOL_DEBUG_DBG_HIT_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_ie */
/* => Debug Interrupt Enable DBG_IE */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_ie   0x00000008U
#define Adr_NIOL_debug_debug_dbg_ie 0x00001008U
#define Adr_NIOL_debug_dbg_ie       0x00001008U
#define DFLT_VAL_NIOL_debug_dbg_ie  0x00000000U

#define MSK_NIOL_debug_dbg_ie_IAM           0x00000001U
#define SRT_NIOL_debug_dbg_ie_IAM           0
#define DFLT_VAL_NIOL_debug_dbg_ie_IAM      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_IAM   0x00000000U
#define MSK_NIOL_debug_dbg_ie_IAF           0x00000002U
#define SRT_NIOL_debug_dbg_ie_IAF           1
#define DFLT_VAL_NIOL_debug_dbg_ie_IAF      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_IAF   0x00000000U
#define MSK_NIOL_debug_dbg_ie_ILL           0x00000004U
#define SRT_NIOL_debug_dbg_ie_ILL           2
#define DFLT_VAL_NIOL_debug_dbg_ie_ILL      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_ILL   0x00000000U
#define MSK_NIOL_debug_dbg_ie_BP            0x00000008U
#define SRT_NIOL_debug_dbg_ie_BP            3
#define DFLT_VAL_NIOL_debug_dbg_ie_BP       0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_BP    0x00000000U
#define MSK_NIOL_debug_dbg_ie_LAM           0x00000010U
#define SRT_NIOL_debug_dbg_ie_LAM           4
#define DFLT_VAL_NIOL_debug_dbg_ie_LAM      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_LAM   0x00000000U
#define MSK_NIOL_debug_dbg_ie_LAF           0x00000020U
#define SRT_NIOL_debug_dbg_ie_LAF           5
#define DFLT_VAL_NIOL_debug_dbg_ie_LAF      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_LAF   0x00000000U
#define MSK_NIOL_debug_dbg_ie_SAM           0x00000040U
#define SRT_NIOL_debug_dbg_ie_SAM           6
#define DFLT_VAL_NIOL_debug_dbg_ie_SAM      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_SAM   0x00000000U
#define MSK_NIOL_debug_dbg_ie_SAF           0x00000080U
#define SRT_NIOL_debug_dbg_ie_SAF           7
#define DFLT_VAL_NIOL_debug_dbg_ie_SAF      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_SAF   0x00000000U
#define MSK_NIOL_debug_dbg_ie_ECALL         0x00000800U
#define SRT_NIOL_debug_dbg_ie_ECALL         11
#define DFLT_VAL_NIOL_debug_dbg_ie_ECALL    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_dbg_ie_ECALL 0x00000000U

/* all used bits of 'NIOL_debug_dbg_ie': */
#define MSK_USED_BITS_NIOL_debug_dbg_ie 0x000008ffU

enum {
  BFW_NIOL_debug_dbg_ie_IAM       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_ie_IAF       = 1,  /* [1] */
  BFW_NIOL_debug_dbg_ie_ILL       = 1,  /* [2] */
  BFW_NIOL_debug_dbg_ie_BP        = 1,  /* [3] */
  BFW_NIOL_debug_dbg_ie_LAM       = 1,  /* [4] */
  BFW_NIOL_debug_dbg_ie_LAF       = 1,  /* [5] */
  BFW_NIOL_debug_dbg_ie_SAM       = 1,  /* [6] */
  BFW_NIOL_debug_dbg_ie_SAF       = 1,  /* [7] */
  BFW_NIOL_debug_dbg_ie_reserved1 = 3,  /* [10:8] */
  BFW_NIOL_debug_dbg_ie_ECALL     = 1,  /* [11] */
  BFW_NIOL_debug_dbg_ie_reserved2 = 20  /* [31:12] */
};

typedef struct NIOL_DEBUG_DBG_IE_BIT_Ttag {
  unsigned int IAM       : BFW_NIOL_debug_dbg_ie_IAM;       /* Instruction Address Misaligned (never traps) */
  unsigned int IAF       : BFW_NIOL_debug_dbg_ie_IAF;       /* Instruction Access Fault (not implemented)   */
  unsigned int ILL       : BFW_NIOL_debug_dbg_ie_ILL;       /* Illegal Instruction                          */
  unsigned int BP        : BFW_NIOL_debug_dbg_ie_BP;        /* EBREAK instruction causes trap               */
  unsigned int LAM       : BFW_NIOL_debug_dbg_ie_LAM;       /* Load Address Misaligned (never traps)        */
  unsigned int LAF       : BFW_NIOL_debug_dbg_ie_LAF;       /* Load Access Fault (together with SAF)        */
  unsigned int SAM       : BFW_NIOL_debug_dbg_ie_SAM;       /* Store Address Misaligned (never traps)       */
  unsigned int SAF       : BFW_NIOL_debug_dbg_ie_SAF;       /* Store Access Fault (together with LAF)       */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_ie_reserved1; /* reserved                                     */
  unsigned int ECALL     : BFW_NIOL_debug_dbg_ie_ECALL;     /* Environment call from M-Mode                 */
  unsigned int reserved2 : BFW_NIOL_debug_dbg_ie_reserved2; /* reserved                                     */
} NIOL_DEBUG_DBG_IE_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_DEBUG_DBG_IE_BIT_T bf;
} NIOL_DEBUG_DBG_IE_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_cause */
/* => Debug Cause DBG_CAUSE */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_cause   0x0000000CU
#define Adr_NIOL_debug_debug_dbg_cause 0x0000100CU
#define Adr_NIOL_debug_dbg_cause       0x0000100CU

#define MSK_NIOL_debug_dbg_cause_CAUSE 0x0000001fU
#define SRT_NIOL_debug_dbg_cause_CAUSE 0
#define MSK_NIOL_debug_dbg_cause_IRQ   0x80000000U
#define SRT_NIOL_debug_dbg_cause_IRQ   31

/* all used bits of 'NIOL_debug_dbg_cause': */
#define MSK_USED_BITS_NIOL_debug_dbg_cause 0x8000001fU

enum {
  BFW_NIOL_debug_dbg_cause_CAUSE     = 5,  /* [4:0] */
  BFW_NIOL_debug_dbg_cause_reserved1 = 26, /* [30:5] */
  BFW_NIOL_debug_dbg_cause_IRQ       = 1   /* [31] */
};

typedef struct NIOL_DEBUG_DBG_CAUSE_BIT_Ttag {
  unsigned int CAUSE     : BFW_NIOL_debug_dbg_cause_CAUSE;     /* Exception/interrupt number              */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_cause_reserved1; /* reserved                                */
  unsigned int IRQ       : BFW_NIOL_debug_dbg_cause_IRQ;       /* Interrupt caused us to enter debug mode */
} NIOL_DEBUG_DBG_CAUSE_BIT_T;

typedef union {
  uint32_t                   val;
  NIOL_DEBUG_DBG_CAUSE_BIT_T bf;
} NIOL_DEBUG_DBG_CAUSE_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl0 */
/* => Debug Hardware Breakpoint 0 Control (DBG_BPCTRL0) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl0   0x00000040U
#define Adr_NIOL_debug_debug_dbg_bpctrl0 0x00001040U
#define Adr_NIOL_debug_dbg_bpctrl0       0x00001040U

#define MSK_NIOL_debug_dbg_bpctrl0_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl0_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl0': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl0 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl0_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl0_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL0_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl0_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl0_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL0_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL0_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL0_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata0 */
/* => Debug Hardware Breakpoint 0 DATA (DBG_BPDATA0) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata0   0x00000044U
#define Adr_NIOL_debug_debug_dbg_bpdata0 0x00001044U
#define Adr_NIOL_debug_dbg_bpdata0       0x00001044U

#define MSK_NIOL_debug_dbg_bpdata0_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata0_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata0': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata0 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata0_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata0_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA0_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata0_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata0_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA0_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA0_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA0_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl1 */
/* => Debug Hardware Breakpoint 1 Control (DBG_BPCTRL1) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl1   0x00000048U
#define Adr_NIOL_debug_debug_dbg_bpctrl1 0x00001048U
#define Adr_NIOL_debug_dbg_bpctrl1       0x00001048U

#define MSK_NIOL_debug_dbg_bpctrl1_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl1_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl1': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl1 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl1_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl1_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL1_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl1_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl1_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL1_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL1_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL1_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata1 */
/* => Debug Hardware Breakpoint 1 DATA (DBG_BPDATA1) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata1   0x0000004CU
#define Adr_NIOL_debug_debug_dbg_bpdata1 0x0000104CU
#define Adr_NIOL_debug_dbg_bpdata1       0x0000104CU

#define MSK_NIOL_debug_dbg_bpdata1_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata1_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata1': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata1 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata1_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata1_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA1_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata1_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata1_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA1_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA1_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA1_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl2 */
/* => Debug Hardware Breakpoint 2 Control (DBG_BPCTRL2) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl2   0x00000050U
#define Adr_NIOL_debug_debug_dbg_bpctrl2 0x00001050U
#define Adr_NIOL_debug_dbg_bpctrl2       0x00001050U

#define MSK_NIOL_debug_dbg_bpctrl2_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl2_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl2': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl2 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl2_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl2_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL2_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl2_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl2_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL2_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL2_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL2_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata2 */
/* => Debug Hardware Breakpoint 2 DATA (DBG_BPDATA2) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata2   0x00000054U
#define Adr_NIOL_debug_debug_dbg_bpdata2 0x00001054U
#define Adr_NIOL_debug_dbg_bpdata2       0x00001054U

#define MSK_NIOL_debug_dbg_bpdata2_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata2_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata2': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata2 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata2_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata2_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA2_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata2_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata2_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA2_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA2_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA2_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl3 */
/* => Debug Hardware Breakpoint 3 Control (DBG_BPCTRL3) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl3   0x00000058U
#define Adr_NIOL_debug_debug_dbg_bpctrl3 0x00001058U
#define Adr_NIOL_debug_dbg_bpctrl3       0x00001058U

#define MSK_NIOL_debug_dbg_bpctrl3_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl3_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl3': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl3 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl3_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl3_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL3_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl3_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl3_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL3_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL3_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL3_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata3 */
/* => Debug Hardware Breakpoint 3 DATA (DBG_BPDATA3) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata3   0x0000005CU
#define Adr_NIOL_debug_debug_dbg_bpdata3 0x0000105CU
#define Adr_NIOL_debug_dbg_bpdata3       0x0000105CU

#define MSK_NIOL_debug_dbg_bpdata3_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata3_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata3': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata3 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata3_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata3_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA3_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata3_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata3_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA3_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA3_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA3_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl4 */
/* => Debug Hardware Breakpoint 4 Control (DBG_BPCTRL4) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl4   0x00000060U
#define Adr_NIOL_debug_debug_dbg_bpctrl4 0x00001060U
#define Adr_NIOL_debug_dbg_bpctrl4       0x00001060U

#define MSK_NIOL_debug_dbg_bpctrl4_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl4_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl4': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl4 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl4_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl4_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL4_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl4_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl4_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL4_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL4_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL4_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata4 */
/* => Debug Hardware Breakpoint 4 DATA (DBG_BPDATA4) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata4   0x00000064U
#define Adr_NIOL_debug_debug_dbg_bpdata4 0x00001064U
#define Adr_NIOL_debug_dbg_bpdata4       0x00001064U

#define MSK_NIOL_debug_dbg_bpdata4_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata4_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata4': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata4 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata4_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata4_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA4_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata4_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata4_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA4_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA4_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA4_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl5 */
/* => Debug Hardware Breakpoint 5 Control (DBG_BPCTRL5) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl5   0x00000068U
#define Adr_NIOL_debug_debug_dbg_bpctrl5 0x00001068U
#define Adr_NIOL_debug_dbg_bpctrl5       0x00001068U

#define MSK_NIOL_debug_dbg_bpctrl5_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl5_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl5': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl5 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl5_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl5_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL5_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl5_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl5_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL5_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL5_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL5_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata5 */
/* => Debug Hardware Breakpoint 5 DATA (DBG_BPDATA5) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata5   0x0000006CU
#define Adr_NIOL_debug_debug_dbg_bpdata5 0x0000106CU
#define Adr_NIOL_debug_dbg_bpdata5       0x0000106CU

#define MSK_NIOL_debug_dbg_bpdata5_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata5_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata5': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata5 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata5_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata5_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA5_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata5_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata5_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA5_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA5_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA5_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl6 */
/* => Debug Hardware Breakpoint 6 Control (DBG_BPCTRL6) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl6   0x00000070U
#define Adr_NIOL_debug_debug_dbg_bpctrl6 0x00001070U
#define Adr_NIOL_debug_dbg_bpctrl6       0x00001070U

#define MSK_NIOL_debug_dbg_bpctrl6_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl6_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl6': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl6 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl6_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl6_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL6_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl6_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl6_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL6_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL6_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL6_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata6 */
/* => Debug Hardware Breakpoint 6 DATA (DBG_BPDATA6) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata6   0x00000074U
#define Adr_NIOL_debug_debug_dbg_bpdata6 0x00001074U
#define Adr_NIOL_debug_dbg_bpdata6       0x00001074U

#define MSK_NIOL_debug_dbg_bpdata6_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata6_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata6': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata6 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata6_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata6_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA6_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata6_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata6_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA6_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA6_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA6_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpctrl7 */
/* => Debug Hardware Breakpoint 7 Control (DBG_BPCTRL7) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpctrl7   0x00000078U
#define Adr_NIOL_debug_debug_dbg_bpctrl7 0x00001078U
#define Adr_NIOL_debug_dbg_bpctrl7       0x00001078U

#define MSK_NIOL_debug_dbg_bpctrl7_IMPL 0x00000001U
#define SRT_NIOL_debug_dbg_bpctrl7_IMPL 0

/* all used bits of 'NIOL_debug_dbg_bpctrl7': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpctrl7 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpctrl7_IMPL      = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpctrl7_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPCTRL7_BIT_Ttag {
  unsigned int IMPL      : BFW_NIOL_debug_dbg_bpctrl7_IMPL;      /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpctrl7_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPCTRL7_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPCTRL7_BIT_T bf;
} NIOL_DEBUG_DBG_BPCTRL7_T;

/* --------------------------------------------------------------------- */
/* Register debug_dbg_bpdata7 */
/* => Debug Hardware Breakpoint 7 DATA (DBG_BPDATA7) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_dbg_bpdata7   0x0000007CU
#define Adr_NIOL_debug_debug_dbg_bpdata7 0x0000107CU
#define Adr_NIOL_debug_dbg_bpdata7       0x0000107CU

#define MSK_NIOL_debug_dbg_bpdata7_val 0x00000001U
#define SRT_NIOL_debug_dbg_bpdata7_val 0

/* all used bits of 'NIOL_debug_dbg_bpdata7': */
#define MSK_USED_BITS_NIOL_debug_dbg_bpdata7 0x00000001U

enum {
  BFW_NIOL_debug_dbg_bpdata7_val       = 1,  /* [0] */
  BFW_NIOL_debug_dbg_bpdata7_reserved1 = 31  /* [31:1] */
};

typedef struct NIOL_DEBUG_DBG_BPDATA7_BIT_Ttag {
  unsigned int val       : BFW_NIOL_debug_dbg_bpdata7_val;       /* RI5CY does not implement hardware breakpoints. Always read as 0 */
  unsigned int reserved1 : BFW_NIOL_debug_dbg_bpdata7_reserved1; /* reserved                                                        */
} NIOL_DEBUG_DBG_BPDATA7_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_DBG_BPDATA7_BIT_T bf;
} NIOL_DEBUG_DBG_BPDATA7_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr0 */
/* => register x0 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr0   0x00000080U
#define Adr_NIOL_debug_debug_gpr0 0x00001080U
#define Adr_NIOL_debug_gpr0       0x00001080U
#define DFLT_VAL_NIOL_debug_gpr0  0x00000000U

#define MSK_NIOL_debug_gpr0_val         0xffffffffU
#define SRT_NIOL_debug_gpr0_val         0
#define DFLT_VAL_NIOL_debug_gpr0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr0_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr0': */
#define MSK_USED_BITS_NIOL_debug_gpr0 0xffffffffU

enum {
  BFW_NIOL_debug_gpr0_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR0_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr0_val; /* register x0 */
} NIOL_DEBUG_GPR0_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR0_BIT_T bf;
} NIOL_DEBUG_GPR0_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr1 */
/* => register x1 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr1   0x00000084U
#define Adr_NIOL_debug_debug_gpr1 0x00001084U
#define Adr_NIOL_debug_gpr1       0x00001084U
#define DFLT_VAL_NIOL_debug_gpr1  0x00000000U

#define MSK_NIOL_debug_gpr1_val         0xffffffffU
#define SRT_NIOL_debug_gpr1_val         0
#define DFLT_VAL_NIOL_debug_gpr1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr1_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr1': */
#define MSK_USED_BITS_NIOL_debug_gpr1 0xffffffffU

enum {
  BFW_NIOL_debug_gpr1_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR1_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr1_val; /* register x1 */
} NIOL_DEBUG_GPR1_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR1_BIT_T bf;
} NIOL_DEBUG_GPR1_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr2 */
/* => register x2 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr2   0x00000088U
#define Adr_NIOL_debug_debug_gpr2 0x00001088U
#define Adr_NIOL_debug_gpr2       0x00001088U
#define DFLT_VAL_NIOL_debug_gpr2  0x00000000U

#define MSK_NIOL_debug_gpr2_val         0xffffffffU
#define SRT_NIOL_debug_gpr2_val         0
#define DFLT_VAL_NIOL_debug_gpr2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr2_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr2': */
#define MSK_USED_BITS_NIOL_debug_gpr2 0xffffffffU

enum {
  BFW_NIOL_debug_gpr2_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR2_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr2_val; /* register x2 */
} NIOL_DEBUG_GPR2_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR2_BIT_T bf;
} NIOL_DEBUG_GPR2_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr3 */
/* => register x3 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr3   0x0000008CU
#define Adr_NIOL_debug_debug_gpr3 0x0000108CU
#define Adr_NIOL_debug_gpr3       0x0000108CU
#define DFLT_VAL_NIOL_debug_gpr3  0x00000000U

#define MSK_NIOL_debug_gpr3_val         0xffffffffU
#define SRT_NIOL_debug_gpr3_val         0
#define DFLT_VAL_NIOL_debug_gpr3_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr3_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr3': */
#define MSK_USED_BITS_NIOL_debug_gpr3 0xffffffffU

enum {
  BFW_NIOL_debug_gpr3_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR3_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr3_val; /* register x3 */
} NIOL_DEBUG_GPR3_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR3_BIT_T bf;
} NIOL_DEBUG_GPR3_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr4 */
/* => register x4 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr4   0x00000090U
#define Adr_NIOL_debug_debug_gpr4 0x00001090U
#define Adr_NIOL_debug_gpr4       0x00001090U
#define DFLT_VAL_NIOL_debug_gpr4  0x00000000U

#define MSK_NIOL_debug_gpr4_val         0xffffffffU
#define SRT_NIOL_debug_gpr4_val         0
#define DFLT_VAL_NIOL_debug_gpr4_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr4_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr4': */
#define MSK_USED_BITS_NIOL_debug_gpr4 0xffffffffU

enum {
  BFW_NIOL_debug_gpr4_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR4_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr4_val; /* register x4 */
} NIOL_DEBUG_GPR4_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR4_BIT_T bf;
} NIOL_DEBUG_GPR4_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr5 */
/* => register x5 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr5   0x00000094U
#define Adr_NIOL_debug_debug_gpr5 0x00001094U
#define Adr_NIOL_debug_gpr5       0x00001094U
#define DFLT_VAL_NIOL_debug_gpr5  0x00000000U

#define MSK_NIOL_debug_gpr5_val         0xffffffffU
#define SRT_NIOL_debug_gpr5_val         0
#define DFLT_VAL_NIOL_debug_gpr5_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr5_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr5': */
#define MSK_USED_BITS_NIOL_debug_gpr5 0xffffffffU

enum {
  BFW_NIOL_debug_gpr5_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR5_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr5_val; /* register x5 */
} NIOL_DEBUG_GPR5_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR5_BIT_T bf;
} NIOL_DEBUG_GPR5_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr6 */
/* => register x6 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr6   0x00000098U
#define Adr_NIOL_debug_debug_gpr6 0x00001098U
#define Adr_NIOL_debug_gpr6       0x00001098U
#define DFLT_VAL_NIOL_debug_gpr6  0x00000000U

#define MSK_NIOL_debug_gpr6_val         0xffffffffU
#define SRT_NIOL_debug_gpr6_val         0
#define DFLT_VAL_NIOL_debug_gpr6_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr6_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr6': */
#define MSK_USED_BITS_NIOL_debug_gpr6 0xffffffffU

enum {
  BFW_NIOL_debug_gpr6_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR6_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr6_val; /* register x6 */
} NIOL_DEBUG_GPR6_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR6_BIT_T bf;
} NIOL_DEBUG_GPR6_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr7 */
/* => register x7 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr7   0x0000009CU
#define Adr_NIOL_debug_debug_gpr7 0x0000109CU
#define Adr_NIOL_debug_gpr7       0x0000109CU
#define DFLT_VAL_NIOL_debug_gpr7  0x00000000U

#define MSK_NIOL_debug_gpr7_val         0xffffffffU
#define SRT_NIOL_debug_gpr7_val         0
#define DFLT_VAL_NIOL_debug_gpr7_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr7_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr7': */
#define MSK_USED_BITS_NIOL_debug_gpr7 0xffffffffU

enum {
  BFW_NIOL_debug_gpr7_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR7_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr7_val; /* register x7 */
} NIOL_DEBUG_GPR7_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR7_BIT_T bf;
} NIOL_DEBUG_GPR7_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr8 */
/* => register x8 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr8   0x000000A0U
#define Adr_NIOL_debug_debug_gpr8 0x000010A0U
#define Adr_NIOL_debug_gpr8       0x000010A0U
#define DFLT_VAL_NIOL_debug_gpr8  0x00000000U

#define MSK_NIOL_debug_gpr8_val         0xffffffffU
#define SRT_NIOL_debug_gpr8_val         0
#define DFLT_VAL_NIOL_debug_gpr8_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr8_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr8': */
#define MSK_USED_BITS_NIOL_debug_gpr8 0xffffffffU

enum {
  BFW_NIOL_debug_gpr8_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR8_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr8_val; /* register x8 */
} NIOL_DEBUG_GPR8_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR8_BIT_T bf;
} NIOL_DEBUG_GPR8_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr9 */
/* => register x9 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr9   0x000000A4U
#define Adr_NIOL_debug_debug_gpr9 0x000010A4U
#define Adr_NIOL_debug_gpr9       0x000010A4U
#define DFLT_VAL_NIOL_debug_gpr9  0x00000000U

#define MSK_NIOL_debug_gpr9_val         0xffffffffU
#define SRT_NIOL_debug_gpr9_val         0
#define DFLT_VAL_NIOL_debug_gpr9_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr9_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr9': */
#define MSK_USED_BITS_NIOL_debug_gpr9 0xffffffffU

enum {
  BFW_NIOL_debug_gpr9_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR9_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr9_val; /* register x9 */
} NIOL_DEBUG_GPR9_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_GPR9_BIT_T bf;
} NIOL_DEBUG_GPR9_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr10 */
/* => register x10 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr10   0x000000A8U
#define Adr_NIOL_debug_debug_gpr10 0x000010A8U
#define Adr_NIOL_debug_gpr10       0x000010A8U
#define DFLT_VAL_NIOL_debug_gpr10  0x00000000U

#define MSK_NIOL_debug_gpr10_val         0xffffffffU
#define SRT_NIOL_debug_gpr10_val         0
#define DFLT_VAL_NIOL_debug_gpr10_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr10_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr10': */
#define MSK_USED_BITS_NIOL_debug_gpr10 0xffffffffU

enum {
  BFW_NIOL_debug_gpr10_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR10_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr10_val; /* register x10 */
} NIOL_DEBUG_GPR10_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR10_BIT_T bf;
} NIOL_DEBUG_GPR10_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr11 */
/* => register x11 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr11   0x000000ACU
#define Adr_NIOL_debug_debug_gpr11 0x000010ACU
#define Adr_NIOL_debug_gpr11       0x000010ACU
#define DFLT_VAL_NIOL_debug_gpr11  0x00000000U

#define MSK_NIOL_debug_gpr11_val         0xffffffffU
#define SRT_NIOL_debug_gpr11_val         0
#define DFLT_VAL_NIOL_debug_gpr11_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr11_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr11': */
#define MSK_USED_BITS_NIOL_debug_gpr11 0xffffffffU

enum {
  BFW_NIOL_debug_gpr11_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR11_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr11_val; /* register x11 */
} NIOL_DEBUG_GPR11_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR11_BIT_T bf;
} NIOL_DEBUG_GPR11_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr12 */
/* => register x12 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr12   0x000000B0U
#define Adr_NIOL_debug_debug_gpr12 0x000010B0U
#define Adr_NIOL_debug_gpr12       0x000010B0U
#define DFLT_VAL_NIOL_debug_gpr12  0x00000000U

#define MSK_NIOL_debug_gpr12_val         0xffffffffU
#define SRT_NIOL_debug_gpr12_val         0
#define DFLT_VAL_NIOL_debug_gpr12_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr12_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr12': */
#define MSK_USED_BITS_NIOL_debug_gpr12 0xffffffffU

enum {
  BFW_NIOL_debug_gpr12_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR12_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr12_val; /* register x12 */
} NIOL_DEBUG_GPR12_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR12_BIT_T bf;
} NIOL_DEBUG_GPR12_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr13 */
/* => register x13 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr13   0x000000B4U
#define Adr_NIOL_debug_debug_gpr13 0x000010B4U
#define Adr_NIOL_debug_gpr13       0x000010B4U
#define DFLT_VAL_NIOL_debug_gpr13  0x00000000U

#define MSK_NIOL_debug_gpr13_val         0xffffffffU
#define SRT_NIOL_debug_gpr13_val         0
#define DFLT_VAL_NIOL_debug_gpr13_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr13_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr13': */
#define MSK_USED_BITS_NIOL_debug_gpr13 0xffffffffU

enum {
  BFW_NIOL_debug_gpr13_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR13_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr13_val; /* register x13 */
} NIOL_DEBUG_GPR13_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR13_BIT_T bf;
} NIOL_DEBUG_GPR13_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr14 */
/* => register x14 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr14   0x000000B8U
#define Adr_NIOL_debug_debug_gpr14 0x000010B8U
#define Adr_NIOL_debug_gpr14       0x000010B8U
#define DFLT_VAL_NIOL_debug_gpr14  0x00000000U

#define MSK_NIOL_debug_gpr14_val         0xffffffffU
#define SRT_NIOL_debug_gpr14_val         0
#define DFLT_VAL_NIOL_debug_gpr14_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr14_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr14': */
#define MSK_USED_BITS_NIOL_debug_gpr14 0xffffffffU

enum {
  BFW_NIOL_debug_gpr14_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR14_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr14_val; /* register x14 */
} NIOL_DEBUG_GPR14_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR14_BIT_T bf;
} NIOL_DEBUG_GPR14_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr15 */
/* => register x15 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr15   0x000000BCU
#define Adr_NIOL_debug_debug_gpr15 0x000010BCU
#define Adr_NIOL_debug_gpr15       0x000010BCU
#define DFLT_VAL_NIOL_debug_gpr15  0x00000000U

#define MSK_NIOL_debug_gpr15_val         0xffffffffU
#define SRT_NIOL_debug_gpr15_val         0
#define DFLT_VAL_NIOL_debug_gpr15_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr15_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr15': */
#define MSK_USED_BITS_NIOL_debug_gpr15 0xffffffffU

enum {
  BFW_NIOL_debug_gpr15_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR15_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr15_val; /* register x15 */
} NIOL_DEBUG_GPR15_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR15_BIT_T bf;
} NIOL_DEBUG_GPR15_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr16 */
/* => register x16 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr16   0x000000C0U
#define Adr_NIOL_debug_debug_gpr16 0x000010C0U
#define Adr_NIOL_debug_gpr16       0x000010C0U
#define DFLT_VAL_NIOL_debug_gpr16  0x00000000U

#define MSK_NIOL_debug_gpr16_val         0xffffffffU
#define SRT_NIOL_debug_gpr16_val         0
#define DFLT_VAL_NIOL_debug_gpr16_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr16_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr16': */
#define MSK_USED_BITS_NIOL_debug_gpr16 0xffffffffU

enum {
  BFW_NIOL_debug_gpr16_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR16_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr16_val; /* register x16 */
} NIOL_DEBUG_GPR16_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR16_BIT_T bf;
} NIOL_DEBUG_GPR16_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr17 */
/* => register x17 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr17   0x000000C4U
#define Adr_NIOL_debug_debug_gpr17 0x000010C4U
#define Adr_NIOL_debug_gpr17       0x000010C4U
#define DFLT_VAL_NIOL_debug_gpr17  0x00000000U

#define MSK_NIOL_debug_gpr17_val         0xffffffffU
#define SRT_NIOL_debug_gpr17_val         0
#define DFLT_VAL_NIOL_debug_gpr17_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr17_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr17': */
#define MSK_USED_BITS_NIOL_debug_gpr17 0xffffffffU

enum {
  BFW_NIOL_debug_gpr17_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR17_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr17_val; /* register x17 */
} NIOL_DEBUG_GPR17_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR17_BIT_T bf;
} NIOL_DEBUG_GPR17_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr18 */
/* => register x18 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr18   0x000000C8U
#define Adr_NIOL_debug_debug_gpr18 0x000010C8U
#define Adr_NIOL_debug_gpr18       0x000010C8U
#define DFLT_VAL_NIOL_debug_gpr18  0x00000000U

#define MSK_NIOL_debug_gpr18_val         0xffffffffU
#define SRT_NIOL_debug_gpr18_val         0
#define DFLT_VAL_NIOL_debug_gpr18_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr18_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr18': */
#define MSK_USED_BITS_NIOL_debug_gpr18 0xffffffffU

enum {
  BFW_NIOL_debug_gpr18_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR18_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr18_val; /* register x18 */
} NIOL_DEBUG_GPR18_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR18_BIT_T bf;
} NIOL_DEBUG_GPR18_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr19 */
/* => register x19 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr19   0x000000CCU
#define Adr_NIOL_debug_debug_gpr19 0x000010CCU
#define Adr_NIOL_debug_gpr19       0x000010CCU
#define DFLT_VAL_NIOL_debug_gpr19  0x00000000U

#define MSK_NIOL_debug_gpr19_val         0xffffffffU
#define SRT_NIOL_debug_gpr19_val         0
#define DFLT_VAL_NIOL_debug_gpr19_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr19_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr19': */
#define MSK_USED_BITS_NIOL_debug_gpr19 0xffffffffU

enum {
  BFW_NIOL_debug_gpr19_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR19_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr19_val; /* register x19 */
} NIOL_DEBUG_GPR19_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR19_BIT_T bf;
} NIOL_DEBUG_GPR19_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr20 */
/* => register x20 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr20   0x000000D0U
#define Adr_NIOL_debug_debug_gpr20 0x000010D0U
#define Adr_NIOL_debug_gpr20       0x000010D0U
#define DFLT_VAL_NIOL_debug_gpr20  0x00000000U

#define MSK_NIOL_debug_gpr20_val         0xffffffffU
#define SRT_NIOL_debug_gpr20_val         0
#define DFLT_VAL_NIOL_debug_gpr20_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr20_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr20': */
#define MSK_USED_BITS_NIOL_debug_gpr20 0xffffffffU

enum {
  BFW_NIOL_debug_gpr20_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR20_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr20_val; /* register x20 */
} NIOL_DEBUG_GPR20_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR20_BIT_T bf;
} NIOL_DEBUG_GPR20_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr21 */
/* => register x21 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr21   0x000000D4U
#define Adr_NIOL_debug_debug_gpr21 0x000010D4U
#define Adr_NIOL_debug_gpr21       0x000010D4U
#define DFLT_VAL_NIOL_debug_gpr21  0x00000000U

#define MSK_NIOL_debug_gpr21_val         0xffffffffU
#define SRT_NIOL_debug_gpr21_val         0
#define DFLT_VAL_NIOL_debug_gpr21_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr21_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr21': */
#define MSK_USED_BITS_NIOL_debug_gpr21 0xffffffffU

enum {
  BFW_NIOL_debug_gpr21_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR21_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr21_val; /* register x21 */
} NIOL_DEBUG_GPR21_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR21_BIT_T bf;
} NIOL_DEBUG_GPR21_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr22 */
/* => register x22 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr22   0x000000D8U
#define Adr_NIOL_debug_debug_gpr22 0x000010D8U
#define Adr_NIOL_debug_gpr22       0x000010D8U
#define DFLT_VAL_NIOL_debug_gpr22  0x00000000U

#define MSK_NIOL_debug_gpr22_val         0xffffffffU
#define SRT_NIOL_debug_gpr22_val         0
#define DFLT_VAL_NIOL_debug_gpr22_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr22_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr22': */
#define MSK_USED_BITS_NIOL_debug_gpr22 0xffffffffU

enum {
  BFW_NIOL_debug_gpr22_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR22_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr22_val; /* register x22 */
} NIOL_DEBUG_GPR22_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR22_BIT_T bf;
} NIOL_DEBUG_GPR22_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr23 */
/* => register x23 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr23   0x000000DCU
#define Adr_NIOL_debug_debug_gpr23 0x000010DCU
#define Adr_NIOL_debug_gpr23       0x000010DCU
#define DFLT_VAL_NIOL_debug_gpr23  0x00000000U

#define MSK_NIOL_debug_gpr23_val         0xffffffffU
#define SRT_NIOL_debug_gpr23_val         0
#define DFLT_VAL_NIOL_debug_gpr23_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr23_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr23': */
#define MSK_USED_BITS_NIOL_debug_gpr23 0xffffffffU

enum {
  BFW_NIOL_debug_gpr23_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR23_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr23_val; /* register x23 */
} NIOL_DEBUG_GPR23_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR23_BIT_T bf;
} NIOL_DEBUG_GPR23_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr24 */
/* => register x24 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr24   0x000000E0U
#define Adr_NIOL_debug_debug_gpr24 0x000010E0U
#define Adr_NIOL_debug_gpr24       0x000010E0U
#define DFLT_VAL_NIOL_debug_gpr24  0x00000000U

#define MSK_NIOL_debug_gpr24_val         0xffffffffU
#define SRT_NIOL_debug_gpr24_val         0
#define DFLT_VAL_NIOL_debug_gpr24_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr24_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr24': */
#define MSK_USED_BITS_NIOL_debug_gpr24 0xffffffffU

enum {
  BFW_NIOL_debug_gpr24_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR24_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr24_val; /* register x24 */
} NIOL_DEBUG_GPR24_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR24_BIT_T bf;
} NIOL_DEBUG_GPR24_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr25 */
/* => register x25 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr25   0x000000E4U
#define Adr_NIOL_debug_debug_gpr25 0x000010E4U
#define Adr_NIOL_debug_gpr25       0x000010E4U
#define DFLT_VAL_NIOL_debug_gpr25  0x00000000U

#define MSK_NIOL_debug_gpr25_val         0xffffffffU
#define SRT_NIOL_debug_gpr25_val         0
#define DFLT_VAL_NIOL_debug_gpr25_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr25_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr25': */
#define MSK_USED_BITS_NIOL_debug_gpr25 0xffffffffU

enum {
  BFW_NIOL_debug_gpr25_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR25_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr25_val; /* register x25 */
} NIOL_DEBUG_GPR25_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR25_BIT_T bf;
} NIOL_DEBUG_GPR25_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr26 */
/* => register x26 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr26   0x000000E8U
#define Adr_NIOL_debug_debug_gpr26 0x000010E8U
#define Adr_NIOL_debug_gpr26       0x000010E8U
#define DFLT_VAL_NIOL_debug_gpr26  0x00000000U

#define MSK_NIOL_debug_gpr26_val         0xffffffffU
#define SRT_NIOL_debug_gpr26_val         0
#define DFLT_VAL_NIOL_debug_gpr26_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr26_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr26': */
#define MSK_USED_BITS_NIOL_debug_gpr26 0xffffffffU

enum {
  BFW_NIOL_debug_gpr26_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR26_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr26_val; /* register x26 */
} NIOL_DEBUG_GPR26_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR26_BIT_T bf;
} NIOL_DEBUG_GPR26_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr27 */
/* => register x27 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr27   0x000000ECU
#define Adr_NIOL_debug_debug_gpr27 0x000010ECU
#define Adr_NIOL_debug_gpr27       0x000010ECU
#define DFLT_VAL_NIOL_debug_gpr27  0x00000000U

#define MSK_NIOL_debug_gpr27_val         0xffffffffU
#define SRT_NIOL_debug_gpr27_val         0
#define DFLT_VAL_NIOL_debug_gpr27_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr27_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr27': */
#define MSK_USED_BITS_NIOL_debug_gpr27 0xffffffffU

enum {
  BFW_NIOL_debug_gpr27_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR27_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr27_val; /* register x27 */
} NIOL_DEBUG_GPR27_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR27_BIT_T bf;
} NIOL_DEBUG_GPR27_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr28 */
/* => register x28 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr28   0x000000F0U
#define Adr_NIOL_debug_debug_gpr28 0x000010F0U
#define Adr_NIOL_debug_gpr28       0x000010F0U
#define DFLT_VAL_NIOL_debug_gpr28  0x00000000U

#define MSK_NIOL_debug_gpr28_val         0xffffffffU
#define SRT_NIOL_debug_gpr28_val         0
#define DFLT_VAL_NIOL_debug_gpr28_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr28_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr28': */
#define MSK_USED_BITS_NIOL_debug_gpr28 0xffffffffU

enum {
  BFW_NIOL_debug_gpr28_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR28_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr28_val; /* register x28 */
} NIOL_DEBUG_GPR28_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR28_BIT_T bf;
} NIOL_DEBUG_GPR28_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr29 */
/* => register x29 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr29   0x000000F4U
#define Adr_NIOL_debug_debug_gpr29 0x000010F4U
#define Adr_NIOL_debug_gpr29       0x000010F4U
#define DFLT_VAL_NIOL_debug_gpr29  0x00000000U

#define MSK_NIOL_debug_gpr29_val         0xffffffffU
#define SRT_NIOL_debug_gpr29_val         0
#define DFLT_VAL_NIOL_debug_gpr29_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr29_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr29': */
#define MSK_USED_BITS_NIOL_debug_gpr29 0xffffffffU

enum {
  BFW_NIOL_debug_gpr29_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR29_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr29_val; /* register x29 */
} NIOL_DEBUG_GPR29_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR29_BIT_T bf;
} NIOL_DEBUG_GPR29_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr30 */
/* => register x30 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr30   0x000000F8U
#define Adr_NIOL_debug_debug_gpr30 0x000010F8U
#define Adr_NIOL_debug_gpr30       0x000010F8U
#define DFLT_VAL_NIOL_debug_gpr30  0x00000000U

#define MSK_NIOL_debug_gpr30_val         0xffffffffU
#define SRT_NIOL_debug_gpr30_val         0
#define DFLT_VAL_NIOL_debug_gpr30_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr30_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr30': */
#define MSK_USED_BITS_NIOL_debug_gpr30 0xffffffffU

enum {
  BFW_NIOL_debug_gpr30_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR30_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr30_val; /* register x30 */
} NIOL_DEBUG_GPR30_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR30_BIT_T bf;
} NIOL_DEBUG_GPR30_T;

/* --------------------------------------------------------------------- */
/* Register debug_gpr31 */
/* => register x31 from register file */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_gpr31   0x000000FCU
#define Adr_NIOL_debug_debug_gpr31 0x000010FCU
#define Adr_NIOL_debug_gpr31       0x000010FCU
#define DFLT_VAL_NIOL_debug_gpr31  0x00000000U

#define MSK_NIOL_debug_gpr31_val         0xffffffffU
#define SRT_NIOL_debug_gpr31_val         0
#define DFLT_VAL_NIOL_debug_gpr31_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_gpr31_val 0x00000000U

/* all used bits of 'NIOL_debug_gpr31': */
#define MSK_USED_BITS_NIOL_debug_gpr31 0xffffffffU

enum {
  BFW_NIOL_debug_gpr31_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_GPR31_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_gpr31_val; /* register x31 */
} NIOL_DEBUG_GPR31_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_GPR31_BIT_T bf;
} NIOL_DEBUG_GPR31_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr0 */
/* => register f0 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr0   0x00000100U
#define Adr_NIOL_debug_debug_fpr0 0x00001100U
#define Adr_NIOL_debug_fpr0       0x00001100U
#define DFLT_VAL_NIOL_debug_fpr0  0x00000000U

#define MSK_NIOL_debug_fpr0_val         0xffffffffU
#define SRT_NIOL_debug_fpr0_val         0
#define DFLT_VAL_NIOL_debug_fpr0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr0_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr0': */
#define MSK_USED_BITS_NIOL_debug_fpr0 0xffffffffU

enum {
  BFW_NIOL_debug_fpr0_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR0_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr0_val; /* register f0 reserved */
} NIOL_DEBUG_FPR0_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR0_BIT_T bf;
} NIOL_DEBUG_FPR0_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr1 */
/* => register f1 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr1   0x00000104U
#define Adr_NIOL_debug_debug_fpr1 0x00001104U
#define Adr_NIOL_debug_fpr1       0x00001104U
#define DFLT_VAL_NIOL_debug_fpr1  0x00000000U

#define MSK_NIOL_debug_fpr1_val         0xffffffffU
#define SRT_NIOL_debug_fpr1_val         0
#define DFLT_VAL_NIOL_debug_fpr1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr1_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr1': */
#define MSK_USED_BITS_NIOL_debug_fpr1 0xffffffffU

enum {
  BFW_NIOL_debug_fpr1_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR1_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr1_val; /* register f1 reserved */
} NIOL_DEBUG_FPR1_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR1_BIT_T bf;
} NIOL_DEBUG_FPR1_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr2 */
/* => register f2 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr2   0x00000108U
#define Adr_NIOL_debug_debug_fpr2 0x00001108U
#define Adr_NIOL_debug_fpr2       0x00001108U
#define DFLT_VAL_NIOL_debug_fpr2  0x00000000U

#define MSK_NIOL_debug_fpr2_val         0xffffffffU
#define SRT_NIOL_debug_fpr2_val         0
#define DFLT_VAL_NIOL_debug_fpr2_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr2_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr2': */
#define MSK_USED_BITS_NIOL_debug_fpr2 0xffffffffU

enum {
  BFW_NIOL_debug_fpr2_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR2_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr2_val; /* register f2 reserved */
} NIOL_DEBUG_FPR2_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR2_BIT_T bf;
} NIOL_DEBUG_FPR2_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr3 */
/* => register f3 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr3   0x0000010CU
#define Adr_NIOL_debug_debug_fpr3 0x0000110CU
#define Adr_NIOL_debug_fpr3       0x0000110CU
#define DFLT_VAL_NIOL_debug_fpr3  0x00000000U

#define MSK_NIOL_debug_fpr3_val         0xffffffffU
#define SRT_NIOL_debug_fpr3_val         0
#define DFLT_VAL_NIOL_debug_fpr3_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr3_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr3': */
#define MSK_USED_BITS_NIOL_debug_fpr3 0xffffffffU

enum {
  BFW_NIOL_debug_fpr3_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR3_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr3_val; /* register f3 reserved */
} NIOL_DEBUG_FPR3_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR3_BIT_T bf;
} NIOL_DEBUG_FPR3_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr4 */
/* => register f4 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr4   0x00000110U
#define Adr_NIOL_debug_debug_fpr4 0x00001110U
#define Adr_NIOL_debug_fpr4       0x00001110U
#define DFLT_VAL_NIOL_debug_fpr4  0x00000000U

#define MSK_NIOL_debug_fpr4_val         0xffffffffU
#define SRT_NIOL_debug_fpr4_val         0
#define DFLT_VAL_NIOL_debug_fpr4_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr4_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr4': */
#define MSK_USED_BITS_NIOL_debug_fpr4 0xffffffffU

enum {
  BFW_NIOL_debug_fpr4_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR4_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr4_val; /* register f4 reserved */
} NIOL_DEBUG_FPR4_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR4_BIT_T bf;
} NIOL_DEBUG_FPR4_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr5 */
/* => register f5 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr5   0x00000114U
#define Adr_NIOL_debug_debug_fpr5 0x00001114U
#define Adr_NIOL_debug_fpr5       0x00001114U
#define DFLT_VAL_NIOL_debug_fpr5  0x00000000U

#define MSK_NIOL_debug_fpr5_val         0xffffffffU
#define SRT_NIOL_debug_fpr5_val         0
#define DFLT_VAL_NIOL_debug_fpr5_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr5_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr5': */
#define MSK_USED_BITS_NIOL_debug_fpr5 0xffffffffU

enum {
  BFW_NIOL_debug_fpr5_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR5_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr5_val; /* register f5 reserved */
} NIOL_DEBUG_FPR5_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR5_BIT_T bf;
} NIOL_DEBUG_FPR5_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr6 */
/* => register f6 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr6   0x00000118U
#define Adr_NIOL_debug_debug_fpr6 0x00001118U
#define Adr_NIOL_debug_fpr6       0x00001118U
#define DFLT_VAL_NIOL_debug_fpr6  0x00000000U

#define MSK_NIOL_debug_fpr6_val         0xffffffffU
#define SRT_NIOL_debug_fpr6_val         0
#define DFLT_VAL_NIOL_debug_fpr6_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr6_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr6': */
#define MSK_USED_BITS_NIOL_debug_fpr6 0xffffffffU

enum {
  BFW_NIOL_debug_fpr6_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR6_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr6_val; /* register f6 reserved */
} NIOL_DEBUG_FPR6_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR6_BIT_T bf;
} NIOL_DEBUG_FPR6_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr7 */
/* => register f7 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr7   0x0000011CU
#define Adr_NIOL_debug_debug_fpr7 0x0000111CU
#define Adr_NIOL_debug_fpr7       0x0000111CU
#define DFLT_VAL_NIOL_debug_fpr7  0x00000000U

#define MSK_NIOL_debug_fpr7_val         0xffffffffU
#define SRT_NIOL_debug_fpr7_val         0
#define DFLT_VAL_NIOL_debug_fpr7_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr7_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr7': */
#define MSK_USED_BITS_NIOL_debug_fpr7 0xffffffffU

enum {
  BFW_NIOL_debug_fpr7_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR7_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr7_val; /* register f7 reserved */
} NIOL_DEBUG_FPR7_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR7_BIT_T bf;
} NIOL_DEBUG_FPR7_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr8 */
/* => register f8 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr8   0x00000120U
#define Adr_NIOL_debug_debug_fpr8 0x00001120U
#define Adr_NIOL_debug_fpr8       0x00001120U
#define DFLT_VAL_NIOL_debug_fpr8  0x00000000U

#define MSK_NIOL_debug_fpr8_val         0xffffffffU
#define SRT_NIOL_debug_fpr8_val         0
#define DFLT_VAL_NIOL_debug_fpr8_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr8_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr8': */
#define MSK_USED_BITS_NIOL_debug_fpr8 0xffffffffU

enum {
  BFW_NIOL_debug_fpr8_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR8_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr8_val; /* register f8 reserved */
} NIOL_DEBUG_FPR8_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR8_BIT_T bf;
} NIOL_DEBUG_FPR8_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr9 */
/* => register f9 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr9   0x00000124U
#define Adr_NIOL_debug_debug_fpr9 0x00001124U
#define Adr_NIOL_debug_fpr9       0x00001124U
#define DFLT_VAL_NIOL_debug_fpr9  0x00000000U

#define MSK_NIOL_debug_fpr9_val         0xffffffffU
#define SRT_NIOL_debug_fpr9_val         0
#define DFLT_VAL_NIOL_debug_fpr9_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr9_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr9': */
#define MSK_USED_BITS_NIOL_debug_fpr9 0xffffffffU

enum {
  BFW_NIOL_debug_fpr9_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR9_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr9_val; /* register f9 reserved */
} NIOL_DEBUG_FPR9_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_FPR9_BIT_T bf;
} NIOL_DEBUG_FPR9_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr10 */
/* => register f10 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr10   0x00000128U
#define Adr_NIOL_debug_debug_fpr10 0x00001128U
#define Adr_NIOL_debug_fpr10       0x00001128U
#define DFLT_VAL_NIOL_debug_fpr10  0x00000000U

#define MSK_NIOL_debug_fpr10_val         0xffffffffU
#define SRT_NIOL_debug_fpr10_val         0
#define DFLT_VAL_NIOL_debug_fpr10_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr10_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr10': */
#define MSK_USED_BITS_NIOL_debug_fpr10 0xffffffffU

enum {
  BFW_NIOL_debug_fpr10_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR10_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr10_val; /* register f10 reserved */
} NIOL_DEBUG_FPR10_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR10_BIT_T bf;
} NIOL_DEBUG_FPR10_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr11 */
/* => register f11 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr11   0x0000012CU
#define Adr_NIOL_debug_debug_fpr11 0x0000112CU
#define Adr_NIOL_debug_fpr11       0x0000112CU
#define DFLT_VAL_NIOL_debug_fpr11  0x00000000U

#define MSK_NIOL_debug_fpr11_val         0xffffffffU
#define SRT_NIOL_debug_fpr11_val         0
#define DFLT_VAL_NIOL_debug_fpr11_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr11_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr11': */
#define MSK_USED_BITS_NIOL_debug_fpr11 0xffffffffU

enum {
  BFW_NIOL_debug_fpr11_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR11_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr11_val; /* register f11 reserved */
} NIOL_DEBUG_FPR11_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR11_BIT_T bf;
} NIOL_DEBUG_FPR11_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr12 */
/* => register f12 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr12   0x00000130U
#define Adr_NIOL_debug_debug_fpr12 0x00001130U
#define Adr_NIOL_debug_fpr12       0x00001130U
#define DFLT_VAL_NIOL_debug_fpr12  0x00000000U

#define MSK_NIOL_debug_fpr12_val         0xffffffffU
#define SRT_NIOL_debug_fpr12_val         0
#define DFLT_VAL_NIOL_debug_fpr12_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr12_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr12': */
#define MSK_USED_BITS_NIOL_debug_fpr12 0xffffffffU

enum {
  BFW_NIOL_debug_fpr12_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR12_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr12_val; /* register f12 reserved */
} NIOL_DEBUG_FPR12_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR12_BIT_T bf;
} NIOL_DEBUG_FPR12_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr13 */
/* => register f13 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr13   0x00000134U
#define Adr_NIOL_debug_debug_fpr13 0x00001134U
#define Adr_NIOL_debug_fpr13       0x00001134U
#define DFLT_VAL_NIOL_debug_fpr13  0x00000000U

#define MSK_NIOL_debug_fpr13_val         0xffffffffU
#define SRT_NIOL_debug_fpr13_val         0
#define DFLT_VAL_NIOL_debug_fpr13_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr13_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr13': */
#define MSK_USED_BITS_NIOL_debug_fpr13 0xffffffffU

enum {
  BFW_NIOL_debug_fpr13_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR13_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr13_val; /* register f13 reserved */
} NIOL_DEBUG_FPR13_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR13_BIT_T bf;
} NIOL_DEBUG_FPR13_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr14 */
/* => register f14 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr14   0x00000138U
#define Adr_NIOL_debug_debug_fpr14 0x00001138U
#define Adr_NIOL_debug_fpr14       0x00001138U
#define DFLT_VAL_NIOL_debug_fpr14  0x00000000U

#define MSK_NIOL_debug_fpr14_val         0xffffffffU
#define SRT_NIOL_debug_fpr14_val         0
#define DFLT_VAL_NIOL_debug_fpr14_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr14_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr14': */
#define MSK_USED_BITS_NIOL_debug_fpr14 0xffffffffU

enum {
  BFW_NIOL_debug_fpr14_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR14_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr14_val; /* register f14 reserved */
} NIOL_DEBUG_FPR14_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR14_BIT_T bf;
} NIOL_DEBUG_FPR14_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr15 */
/* => register f15 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr15   0x0000013CU
#define Adr_NIOL_debug_debug_fpr15 0x0000113CU
#define Adr_NIOL_debug_fpr15       0x0000113CU
#define DFLT_VAL_NIOL_debug_fpr15  0x00000000U

#define MSK_NIOL_debug_fpr15_val         0xffffffffU
#define SRT_NIOL_debug_fpr15_val         0
#define DFLT_VAL_NIOL_debug_fpr15_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr15_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr15': */
#define MSK_USED_BITS_NIOL_debug_fpr15 0xffffffffU

enum {
  BFW_NIOL_debug_fpr15_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR15_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr15_val; /* register f15 reserved */
} NIOL_DEBUG_FPR15_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR15_BIT_T bf;
} NIOL_DEBUG_FPR15_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr16 */
/* => register f16 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr16   0x00000140U
#define Adr_NIOL_debug_debug_fpr16 0x00001140U
#define Adr_NIOL_debug_fpr16       0x00001140U
#define DFLT_VAL_NIOL_debug_fpr16  0x00000000U

#define MSK_NIOL_debug_fpr16_val         0xffffffffU
#define SRT_NIOL_debug_fpr16_val         0
#define DFLT_VAL_NIOL_debug_fpr16_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr16_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr16': */
#define MSK_USED_BITS_NIOL_debug_fpr16 0xffffffffU

enum {
  BFW_NIOL_debug_fpr16_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR16_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr16_val; /* register f16 reserved */
} NIOL_DEBUG_FPR16_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR16_BIT_T bf;
} NIOL_DEBUG_FPR16_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr17 */
/* => register f17 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr17   0x00000144U
#define Adr_NIOL_debug_debug_fpr17 0x00001144U
#define Adr_NIOL_debug_fpr17       0x00001144U
#define DFLT_VAL_NIOL_debug_fpr17  0x00000000U

#define MSK_NIOL_debug_fpr17_val         0xffffffffU
#define SRT_NIOL_debug_fpr17_val         0
#define DFLT_VAL_NIOL_debug_fpr17_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr17_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr17': */
#define MSK_USED_BITS_NIOL_debug_fpr17 0xffffffffU

enum {
  BFW_NIOL_debug_fpr17_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR17_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr17_val; /* register f17 reserved */
} NIOL_DEBUG_FPR17_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR17_BIT_T bf;
} NIOL_DEBUG_FPR17_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr18 */
/* => register f18 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr18   0x00000148U
#define Adr_NIOL_debug_debug_fpr18 0x00001148U
#define Adr_NIOL_debug_fpr18       0x00001148U
#define DFLT_VAL_NIOL_debug_fpr18  0x00000000U

#define MSK_NIOL_debug_fpr18_val         0xffffffffU
#define SRT_NIOL_debug_fpr18_val         0
#define DFLT_VAL_NIOL_debug_fpr18_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr18_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr18': */
#define MSK_USED_BITS_NIOL_debug_fpr18 0xffffffffU

enum {
  BFW_NIOL_debug_fpr18_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR18_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr18_val; /* register f18 reserved */
} NIOL_DEBUG_FPR18_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR18_BIT_T bf;
} NIOL_DEBUG_FPR18_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr19 */
/* => register f19 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr19   0x0000014CU
#define Adr_NIOL_debug_debug_fpr19 0x0000114CU
#define Adr_NIOL_debug_fpr19       0x0000114CU
#define DFLT_VAL_NIOL_debug_fpr19  0x00000000U

#define MSK_NIOL_debug_fpr19_val         0xffffffffU
#define SRT_NIOL_debug_fpr19_val         0
#define DFLT_VAL_NIOL_debug_fpr19_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr19_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr19': */
#define MSK_USED_BITS_NIOL_debug_fpr19 0xffffffffU

enum {
  BFW_NIOL_debug_fpr19_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR19_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr19_val; /* register f19 reserved */
} NIOL_DEBUG_FPR19_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR19_BIT_T bf;
} NIOL_DEBUG_FPR19_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr20 */
/* => register f20 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr20   0x00000150U
#define Adr_NIOL_debug_debug_fpr20 0x00001150U
#define Adr_NIOL_debug_fpr20       0x00001150U
#define DFLT_VAL_NIOL_debug_fpr20  0x00000000U

#define MSK_NIOL_debug_fpr20_val         0xffffffffU
#define SRT_NIOL_debug_fpr20_val         0
#define DFLT_VAL_NIOL_debug_fpr20_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr20_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr20': */
#define MSK_USED_BITS_NIOL_debug_fpr20 0xffffffffU

enum {
  BFW_NIOL_debug_fpr20_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR20_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr20_val; /* register f20 reserved */
} NIOL_DEBUG_FPR20_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR20_BIT_T bf;
} NIOL_DEBUG_FPR20_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr21 */
/* => register f21 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr21   0x00000154U
#define Adr_NIOL_debug_debug_fpr21 0x00001154U
#define Adr_NIOL_debug_fpr21       0x00001154U
#define DFLT_VAL_NIOL_debug_fpr21  0x00000000U

#define MSK_NIOL_debug_fpr21_val         0xffffffffU
#define SRT_NIOL_debug_fpr21_val         0
#define DFLT_VAL_NIOL_debug_fpr21_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr21_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr21': */
#define MSK_USED_BITS_NIOL_debug_fpr21 0xffffffffU

enum {
  BFW_NIOL_debug_fpr21_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR21_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr21_val; /* register f21 reserved */
} NIOL_DEBUG_FPR21_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR21_BIT_T bf;
} NIOL_DEBUG_FPR21_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr22 */
/* => register f22 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr22   0x00000158U
#define Adr_NIOL_debug_debug_fpr22 0x00001158U
#define Adr_NIOL_debug_fpr22       0x00001158U
#define DFLT_VAL_NIOL_debug_fpr22  0x00000000U

#define MSK_NIOL_debug_fpr22_val         0xffffffffU
#define SRT_NIOL_debug_fpr22_val         0
#define DFLT_VAL_NIOL_debug_fpr22_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr22_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr22': */
#define MSK_USED_BITS_NIOL_debug_fpr22 0xffffffffU

enum {
  BFW_NIOL_debug_fpr22_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR22_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr22_val; /* register f22 reserved */
} NIOL_DEBUG_FPR22_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR22_BIT_T bf;
} NIOL_DEBUG_FPR22_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr23 */
/* => register f23 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr23   0x0000015CU
#define Adr_NIOL_debug_debug_fpr23 0x0000115CU
#define Adr_NIOL_debug_fpr23       0x0000115CU
#define DFLT_VAL_NIOL_debug_fpr23  0x00000000U

#define MSK_NIOL_debug_fpr23_val         0xffffffffU
#define SRT_NIOL_debug_fpr23_val         0
#define DFLT_VAL_NIOL_debug_fpr23_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr23_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr23': */
#define MSK_USED_BITS_NIOL_debug_fpr23 0xffffffffU

enum {
  BFW_NIOL_debug_fpr23_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR23_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr23_val; /* register f23 reserved */
} NIOL_DEBUG_FPR23_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR23_BIT_T bf;
} NIOL_DEBUG_FPR23_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr24 */
/* => register f24 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr24   0x00000160U
#define Adr_NIOL_debug_debug_fpr24 0x00001160U
#define Adr_NIOL_debug_fpr24       0x00001160U
#define DFLT_VAL_NIOL_debug_fpr24  0x00000000U

#define MSK_NIOL_debug_fpr24_val         0xffffffffU
#define SRT_NIOL_debug_fpr24_val         0
#define DFLT_VAL_NIOL_debug_fpr24_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr24_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr24': */
#define MSK_USED_BITS_NIOL_debug_fpr24 0xffffffffU

enum {
  BFW_NIOL_debug_fpr24_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR24_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr24_val; /* register f24 reserved */
} NIOL_DEBUG_FPR24_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR24_BIT_T bf;
} NIOL_DEBUG_FPR24_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr25 */
/* => register f25 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr25   0x00000164U
#define Adr_NIOL_debug_debug_fpr25 0x00001164U
#define Adr_NIOL_debug_fpr25       0x00001164U
#define DFLT_VAL_NIOL_debug_fpr25  0x00000000U

#define MSK_NIOL_debug_fpr25_val         0xffffffffU
#define SRT_NIOL_debug_fpr25_val         0
#define DFLT_VAL_NIOL_debug_fpr25_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr25_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr25': */
#define MSK_USED_BITS_NIOL_debug_fpr25 0xffffffffU

enum {
  BFW_NIOL_debug_fpr25_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR25_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr25_val; /* register f25 reserved */
} NIOL_DEBUG_FPR25_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR25_BIT_T bf;
} NIOL_DEBUG_FPR25_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr26 */
/* => register f26 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr26   0x00000168U
#define Adr_NIOL_debug_debug_fpr26 0x00001168U
#define Adr_NIOL_debug_fpr26       0x00001168U
#define DFLT_VAL_NIOL_debug_fpr26  0x00000000U

#define MSK_NIOL_debug_fpr26_val         0xffffffffU
#define SRT_NIOL_debug_fpr26_val         0
#define DFLT_VAL_NIOL_debug_fpr26_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr26_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr26': */
#define MSK_USED_BITS_NIOL_debug_fpr26 0xffffffffU

enum {
  BFW_NIOL_debug_fpr26_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR26_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr26_val; /* register f26 reserved */
} NIOL_DEBUG_FPR26_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR26_BIT_T bf;
} NIOL_DEBUG_FPR26_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr27 */
/* => register f27 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr27   0x0000016CU
#define Adr_NIOL_debug_debug_fpr27 0x0000116CU
#define Adr_NIOL_debug_fpr27       0x0000116CU
#define DFLT_VAL_NIOL_debug_fpr27  0x00000000U

#define MSK_NIOL_debug_fpr27_val         0xffffffffU
#define SRT_NIOL_debug_fpr27_val         0
#define DFLT_VAL_NIOL_debug_fpr27_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr27_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr27': */
#define MSK_USED_BITS_NIOL_debug_fpr27 0xffffffffU

enum {
  BFW_NIOL_debug_fpr27_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR27_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr27_val; /* register f27 reserved */
} NIOL_DEBUG_FPR27_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR27_BIT_T bf;
} NIOL_DEBUG_FPR27_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr28 */
/* => register f28 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr28   0x00000170U
#define Adr_NIOL_debug_debug_fpr28 0x00001170U
#define Adr_NIOL_debug_fpr28       0x00001170U
#define DFLT_VAL_NIOL_debug_fpr28  0x00000000U

#define MSK_NIOL_debug_fpr28_val         0xffffffffU
#define SRT_NIOL_debug_fpr28_val         0
#define DFLT_VAL_NIOL_debug_fpr28_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr28_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr28': */
#define MSK_USED_BITS_NIOL_debug_fpr28 0xffffffffU

enum {
  BFW_NIOL_debug_fpr28_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR28_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr28_val; /* register f28 reserved */
} NIOL_DEBUG_FPR28_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR28_BIT_T bf;
} NIOL_DEBUG_FPR28_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr29 */
/* => register f29 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr29   0x00000174U
#define Adr_NIOL_debug_debug_fpr29 0x00001174U
#define Adr_NIOL_debug_fpr29       0x00001174U
#define DFLT_VAL_NIOL_debug_fpr29  0x00000000U

#define MSK_NIOL_debug_fpr29_val         0xffffffffU
#define SRT_NIOL_debug_fpr29_val         0
#define DFLT_VAL_NIOL_debug_fpr29_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr29_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr29': */
#define MSK_USED_BITS_NIOL_debug_fpr29 0xffffffffU

enum {
  BFW_NIOL_debug_fpr29_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR29_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr29_val; /* register f29 reserved */
} NIOL_DEBUG_FPR29_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR29_BIT_T bf;
} NIOL_DEBUG_FPR29_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr30 */
/* => register f30 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr30   0x00000178U
#define Adr_NIOL_debug_debug_fpr30 0x00001178U
#define Adr_NIOL_debug_fpr30       0x00001178U
#define DFLT_VAL_NIOL_debug_fpr30  0x00000000U

#define MSK_NIOL_debug_fpr30_val         0xffffffffU
#define SRT_NIOL_debug_fpr30_val         0
#define DFLT_VAL_NIOL_debug_fpr30_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr30_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr30': */
#define MSK_USED_BITS_NIOL_debug_fpr30 0xffffffffU

enum {
  BFW_NIOL_debug_fpr30_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR30_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr30_val; /* register f30 reserved */
} NIOL_DEBUG_FPR30_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR30_BIT_T bf;
} NIOL_DEBUG_FPR30_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr31 */
/* => register f31 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr31   0x0000017CU
#define Adr_NIOL_debug_debug_fpr31 0x0000117CU
#define Adr_NIOL_debug_fpr31       0x0000117CU
#define DFLT_VAL_NIOL_debug_fpr31  0x00000000U

#define MSK_NIOL_debug_fpr31_val         0xffffffffU
#define SRT_NIOL_debug_fpr31_val         0
#define DFLT_VAL_NIOL_debug_fpr31_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr31_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr31': */
#define MSK_USED_BITS_NIOL_debug_fpr31 0xffffffffU

enum {
  BFW_NIOL_debug_fpr31_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR31_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr31_val; /* register f31 reserved */
} NIOL_DEBUG_FPR31_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR31_BIT_T bf;
} NIOL_DEBUG_FPR31_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr32 */
/* => register f32 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr32   0x00000180U
#define Adr_NIOL_debug_debug_fpr32 0x00001180U
#define Adr_NIOL_debug_fpr32       0x00001180U
#define DFLT_VAL_NIOL_debug_fpr32  0x00000000U

#define MSK_NIOL_debug_fpr32_val         0xffffffffU
#define SRT_NIOL_debug_fpr32_val         0
#define DFLT_VAL_NIOL_debug_fpr32_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr32_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr32': */
#define MSK_USED_BITS_NIOL_debug_fpr32 0xffffffffU

enum {
  BFW_NIOL_debug_fpr32_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR32_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr32_val; /* register f32 reserved */
} NIOL_DEBUG_FPR32_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR32_BIT_T bf;
} NIOL_DEBUG_FPR32_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr33 */
/* => register f33 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr33   0x00000184U
#define Adr_NIOL_debug_debug_fpr33 0x00001184U
#define Adr_NIOL_debug_fpr33       0x00001184U
#define DFLT_VAL_NIOL_debug_fpr33  0x00000000U

#define MSK_NIOL_debug_fpr33_val         0xffffffffU
#define SRT_NIOL_debug_fpr33_val         0
#define DFLT_VAL_NIOL_debug_fpr33_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr33_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr33': */
#define MSK_USED_BITS_NIOL_debug_fpr33 0xffffffffU

enum {
  BFW_NIOL_debug_fpr33_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR33_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr33_val; /* register f33 reserved */
} NIOL_DEBUG_FPR33_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR33_BIT_T bf;
} NIOL_DEBUG_FPR33_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr34 */
/* => register f34 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr34   0x00000188U
#define Adr_NIOL_debug_debug_fpr34 0x00001188U
#define Adr_NIOL_debug_fpr34       0x00001188U
#define DFLT_VAL_NIOL_debug_fpr34  0x00000000U

#define MSK_NIOL_debug_fpr34_val         0xffffffffU
#define SRT_NIOL_debug_fpr34_val         0
#define DFLT_VAL_NIOL_debug_fpr34_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr34_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr34': */
#define MSK_USED_BITS_NIOL_debug_fpr34 0xffffffffU

enum {
  BFW_NIOL_debug_fpr34_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR34_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr34_val; /* register f34 reserved */
} NIOL_DEBUG_FPR34_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR34_BIT_T bf;
} NIOL_DEBUG_FPR34_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr35 */
/* => register f35 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr35   0x0000018CU
#define Adr_NIOL_debug_debug_fpr35 0x0000118CU
#define Adr_NIOL_debug_fpr35       0x0000118CU
#define DFLT_VAL_NIOL_debug_fpr35  0x00000000U

#define MSK_NIOL_debug_fpr35_val         0xffffffffU
#define SRT_NIOL_debug_fpr35_val         0
#define DFLT_VAL_NIOL_debug_fpr35_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr35_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr35': */
#define MSK_USED_BITS_NIOL_debug_fpr35 0xffffffffU

enum {
  BFW_NIOL_debug_fpr35_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR35_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr35_val; /* register f35 reserved */
} NIOL_DEBUG_FPR35_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR35_BIT_T bf;
} NIOL_DEBUG_FPR35_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr36 */
/* => register f36 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr36   0x00000190U
#define Adr_NIOL_debug_debug_fpr36 0x00001190U
#define Adr_NIOL_debug_fpr36       0x00001190U
#define DFLT_VAL_NIOL_debug_fpr36  0x00000000U

#define MSK_NIOL_debug_fpr36_val         0xffffffffU
#define SRT_NIOL_debug_fpr36_val         0
#define DFLT_VAL_NIOL_debug_fpr36_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr36_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr36': */
#define MSK_USED_BITS_NIOL_debug_fpr36 0xffffffffU

enum {
  BFW_NIOL_debug_fpr36_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR36_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr36_val; /* register f36 reserved */
} NIOL_DEBUG_FPR36_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR36_BIT_T bf;
} NIOL_DEBUG_FPR36_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr37 */
/* => register f37 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr37   0x00000194U
#define Adr_NIOL_debug_debug_fpr37 0x00001194U
#define Adr_NIOL_debug_fpr37       0x00001194U
#define DFLT_VAL_NIOL_debug_fpr37  0x00000000U

#define MSK_NIOL_debug_fpr37_val         0xffffffffU
#define SRT_NIOL_debug_fpr37_val         0
#define DFLT_VAL_NIOL_debug_fpr37_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr37_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr37': */
#define MSK_USED_BITS_NIOL_debug_fpr37 0xffffffffU

enum {
  BFW_NIOL_debug_fpr37_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR37_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr37_val; /* register f37 reserved */
} NIOL_DEBUG_FPR37_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR37_BIT_T bf;
} NIOL_DEBUG_FPR37_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr38 */
/* => register f38 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr38   0x00000198U
#define Adr_NIOL_debug_debug_fpr38 0x00001198U
#define Adr_NIOL_debug_fpr38       0x00001198U
#define DFLT_VAL_NIOL_debug_fpr38  0x00000000U

#define MSK_NIOL_debug_fpr38_val         0xffffffffU
#define SRT_NIOL_debug_fpr38_val         0
#define DFLT_VAL_NIOL_debug_fpr38_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr38_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr38': */
#define MSK_USED_BITS_NIOL_debug_fpr38 0xffffffffU

enum {
  BFW_NIOL_debug_fpr38_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR38_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr38_val; /* register f38 reserved */
} NIOL_DEBUG_FPR38_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR38_BIT_T bf;
} NIOL_DEBUG_FPR38_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr39 */
/* => register f39 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr39   0x0000019CU
#define Adr_NIOL_debug_debug_fpr39 0x0000119CU
#define Adr_NIOL_debug_fpr39       0x0000119CU
#define DFLT_VAL_NIOL_debug_fpr39  0x00000000U

#define MSK_NIOL_debug_fpr39_val         0xffffffffU
#define SRT_NIOL_debug_fpr39_val         0
#define DFLT_VAL_NIOL_debug_fpr39_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr39_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr39': */
#define MSK_USED_BITS_NIOL_debug_fpr39 0xffffffffU

enum {
  BFW_NIOL_debug_fpr39_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR39_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr39_val; /* register f39 reserved */
} NIOL_DEBUG_FPR39_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR39_BIT_T bf;
} NIOL_DEBUG_FPR39_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr40 */
/* => register f40 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr40   0x000001A0U
#define Adr_NIOL_debug_debug_fpr40 0x000011A0U
#define Adr_NIOL_debug_fpr40       0x000011A0U
#define DFLT_VAL_NIOL_debug_fpr40  0x00000000U

#define MSK_NIOL_debug_fpr40_val         0xffffffffU
#define SRT_NIOL_debug_fpr40_val         0
#define DFLT_VAL_NIOL_debug_fpr40_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr40_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr40': */
#define MSK_USED_BITS_NIOL_debug_fpr40 0xffffffffU

enum {
  BFW_NIOL_debug_fpr40_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR40_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr40_val; /* register f40 reserved */
} NIOL_DEBUG_FPR40_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR40_BIT_T bf;
} NIOL_DEBUG_FPR40_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr41 */
/* => register f41 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr41   0x000001A4U
#define Adr_NIOL_debug_debug_fpr41 0x000011A4U
#define Adr_NIOL_debug_fpr41       0x000011A4U
#define DFLT_VAL_NIOL_debug_fpr41  0x00000000U

#define MSK_NIOL_debug_fpr41_val         0xffffffffU
#define SRT_NIOL_debug_fpr41_val         0
#define DFLT_VAL_NIOL_debug_fpr41_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr41_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr41': */
#define MSK_USED_BITS_NIOL_debug_fpr41 0xffffffffU

enum {
  BFW_NIOL_debug_fpr41_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR41_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr41_val; /* register f41 reserved */
} NIOL_DEBUG_FPR41_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR41_BIT_T bf;
} NIOL_DEBUG_FPR41_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr42 */
/* => register f42 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr42   0x000001A8U
#define Adr_NIOL_debug_debug_fpr42 0x000011A8U
#define Adr_NIOL_debug_fpr42       0x000011A8U
#define DFLT_VAL_NIOL_debug_fpr42  0x00000000U

#define MSK_NIOL_debug_fpr42_val         0xffffffffU
#define SRT_NIOL_debug_fpr42_val         0
#define DFLT_VAL_NIOL_debug_fpr42_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr42_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr42': */
#define MSK_USED_BITS_NIOL_debug_fpr42 0xffffffffU

enum {
  BFW_NIOL_debug_fpr42_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR42_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr42_val; /* register f42 reserved */
} NIOL_DEBUG_FPR42_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR42_BIT_T bf;
} NIOL_DEBUG_FPR42_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr43 */
/* => register f43 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr43   0x000001ACU
#define Adr_NIOL_debug_debug_fpr43 0x000011ACU
#define Adr_NIOL_debug_fpr43       0x000011ACU
#define DFLT_VAL_NIOL_debug_fpr43  0x00000000U

#define MSK_NIOL_debug_fpr43_val         0xffffffffU
#define SRT_NIOL_debug_fpr43_val         0
#define DFLT_VAL_NIOL_debug_fpr43_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr43_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr43': */
#define MSK_USED_BITS_NIOL_debug_fpr43 0xffffffffU

enum {
  BFW_NIOL_debug_fpr43_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR43_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr43_val; /* register f43 reserved */
} NIOL_DEBUG_FPR43_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR43_BIT_T bf;
} NIOL_DEBUG_FPR43_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr44 */
/* => register f44 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr44   0x000001B0U
#define Adr_NIOL_debug_debug_fpr44 0x000011B0U
#define Adr_NIOL_debug_fpr44       0x000011B0U
#define DFLT_VAL_NIOL_debug_fpr44  0x00000000U

#define MSK_NIOL_debug_fpr44_val         0xffffffffU
#define SRT_NIOL_debug_fpr44_val         0
#define DFLT_VAL_NIOL_debug_fpr44_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr44_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr44': */
#define MSK_USED_BITS_NIOL_debug_fpr44 0xffffffffU

enum {
  BFW_NIOL_debug_fpr44_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR44_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr44_val; /* register f44 reserved */
} NIOL_DEBUG_FPR44_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR44_BIT_T bf;
} NIOL_DEBUG_FPR44_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr45 */
/* => register f45 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr45   0x000001B4U
#define Adr_NIOL_debug_debug_fpr45 0x000011B4U
#define Adr_NIOL_debug_fpr45       0x000011B4U
#define DFLT_VAL_NIOL_debug_fpr45  0x00000000U

#define MSK_NIOL_debug_fpr45_val         0xffffffffU
#define SRT_NIOL_debug_fpr45_val         0
#define DFLT_VAL_NIOL_debug_fpr45_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr45_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr45': */
#define MSK_USED_BITS_NIOL_debug_fpr45 0xffffffffU

enum {
  BFW_NIOL_debug_fpr45_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR45_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr45_val; /* register f45 reserved */
} NIOL_DEBUG_FPR45_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR45_BIT_T bf;
} NIOL_DEBUG_FPR45_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr46 */
/* => register f46 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr46   0x000001B8U
#define Adr_NIOL_debug_debug_fpr46 0x000011B8U
#define Adr_NIOL_debug_fpr46       0x000011B8U
#define DFLT_VAL_NIOL_debug_fpr46  0x00000000U

#define MSK_NIOL_debug_fpr46_val         0xffffffffU
#define SRT_NIOL_debug_fpr46_val         0
#define DFLT_VAL_NIOL_debug_fpr46_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr46_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr46': */
#define MSK_USED_BITS_NIOL_debug_fpr46 0xffffffffU

enum {
  BFW_NIOL_debug_fpr46_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR46_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr46_val; /* register f46 reserved */
} NIOL_DEBUG_FPR46_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR46_BIT_T bf;
} NIOL_DEBUG_FPR46_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr47 */
/* => register f47 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr47   0x000001BCU
#define Adr_NIOL_debug_debug_fpr47 0x000011BCU
#define Adr_NIOL_debug_fpr47       0x000011BCU
#define DFLT_VAL_NIOL_debug_fpr47  0x00000000U

#define MSK_NIOL_debug_fpr47_val         0xffffffffU
#define SRT_NIOL_debug_fpr47_val         0
#define DFLT_VAL_NIOL_debug_fpr47_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr47_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr47': */
#define MSK_USED_BITS_NIOL_debug_fpr47 0xffffffffU

enum {
  BFW_NIOL_debug_fpr47_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR47_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr47_val; /* register f47 reserved */
} NIOL_DEBUG_FPR47_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR47_BIT_T bf;
} NIOL_DEBUG_FPR47_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr48 */
/* => register f48 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr48   0x000001C0U
#define Adr_NIOL_debug_debug_fpr48 0x000011C0U
#define Adr_NIOL_debug_fpr48       0x000011C0U
#define DFLT_VAL_NIOL_debug_fpr48  0x00000000U

#define MSK_NIOL_debug_fpr48_val         0xffffffffU
#define SRT_NIOL_debug_fpr48_val         0
#define DFLT_VAL_NIOL_debug_fpr48_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr48_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr48': */
#define MSK_USED_BITS_NIOL_debug_fpr48 0xffffffffU

enum {
  BFW_NIOL_debug_fpr48_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR48_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr48_val; /* register f48 reserved */
} NIOL_DEBUG_FPR48_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR48_BIT_T bf;
} NIOL_DEBUG_FPR48_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr49 */
/* => register f49 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr49   0x000001C4U
#define Adr_NIOL_debug_debug_fpr49 0x000011C4U
#define Adr_NIOL_debug_fpr49       0x000011C4U
#define DFLT_VAL_NIOL_debug_fpr49  0x00000000U

#define MSK_NIOL_debug_fpr49_val         0xffffffffU
#define SRT_NIOL_debug_fpr49_val         0
#define DFLT_VAL_NIOL_debug_fpr49_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr49_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr49': */
#define MSK_USED_BITS_NIOL_debug_fpr49 0xffffffffU

enum {
  BFW_NIOL_debug_fpr49_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR49_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr49_val; /* register f49 reserved */
} NIOL_DEBUG_FPR49_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR49_BIT_T bf;
} NIOL_DEBUG_FPR49_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr50 */
/* => register f50 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr50   0x000001C8U
#define Adr_NIOL_debug_debug_fpr50 0x000011C8U
#define Adr_NIOL_debug_fpr50       0x000011C8U
#define DFLT_VAL_NIOL_debug_fpr50  0x00000000U

#define MSK_NIOL_debug_fpr50_val         0xffffffffU
#define SRT_NIOL_debug_fpr50_val         0
#define DFLT_VAL_NIOL_debug_fpr50_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr50_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr50': */
#define MSK_USED_BITS_NIOL_debug_fpr50 0xffffffffU

enum {
  BFW_NIOL_debug_fpr50_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR50_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr50_val; /* register f50 reserved */
} NIOL_DEBUG_FPR50_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR50_BIT_T bf;
} NIOL_DEBUG_FPR50_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr51 */
/* => register f51 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr51   0x000001CCU
#define Adr_NIOL_debug_debug_fpr51 0x000011CCU
#define Adr_NIOL_debug_fpr51       0x000011CCU
#define DFLT_VAL_NIOL_debug_fpr51  0x00000000U

#define MSK_NIOL_debug_fpr51_val         0xffffffffU
#define SRT_NIOL_debug_fpr51_val         0
#define DFLT_VAL_NIOL_debug_fpr51_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr51_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr51': */
#define MSK_USED_BITS_NIOL_debug_fpr51 0xffffffffU

enum {
  BFW_NIOL_debug_fpr51_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR51_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr51_val; /* register f51 reserved */
} NIOL_DEBUG_FPR51_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR51_BIT_T bf;
} NIOL_DEBUG_FPR51_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr52 */
/* => register f52 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr52   0x000001D0U
#define Adr_NIOL_debug_debug_fpr52 0x000011D0U
#define Adr_NIOL_debug_fpr52       0x000011D0U
#define DFLT_VAL_NIOL_debug_fpr52  0x00000000U

#define MSK_NIOL_debug_fpr52_val         0xffffffffU
#define SRT_NIOL_debug_fpr52_val         0
#define DFLT_VAL_NIOL_debug_fpr52_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr52_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr52': */
#define MSK_USED_BITS_NIOL_debug_fpr52 0xffffffffU

enum {
  BFW_NIOL_debug_fpr52_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR52_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr52_val; /* register f52 reserved */
} NIOL_DEBUG_FPR52_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR52_BIT_T bf;
} NIOL_DEBUG_FPR52_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr53 */
/* => register f53 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr53   0x000001D4U
#define Adr_NIOL_debug_debug_fpr53 0x000011D4U
#define Adr_NIOL_debug_fpr53       0x000011D4U
#define DFLT_VAL_NIOL_debug_fpr53  0x00000000U

#define MSK_NIOL_debug_fpr53_val         0xffffffffU
#define SRT_NIOL_debug_fpr53_val         0
#define DFLT_VAL_NIOL_debug_fpr53_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr53_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr53': */
#define MSK_USED_BITS_NIOL_debug_fpr53 0xffffffffU

enum {
  BFW_NIOL_debug_fpr53_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR53_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr53_val; /* register f53 reserved */
} NIOL_DEBUG_FPR53_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR53_BIT_T bf;
} NIOL_DEBUG_FPR53_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr54 */
/* => register f54 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr54   0x000001D8U
#define Adr_NIOL_debug_debug_fpr54 0x000011D8U
#define Adr_NIOL_debug_fpr54       0x000011D8U
#define DFLT_VAL_NIOL_debug_fpr54  0x00000000U

#define MSK_NIOL_debug_fpr54_val         0xffffffffU
#define SRT_NIOL_debug_fpr54_val         0
#define DFLT_VAL_NIOL_debug_fpr54_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr54_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr54': */
#define MSK_USED_BITS_NIOL_debug_fpr54 0xffffffffU

enum {
  BFW_NIOL_debug_fpr54_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR54_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr54_val; /* register f54 reserved */
} NIOL_DEBUG_FPR54_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR54_BIT_T bf;
} NIOL_DEBUG_FPR54_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr55 */
/* => register f55 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr55   0x000001DCU
#define Adr_NIOL_debug_debug_fpr55 0x000011DCU
#define Adr_NIOL_debug_fpr55       0x000011DCU
#define DFLT_VAL_NIOL_debug_fpr55  0x00000000U

#define MSK_NIOL_debug_fpr55_val         0xffffffffU
#define SRT_NIOL_debug_fpr55_val         0
#define DFLT_VAL_NIOL_debug_fpr55_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr55_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr55': */
#define MSK_USED_BITS_NIOL_debug_fpr55 0xffffffffU

enum {
  BFW_NIOL_debug_fpr55_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR55_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr55_val; /* register f55 reserved */
} NIOL_DEBUG_FPR55_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR55_BIT_T bf;
} NIOL_DEBUG_FPR55_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr56 */
/* => register f56 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr56   0x000001E0U
#define Adr_NIOL_debug_debug_fpr56 0x000011E0U
#define Adr_NIOL_debug_fpr56       0x000011E0U
#define DFLT_VAL_NIOL_debug_fpr56  0x00000000U

#define MSK_NIOL_debug_fpr56_val         0xffffffffU
#define SRT_NIOL_debug_fpr56_val         0
#define DFLT_VAL_NIOL_debug_fpr56_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr56_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr56': */
#define MSK_USED_BITS_NIOL_debug_fpr56 0xffffffffU

enum {
  BFW_NIOL_debug_fpr56_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR56_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr56_val; /* register f56 reserved */
} NIOL_DEBUG_FPR56_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR56_BIT_T bf;
} NIOL_DEBUG_FPR56_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr57 */
/* => register f57 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr57   0x000001E4U
#define Adr_NIOL_debug_debug_fpr57 0x000011E4U
#define Adr_NIOL_debug_fpr57       0x000011E4U
#define DFLT_VAL_NIOL_debug_fpr57  0x00000000U

#define MSK_NIOL_debug_fpr57_val         0xffffffffU
#define SRT_NIOL_debug_fpr57_val         0
#define DFLT_VAL_NIOL_debug_fpr57_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr57_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr57': */
#define MSK_USED_BITS_NIOL_debug_fpr57 0xffffffffU

enum {
  BFW_NIOL_debug_fpr57_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR57_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr57_val; /* register f57 reserved */
} NIOL_DEBUG_FPR57_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR57_BIT_T bf;
} NIOL_DEBUG_FPR57_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr58 */
/* => register f58 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr58   0x000001E8U
#define Adr_NIOL_debug_debug_fpr58 0x000011E8U
#define Adr_NIOL_debug_fpr58       0x000011E8U
#define DFLT_VAL_NIOL_debug_fpr58  0x00000000U

#define MSK_NIOL_debug_fpr58_val         0xffffffffU
#define SRT_NIOL_debug_fpr58_val         0
#define DFLT_VAL_NIOL_debug_fpr58_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr58_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr58': */
#define MSK_USED_BITS_NIOL_debug_fpr58 0xffffffffU

enum {
  BFW_NIOL_debug_fpr58_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR58_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr58_val; /* register f58 reserved */
} NIOL_DEBUG_FPR58_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR58_BIT_T bf;
} NIOL_DEBUG_FPR58_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr59 */
/* => register f59 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr59   0x000001ECU
#define Adr_NIOL_debug_debug_fpr59 0x000011ECU
#define Adr_NIOL_debug_fpr59       0x000011ECU
#define DFLT_VAL_NIOL_debug_fpr59  0x00000000U

#define MSK_NIOL_debug_fpr59_val         0xffffffffU
#define SRT_NIOL_debug_fpr59_val         0
#define DFLT_VAL_NIOL_debug_fpr59_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr59_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr59': */
#define MSK_USED_BITS_NIOL_debug_fpr59 0xffffffffU

enum {
  BFW_NIOL_debug_fpr59_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR59_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr59_val; /* register f59 reserved */
} NIOL_DEBUG_FPR59_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR59_BIT_T bf;
} NIOL_DEBUG_FPR59_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr60 */
/* => register f60 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr60   0x000001F0U
#define Adr_NIOL_debug_debug_fpr60 0x000011F0U
#define Adr_NIOL_debug_fpr60       0x000011F0U
#define DFLT_VAL_NIOL_debug_fpr60  0x00000000U

#define MSK_NIOL_debug_fpr60_val         0xffffffffU
#define SRT_NIOL_debug_fpr60_val         0
#define DFLT_VAL_NIOL_debug_fpr60_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr60_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr60': */
#define MSK_USED_BITS_NIOL_debug_fpr60 0xffffffffU

enum {
  BFW_NIOL_debug_fpr60_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR60_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr60_val; /* register f60 reserved */
} NIOL_DEBUG_FPR60_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR60_BIT_T bf;
} NIOL_DEBUG_FPR60_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr61 */
/* => register f61 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr61   0x000001F4U
#define Adr_NIOL_debug_debug_fpr61 0x000011F4U
#define Adr_NIOL_debug_fpr61       0x000011F4U
#define DFLT_VAL_NIOL_debug_fpr61  0x00000000U

#define MSK_NIOL_debug_fpr61_val         0xffffffffU
#define SRT_NIOL_debug_fpr61_val         0
#define DFLT_VAL_NIOL_debug_fpr61_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr61_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr61': */
#define MSK_USED_BITS_NIOL_debug_fpr61 0xffffffffU

enum {
  BFW_NIOL_debug_fpr61_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR61_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr61_val; /* register f61 reserved */
} NIOL_DEBUG_FPR61_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR61_BIT_T bf;
} NIOL_DEBUG_FPR61_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr62 */
/* => register f62 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr62   0x000001F8U
#define Adr_NIOL_debug_debug_fpr62 0x000011F8U
#define Adr_NIOL_debug_fpr62       0x000011F8U
#define DFLT_VAL_NIOL_debug_fpr62  0x00000000U

#define MSK_NIOL_debug_fpr62_val         0xffffffffU
#define SRT_NIOL_debug_fpr62_val         0
#define DFLT_VAL_NIOL_debug_fpr62_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr62_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr62': */
#define MSK_USED_BITS_NIOL_debug_fpr62 0xffffffffU

enum {
  BFW_NIOL_debug_fpr62_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR62_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr62_val; /* register f62 reserved */
} NIOL_DEBUG_FPR62_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR62_BIT_T bf;
} NIOL_DEBUG_FPR62_T;

/* --------------------------------------------------------------------- */
/* Register debug_fpr63 */
/* => register f63 from register file */
/*    reserved. Not used in the this core. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_fpr63   0x000001FCU
#define Adr_NIOL_debug_debug_fpr63 0x000011FCU
#define Adr_NIOL_debug_fpr63       0x000011FCU
#define DFLT_VAL_NIOL_debug_fpr63  0x00000000U

#define MSK_NIOL_debug_fpr63_val         0xffffffffU
#define SRT_NIOL_debug_fpr63_val         0
#define DFLT_VAL_NIOL_debug_fpr63_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_fpr63_val 0x00000000U

/* all used bits of 'NIOL_debug_fpr63': */
#define MSK_USED_BITS_NIOL_debug_fpr63 0xffffffffU

enum {
  BFW_NIOL_debug_fpr63_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_FPR63_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_fpr63_val; /* register f63 reserved */
} NIOL_DEBUG_FPR63_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_FPR63_BIT_T bf;
} NIOL_DEBUG_FPR63_T;

/* --------------------------------------------------------------------- */
/* Register debug_performance_counter_counter_register */
/* => PCCR31 ALL */
/*    Special Register, a write to this register will set all counters to the supplied value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_performance_counter_counter_register   0x0000027CU
#define Adr_NIOL_debug_debug_performance_counter_counter_register 0x0000127CU
#define Adr_NIOL_debug_performance_counter_counter_register       0x0000127CU
#define DFLT_VAL_NIOL_debug_performance_counter_counter_register  0x00000000U

#define MSK_NIOL_debug_performance_counter_counter_register_val         0xffffffffU
#define SRT_NIOL_debug_performance_counter_counter_register_val         0
#define DFLT_VAL_NIOL_debug_performance_counter_counter_register_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_performance_counter_counter_register_val 0x00000000U

/* all used bits of 'NIOL_debug_performance_counter_counter_register': */
#define MSK_USED_BITS_NIOL_debug_performance_counter_counter_register 0xffffffffU

enum {
  BFW_NIOL_debug_performance_counter_counter_register_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_PERFORMANCE_COUNTER_COUNTER_REGISTER_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_performance_counter_counter_register_val; /* register pccr31 */
} NIOL_DEBUG_PERFORMANCE_COUNTER_COUNTER_REGISTER_BIT_T;

typedef union {
  uint32_t                                              val;
  NIOL_DEBUG_PERFORMANCE_COUNTER_COUNTER_REGISTER_BIT_T bf;
} NIOL_DEBUG_PERFORMANCE_COUNTER_COUNTER_REGISTER_T;

/* --------------------------------------------------------------------- */
/* Register debug_lpstart0 */
/* => reserved in zeroriscy */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_lpstart0   0x00000280U
#define Adr_NIOL_debug_debug_lpstart0 0x00001280U
#define Adr_NIOL_debug_lpstart0       0x00001280U
#define DFLT_VAL_NIOL_debug_lpstart0  0x00000000U

#define MSK_NIOL_debug_lpstart0_val         0xffffffffU
#define SRT_NIOL_debug_lpstart0_val         0
#define DFLT_VAL_NIOL_debug_lpstart0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_lpstart0_val 0x00000000U

/* all used bits of 'NIOL_debug_lpstart0': */
#define MSK_USED_BITS_NIOL_debug_lpstart0 0xffffffffU

enum {
  BFW_NIOL_debug_lpstart0_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_LPSTART0_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_lpstart0_val; /* Hardware Loop 0 Start */
} NIOL_DEBUG_LPSTART0_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_DEBUG_LPSTART0_BIT_T bf;
} NIOL_DEBUG_LPSTART0_T;

/* --------------------------------------------------------------------- */
/* Register debug_lpend0 */
/* => reserved in zeroriscy */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_lpend0   0x00000284U
#define Adr_NIOL_debug_debug_lpend0 0x00001284U
#define Adr_NIOL_debug_lpend0       0x00001284U
#define DFLT_VAL_NIOL_debug_lpend0  0x00000000U

#define MSK_NIOL_debug_lpend0_val         0xffffffffU
#define SRT_NIOL_debug_lpend0_val         0
#define DFLT_VAL_NIOL_debug_lpend0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_lpend0_val 0x00000000U

/* all used bits of 'NIOL_debug_lpend0': */
#define MSK_USED_BITS_NIOL_debug_lpend0 0xffffffffU

enum {
  BFW_NIOL_debug_lpend0_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_LPEND0_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_lpend0_val; /* Hardware Loop 0 End */
} NIOL_DEBUG_LPEND0_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_DEBUG_LPEND0_BIT_T bf;
} NIOL_DEBUG_LPEND0_T;

/* --------------------------------------------------------------------- */
/* Register debug_lpcount0 */
/* => reserved in zeroriscy */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_lpcount0   0x00000288U
#define Adr_NIOL_debug_debug_lpcount0 0x00001288U
#define Adr_NIOL_debug_lpcount0       0x00001288U
#define DFLT_VAL_NIOL_debug_lpcount0  0x00000000U

#define MSK_NIOL_debug_lpcount0_val         0xffffffffU
#define SRT_NIOL_debug_lpcount0_val         0
#define DFLT_VAL_NIOL_debug_lpcount0_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_lpcount0_val 0x00000000U

/* all used bits of 'NIOL_debug_lpcount0': */
#define MSK_USED_BITS_NIOL_debug_lpcount0 0xffffffffU

enum {
  BFW_NIOL_debug_lpcount0_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_LPCOUNT0_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_lpcount0_val; /* Hardware Loop 0 Counter */
} NIOL_DEBUG_LPCOUNT0_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_DEBUG_LPCOUNT0_BIT_T bf;
} NIOL_DEBUG_LPCOUNT0_T;

/* --------------------------------------------------------------------- */
/* Register debug_lpstart1 */
/* => reserved in zeroriscy */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_lpstart1   0x0000028CU
#define Adr_NIOL_debug_debug_lpstart1 0x0000128CU
#define Adr_NIOL_debug_lpstart1       0x0000128CU
#define DFLT_VAL_NIOL_debug_lpstart1  0x00000000U

#define MSK_NIOL_debug_lpstart1_val         0xffffffffU
#define SRT_NIOL_debug_lpstart1_val         0
#define DFLT_VAL_NIOL_debug_lpstart1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_lpstart1_val 0x00000000U

/* all used bits of 'NIOL_debug_lpstart1': */
#define MSK_USED_BITS_NIOL_debug_lpstart1 0xffffffffU

enum {
  BFW_NIOL_debug_lpstart1_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_LPSTART1_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_lpstart1_val; /* Hardware Loop 1 Start */
} NIOL_DEBUG_LPSTART1_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_DEBUG_LPSTART1_BIT_T bf;
} NIOL_DEBUG_LPSTART1_T;

/* --------------------------------------------------------------------- */
/* Register debug_lpend1 */
/* => reserved in zeroriscy */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_lpend1   0x00000290U
#define Adr_NIOL_debug_debug_lpend1 0x00001290U
#define Adr_NIOL_debug_lpend1       0x00001290U
#define DFLT_VAL_NIOL_debug_lpend1  0x00000000U

#define MSK_NIOL_debug_lpend1_val         0xffffffffU
#define SRT_NIOL_debug_lpend1_val         0
#define DFLT_VAL_NIOL_debug_lpend1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_lpend1_val 0x00000000U

/* all used bits of 'NIOL_debug_lpend1': */
#define MSK_USED_BITS_NIOL_debug_lpend1 0xffffffffU

enum {
  BFW_NIOL_debug_lpend1_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_LPEND1_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_lpend1_val; /* Hardware Loop 1 End */
} NIOL_DEBUG_LPEND1_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_DEBUG_LPEND1_BIT_T bf;
} NIOL_DEBUG_LPEND1_T;

/* --------------------------------------------------------------------- */
/* Register debug_lpcount1 */
/* => reserved in zeroriscy */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_lpcount1   0x00000294U
#define Adr_NIOL_debug_debug_lpcount1 0x00001294U
#define Adr_NIOL_debug_lpcount1       0x00001294U
#define DFLT_VAL_NIOL_debug_lpcount1  0x00000000U

#define MSK_NIOL_debug_lpcount1_val         0xffffffffU
#define SRT_NIOL_debug_lpcount1_val         0
#define DFLT_VAL_NIOL_debug_lpcount1_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_lpcount1_val 0x00000000U

/* all used bits of 'NIOL_debug_lpcount1': */
#define MSK_USED_BITS_NIOL_debug_lpcount1 0xffffffffU

enum {
  BFW_NIOL_debug_lpcount1_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_LPCOUNT1_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_lpcount1_val; /* Hardware Loop 1 Counter */
} NIOL_DEBUG_LPCOUNT1_BIT_T;

typedef union {
  uint32_t                  val;
  NIOL_DEBUG_LPCOUNT1_BIT_T bf;
} NIOL_DEBUG_LPCOUNT1_T;

/* --------------------------------------------------------------------- */
/* Register debug_next_pc */
/* => next PC */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_next_pc   0x00000300U
#define Adr_NIOL_debug_debug_next_pc 0x00001300U
#define Adr_NIOL_debug_next_pc       0x00001300U
#define DFLT_VAL_NIOL_debug_next_pc  0x00000000U

#define MSK_NIOL_debug_next_pc_val         0xffffffffU
#define SRT_NIOL_debug_next_pc_val         0
#define DFLT_VAL_NIOL_debug_next_pc_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_next_pc_val 0x00000000U

/* all used bits of 'NIOL_debug_next_pc': */
#define MSK_USED_BITS_NIOL_debug_next_pc 0xffffffffU

enum {
  BFW_NIOL_debug_next_pc_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_NEXT_PC_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_next_pc_val; /* next PC */
} NIOL_DEBUG_NEXT_PC_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_DEBUG_NEXT_PC_BIT_T bf;
} NIOL_DEBUG_NEXT_PC_T;

/* --------------------------------------------------------------------- */
/* Register debug_previous_pc */
/* => previous PC */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_previous_pc   0x00000304U
#define Adr_NIOL_debug_debug_previous_pc 0x00001304U
#define Adr_NIOL_debug_previous_pc       0x00001304U

#define MSK_NIOL_debug_previous_pc_val 0xffffffffU
#define SRT_NIOL_debug_previous_pc_val 0

/* all used bits of 'NIOL_debug_previous_pc': */
#define MSK_USED_BITS_NIOL_debug_previous_pc 0xffffffffU

enum {
  BFW_NIOL_debug_previous_pc_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_PREVIOUS_PC_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_previous_pc_val; /* previous PC */
} NIOL_DEBUG_PREVIOUS_PC_BIT_T;

typedef union {
  uint32_t                     val;
  NIOL_DEBUG_PREVIOUS_PC_BIT_T bf;
} NIOL_DEBUG_PREVIOUS_PC_T;

/* --------------------------------------------------------------------- */
/* Register debug_mstatus */
/* => mstatus */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_mstatus   0x00000308U
#define Adr_NIOL_debug_debug_mstatus 0x00001308U
#define Adr_NIOL_debug_mstatus       0x00001308U
#define DFLT_VAL_NIOL_debug_mstatus  0x00000000U

#define MSK_NIOL_debug_mstatus_mie          0x00000008U
#define SRT_NIOL_debug_mstatus_mie          3
#define DFLT_VAL_NIOL_debug_mstatus_mie     0x00000000U
#define DFLT_BF_VAL_NIOL_debug_mstatus_mie  0x00000000U
#define MSK_NIOL_debug_mstatus_mpie         0x00000080U
#define SRT_NIOL_debug_mstatus_mpie         7
#define DFLT_VAL_NIOL_debug_mstatus_mpie    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_mstatus_mpie 0x00000000U
#define MSK_NIOL_debug_mstatus_bpp          0x00001800U
#define SRT_NIOL_debug_mstatus_bpp          11
#define DFLT_VAL_NIOL_debug_mstatus_bpp     0x00000000U
#define DFLT_BF_VAL_NIOL_debug_mstatus_bpp  0x00000000U

/* all used bits of 'NIOL_debug_mstatus': */
#define MSK_USED_BITS_NIOL_debug_mstatus 0x00001888U

enum {
  BFW_NIOL_debug_mstatus_reserved1 = 3,  /* [2:0] */
  BFW_NIOL_debug_mstatus_mie       = 1,  /* [3] */
  BFW_NIOL_debug_mstatus_reserved2 = 3,  /* [6:4] */
  BFW_NIOL_debug_mstatus_mpie      = 1,  /* [7] */
  BFW_NIOL_debug_mstatus_reserved3 = 3,  /* [10:8] */
  BFW_NIOL_debug_mstatus_bpp       = 2,  /* [12:11] */
  BFW_NIOL_debug_mstatus_reserved4 = 19  /* [31:13] */
};

typedef struct NIOL_DEBUG_MSTATUS_BIT_Ttag {
  unsigned int reserved1 : BFW_NIOL_debug_mstatus_reserved1; /* reserved                                                                                                                                                            */
  unsigned int mie       : BFW_NIOL_debug_mstatus_mie;       /* Interrupt Enable: If you want to enable interrupt handling in your exception handler, set the Interrupt Enable to 1'b1 inside your handler code.                    */
  unsigned int reserved2 : BFW_NIOL_debug_mstatus_reserved2; /* reserved                                                                                                                                                            */
  unsigned int mpie      : BFW_NIOL_debug_mstatus_mpie;      /* Previous Interrupt Enable: When an exception is encountered, MPIE will be set to IE. When the mret instruction is executed, the value of MPIE will be stored to IE. */
  unsigned int reserved3 : BFW_NIOL_debug_mstatus_reserved3; /* reserved                                                                                                                                                            */
  unsigned int bpp       : BFW_NIOL_debug_mstatus_bpp;       /* Statically 2?b11 and cannot be altered (read-only).                                                                                                                 */
  unsigned int reserved4 : BFW_NIOL_debug_mstatus_reserved4; /* reserved                                                                                                                                                            */
} NIOL_DEBUG_MSTATUS_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_DEBUG_MSTATUS_BIT_T bf;
} NIOL_DEBUG_MSTATUS_T;

/* --------------------------------------------------------------------- */
/* Register debug_mtvec */
/* => mtvec */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_mtvec   0x0000030CU
#define Adr_NIOL_debug_debug_mtvec 0x0000130CU
#define Adr_NIOL_debug_mtvec       0x0000130CU

#define MSK_NIOL_debug_mtvec_val 0xffffffffU
#define SRT_NIOL_debug_mtvec_val 0

/* all used bits of 'NIOL_debug_mtvec': */
#define MSK_USED_BITS_NIOL_debug_mtvec 0xffffffffU

enum {
  BFW_NIOL_debug_mtvec_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_MTVEC_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_mtvec_val; /* Machine Trap-Vector Base Address */
} NIOL_DEBUG_MTVEC_BIT_T;

typedef union {
  uint32_t               val;
  NIOL_DEBUG_MTVEC_BIT_T bf;
} NIOL_DEBUG_MTVEC_T;

/* --------------------------------------------------------------------- */
/* Register debug_mepc */
/* => mepc */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_mepc   0x00000310U
#define Adr_NIOL_debug_debug_mepc 0x00001310U
#define Adr_NIOL_debug_mepc       0x00001310U
#define DFLT_VAL_NIOL_debug_mepc  0x00000000U

#define MSK_NIOL_debug_mepc_val         0xffffffffU
#define SRT_NIOL_debug_mepc_val         0
#define DFLT_VAL_NIOL_debug_mepc_val    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_mepc_val 0x00000000U

/* all used bits of 'NIOL_debug_mepc': */
#define MSK_USED_BITS_NIOL_debug_mepc 0xffffffffU

enum {
  BFW_NIOL_debug_mepc_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_MEPC_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_mepc_val; /* Machine Exception Program Counter */
} NIOL_DEBUG_MEPC_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_MEPC_BIT_T bf;
} NIOL_DEBUG_MEPC_T;

/* --------------------------------------------------------------------- */
/* Register debug_mcause */
/* => mcause */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_mcause   0x00000314U
#define Adr_NIOL_debug_debug_mcause 0x00001314U
#define Adr_NIOL_debug_mcause       0x00001314U

#define MSK_NIOL_debug_mcause_exeption_code 0x0000001fU
#define SRT_NIOL_debug_mcause_exeption_code 0
#define MSK_NIOL_debug_mcause_interrupt     0x80000000U
#define SRT_NIOL_debug_mcause_interrupt     31

/* all used bits of 'NIOL_debug_mcause': */
#define MSK_USED_BITS_NIOL_debug_mcause 0x8000001fU

enum {
  BFW_NIOL_debug_mcause_exeption_code = 5,  /* [4:0] */
  BFW_NIOL_debug_mcause_reserved1     = 26, /* [30:5] */
  BFW_NIOL_debug_mcause_interrupt     = 1   /* [31] */
};

typedef struct NIOL_DEBUG_MCAUSE_BIT_Ttag {
  unsigned int exeption_code : BFW_NIOL_debug_mcause_exeption_code; /* Exception Code                                                    */
  unsigned int reserved1     : BFW_NIOL_debug_mcause_reserved1;     /* reserved                                                          */
  unsigned int interrupt     : BFW_NIOL_debug_mcause_interrupt;     /* This bit is set when the exception was triggered by an interrupt. */
} NIOL_DEBUG_MCAUSE_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_DEBUG_MCAUSE_BIT_T bf;
} NIOL_DEBUG_MCAUSE_T;

/* --------------------------------------------------------------------- */
/* Register debug_pcer */
/* => pcer */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_pcer   0x00000318U
#define Adr_NIOL_debug_debug_pcer 0x00001318U
#define Adr_NIOL_debug_pcer       0x00001318U
#define DFLT_VAL_NIOL_debug_pcer  0x00000000U

#define MSK_NIOL_debug_pcer_cycles              0x00000001U
#define SRT_NIOL_debug_pcer_cycles              0
#define DFLT_VAL_NIOL_debug_pcer_cycles         0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_cycles      0x00000000U
#define MSK_NIOL_debug_pcer_instr               0x00000002U
#define SRT_NIOL_debug_pcer_instr               1
#define DFLT_VAL_NIOL_debug_pcer_instr          0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_instr       0x00000000U
#define MSK_NIOL_debug_pcer_imiss               0x00000010U
#define SRT_NIOL_debug_pcer_imiss               4
#define DFLT_VAL_NIOL_debug_pcer_imiss          0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_imiss       0x00000000U
#define MSK_NIOL_debug_pcer_wbranch             0x00000020U
#define SRT_NIOL_debug_pcer_wbranch             5
#define DFLT_VAL_NIOL_debug_pcer_wbranch        0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_wbranch     0x00000000U
#define MSK_NIOL_debug_pcer_wbranch_cyc         0x00000040U
#define SRT_NIOL_debug_pcer_wbranch_cyc         6
#define DFLT_VAL_NIOL_debug_pcer_wbranch_cyc    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_wbranch_cyc 0x00000000U
#define MSK_NIOL_debug_pcer_ld                  0x00000080U
#define SRT_NIOL_debug_pcer_ld                  7
#define DFLT_VAL_NIOL_debug_pcer_ld             0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_ld          0x00000000U
#define MSK_NIOL_debug_pcer_st                  0x00000100U
#define SRT_NIOL_debug_pcer_st                  8
#define DFLT_VAL_NIOL_debug_pcer_st             0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_st          0x00000000U
#define MSK_NIOL_debug_pcer_jump                0x00000200U
#define SRT_NIOL_debug_pcer_jump                9
#define DFLT_VAL_NIOL_debug_pcer_jump           0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_jump        0x00000000U
#define MSK_NIOL_debug_pcer_branch              0x00000400U
#define SRT_NIOL_debug_pcer_branch              10
#define DFLT_VAL_NIOL_debug_pcer_branch         0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_branch      0x00000000U
#define MSK_NIOL_debug_pcer_delay_slot          0x00000800U
#define SRT_NIOL_debug_pcer_delay_slot          11
#define DFLT_VAL_NIOL_debug_pcer_delay_slot     0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_delay_slot  0x00000000U
#define MSK_NIOL_debug_pcer_ld_ext              0x00001000U
#define SRT_NIOL_debug_pcer_ld_ext              12
#define DFLT_VAL_NIOL_debug_pcer_ld_ext         0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_ld_ext      0x00000000U
#define MSK_NIOL_debug_pcer_st_ext              0x00002000U
#define SRT_NIOL_debug_pcer_st_ext              13
#define DFLT_VAL_NIOL_debug_pcer_st_ext         0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_st_ext      0x00000000U
#define MSK_NIOL_debug_pcer_ld_ext_cyc          0x00004000U
#define SRT_NIOL_debug_pcer_ld_ext_cyc          14
#define DFLT_VAL_NIOL_debug_pcer_ld_ext_cyc     0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_ld_ext_cyc  0x00000000U
#define MSK_NIOL_debug_pcer_st_ext_cyc          0x00008000U
#define SRT_NIOL_debug_pcer_st_ext_cyc          15
#define DFLT_VAL_NIOL_debug_pcer_st_ext_cyc     0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_st_ext_cyc  0x00000000U
#define MSK_NIOL_debug_pcer_tcdm_cont           0x00010000U
#define SRT_NIOL_debug_pcer_tcdm_cont           16
#define DFLT_VAL_NIOL_debug_pcer_tcdm_cont      0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcer_tcdm_cont   0x00000000U

/* all used bits of 'NIOL_debug_pcer': */
#define MSK_USED_BITS_NIOL_debug_pcer 0x0001fff3U

enum {
  BFW_NIOL_debug_pcer_cycles      = 1,  /* [0] */
  BFW_NIOL_debug_pcer_instr       = 1,  /* [1] */
  BFW_NIOL_debug_pcer_reserved1   = 2,  /* [3:2] */
  BFW_NIOL_debug_pcer_imiss       = 1,  /* [4] */
  BFW_NIOL_debug_pcer_wbranch     = 1,  /* [5] */
  BFW_NIOL_debug_pcer_wbranch_cyc = 1,  /* [6] */
  BFW_NIOL_debug_pcer_ld          = 1,  /* [7] */
  BFW_NIOL_debug_pcer_st          = 1,  /* [8] */
  BFW_NIOL_debug_pcer_jump        = 1,  /* [9] */
  BFW_NIOL_debug_pcer_branch      = 1,  /* [10] */
  BFW_NIOL_debug_pcer_delay_slot  = 1,  /* [11] */
  BFW_NIOL_debug_pcer_ld_ext      = 1,  /* [12] */
  BFW_NIOL_debug_pcer_st_ext      = 1,  /* [13] */
  BFW_NIOL_debug_pcer_ld_ext_cyc  = 1,  /* [14] */
  BFW_NIOL_debug_pcer_st_ext_cyc  = 1,  /* [15] */
  BFW_NIOL_debug_pcer_tcdm_cont   = 1,  /* [16] */
  BFW_NIOL_debug_pcer_reserved2   = 15  /* [31:17] */
};

typedef struct NIOL_DEBUG_PCER_BIT_Ttag {
  unsigned int cycles      : BFW_NIOL_debug_pcer_cycles;      /*                        */
  unsigned int instr       : BFW_NIOL_debug_pcer_instr;       /*                        */
  unsigned int reserved1   : BFW_NIOL_debug_pcer_reserved1;   /* reserved               */
  unsigned int imiss       : BFW_NIOL_debug_pcer_imiss;       /*                        */
  unsigned int wbranch     : BFW_NIOL_debug_pcer_wbranch;     /*                        */
  unsigned int wbranch_cyc : BFW_NIOL_debug_pcer_wbranch_cyc; /*                        */
  unsigned int ld          : BFW_NIOL_debug_pcer_ld;          /*                        */
  unsigned int st          : BFW_NIOL_debug_pcer_st;          /*                        */
  unsigned int jump        : BFW_NIOL_debug_pcer_jump;        /*                        */
  unsigned int branch      : BFW_NIOL_debug_pcer_branch;      /*                        */
  unsigned int delay_slot  : BFW_NIOL_debug_pcer_delay_slot;  /*                        */
  unsigned int ld_ext      : BFW_NIOL_debug_pcer_ld_ext;      /*  ? unused in zeroriscy */
  unsigned int st_ext      : BFW_NIOL_debug_pcer_st_ext;      /*  ? unused in zeroriscy */
  unsigned int ld_ext_cyc  : BFW_NIOL_debug_pcer_ld_ext_cyc;  /*  ? unused in zeroriscy */
  unsigned int st_ext_cyc  : BFW_NIOL_debug_pcer_st_ext_cyc;  /*  ? unused in zeroriscy */
  unsigned int tcdm_cont   : BFW_NIOL_debug_pcer_tcdm_cont;   /*  ? unused in zeroriscy */
  unsigned int reserved2   : BFW_NIOL_debug_pcer_reserved2;   /* reserved               */
} NIOL_DEBUG_PCER_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_PCER_BIT_T bf;
} NIOL_DEBUG_PCER_T;

/* --------------------------------------------------------------------- */
/* Register debug_pcmr */
/* => pcmr */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_pcmr   0x0000031CU
#define Adr_NIOL_debug_debug_pcmr 0x0000131CU
#define Adr_NIOL_debug_pcmr       0x0000131CU
#define DFLT_VAL_NIOL_debug_pcmr  0x00000000U

#define MSK_NIOL_debug_pcmr_saturation         0x00000001U
#define SRT_NIOL_debug_pcmr_saturation         0
#define DFLT_VAL_NIOL_debug_pcmr_saturation    0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcmr_saturation 0x00000000U
#define MSK_NIOL_debug_pcmr_global_en          0x00000002U
#define SRT_NIOL_debug_pcmr_global_en          1
#define DFLT_VAL_NIOL_debug_pcmr_global_en     0x00000000U
#define DFLT_BF_VAL_NIOL_debug_pcmr_global_en  0x00000000U

/* all used bits of 'NIOL_debug_pcmr': */
#define MSK_USED_BITS_NIOL_debug_pcmr 0x00000003U

enum {
  BFW_NIOL_debug_pcmr_saturation = 1,  /* [0] */
  BFW_NIOL_debug_pcmr_global_en  = 1,  /* [1] */
  BFW_NIOL_debug_pcmr_reserved1  = 30  /* [31:2] */
};

typedef struct NIOL_DEBUG_PCMR_BIT_Ttag {
  unsigned int saturation : BFW_NIOL_debug_pcmr_saturation; /* If this bit is set, saturating arithmetic is used in the performance counter counters. After reset, this bit is set.                                */
  unsigned int global_en  : BFW_NIOL_debug_pcmr_global_en;  /* Global Enable: Activate/deactivate all performance counters. If this bit is 0, all performance counters are disabled. After reset, this bit is set. */
  unsigned int reserved1  : BFW_NIOL_debug_pcmr_reserved1;  /* reserved                                                                                                                                            */
} NIOL_DEBUG_PCMR_BIT_T;

typedef union {
  uint32_t              val;
  NIOL_DEBUG_PCMR_BIT_T bf;
} NIOL_DEBUG_PCMR_T;

/* --------------------------------------------------------------------- */
/* Register debug_privlv */
/* => privlv */
/*    reserved in zeroriscy */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_privlv   0x00000320U
#define Adr_NIOL_debug_debug_privlv 0x00001320U
#define Adr_NIOL_debug_privlv       0x00001320U

#define MSK_NIOL_debug_privlv_val 0xffffffffU
#define SRT_NIOL_debug_privlv_val 0

/* all used bits of 'NIOL_debug_privlv': */
#define MSK_USED_BITS_NIOL_debug_privlv 0xffffffffU

enum {
  BFW_NIOL_debug_privlv_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_PRIVLV_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_privlv_val; /* Privilege Level */
} NIOL_DEBUG_PRIVLV_BIT_T;

typedef union {
  uint32_t                val;
  NIOL_DEBUG_PRIVLV_BIT_T bf;
} NIOL_DEBUG_PRIVLV_T;

/* --------------------------------------------------------------------- */
/* Register debug_uhartip */
/* => uhartip */
/*    reserved in zeroriscy */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_uhartip   0x00000324U
#define Adr_NIOL_debug_debug_uhartip 0x00001324U
#define Adr_NIOL_debug_uhartip       0x00001324U

#define MSK_NIOL_debug_uhartip_val 0xffffffffU
#define SRT_NIOL_debug_uhartip_val 0

/* all used bits of 'NIOL_debug_uhartip': */
#define MSK_USED_BITS_NIOL_debug_uhartip 0xffffffffU

enum {
  BFW_NIOL_debug_uhartip_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_UHARTIP_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_uhartip_val; /* Hardware Thread ID */
} NIOL_DEBUG_UHARTIP_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_DEBUG_UHARTIP_BIT_T bf;
} NIOL_DEBUG_UHARTIP_T;

/* --------------------------------------------------------------------- */
/* Register debug_mhartip */
/* => mhartip */
/*    reserved in zeroriscy */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_debug_mhartip   0x00000328U
#define Adr_NIOL_debug_debug_mhartip 0x00001328U
#define Adr_NIOL_debug_mhartip       0x00001328U

#define MSK_NIOL_debug_mhartip_val 0xffffffffU
#define SRT_NIOL_debug_mhartip_val 0

/* all used bits of 'NIOL_debug_mhartip': */
#define MSK_USED_BITS_NIOL_debug_mhartip 0xffffffffU

enum {
  BFW_NIOL_debug_mhartip_val = 32  /* [31:0] */
};

typedef struct NIOL_DEBUG_MHARTIP_BIT_Ttag {
  unsigned int val : BFW_NIOL_debug_mhartip_val; /* Hardware Thread ID */
} NIOL_DEBUG_MHARTIP_BIT_T;

typedef union {
  uint32_t                 val;
  NIOL_DEBUG_MHARTIP_BIT_T bf;
} NIOL_DEBUG_MHARTIP_T;


/* ===================================================================== */

/* Area of rom */

/* ===================================================================== */

#define Addr_NIOL_rom 0x00002000U

/* --------------------------------------------------------------------- */
/* Register rom_base */
/* => internal ROM start address */
/*    Area size: 4kB */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_rom_base 0x00000000U
#define Adr_NIOL_rom_rom_base 0x00002000U
#define Adr_NIOL_rom_base     0x00002000U

/* --------------------------------------------------------------------- */
/* Register rom_end */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_rom_end 0x00000FFCU
#define Adr_NIOL_rom_rom_end 0x00002FFCU
#define Adr_NIOL_rom_end     0x00002FFCU


/* ===================================================================== */

/* Area of dram */

/* ===================================================================== */

#define Addr_NIOL_dram 0x00004000U

/* --------------------------------------------------------------------- */
/* Register dram_base */
/* => Area size: 12kB */
/*    Data Memory */
/*    Note: For simulation the last 12 bytes of the NETIOL DRAM are reserved for TB-reg and sim_mesage access. */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_dram_base  0x00000000U
#define Adr_NIOL_dram_dram_base 0x00004000U
#define Adr_NIOL_dram_base      0x00004000U

/* --------------------------------------------------------------------- */
/* Register dram_end */
/* => Note: For simulation the last 12 bytes of the NETIOL DRAM are reserved for TB-reg and sim_mesage access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_dram_end  0x00002FFCU
#define Adr_NIOL_dram_dram_end 0x00006FFCU
#define Adr_NIOL_dram_end      0x00006FFCU


/* ===================================================================== */

/* Area of pram */

/* ===================================================================== */

#define Addr_NIOL_pram 0x00008000U

/* --------------------------------------------------------------------- */
/* Register pram_base */
/* => Area size: 24kB */
/*    Instruction Memory */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pram_base  0x00000000U
#define Adr_NIOL_pram_pram_base 0x00008000U
#define Adr_NIOL_pram_base      0x00008000U

/* --------------------------------------------------------------------- */
/* Register pram_end */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NIOL_pram_end  0x00005FFCU
#define Adr_NIOL_pram_pram_end 0x0000DFFCU
#define Adr_NIOL_pram_end      0x0000DFFCU




/*********************************************************************/
/* area structure definitions                                        */
/*********************************************************************/


typedef struct NIOL_SDM_ADC_AREA_Ttag
{
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulSdm_adc_wait_mux;
  volatile uint32_t  ulSdm_adc_ac_low;
  volatile uint32_t  ulSdm_adc_ac_high;
  volatile uint32_t  ulSdm_adc_sdm_cfg;
  volatile uint32_t  ulSdm_adc_cic_cfg;
  volatile uint32_t  ulSdm_adc_sum_cfg;
  volatile uint32_t  ulSdm_adc_pc;
  volatile uint32_t  ulSdm_adc_tadr;
  volatile uint32_t  ulSdm_adc_command;
  volatile uint32_t  ulSdm_adc_cic;
  volatile uint32_t  ulSdm_adc_sum32_lw;
  volatile uint32_t  ulSdm_adc_sum32_hw;
  volatile uint32_t  ulSdm_adc_sum;
  volatile uint32_t  ulSdm_adc_irq_raw;
  volatile uint32_t  ulSdm_adc_irq_masked;
  volatile uint32_t  ulSdm_adc_irq_msk_set;
  volatile uint32_t  ulSdm_adc_irq_msk_reset;
  volatile uint32_t  ulSdm_adc_irq_no;
  volatile uint32_t  ulSdm_adc_d2a_sdm_pga_vimux;
  volatile uint32_t  ulSdm_adc_d2a_port_a;
  volatile uint32_t  ulSdm_adc_d2a_port_b;
  volatile uint32_t  ulSdm_adc_d2a_port_c;
  volatile uint32_t  ulSdm_adc_d2a_port_d;
  volatile uint32_t  ulSdm_adc_d2a_di_x_tdio;
  volatile uint32_t  ulSdm_adc_iomux_ai_gpo;
  volatile uint32_t  ulSdm_adc_a2d_sdm;
  volatile uint32_t aulReserved1[1];
  volatile uint32_t  ulSdm_adc_cfg;
} NIOL_SDM_ADC_AREA_T;

typedef struct NIOL_PIO_AREA_Ttag
{
  volatile uint32_t  ulPio_out;
  volatile uint32_t  ulPio_out_set;
  volatile uint32_t  ulPio_out_clr;
  volatile uint32_t  ulPio_oe;
  volatile uint32_t  ulPio_oe_set;
  volatile uint32_t  ulPio_oe_clr;
  volatile uint32_t  ulPio_in;
} NIOL_PIO_AREA_T;

typedef struct NIOL_HISPI_REG_INTERFACE_AREA_Ttag
{
  volatile uint32_t aulHispi_reserved_sda[5];
  volatile uint32_t  ulHispi_cfg;
  volatile uint32_t  ulHispi_cfg_miso;
  volatile uint32_t  ulHispi_cfg_idle;
  volatile uint32_t  ulHispi_cfg_ac_high;
  volatile uint32_t  ulHispi_cfg_ac_low;
  volatile uint32_t  ulHispi_cmd;
  volatile uint32_t  ulHispi_sda_ctrl;
  volatile uint32_t aulHispi_sda[5];
  volatile uint32_t  ulHispi_status;
  volatile uint32_t aulHispi_frame_w[2];
  volatile uint32_t  ulHispi_sda;
  volatile uint32_t  ulHispi_radr;
  volatile uint32_t  ulHispi_rd;
  volatile uint32_t  ulHispi_wadr;
  volatile uint32_t  ulHispi_wr;
  volatile uint32_t  ulHispi_post;
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulHispi_irq_raw;
  volatile uint32_t  ulHispi_irq_mask_set;
  volatile uint32_t  ulHispi_irq_mask_reset;
  volatile uint32_t  ulHispi_irq_masked;
  volatile uint32_t  ulHispi_irq_no;
} NIOL_HISPI_REG_INTERFACE_AREA_T;

typedef struct NIOL_RISCV_IRQ_AREA_Ttag
{
  volatile uint32_t  ulRiscv_irq_raw;
  volatile uint32_t  ulRiscv_irq_masked;
  volatile uint32_t  ulRiscv_irq_msk_set;
  volatile uint32_t  ulRiscv_irq_msk_reset;
  volatile uint32_t  ulRiscv_irq_softint_set;
  volatile uint32_t  ulRiscv_irq_softint_reset;
  volatile uint32_t  ulRiscv_irq_no;
} NIOL_RISCV_IRQ_AREA_T;

typedef struct NIOL_LEDM_AREA_Ttag
{
  volatile uint32_t  ulLedm_cfg;
  volatile uint32_t  ulLedm_prescaler;
  volatile uint32_t aulLedm_t[4];
  volatile uint32_t  ulLedm_led15_0;
  volatile uint32_t  ulLedm_led23_16;
  volatile uint32_t  ulLedm_led15_0_rld;
  volatile uint32_t  ulLedm_led23_16_rld;
  volatile uint32_t  ulLedm_led15_0_rld_set;
  volatile uint32_t  ulLedm_led15_0_rld_reset;
  volatile uint32_t  ulLedm_led23_16_rld_set;
  volatile uint32_t  ulLedm_led23_16_rld_reset;
  volatile uint32_t  ulLedm_irq_raw;
  volatile uint32_t  ulLedm_irq_masked;
  volatile uint32_t  ulLedm_irq_msk_set;
  volatile uint32_t  ulLedm_irq_msk_reset;
  volatile uint32_t  ulLedm_irq_no;
  volatile uint32_t  ulLedm_d2a_col;
  volatile uint32_t  ulLedm_d2a_row;
} NIOL_LEDM_AREA_T;

typedef struct NIOL_ARM_TIMER_AREA_Ttag
{
  volatile uint32_t  ulSw_timer_en_mode;
  volatile uint32_t  ulSw_timer_en_mode_set;
  volatile uint32_t  ulSw_timer_en_mode_clr;
  volatile uint32_t aulReserved0[1];
  struct
  {
    volatile uint32_t  ulUpper;
    volatile uint32_t  ulLower;
    volatile uint32_t  ulUpper_rld;
    volatile uint32_t  ulLower_rld;
  } asSw_timer_timer[3];
  volatile uint32_t aulReserved1[8];
  volatile uint32_t  ulSw_timer_irq_raw;
  volatile uint32_t  ulSw_timer_irq_masked;
  volatile uint32_t aulReserved2[1];
  volatile uint32_t  ulSw_timer_irq_msk_set;
  volatile uint32_t  ulSw_timer_irq_msk_reset;
  volatile uint32_t  ulSw_timer_irq_no;
} NIOL_ARM_TIMER_AREA_T;

typedef struct NIOL_ASIC_CTRL_AREA_Ttag
{
  volatile uint32_t aulAsic_ctrl_io_config[4];
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulAsic_ctrl_boot_addr;
  volatile uint32_t  ulAsic_ctrl_system_status;
  volatile uint32_t  ulAsic_ctrl_testmode_ctrl;
  volatile uint32_t  ulAsic_ctrl_bist_ctrl0;
  volatile uint32_t  ulAsic_ctrl_bist_stat0;
  volatile uint32_t  ulAsic_ctrl_reset_ctrl;
  volatile uint32_t aulAsic_ctrl_pll_config[2];
  volatile uint32_t  ulAsic_ctrl_clk_sys_config;
  volatile uint32_t  ulAsic_ctrl_clk_uart_a_config;
  volatile uint32_t  ulAsic_ctrl_clk_uart_b_config;
  volatile uint32_t  ulAsic_ctrl_clk_uart_c_config;
  volatile uint32_t  ulAsic_ctrl_clk_uart_d_config;
  volatile uint32_t aulAsic_ctrl_system_calibration[2];
  volatile uint32_t  ulAsic_ctrl_vdd_iol_uv_prescaler;
  volatile uint32_t  ulAsic_ctrl_vdd_iol_uv_ctrl;
  volatile uint32_t  ulAsic_ctrl_vdd_iol_uv;
  volatile uint32_t  ulAsic_ctrl_d2a_ofc_ovg;
  volatile uint32_t  ulAsic_ctrl_ofc_clk;
  volatile uint32_t  ulAsic_ctrl_ovg_clk;
  volatile uint32_t  ulAsic_ctrl_irq_raw;
  volatile uint32_t  ulAsic_ctrl_irq_mask_set;
  volatile uint32_t  ulAsic_ctrl_irq_mask_reset;
  volatile uint32_t  ulAsic_ctrl_irq_masked;
  volatile uint32_t  ulAsic_ctrl_irq_no;
} NIOL_ASIC_CTRL_AREA_T;

typedef struct NIOL_PAD_CTRL_AREA_Ttag
{
  volatile uint32_t  ulPad_ctrl_ai_a;
  volatile uint32_t  ulPad_ctrl_ai_b;
  volatile uint32_t  ulPad_ctrl_ai_c;
  volatile uint32_t  ulPad_ctrl_ai_d;
  volatile uint32_t aulPad_ctrl_led_r[4];
  volatile uint32_t aulPad_ctrl_led_c[3];
  volatile uint32_t  ulPad_ctrl_sck;
  volatile uint32_t  ulPad_ctrl_miso;
  volatile uint32_t  ulPad_ctrl_mosi;
} NIOL_PAD_CTRL_AREA_T;

typedef struct NIOL_SPI_AREA_Ttag
{
  volatile uint32_t aulSpi_cr[2];
  volatile uint32_t  ulSpi_dr;
  volatile uint32_t  ulSpi_sr;
  volatile uint32_t aulReserved0[1];
  volatile uint32_t  ulSpi_imsc;
  volatile uint32_t  ulSpi_ris;
  volatile uint32_t  ulSpi_mis;
  volatile uint32_t  ulSpi_icr;
  volatile uint32_t aulReserved1[1];
  volatile uint32_t  ulSpi_dmacr;
  volatile uint32_t aulReserved2[1];
  volatile uint32_t  ulSpi_data_register;
  volatile uint32_t  ulSpi_status_register;
  volatile uint32_t  ulSpi_control_register;
  volatile uint32_t  ulSpi_interrupt_control_register;
} NIOL_SPI_AREA_T;

typedef struct NIOL_TEST_CTRL_AREA_Ttag
{
  volatile uint32_t  ulTest_ctrl_tmr_iol_a;
  volatile uint32_t  ulTest_ctrl_tmr_iol_b;
  volatile uint32_t  ulTest_ctrl_tmr_iol_c;
  volatile uint32_t  ulTest_ctrl_tmr_iol_d;
  volatile uint32_t  ulTest_ctrl_tmr_gate_a;
  volatile uint32_t  ulTest_ctrl_tmr_gate_b;
  volatile uint32_t  ulTest_ctrl_tmr_gate_c;
  volatile uint32_t  ulTest_ctrl_tmr_gate_d;
  volatile uint32_t  ulTest_ctrl_tmr_adc_lw;
  volatile uint32_t  ulTest_ctrl_tmr_adc_hw;
  volatile uint32_t  ulTest_ctrl_tmr_ref_lw;
  volatile uint32_t  ulTest_ctrl_tmr_ref_hw;
  volatile uint32_t  ulTest_ctrl_tmr_atbmux;
  volatile uint32_t  ulTest_ctrl_tmr_various;
  volatile uint32_t  ulTest_ctrl_tmr_spare;
  volatile uint32_t aulTest_ctrl_tmr_extra_[4];
  volatile uint32_t  ulPadtest_ctrl;
  volatile uint32_t  ulClk_test_ctrl;
  volatile uint32_t  ulD_testbus_ctrl;
  volatile uint32_t aulD_testbus_cfg[4];
} NIOL_TEST_CTRL_AREA_T;

typedef struct NIOL_WDG_SYS_AREA_Ttag
{
  volatile uint32_t  ulWdg_sys_cfg;
  volatile uint32_t  ulWdg_sys_cmd;
  volatile uint32_t  ulWdg_sys_cnt_upper_rld;
  volatile uint32_t  ulWdg_sys_cnt_lower_rld;
  volatile uint32_t  ulWdg_sys_cnt_upper;
  volatile uint32_t  ulWdg_sys_cnt_lower;
} NIOL_WDG_SYS_AREA_T;

typedef struct NIOL_IOL_GD_AREA_Ttag
{
  volatile uint32_t  ulIol_gd_blank_time;
  volatile uint32_t  ulIol_gd_oc_ifilter;
  volatile uint32_t  ulIol_gd_uv_ifilter;
  volatile uint32_t aulIol_gd_a[3];
  volatile uint32_t aulIol_gd_b[3];
  volatile uint32_t aulIol_gd_c[3];
  volatile uint32_t aulIol_gd_d[3];
  volatile uint32_t  ulIol_gd_oc_fil;
  volatile uint32_t  ulIol_gd_uv_fil;
  volatile uint32_t aulIol_gd_d2a_ilim_a[3];
  volatile uint32_t aulIol_gd_d2a_ilim_b[3];
  volatile uint32_t aulIol_gd_d2a_ilim_c[3];
  volatile uint32_t aulIol_gd_d2a_ilim_d[3];
  volatile uint32_t  ulIol_gd_d2a_on;
  volatile uint32_t  ulIol_gd_a2d_a;
  volatile uint32_t  ulIol_gd_a2d_b;
  volatile uint32_t  ulIol_gd_a2d_c;
  volatile uint32_t  ulIol_gd_a2d_d;
  volatile uint32_t  ulIol_gd_over_current_irq_raw;
  volatile uint32_t  ulIol_gd_under_voltage_irq_raw;
  volatile uint32_t  ulIol_gd_revpol_irq_raw;
  volatile uint32_t  ulIol_gd_over_current_irq_mask_set;
  volatile uint32_t  ulIol_gd_under_voltage_irq_mask_set;
  volatile uint32_t  ulIol_gd_revpol_irq_mask_set;
  volatile uint32_t  ulIol_gd_over_current_irq_mask_reset;
  volatile uint32_t  ulIol_gd_under_voltage_irq_mask_reset;
  volatile uint32_t  ulIol_gd_revpol_irq_mask_reset;
  volatile uint32_t  ulIol_gd_over_current_irq_masked;
  volatile uint32_t  ulIol_gd_under_voltage_irq_masked;
  volatile uint32_t  ulIol_gd_revpol_irq_masked;
  volatile uint32_t  ulIol_gd_irq_no;
} NIOL_IOL_GD_AREA_T;

typedef struct NIOL_IOL_TX_AREA_Ttag
{
  volatile uint32_t  ulIol_tx_blank_time;
  volatile uint32_t  ulIol_tx_ok_ifilter;
  volatile uint32_t  ulIol_tx_a;
  volatile uint32_t  ulIol_tx_a_ok_filter;
  volatile uint32_t  ulIol_tx_a_blank_time;
  volatile uint32_t  ulIol_tx_a_tran;
  volatile uint32_t  ulIol_tx_a_on;
  volatile uint32_t  ulIol_tx_b;
  volatile uint32_t  ulIol_tx_b_ok_filter;
  volatile uint32_t  ulIol_tx_b_blank_time;
  volatile uint32_t  ulIol_tx_b_tran;
  volatile uint32_t  ulIol_tx_b_on;
  volatile uint32_t  ulIol_tx_c;
  volatile uint32_t  ulIol_tx_c_ok_filter;
  volatile uint32_t  ulIol_tx_c_blank_time;
  volatile uint32_t  ulIol_tx_c_tran;
  volatile uint32_t  ulIol_tx_c_on;
  volatile uint32_t  ulIol_tx_d;
  volatile uint32_t  ulIol_tx_d_ok_filter;
  volatile uint32_t  ulIol_tx_d_blank_time;
  volatile uint32_t  ulIol_tx_d_tran;
  volatile uint32_t  ulIol_tx_d_on;
  volatile uint32_t  ulIol_tx_d2a_on;
  volatile uint32_t  ulIol_tx_d2a_a;
  volatile uint32_t  ulIol_tx_d2a_b;
  volatile uint32_t  ulIol_tx_d2a_c;
  volatile uint32_t  ulIol_tx_d2a_d;
  volatile uint32_t  ulIol_tx_a2d;
  volatile uint32_t  ulIol_tx_state_a;
  volatile uint32_t  ulIol_tx_state_b;
  volatile uint32_t  ulIol_tx_state_c;
  volatile uint32_t  ulIol_tx_state_d;
  volatile uint32_t  ulIol_tx_irq_raw;
  volatile uint32_t  ulIol_tx_irq_mask_set;
  volatile uint32_t  ulIol_tx_irq_mask_reset;
  volatile uint32_t  ulIol_tx_irq_masked;
  volatile uint32_t  ulIol_tx_irq_no;
} NIOL_IOL_TX_AREA_T;

typedef struct NIOL_IOL_RX_AREA_Ttag
{
  volatile uint32_t  ulIol_rx_ifilter_prescaler_012;
  volatile uint32_t  ulIol_rx_ifilter_prescaler_3;
  volatile uint32_t  ulIol_rx_cfg_a_cq_rx;
  volatile uint32_t  ulIol_rx_cfg_a_di_rx;
  volatile uint32_t  ulIol_rx_cfg_b_cq_rx;
  volatile uint32_t  ulIol_rx_cfg_b_di_rx;
  volatile uint32_t  ulIol_rx_cfg_c_cq_rx;
  volatile uint32_t  ulIol_rx_cfg_c_di_rx;
  volatile uint32_t  ulIol_rx_cfg_d_cq_rx;
  volatile uint32_t  ulIol_rx_cfg_d_di_rx;
  volatile uint32_t  ulIol_rx_cfg_di_x_rx;
  volatile uint32_t  ulIol_rx_di;
  volatile uint32_t  ulIol_rx_d2a_a_cq;
  volatile uint32_t  ulIol_rx_d2a_a_di;
  volatile uint32_t  ulIol_rx_d2a_b_cq;
  volatile uint32_t  ulIol_rx_d2a_b_di;
  volatile uint32_t  ulIol_rx_d2a_c_cq;
  volatile uint32_t  ulIol_rx_d2a_c_di;
  volatile uint32_t  ulIol_rx_d2a_d_cq;
  volatile uint32_t  ulIol_rx_d2a_d_di;
  volatile uint32_t  ulIol_rx_d2a_di_x;
  volatile uint32_t  ulIol_rx_d2a_isink_on;
  volatile uint32_t  ulIol_rx_a2d_cq_di_rx;
  volatile uint32_t  ulIol_rx_irq_raw;
  volatile uint32_t  ulIol_rx_irq_mask_set;
  volatile uint32_t  ulIol_rx_irq_mask_reset;
  volatile uint32_t  ulIol_rx_irq_masked;
  volatile uint32_t  ulIol_rx_irq_no;
} NIOL_IOL_RX_AREA_T;

typedef struct NIOL_IOL_SIO_AREA_Ttag
{
  volatile uint32_t  ulIol_sio_di;
  volatile uint32_t  ulIol_sio_di_rs;
  volatile uint32_t  ulIol_sio_do;
  volatile uint32_t  ulIol_sio_do_set;
  volatile uint32_t  ulIol_sio_do_clr;
  volatile uint32_t  ulIol_sio_do_ws;
  volatile uint32_t  ulIol_sio_do_ws_set;
  volatile uint32_t  ulIol_sio_do_ws_clr;
  volatile uint32_t  ulIol_sio_do_ws_mask;
  volatile uint32_t  ulIol_sio_do_en;
  volatile uint32_t  ulIol_sio_do_en_set;
  volatile uint32_t  ulIol_sio_do_en_clr;
  volatile uint32_t  ulIol_sio_pulse_gen_cmd;
  volatile uint32_t  ulIol_sio_pulse_gen_cfg;
  volatile uint32_t  ulIol_sio_pulse_gen_duration;
  volatile uint32_t  ulIol_sio_tio_cfg;
  volatile uint32_t  ulIol_sio_tio_bp;
  volatile uint32_t  ulIol_sio_tio_sel;
  volatile uint32_t  ulIol_sio_tio;
  volatile uint32_t  ulIol_sio_dma_ctrl;
  volatile uint32_t  ulIol_sio_dma_adr_next;
  volatile uint32_t  ulIol_sio_dma_adr_now;
  volatile uint32_t  ulIol_sio_dma_adr_prev;
  volatile uint32_t  ulIol_sio_dma_ac_high;
  volatile uint32_t  ulIol_sio_dma_ac_low;
  volatile uint32_t  ulIol_sio_irq_raw;
  volatile uint32_t  ulIol_sio_irq_masked;
  volatile uint32_t  ulIol_sio_irq_msk_set;
  volatile uint32_t  ulIol_sio_irq_msk_reset;
  volatile uint32_t  ulIol_sio_irq_no;
} NIOL_IOL_SIO_AREA_T;

typedef struct NIOL_SYNC_AREA_Ttag
{
  volatile uint32_t  ulSync_cfg;
  volatile uint32_t  ulSync_timebase_modulus;
  volatile uint32_t aulSync_sub_phase__rld[8];
  volatile uint32_t  ulSync_cmd_do_sync;
  volatile uint32_t  ulSync_write_sync_ctrl;
  volatile uint32_t  ulSync_timebase_ws;
  volatile uint32_t  ulSync_timebase_inc_ws;
  volatile uint32_t  ulSync_base_phase_rld_ws;
  volatile uint32_t  ulSync_base_phase_ws;
  volatile uint32_t  ulSync_sub_phase_ws;
  volatile uint32_t  ulSync_timebase;
  volatile uint32_t  ulSync_timebase_inc;
  volatile uint32_t  ulSync_base_phase_rld;
  volatile uint32_t  ulSync_base_phase;
  volatile uint32_t aulSync_sub_phase_[8];
  volatile uint32_t  ulSync_read_sync_cfg;
  volatile uint32_t  ulSync_timebase_rs;
  volatile uint32_t  ulSync_base_phase_rs;
  volatile uint32_t aulSync_sub_phase_sel_rs[2];
  struct
  {
    volatile uint32_t  ulCfg;
    volatile uint32_t  ulBase_phase;
  } asSync_sync_gen_[9];
  volatile uint32_t  ulSync_sync_out_cfg;
  volatile uint32_t  ulSync_irq_raw;
  volatile uint32_t  ulSync_irq_masked;
  volatile uint32_t  ulSync_irq_msk_set;
  volatile uint32_t  ulSync_irq_msk_reset;
  volatile uint32_t  ulSync_irq_no;
} NIOL_SYNC_AREA_T;

typedef struct NIOL_IOL_UART_AREA_Ttag
{
  volatile uint32_t  ulIol_uart_tx_cfg;
  volatile uint32_t  ulIol_uart_tx_en_shift;
  volatile uint32_t  ulIol_uart_tx_en_cfg;
  volatile uint32_t  ulIol_uart_tx_tbit;
  volatile uint32_t  ulIol_uart_tx_tbit_sub;
  volatile uint32_t  ulIol_uart_tx_tbit_stop_lw;
  volatile uint32_t  ulIol_uart_tx_tbit_stop_hw;
  volatile uint32_t  ulIol_uart_tx_low_water;
  volatile uint32_t  ulIol_uart_tx_len;
  volatile uint32_t  ulIol_uart_tx_radr;
  volatile uint32_t  ulIol_uart_rx_cfg;
  volatile uint32_t  ulIol_uart_rx_timeout;
  volatile uint32_t  ulIol_uart_rx_tbit_lw;
  volatile uint32_t  ulIol_uart_rx_tbit_hw;
  volatile uint32_t  ulIol_uart_rx_tbit_sub;
  volatile uint32_t  ulIol_uart_rx_startbit_ifil_thres;
  volatile uint32_t  ulIol_uart_rx_startbit_detect_cfg;
  volatile uint32_t  ulIol_uart_rx_sample_offset_lw;
  volatile uint32_t  ulIol_uart_rx_sample_offset_hw;
  volatile uint32_t  ulIol_uart_rx_sample_len_lw;
  volatile uint32_t  ulIol_uart_rx_sample_len_hw;
  volatile uint32_t  ulIol_uart_rx_high_water;
  volatile uint32_t  ulIol_uart_rx_len;
  volatile uint32_t  ulIol_uart_rx_len_saved;
  volatile uint32_t  ulIol_uart_rx_buffer;
  volatile uint32_t  ulIol_uart_rx_xor;
  volatile uint32_t  ulIol_uart_response_timer;
  volatile uint32_t  ulIol_uart_dma_ac_high;
  volatile uint32_t  ulIol_uart_dma_ac_low;
  volatile uint32_t  ulIol_uart_dma_ctrl;
  volatile uint32_t  ulIol_uart_tx_adr_next;
  volatile uint32_t  ulIol_uart_tx_adr_now;
  volatile uint32_t  ulIol_uart_rx_adr_next;
  volatile uint32_t  ulIol_uart_rx_adr_now;
  volatile uint32_t  ulIol_uart_iol_crc_compression;
  volatile uint32_t  ulIol_uart_irq_raw;
  volatile uint32_t  ulIol_uart_irq_mask_set;
  volatile uint32_t  ulIol_uart_irq_mask_reset;
  volatile uint32_t  ulIol_uart_irq_masked;
  volatile uint32_t  ulIol_uart_irq_no;
} NIOL_IOL_UART_AREA_T;

typedef struct NIOL_DEBUG_AREA_Ttag
{
  volatile uint32_t  ulDebug_dbg_ctrl;
  volatile uint32_t  ulDebug_dbg_hit;
  volatile uint32_t  ulDebug_dbg_ie;
  volatile uint32_t  ulDebug_dbg_cause;
  volatile uint32_t aulReserved0[12];
  volatile uint32_t  ulDebug_dbg_bpctrl0;
  volatile uint32_t  ulDebug_dbg_bpdata0;
  volatile uint32_t  ulDebug_dbg_bpctrl1;
  volatile uint32_t  ulDebug_dbg_bpdata1;
  volatile uint32_t  ulDebug_dbg_bpctrl2;
  volatile uint32_t  ulDebug_dbg_bpdata2;
  volatile uint32_t  ulDebug_dbg_bpctrl3;
  volatile uint32_t  ulDebug_dbg_bpdata3;
  volatile uint32_t  ulDebug_dbg_bpctrl4;
  volatile uint32_t  ulDebug_dbg_bpdata4;
  volatile uint32_t  ulDebug_dbg_bpctrl5;
  volatile uint32_t  ulDebug_dbg_bpdata5;
  volatile uint32_t  ulDebug_dbg_bpctrl6;
  volatile uint32_t  ulDebug_dbg_bpdata6;
  volatile uint32_t  ulDebug_dbg_bpctrl7;
  volatile uint32_t  ulDebug_dbg_bpdata7;
  volatile uint32_t aulDebug_gpr[32];
  volatile uint32_t aulDebug_fpr[64];
  volatile uint32_t aulReserved1[31];
  volatile uint32_t  ulDebug_performance_counter_counter_register;
  volatile uint32_t  ulDebug_lpstart0;
  volatile uint32_t  ulDebug_lpend0;
  volatile uint32_t  ulDebug_lpcount0;
  volatile uint32_t  ulDebug_lpstart1;
  volatile uint32_t  ulDebug_lpend1;
  volatile uint32_t  ulDebug_lpcount1;
  volatile uint32_t aulReserved2[26];
  volatile uint32_t  ulDebug_next_pc;
  volatile uint32_t  ulDebug_previous_pc;
  volatile uint32_t  ulDebug_mstatus;
  volatile uint32_t  ulDebug_mtvec;
  volatile uint32_t  ulDebug_mepc;
  volatile uint32_t  ulDebug_mcause;
  volatile uint32_t  ulDebug_pcer;
  volatile uint32_t  ulDebug_pcmr;
  volatile uint32_t  ulDebug_privlv;
  volatile uint32_t  ulDebug_uhartip;
  volatile uint32_t  ulDebug_mhartip;
} NIOL_DEBUG_AREA_T;


#endif
